// This file is auto generated, do not edit. Generated: 2023-10-16 17:21:49 GMT+02:00
using System;
using System.Runtime.InteropServices;
using OpenTK.Graphics;

namespace OpenTK.Graphics.OpenGL
{
    /// <summary>A collection of all function pointers to all OpenGL entry points.</summary>
    public static unsafe partial class GLPointers
    {
        /// <summary><b>[entry point: <c>glAccum</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glAccum_fnptr = &glAccum_Lazy;
        [UnmanagedCallersOnly]
        private static void glAccum_Lazy(uint op, float value)
        {
            _glAccum_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glAccum");
            _glAccum_fnptr(op, value);
        }
        
        /// <summary><b>[entry point: <c>glAccumxOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glAccumxOES_fnptr = &glAccumxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glAccumxOES_Lazy(uint op, int value)
        {
            _glAccumxOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glAccumxOES");
            _glAccumxOES_fnptr(op, value);
        }
        
        /// <summary><b>[entry point: <c>glAcquireKeyedMutexWin32EXT</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong, uint, byte> _glAcquireKeyedMutexWin32EXT_fnptr = &glAcquireKeyedMutexWin32EXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte glAcquireKeyedMutexWin32EXT_Lazy(uint memory, ulong key, uint timeout)
        {
            _glAcquireKeyedMutexWin32EXT_fnptr = (delegate* unmanaged<uint, ulong, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glAcquireKeyedMutexWin32EXT");
            return _glAcquireKeyedMutexWin32EXT_fnptr(memory, key, timeout);
        }
        
        /// <summary><b>[entry point: <c>glActiveProgramEXT</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glActiveProgramEXT_fnptr = &glActiveProgramEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glActiveProgramEXT_Lazy(int program)
        {
            _glActiveProgramEXT_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glActiveProgramEXT");
            _glActiveProgramEXT_fnptr(program);
        }
        
        /// <summary><b>[entry point: <c>glActiveShaderProgram</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glActiveShaderProgram_fnptr = &glActiveShaderProgram_Lazy;
        [UnmanagedCallersOnly]
        private static void glActiveShaderProgram_Lazy(int pipeline, int program)
        {
            _glActiveShaderProgram_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glActiveShaderProgram");
            _glActiveShaderProgram_fnptr(pipeline, program);
        }
        
        /// <summary><b>[entry point: <c>glActiveShaderProgramEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glActiveShaderProgramEXT_fnptr = &glActiveShaderProgramEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glActiveShaderProgramEXT_Lazy(int pipeline, int program)
        {
            _glActiveShaderProgramEXT_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glActiveShaderProgramEXT");
            _glActiveShaderProgramEXT_fnptr(pipeline, program);
        }
        
        /// <summary><b>[entry point: <c>glActiveStencilFaceEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glActiveStencilFaceEXT_fnptr = &glActiveStencilFaceEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glActiveStencilFaceEXT_Lazy(uint face)
        {
            _glActiveStencilFaceEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glActiveStencilFaceEXT");
            _glActiveStencilFaceEXT_fnptr(face);
        }
        
        /// <summary><b>[entry point: <c>glActiveTexture</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glActiveTexture_fnptr = &glActiveTexture_Lazy;
        [UnmanagedCallersOnly]
        private static void glActiveTexture_Lazy(uint texture)
        {
            _glActiveTexture_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glActiveTexture");
            _glActiveTexture_fnptr(texture);
        }
        
        /// <summary><b>[entry point: <c>glActiveTextureARB</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glActiveTextureARB_fnptr = &glActiveTextureARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glActiveTextureARB_Lazy(uint texture)
        {
            _glActiveTextureARB_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glActiveTextureARB");
            _glActiveTextureARB_fnptr(texture);
        }
        
        /// <summary><b>[entry point: <c>glActiveVaryingNV</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, void> _glActiveVaryingNV_fnptr = &glActiveVaryingNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glActiveVaryingNV_Lazy(int program, byte* name)
        {
            _glActiveVaryingNV_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glActiveVaryingNV");
            _glActiveVaryingNV_fnptr(program, name);
        }
        
        /// <summary><b>[entry point: <c>glAlphaFragmentOp1ATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, uint, void> _glAlphaFragmentOp1ATI_fnptr = &glAlphaFragmentOp1ATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glAlphaFragmentOp1ATI_Lazy(uint op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod)
        {
            _glAlphaFragmentOp1ATI_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaFragmentOp1ATI");
            _glAlphaFragmentOp1ATI_fnptr(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
        }
        
        /// <summary><b>[entry point: <c>glAlphaFragmentOp2ATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _glAlphaFragmentOp2ATI_fnptr = &glAlphaFragmentOp2ATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glAlphaFragmentOp2ATI_Lazy(uint op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod)
        {
            _glAlphaFragmentOp2ATI_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaFragmentOp2ATI");
            _glAlphaFragmentOp2ATI_fnptr(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        }
        
        /// <summary><b>[entry point: <c>glAlphaFragmentOp3ATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _glAlphaFragmentOp3ATI_fnptr = &glAlphaFragmentOp3ATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glAlphaFragmentOp3ATI_Lazy(uint op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod)
        {
            _glAlphaFragmentOp3ATI_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaFragmentOp3ATI");
            _glAlphaFragmentOp3ATI_fnptr(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        }
        
        /// <summary><b>[entry point: <c>glAlphaFunc</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glAlphaFunc_fnptr = &glAlphaFunc_Lazy;
        [UnmanagedCallersOnly]
        private static void glAlphaFunc_Lazy(uint func, float reference)
        {
            _glAlphaFunc_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaFunc");
            _glAlphaFunc_fnptr(func, reference);
        }
        
        /// <summary><b>[entry point: <c>glAlphaFuncQCOM</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glAlphaFuncQCOM_fnptr = &glAlphaFuncQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glAlphaFuncQCOM_Lazy(uint func, float reference)
        {
            _glAlphaFuncQCOM_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaFuncQCOM");
            _glAlphaFuncQCOM_fnptr(func, reference);
        }
        
        /// <summary><b>[entry point: <c>glAlphaFuncx</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glAlphaFuncx_fnptr = &glAlphaFuncx_Lazy;
        [UnmanagedCallersOnly]
        private static void glAlphaFuncx_Lazy(uint func, int reference)
        {
            _glAlphaFuncx_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaFuncx");
            _glAlphaFuncx_fnptr(func, reference);
        }
        
        /// <summary><b>[entry point: <c>glAlphaFuncxOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glAlphaFuncxOES_fnptr = &glAlphaFuncxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glAlphaFuncxOES_Lazy(uint func, int reference)
        {
            _glAlphaFuncxOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaFuncxOES");
            _glAlphaFuncxOES_fnptr(func, reference);
        }
        
        /// <summary><b>[entry point: <c>glAlphaToCoverageDitherControlNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glAlphaToCoverageDitherControlNV_fnptr = &glAlphaToCoverageDitherControlNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glAlphaToCoverageDitherControlNV_Lazy(uint mode)
        {
            _glAlphaToCoverageDitherControlNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaToCoverageDitherControlNV");
            _glAlphaToCoverageDitherControlNV_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glApplyFramebufferAttachmentCMAAINTEL</c>]</b></summary>
        public static delegate* unmanaged<void> _glApplyFramebufferAttachmentCMAAINTEL_fnptr = &glApplyFramebufferAttachmentCMAAINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glApplyFramebufferAttachmentCMAAINTEL_Lazy()
        {
            _glApplyFramebufferAttachmentCMAAINTEL_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glApplyFramebufferAttachmentCMAAINTEL");
            _glApplyFramebufferAttachmentCMAAINTEL_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glApplyTextureEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glApplyTextureEXT_fnptr = &glApplyTextureEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glApplyTextureEXT_Lazy(uint mode)
        {
            _glApplyTextureEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glApplyTextureEXT");
            _glApplyTextureEXT_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glAreProgramsResidentNV</c>]</b></summary>
        public static delegate* unmanaged<int, int*, byte*, byte> _glAreProgramsResidentNV_fnptr = &glAreProgramsResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glAreProgramsResidentNV_Lazy(int n, int* programs, byte* residences)
        {
            _glAreProgramsResidentNV_fnptr = (delegate* unmanaged<int, int*, byte*, byte>)GLLoader.BindingsContext.GetProcAddress("glAreProgramsResidentNV");
            return _glAreProgramsResidentNV_fnptr(n, programs, residences);
        }
        
        /// <summary><b>[entry point: <c>glAreTexturesResident</c>]</b></summary>
        public static delegate* unmanaged<int, int*, byte*, byte> _glAreTexturesResident_fnptr = &glAreTexturesResident_Lazy;
        [UnmanagedCallersOnly]
        private static byte glAreTexturesResident_Lazy(int n, int* textures, byte* residences)
        {
            _glAreTexturesResident_fnptr = (delegate* unmanaged<int, int*, byte*, byte>)GLLoader.BindingsContext.GetProcAddress("glAreTexturesResident");
            return _glAreTexturesResident_fnptr(n, textures, residences);
        }
        
        /// <summary><b>[entry point: <c>glAreTexturesResidentEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int*, byte*, byte> _glAreTexturesResidentEXT_fnptr = &glAreTexturesResidentEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte glAreTexturesResidentEXT_Lazy(int n, int* textures, byte* residences)
        {
            _glAreTexturesResidentEXT_fnptr = (delegate* unmanaged<int, int*, byte*, byte>)GLLoader.BindingsContext.GetProcAddress("glAreTexturesResidentEXT");
            return _glAreTexturesResidentEXT_fnptr(n, textures, residences);
        }
        
        /// <summary><b>[entry point: <c>glArrayElement</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glArrayElement_fnptr = &glArrayElement_Lazy;
        [UnmanagedCallersOnly]
        private static void glArrayElement_Lazy(int i)
        {
            _glArrayElement_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glArrayElement");
            _glArrayElement_fnptr(i);
        }
        
        /// <summary><b>[entry point: <c>glArrayElementEXT</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glArrayElementEXT_fnptr = &glArrayElementEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glArrayElementEXT_Lazy(int i)
        {
            _glArrayElementEXT_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glArrayElementEXT");
            _glArrayElementEXT_fnptr(i);
        }
        
        /// <summary><b>[entry point: <c>glArrayObjectATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, uint, void> _glArrayObjectATI_fnptr = &glArrayObjectATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glArrayObjectATI_Lazy(uint array, int size, uint type, int stride, int buffer, uint offset)
        {
            _glArrayObjectATI_fnptr = (delegate* unmanaged<uint, int, uint, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glArrayObjectATI");
            _glArrayObjectATI_fnptr(array, size, type, stride, buffer, offset);
        }
        
        /// <summary><b>[entry point: <c>glAsyncCopyBufferSubDataNVX</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, ulong*, uint, uint, int, int, IntPtr, IntPtr, nint, int, uint*, ulong*, uint> _glAsyncCopyBufferSubDataNVX_fnptr = &glAsyncCopyBufferSubDataNVX_Lazy;
        [UnmanagedCallersOnly]
        private static uint glAsyncCopyBufferSubDataNVX_Lazy(int waitSemaphoreCount, uint* waitSemaphoreArray, ulong* fenceValueArray, uint readGpu, uint writeGpuMask, int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size, int signalSemaphoreCount, uint* signalSemaphoreArray, ulong* signalValueArray)
        {
            _glAsyncCopyBufferSubDataNVX_fnptr = (delegate* unmanaged<int, uint*, ulong*, uint, uint, int, int, IntPtr, IntPtr, nint, int, uint*, ulong*, uint>)GLLoader.BindingsContext.GetProcAddress("glAsyncCopyBufferSubDataNVX");
            return _glAsyncCopyBufferSubDataNVX_fnptr(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
        }
        
        /// <summary><b>[entry point: <c>glAsyncCopyImageSubDataNVX</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, ulong*, uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, int, uint*, ulong*, uint> _glAsyncCopyImageSubDataNVX_fnptr = &glAsyncCopyImageSubDataNVX_Lazy;
        [UnmanagedCallersOnly]
        private static uint glAsyncCopyImageSubDataNVX_Lazy(int waitSemaphoreCount, uint* waitSemaphoreArray, ulong* waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, uint* signalSemaphoreArray, ulong* signalValueArray)
        {
            _glAsyncCopyImageSubDataNVX_fnptr = (delegate* unmanaged<int, uint*, ulong*, uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, int, uint*, ulong*, uint>)GLLoader.BindingsContext.GetProcAddress("glAsyncCopyImageSubDataNVX");
            return _glAsyncCopyImageSubDataNVX_fnptr(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
        }
        
        /// <summary><b>[entry point: <c>glAsyncMarkerSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glAsyncMarkerSGIX_fnptr = &glAsyncMarkerSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glAsyncMarkerSGIX_Lazy(uint marker)
        {
            _glAsyncMarkerSGIX_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glAsyncMarkerSGIX");
            _glAsyncMarkerSGIX_fnptr(marker);
        }
        
        /// <summary><b>[entry point: <c>glAttachObjectARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, IntPtr, void> _glAttachObjectARB_fnptr = &glAttachObjectARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glAttachObjectARB_Lazy(IntPtr containerObj, IntPtr obj)
        {
            _glAttachObjectARB_fnptr = (delegate* unmanaged<IntPtr, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glAttachObjectARB");
            _glAttachObjectARB_fnptr(containerObj, obj);
        }
        
        /// <summary><b>[entry point: <c>glAttachShader</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glAttachShader_fnptr = &glAttachShader_Lazy;
        [UnmanagedCallersOnly]
        private static void glAttachShader_Lazy(int program, int shader)
        {
            _glAttachShader_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glAttachShader");
            _glAttachShader_fnptr(program, shader);
        }
        
        /// <summary><b>[entry point: <c>glBegin</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glBegin_fnptr = &glBegin_Lazy;
        [UnmanagedCallersOnly]
        private static void glBegin_Lazy(uint mode)
        {
            _glBegin_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBegin");
            _glBegin_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glBeginConditionalRender</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glBeginConditionalRender_fnptr = &glBeginConditionalRender_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginConditionalRender_Lazy(uint id, uint mode)
        {
            _glBeginConditionalRender_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginConditionalRender");
            _glBeginConditionalRender_fnptr(id, mode);
        }
        
        /// <summary><b>[entry point: <c>glBeginConditionalRenderNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glBeginConditionalRenderNV_fnptr = &glBeginConditionalRenderNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginConditionalRenderNV_Lazy(uint id, uint mode)
        {
            _glBeginConditionalRenderNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginConditionalRenderNV");
            _glBeginConditionalRenderNV_fnptr(id, mode);
        }
        
        /// <summary><b>[entry point: <c>glBeginConditionalRenderNVX</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glBeginConditionalRenderNVX_fnptr = &glBeginConditionalRenderNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginConditionalRenderNVX_Lazy(uint id)
        {
            _glBeginConditionalRenderNVX_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginConditionalRenderNVX");
            _glBeginConditionalRenderNVX_fnptr(id);
        }
        
        /// <summary><b>[entry point: <c>glBeginFragmentShaderATI</c>]</b></summary>
        public static delegate* unmanaged<void> _glBeginFragmentShaderATI_fnptr = &glBeginFragmentShaderATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginFragmentShaderATI_Lazy()
        {
            _glBeginFragmentShaderATI_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glBeginFragmentShaderATI");
            _glBeginFragmentShaderATI_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glBeginOcclusionQueryNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glBeginOcclusionQueryNV_fnptr = &glBeginOcclusionQueryNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginOcclusionQueryNV_Lazy(uint id)
        {
            _glBeginOcclusionQueryNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginOcclusionQueryNV");
            _glBeginOcclusionQueryNV_fnptr(id);
        }
        
        /// <summary><b>[entry point: <c>glBeginPerfMonitorAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glBeginPerfMonitorAMD_fnptr = &glBeginPerfMonitorAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginPerfMonitorAMD_Lazy(uint monitor)
        {
            _glBeginPerfMonitorAMD_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginPerfMonitorAMD");
            _glBeginPerfMonitorAMD_fnptr(monitor);
        }
        
        /// <summary><b>[entry point: <c>glBeginPerfQueryINTEL</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glBeginPerfQueryINTEL_fnptr = &glBeginPerfQueryINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginPerfQueryINTEL_Lazy(int queryHandle)
        {
            _glBeginPerfQueryINTEL_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glBeginPerfQueryINTEL");
            _glBeginPerfQueryINTEL_fnptr(queryHandle);
        }
        
        /// <summary><b>[entry point: <c>glBeginQuery</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBeginQuery_fnptr = &glBeginQuery_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginQuery_Lazy(uint target, int id)
        {
            _glBeginQuery_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBeginQuery");
            _glBeginQuery_fnptr(target, id);
        }
        
        /// <summary><b>[entry point: <c>glBeginQueryARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBeginQueryARB_fnptr = &glBeginQueryARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginQueryARB_Lazy(uint target, int id)
        {
            _glBeginQueryARB_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBeginQueryARB");
            _glBeginQueryARB_fnptr(target, id);
        }
        
        /// <summary><b>[entry point: <c>glBeginQueryEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBeginQueryEXT_fnptr = &glBeginQueryEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginQueryEXT_Lazy(uint target, int id)
        {
            _glBeginQueryEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBeginQueryEXT");
            _glBeginQueryEXT_fnptr(target, id);
        }
        
        /// <summary><b>[entry point: <c>glBeginQueryIndexed</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glBeginQueryIndexed_fnptr = &glBeginQueryIndexed_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginQueryIndexed_Lazy(uint target, uint index, int id)
        {
            _glBeginQueryIndexed_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBeginQueryIndexed");
            _glBeginQueryIndexed_fnptr(target, index, id);
        }
        
        /// <summary><b>[entry point: <c>glBeginTransformFeedback</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glBeginTransformFeedback_fnptr = &glBeginTransformFeedback_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginTransformFeedback_Lazy(uint primitiveMode)
        {
            _glBeginTransformFeedback_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginTransformFeedback");
            _glBeginTransformFeedback_fnptr(primitiveMode);
        }
        
        /// <summary><b>[entry point: <c>glBeginTransformFeedbackEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glBeginTransformFeedbackEXT_fnptr = &glBeginTransformFeedbackEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginTransformFeedbackEXT_Lazy(uint primitiveMode)
        {
            _glBeginTransformFeedbackEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginTransformFeedbackEXT");
            _glBeginTransformFeedbackEXT_fnptr(primitiveMode);
        }
        
        /// <summary><b>[entry point: <c>glBeginTransformFeedbackNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glBeginTransformFeedbackNV_fnptr = &glBeginTransformFeedbackNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginTransformFeedbackNV_Lazy(uint primitiveMode)
        {
            _glBeginTransformFeedbackNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginTransformFeedbackNV");
            _glBeginTransformFeedbackNV_fnptr(primitiveMode);
        }
        
        /// <summary><b>[entry point: <c>glBeginVertexShaderEXT</c>]</b></summary>
        public static delegate* unmanaged<void> _glBeginVertexShaderEXT_fnptr = &glBeginVertexShaderEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginVertexShaderEXT_Lazy()
        {
            _glBeginVertexShaderEXT_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glBeginVertexShaderEXT");
            _glBeginVertexShaderEXT_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glBeginVideoCaptureNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glBeginVideoCaptureNV_fnptr = &glBeginVideoCaptureNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBeginVideoCaptureNV_Lazy(uint video_capture_slot)
        {
            _glBeginVideoCaptureNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginVideoCaptureNV");
            _glBeginVideoCaptureNV_fnptr(video_capture_slot);
        }
        
        /// <summary><b>[entry point: <c>glBindAttribLocation</c>]</b></summary>
        public static delegate* unmanaged<int, uint, byte*, void> _glBindAttribLocation_fnptr = &glBindAttribLocation_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindAttribLocation_Lazy(int program, uint index, byte* name)
        {
            _glBindAttribLocation_fnptr = (delegate* unmanaged<int, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBindAttribLocation");
            _glBindAttribLocation_fnptr(program, index, name);
        }
        
        /// <summary><b>[entry point: <c>glBindAttribLocationARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, uint, byte*, void> _glBindAttribLocationARB_fnptr = &glBindAttribLocationARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindAttribLocationARB_Lazy(IntPtr programObj, uint index, byte* name)
        {
            _glBindAttribLocationARB_fnptr = (delegate* unmanaged<IntPtr, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBindAttribLocationARB");
            _glBindAttribLocationARB_fnptr(programObj, index, name);
        }
        
        /// <summary><b>[entry point: <c>glBindBuffer</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindBuffer_fnptr = &glBindBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindBuffer_Lazy(uint target, int buffer)
        {
            _glBindBuffer_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindBuffer");
            _glBindBuffer_fnptr(target, buffer);
        }
        
        /// <summary><b>[entry point: <c>glBindBufferARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindBufferARB_fnptr = &glBindBufferARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindBufferARB_Lazy(uint target, int buffer)
        {
            _glBindBufferARB_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferARB");
            _glBindBufferARB_fnptr(target, buffer);
        }
        
        /// <summary><b>[entry point: <c>glBindBufferBase</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glBindBufferBase_fnptr = &glBindBufferBase_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindBufferBase_Lazy(uint target, uint index, int buffer)
        {
            _glBindBufferBase_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferBase");
            _glBindBufferBase_fnptr(target, index, buffer);
        }
        
        /// <summary><b>[entry point: <c>glBindBufferBaseEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glBindBufferBaseEXT_fnptr = &glBindBufferBaseEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindBufferBaseEXT_Lazy(uint target, uint index, int buffer)
        {
            _glBindBufferBaseEXT_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferBaseEXT");
            _glBindBufferBaseEXT_fnptr(target, index, buffer);
        }
        
        /// <summary><b>[entry point: <c>glBindBufferBaseNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glBindBufferBaseNV_fnptr = &glBindBufferBaseNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindBufferBaseNV_Lazy(uint target, uint index, int buffer)
        {
            _glBindBufferBaseNV_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferBaseNV");
            _glBindBufferBaseNV_fnptr(target, index, buffer);
        }
        
        /// <summary><b>[entry point: <c>glBindBufferOffsetEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, IntPtr, void> _glBindBufferOffsetEXT_fnptr = &glBindBufferOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindBufferOffsetEXT_Lazy(uint target, uint index, int buffer, IntPtr offset)
        {
            _glBindBufferOffsetEXT_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferOffsetEXT");
            _glBindBufferOffsetEXT_fnptr(target, index, buffer, offset);
        }
        
        /// <summary><b>[entry point: <c>glBindBufferOffsetNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, IntPtr, void> _glBindBufferOffsetNV_fnptr = &glBindBufferOffsetNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindBufferOffsetNV_Lazy(uint target, uint index, int buffer, IntPtr offset)
        {
            _glBindBufferOffsetNV_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferOffsetNV");
            _glBindBufferOffsetNV_fnptr(target, index, buffer, offset);
        }
        
        /// <summary><b>[entry point: <c>glBindBufferRange</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, IntPtr, nint, void> _glBindBufferRange_fnptr = &glBindBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindBufferRange_Lazy(uint target, uint index, int buffer, IntPtr offset, nint size)
        {
            _glBindBufferRange_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferRange");
            _glBindBufferRange_fnptr(target, index, buffer, offset, size);
        }
        
        /// <summary><b>[entry point: <c>glBindBufferRangeEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, IntPtr, nint, void> _glBindBufferRangeEXT_fnptr = &glBindBufferRangeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindBufferRangeEXT_Lazy(uint target, uint index, int buffer, IntPtr offset, nint size)
        {
            _glBindBufferRangeEXT_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferRangeEXT");
            _glBindBufferRangeEXT_fnptr(target, index, buffer, offset, size);
        }
        
        /// <summary><b>[entry point: <c>glBindBufferRangeNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, IntPtr, nint, void> _glBindBufferRangeNV_fnptr = &glBindBufferRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindBufferRangeNV_Lazy(uint target, uint index, int buffer, IntPtr offset, nint size)
        {
            _glBindBufferRangeNV_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferRangeNV");
            _glBindBufferRangeNV_fnptr(target, index, buffer, offset, size);
        }
        
        /// <summary><b>[entry point: <c>glBindBuffersBase</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int*, void> _glBindBuffersBase_fnptr = &glBindBuffersBase_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindBuffersBase_Lazy(uint target, uint first, int count, int* buffers)
        {
            _glBindBuffersBase_fnptr = (delegate* unmanaged<uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glBindBuffersBase");
            _glBindBuffersBase_fnptr(target, first, count, buffers);
        }
        
        /// <summary><b>[entry point: <c>glBindBuffersRange</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int*, IntPtr*, nint*, void> _glBindBuffersRange_fnptr = &glBindBuffersRange_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindBuffersRange_Lazy(uint target, uint first, int count, int* buffers, IntPtr* offsets, nint* sizes)
        {
            _glBindBuffersRange_fnptr = (delegate* unmanaged<uint, uint, int, int*, IntPtr*, nint*, void>)GLLoader.BindingsContext.GetProcAddress("glBindBuffersRange");
            _glBindBuffersRange_fnptr(target, first, count, buffers, offsets, sizes);
        }
        
        /// <summary><b>[entry point: <c>glBindFragDataLocation</c>]</b></summary>
        public static delegate* unmanaged<int, uint, byte*, void> _glBindFragDataLocation_fnptr = &glBindFragDataLocation_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindFragDataLocation_Lazy(int program, uint color, byte* name)
        {
            _glBindFragDataLocation_fnptr = (delegate* unmanaged<int, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBindFragDataLocation");
            _glBindFragDataLocation_fnptr(program, color, name);
        }
        
        /// <summary><b>[entry point: <c>glBindFragDataLocationEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, byte*, void> _glBindFragDataLocationEXT_fnptr = &glBindFragDataLocationEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindFragDataLocationEXT_Lazy(int program, uint color, byte* name)
        {
            _glBindFragDataLocationEXT_fnptr = (delegate* unmanaged<int, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBindFragDataLocationEXT");
            _glBindFragDataLocationEXT_fnptr(program, color, name);
        }
        
        /// <summary><b>[entry point: <c>glBindFragDataLocationIndexed</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, byte*, void> _glBindFragDataLocationIndexed_fnptr = &glBindFragDataLocationIndexed_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindFragDataLocationIndexed_Lazy(int program, uint colorNumber, uint index, byte* name)
        {
            _glBindFragDataLocationIndexed_fnptr = (delegate* unmanaged<int, uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBindFragDataLocationIndexed");
            _glBindFragDataLocationIndexed_fnptr(program, colorNumber, index, name);
        }
        
        /// <summary><b>[entry point: <c>glBindFragDataLocationIndexedEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, byte*, void> _glBindFragDataLocationIndexedEXT_fnptr = &glBindFragDataLocationIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindFragDataLocationIndexedEXT_Lazy(int program, uint colorNumber, uint index, byte* name)
        {
            _glBindFragDataLocationIndexedEXT_fnptr = (delegate* unmanaged<int, uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBindFragDataLocationIndexedEXT");
            _glBindFragDataLocationIndexedEXT_fnptr(program, colorNumber, index, name);
        }
        
        /// <summary><b>[entry point: <c>glBindFragmentShaderATI</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glBindFragmentShaderATI_fnptr = &glBindFragmentShaderATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindFragmentShaderATI_Lazy(uint id)
        {
            _glBindFragmentShaderATI_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBindFragmentShaderATI");
            _glBindFragmentShaderATI_fnptr(id);
        }
        
        /// <summary><b>[entry point: <c>glBindFramebuffer</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindFramebuffer_fnptr = &glBindFramebuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindFramebuffer_Lazy(uint target, int framebuffer)
        {
            _glBindFramebuffer_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindFramebuffer");
            _glBindFramebuffer_fnptr(target, framebuffer);
        }
        
        /// <summary><b>[entry point: <c>glBindFramebufferEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindFramebufferEXT_fnptr = &glBindFramebufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindFramebufferEXT_Lazy(uint target, int framebuffer)
        {
            _glBindFramebufferEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindFramebufferEXT");
            _glBindFramebufferEXT_fnptr(target, framebuffer);
        }
        
        /// <summary><b>[entry point: <c>glBindFramebufferOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindFramebufferOES_fnptr = &glBindFramebufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindFramebufferOES_Lazy(uint target, int framebuffer)
        {
            _glBindFramebufferOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindFramebufferOES");
            _glBindFramebufferOES_fnptr(target, framebuffer);
        }
        
        /// <summary><b>[entry point: <c>glBindImageTexture</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, byte, int, uint, uint, void> _glBindImageTexture_fnptr = &glBindImageTexture_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindImageTexture_Lazy(uint unit, int texture, int level, byte layered, int layer, uint access, uint format)
        {
            _glBindImageTexture_fnptr = (delegate* unmanaged<uint, int, int, byte, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBindImageTexture");
            _glBindImageTexture_fnptr(unit, texture, level, layered, layer, access, format);
        }
        
        /// <summary><b>[entry point: <c>glBindImageTextureEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, byte, int, uint, int, void> _glBindImageTextureEXT_fnptr = &glBindImageTextureEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindImageTextureEXT_Lazy(uint index, int texture, int level, byte layered, int layer, uint access, int format)
        {
            _glBindImageTextureEXT_fnptr = (delegate* unmanaged<uint, int, int, byte, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindImageTextureEXT");
            _glBindImageTextureEXT_fnptr(index, texture, level, layered, layer, access, format);
        }
        
        /// <summary><b>[entry point: <c>glBindImageTextures</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, void> _glBindImageTextures_fnptr = &glBindImageTextures_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindImageTextures_Lazy(uint first, int count, int* textures)
        {
            _glBindImageTextures_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glBindImageTextures");
            _glBindImageTextures_fnptr(first, count, textures);
        }
        
        /// <summary><b>[entry point: <c>glBindLightParameterEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint> _glBindLightParameterEXT_fnptr = &glBindLightParameterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint glBindLightParameterEXT_Lazy(uint light, uint value)
        {
            _glBindLightParameterEXT_fnptr = (delegate* unmanaged<uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glBindLightParameterEXT");
            return _glBindLightParameterEXT_fnptr(light, value);
        }
        
        /// <summary><b>[entry point: <c>glBindMaterialParameterEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint> _glBindMaterialParameterEXT_fnptr = &glBindMaterialParameterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint glBindMaterialParameterEXT_Lazy(uint face, uint value)
        {
            _glBindMaterialParameterEXT_fnptr = (delegate* unmanaged<uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glBindMaterialParameterEXT");
            return _glBindMaterialParameterEXT_fnptr(face, value);
        }
        
        /// <summary><b>[entry point: <c>glBindMultiTextureEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glBindMultiTextureEXT_fnptr = &glBindMultiTextureEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindMultiTextureEXT_Lazy(uint texunit, uint target, int texture)
        {
            _glBindMultiTextureEXT_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindMultiTextureEXT");
            _glBindMultiTextureEXT_fnptr(texunit, target, texture);
        }
        
        /// <summary><b>[entry point: <c>glBindParameterEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint> _glBindParameterEXT_fnptr = &glBindParameterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint glBindParameterEXT_Lazy(uint value)
        {
            _glBindParameterEXT_fnptr = (delegate* unmanaged<uint, uint>)GLLoader.BindingsContext.GetProcAddress("glBindParameterEXT");
            return _glBindParameterEXT_fnptr(value);
        }
        
        /// <summary><b>[entry point: <c>glBindProgramARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindProgramARB_fnptr = &glBindProgramARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindProgramARB_Lazy(uint target, int program)
        {
            _glBindProgramARB_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindProgramARB");
            _glBindProgramARB_fnptr(target, program);
        }
        
        /// <summary><b>[entry point: <c>glBindProgramNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindProgramNV_fnptr = &glBindProgramNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindProgramNV_Lazy(uint target, int id)
        {
            _glBindProgramNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindProgramNV");
            _glBindProgramNV_fnptr(target, id);
        }
        
        /// <summary><b>[entry point: <c>glBindProgramPipeline</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glBindProgramPipeline_fnptr = &glBindProgramPipeline_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindProgramPipeline_Lazy(int pipeline)
        {
            _glBindProgramPipeline_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glBindProgramPipeline");
            _glBindProgramPipeline_fnptr(pipeline);
        }
        
        /// <summary><b>[entry point: <c>glBindProgramPipelineEXT</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glBindProgramPipelineEXT_fnptr = &glBindProgramPipelineEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindProgramPipelineEXT_Lazy(int pipeline)
        {
            _glBindProgramPipelineEXT_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glBindProgramPipelineEXT");
            _glBindProgramPipelineEXT_fnptr(pipeline);
        }
        
        /// <summary><b>[entry point: <c>glBindRenderbuffer</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindRenderbuffer_fnptr = &glBindRenderbuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindRenderbuffer_Lazy(uint target, int renderbuffer)
        {
            _glBindRenderbuffer_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindRenderbuffer");
            _glBindRenderbuffer_fnptr(target, renderbuffer);
        }
        
        /// <summary><b>[entry point: <c>glBindRenderbufferEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindRenderbufferEXT_fnptr = &glBindRenderbufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindRenderbufferEXT_Lazy(uint target, int renderbuffer)
        {
            _glBindRenderbufferEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindRenderbufferEXT");
            _glBindRenderbufferEXT_fnptr(target, renderbuffer);
        }
        
        /// <summary><b>[entry point: <c>glBindRenderbufferOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindRenderbufferOES_fnptr = &glBindRenderbufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindRenderbufferOES_Lazy(uint target, int renderbuffer)
        {
            _glBindRenderbufferOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindRenderbufferOES");
            _glBindRenderbufferOES_fnptr(target, renderbuffer);
        }
        
        /// <summary><b>[entry point: <c>glBindSampler</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindSampler_fnptr = &glBindSampler_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindSampler_Lazy(uint unit, int sampler)
        {
            _glBindSampler_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindSampler");
            _glBindSampler_fnptr(unit, sampler);
        }
        
        /// <summary><b>[entry point: <c>glBindSamplers</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, void> _glBindSamplers_fnptr = &glBindSamplers_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindSamplers_Lazy(uint first, int count, int* samplers)
        {
            _glBindSamplers_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glBindSamplers");
            _glBindSamplers_fnptr(first, count, samplers);
        }
        
        /// <summary><b>[entry point: <c>glBindShadingRateImageNV</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glBindShadingRateImageNV_fnptr = &glBindShadingRateImageNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindShadingRateImageNV_Lazy(int texture)
        {
            _glBindShadingRateImageNV_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glBindShadingRateImageNV");
            _glBindShadingRateImageNV_fnptr(texture);
        }
        
        /// <summary><b>[entry point: <c>glBindTexGenParameterEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint> _glBindTexGenParameterEXT_fnptr = &glBindTexGenParameterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint glBindTexGenParameterEXT_Lazy(uint unit, uint coord, uint value)
        {
            _glBindTexGenParameterEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glBindTexGenParameterEXT");
            return _glBindTexGenParameterEXT_fnptr(unit, coord, value);
        }
        
        /// <summary><b>[entry point: <c>glBindTexture</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindTexture_fnptr = &glBindTexture_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindTexture_Lazy(uint target, int texture)
        {
            _glBindTexture_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindTexture");
            _glBindTexture_fnptr(target, texture);
        }
        
        /// <summary><b>[entry point: <c>glBindTextureEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindTextureEXT_fnptr = &glBindTextureEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindTextureEXT_Lazy(uint target, int texture)
        {
            _glBindTextureEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindTextureEXT");
            _glBindTextureEXT_fnptr(target, texture);
        }
        
        /// <summary><b>[entry point: <c>glBindTextures</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, void> _glBindTextures_fnptr = &glBindTextures_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindTextures_Lazy(uint first, int count, int* textures)
        {
            _glBindTextures_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glBindTextures");
            _glBindTextures_fnptr(first, count, textures);
        }
        
        /// <summary><b>[entry point: <c>glBindTextureUnit</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindTextureUnit_fnptr = &glBindTextureUnit_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindTextureUnit_Lazy(uint unit, int texture)
        {
            _glBindTextureUnit_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindTextureUnit");
            _glBindTextureUnit_fnptr(unit, texture);
        }
        
        /// <summary><b>[entry point: <c>glBindTextureUnitParameterEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint> _glBindTextureUnitParameterEXT_fnptr = &glBindTextureUnitParameterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint glBindTextureUnitParameterEXT_Lazy(uint unit, uint value)
        {
            _glBindTextureUnitParameterEXT_fnptr = (delegate* unmanaged<uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glBindTextureUnitParameterEXT");
            return _glBindTextureUnitParameterEXT_fnptr(unit, value);
        }
        
        /// <summary><b>[entry point: <c>glBindTransformFeedback</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindTransformFeedback_fnptr = &glBindTransformFeedback_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindTransformFeedback_Lazy(uint target, int id)
        {
            _glBindTransformFeedback_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindTransformFeedback");
            _glBindTransformFeedback_fnptr(target, id);
        }
        
        /// <summary><b>[entry point: <c>glBindTransformFeedbackNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBindTransformFeedbackNV_fnptr = &glBindTransformFeedbackNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindTransformFeedbackNV_Lazy(uint target, int id)
        {
            _glBindTransformFeedbackNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindTransformFeedbackNV");
            _glBindTransformFeedbackNV_fnptr(target, id);
        }
        
        /// <summary><b>[entry point: <c>glBindVertexArray</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glBindVertexArray_fnptr = &glBindVertexArray_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindVertexArray_Lazy(int array)
        {
            _glBindVertexArray_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glBindVertexArray");
            _glBindVertexArray_fnptr(array);
        }
        
        /// <summary><b>[entry point: <c>glBindVertexArrayAPPLE</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glBindVertexArrayAPPLE_fnptr = &glBindVertexArrayAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindVertexArrayAPPLE_Lazy(int array)
        {
            _glBindVertexArrayAPPLE_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glBindVertexArrayAPPLE");
            _glBindVertexArrayAPPLE_fnptr(array);
        }
        
        /// <summary><b>[entry point: <c>glBindVertexArrayOES</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glBindVertexArrayOES_fnptr = &glBindVertexArrayOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindVertexArrayOES_Lazy(int array)
        {
            _glBindVertexArrayOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glBindVertexArrayOES");
            _glBindVertexArrayOES_fnptr(array);
        }
        
        /// <summary><b>[entry point: <c>glBindVertexBuffer</c>]</b></summary>
        public static delegate* unmanaged<uint, int, IntPtr, int, void> _glBindVertexBuffer_fnptr = &glBindVertexBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindVertexBuffer_Lazy(uint bindingindex, int buffer, IntPtr offset, int stride)
        {
            _glBindVertexBuffer_fnptr = (delegate* unmanaged<uint, int, IntPtr, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindVertexBuffer");
            _glBindVertexBuffer_fnptr(bindingindex, buffer, offset, stride);
        }
        
        /// <summary><b>[entry point: <c>glBindVertexBuffers</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, IntPtr*, int*, void> _glBindVertexBuffers_fnptr = &glBindVertexBuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindVertexBuffers_Lazy(uint first, int count, int* buffers, IntPtr* offsets, int* strides)
        {
            _glBindVertexBuffers_fnptr = (delegate* unmanaged<uint, int, int*, IntPtr*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glBindVertexBuffers");
            _glBindVertexBuffers_fnptr(first, count, buffers, offsets, strides);
        }
        
        /// <summary><b>[entry point: <c>glBindVertexShaderEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glBindVertexShaderEXT_fnptr = &glBindVertexShaderEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindVertexShaderEXT_Lazy(uint id)
        {
            _glBindVertexShaderEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBindVertexShaderEXT");
            _glBindVertexShaderEXT_fnptr(id);
        }
        
        /// <summary><b>[entry point: <c>glBindVideoCaptureStreamBufferNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, IntPtr, void> _glBindVideoCaptureStreamBufferNV_fnptr = &glBindVideoCaptureStreamBufferNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindVideoCaptureStreamBufferNV_Lazy(uint video_capture_slot, uint stream, uint frame_region, IntPtr offset)
        {
            _glBindVideoCaptureStreamBufferNV_fnptr = (delegate* unmanaged<uint, uint, uint, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glBindVideoCaptureStreamBufferNV");
            _glBindVideoCaptureStreamBufferNV_fnptr(video_capture_slot, stream, frame_region, offset);
        }
        
        /// <summary><b>[entry point: <c>glBindVideoCaptureStreamTextureNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, int, void> _glBindVideoCaptureStreamTextureNV_fnptr = &glBindVideoCaptureStreamTextureNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBindVideoCaptureStreamTextureNV_Lazy(uint video_capture_slot, uint stream, uint frame_region, uint target, int texture)
        {
            _glBindVideoCaptureStreamTextureNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindVideoCaptureStreamTextureNV");
            _glBindVideoCaptureStreamTextureNV_fnptr(video_capture_slot, stream, frame_region, target, texture);
        }
        
        /// <summary><b>[entry point: <c>glBinormal3bEXT</c>]</b></summary>
        public static delegate* unmanaged<sbyte, sbyte, sbyte, void> _glBinormal3bEXT_fnptr = &glBinormal3bEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBinormal3bEXT_Lazy(sbyte bx, sbyte by, sbyte bz)
        {
            _glBinormal3bEXT_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3bEXT");
            _glBinormal3bEXT_fnptr(bx, by, bz);
        }
        
        /// <summary><b>[entry point: <c>glBinormal3bvEXT</c>]</b></summary>
        public static delegate* unmanaged<sbyte*, void> _glBinormal3bvEXT_fnptr = &glBinormal3bvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBinormal3bvEXT_Lazy(sbyte* v)
        {
            _glBinormal3bvEXT_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3bvEXT");
            _glBinormal3bvEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glBinormal3dEXT</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, void> _glBinormal3dEXT_fnptr = &glBinormal3dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBinormal3dEXT_Lazy(double bx, double by, double bz)
        {
            _glBinormal3dEXT_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3dEXT");
            _glBinormal3dEXT_fnptr(bx, by, bz);
        }
        
        /// <summary><b>[entry point: <c>glBinormal3dvEXT</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glBinormal3dvEXT_fnptr = &glBinormal3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBinormal3dvEXT_Lazy(double* v)
        {
            _glBinormal3dvEXT_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3dvEXT");
            _glBinormal3dvEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glBinormal3fEXT</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glBinormal3fEXT_fnptr = &glBinormal3fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBinormal3fEXT_Lazy(float bx, float by, float bz)
        {
            _glBinormal3fEXT_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3fEXT");
            _glBinormal3fEXT_fnptr(bx, by, bz);
        }
        
        /// <summary><b>[entry point: <c>glBinormal3fvEXT</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glBinormal3fvEXT_fnptr = &glBinormal3fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBinormal3fvEXT_Lazy(float* v)
        {
            _glBinormal3fvEXT_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3fvEXT");
            _glBinormal3fvEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glBinormal3iEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glBinormal3iEXT_fnptr = &glBinormal3iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBinormal3iEXT_Lazy(int bx, int by, int bz)
        {
            _glBinormal3iEXT_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3iEXT");
            _glBinormal3iEXT_fnptr(bx, by, bz);
        }
        
        /// <summary><b>[entry point: <c>glBinormal3ivEXT</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glBinormal3ivEXT_fnptr = &glBinormal3ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBinormal3ivEXT_Lazy(int* v)
        {
            _glBinormal3ivEXT_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3ivEXT");
            _glBinormal3ivEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glBinormal3sEXT</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, void> _glBinormal3sEXT_fnptr = &glBinormal3sEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBinormal3sEXT_Lazy(short bx, short by, short bz)
        {
            _glBinormal3sEXT_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3sEXT");
            _glBinormal3sEXT_fnptr(bx, by, bz);
        }
        
        /// <summary><b>[entry point: <c>glBinormal3svEXT</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glBinormal3svEXT_fnptr = &glBinormal3svEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBinormal3svEXT_Lazy(short* v)
        {
            _glBinormal3svEXT_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3svEXT");
            _glBinormal3svEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glBinormalPointerEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void*, void> _glBinormalPointerEXT_fnptr = &glBinormalPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBinormalPointerEXT_Lazy(uint type, int stride, void* pointer)
        {
            _glBinormalPointerEXT_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glBinormalPointerEXT");
            _glBinormalPointerEXT_fnptr(type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glBitmap</c>]</b></summary>
        public static delegate* unmanaged<int, int, float, float, float, float, byte*, void> _glBitmap_fnptr = &glBitmap_Lazy;
        [UnmanagedCallersOnly]
        private static void glBitmap_Lazy(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap)
        {
            _glBitmap_fnptr = (delegate* unmanaged<int, int, float, float, float, float, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBitmap");
            _glBitmap_fnptr(width, height, xorig, yorig, xmove, ymove, bitmap);
        }
        
        /// <summary><b>[entry point: <c>glBitmapxOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, byte*, void> _glBitmapxOES_fnptr = &glBitmapxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glBitmapxOES_Lazy(int width, int height, int xorig, int yorig, int xmove, int ymove, byte* bitmap)
        {
            _glBitmapxOES_fnptr = (delegate* unmanaged<int, int, int, int, int, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBitmapxOES");
            _glBitmapxOES_fnptr(width, height, xorig, yorig, xmove, ymove, bitmap);
        }
        
        /// <summary><b>[entry point: <c>glBlendBarrier</c>]</b></summary>
        public static delegate* unmanaged<void> _glBlendBarrier_fnptr = &glBlendBarrier_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendBarrier_Lazy()
        {
            _glBlendBarrier_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glBlendBarrier");
            _glBlendBarrier_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glBlendBarrierKHR</c>]</b></summary>
        public static delegate* unmanaged<void> _glBlendBarrierKHR_fnptr = &glBlendBarrierKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendBarrierKHR_Lazy()
        {
            _glBlendBarrierKHR_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glBlendBarrierKHR");
            _glBlendBarrierKHR_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glBlendBarrierNV</c>]</b></summary>
        public static delegate* unmanaged<void> _glBlendBarrierNV_fnptr = &glBlendBarrierNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendBarrierNV_Lazy()
        {
            _glBlendBarrierNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glBlendBarrierNV");
            _glBlendBarrierNV_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glBlendColor</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, void> _glBlendColor_fnptr = &glBlendColor_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendColor_Lazy(float red, float green, float blue, float alpha)
        {
            _glBlendColor_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glBlendColor");
            _glBlendColor_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendColorEXT</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, void> _glBlendColorEXT_fnptr = &glBlendColorEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendColorEXT_Lazy(float red, float green, float blue, float alpha)
        {
            _glBlendColorEXT_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glBlendColorEXT");
            _glBlendColorEXT_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendColorxOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glBlendColorxOES_fnptr = &glBlendColorxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendColorxOES_Lazy(int red, int green, int blue, int alpha)
        {
            _glBlendColorxOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glBlendColorxOES");
            _glBlendColorxOES_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquation</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glBlendEquation_fnptr = &glBlendEquation_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquation_Lazy(uint mode)
        {
            _glBlendEquation_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquation");
            _glBlendEquation_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquationEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glBlendEquationEXT_fnptr = &glBlendEquationEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquationEXT_Lazy(uint mode)
        {
            _glBlendEquationEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationEXT");
            _glBlendEquationEXT_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquationi</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glBlendEquationi_fnptr = &glBlendEquationi_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquationi_Lazy(uint buf, uint mode)
        {
            _glBlendEquationi_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationi");
            _glBlendEquationi_fnptr(buf, mode);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquationiARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glBlendEquationiARB_fnptr = &glBlendEquationiARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquationiARB_Lazy(uint buf, uint mode)
        {
            _glBlendEquationiARB_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationiARB");
            _glBlendEquationiARB_fnptr(buf, mode);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquationiEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glBlendEquationiEXT_fnptr = &glBlendEquationiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquationiEXT_Lazy(uint buf, uint mode)
        {
            _glBlendEquationiEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationiEXT");
            _glBlendEquationiEXT_fnptr(buf, mode);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquationIndexedAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glBlendEquationIndexedAMD_fnptr = &glBlendEquationIndexedAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquationIndexedAMD_Lazy(uint buf, uint mode)
        {
            _glBlendEquationIndexedAMD_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationIndexedAMD");
            _glBlendEquationIndexedAMD_fnptr(buf, mode);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquationiOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glBlendEquationiOES_fnptr = &glBlendEquationiOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquationiOES_Lazy(uint buf, uint mode)
        {
            _glBlendEquationiOES_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationiOES");
            _glBlendEquationiOES_fnptr(buf, mode);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquationOES</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glBlendEquationOES_fnptr = &glBlendEquationOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquationOES_Lazy(uint mode)
        {
            _glBlendEquationOES_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationOES");
            _glBlendEquationOES_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquationSeparate</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glBlendEquationSeparate_fnptr = &glBlendEquationSeparate_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquationSeparate_Lazy(uint modeRGB, uint modeAlpha)
        {
            _glBlendEquationSeparate_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparate");
            _glBlendEquationSeparate_fnptr(modeRGB, modeAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquationSeparateEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glBlendEquationSeparateEXT_fnptr = &glBlendEquationSeparateEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquationSeparateEXT_Lazy(uint modeRGB, uint modeAlpha)
        {
            _glBlendEquationSeparateEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparateEXT");
            _glBlendEquationSeparateEXT_fnptr(modeRGB, modeAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquationSeparatei</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glBlendEquationSeparatei_fnptr = &glBlendEquationSeparatei_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquationSeparatei_Lazy(uint buf, uint modeRGB, uint modeAlpha)
        {
            _glBlendEquationSeparatei_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparatei");
            _glBlendEquationSeparatei_fnptr(buf, modeRGB, modeAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquationSeparateiARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glBlendEquationSeparateiARB_fnptr = &glBlendEquationSeparateiARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquationSeparateiARB_Lazy(uint buf, uint modeRGB, uint modeAlpha)
        {
            _glBlendEquationSeparateiARB_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparateiARB");
            _glBlendEquationSeparateiARB_fnptr(buf, modeRGB, modeAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquationSeparateiEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glBlendEquationSeparateiEXT_fnptr = &glBlendEquationSeparateiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquationSeparateiEXT_Lazy(uint buf, uint modeRGB, uint modeAlpha)
        {
            _glBlendEquationSeparateiEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparateiEXT");
            _glBlendEquationSeparateiEXT_fnptr(buf, modeRGB, modeAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquationSeparateIndexedAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glBlendEquationSeparateIndexedAMD_fnptr = &glBlendEquationSeparateIndexedAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquationSeparateIndexedAMD_Lazy(uint buf, uint modeRGB, uint modeAlpha)
        {
            _glBlendEquationSeparateIndexedAMD_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparateIndexedAMD");
            _glBlendEquationSeparateIndexedAMD_fnptr(buf, modeRGB, modeAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquationSeparateiOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glBlendEquationSeparateiOES_fnptr = &glBlendEquationSeparateiOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquationSeparateiOES_Lazy(uint buf, uint modeRGB, uint modeAlpha)
        {
            _glBlendEquationSeparateiOES_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparateiOES");
            _glBlendEquationSeparateiOES_fnptr(buf, modeRGB, modeAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendEquationSeparateOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glBlendEquationSeparateOES_fnptr = &glBlendEquationSeparateOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendEquationSeparateOES_Lazy(uint modeRGB, uint modeAlpha)
        {
            _glBlendEquationSeparateOES_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparateOES");
            _glBlendEquationSeparateOES_fnptr(modeRGB, modeAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendFunc</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glBlendFunc_fnptr = &glBlendFunc_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendFunc_Lazy(uint sfactor, uint dfactor)
        {
            _glBlendFunc_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFunc");
            _glBlendFunc_fnptr(sfactor, dfactor);
        }
        
        /// <summary><b>[entry point: <c>glBlendFunci</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glBlendFunci_fnptr = &glBlendFunci_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendFunci_Lazy(uint buf, uint src, uint dst)
        {
            _glBlendFunci_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFunci");
            _glBlendFunci_fnptr(buf, src, dst);
        }
        
        /// <summary><b>[entry point: <c>glBlendFunciARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glBlendFunciARB_fnptr = &glBlendFunciARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendFunciARB_Lazy(uint buf, uint src, uint dst)
        {
            _glBlendFunciARB_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFunciARB");
            _glBlendFunciARB_fnptr(buf, src, dst);
        }
        
        /// <summary><b>[entry point: <c>glBlendFunciEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glBlendFunciEXT_fnptr = &glBlendFunciEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendFunciEXT_Lazy(uint buf, uint src, uint dst)
        {
            _glBlendFunciEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFunciEXT");
            _glBlendFunciEXT_fnptr(buf, src, dst);
        }
        
        /// <summary><b>[entry point: <c>glBlendFuncIndexedAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glBlendFuncIndexedAMD_fnptr = &glBlendFuncIndexedAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendFuncIndexedAMD_Lazy(uint buf, uint src, uint dst)
        {
            _glBlendFuncIndexedAMD_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncIndexedAMD");
            _glBlendFuncIndexedAMD_fnptr(buf, src, dst);
        }
        
        /// <summary><b>[entry point: <c>glBlendFunciOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glBlendFunciOES_fnptr = &glBlendFunciOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendFunciOES_Lazy(uint buf, uint src, uint dst)
        {
            _glBlendFunciOES_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFunciOES");
            _glBlendFunciOES_fnptr(buf, src, dst);
        }
        
        /// <summary><b>[entry point: <c>glBlendFuncSeparate</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, void> _glBlendFuncSeparate_fnptr = &glBlendFuncSeparate_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendFuncSeparate_Lazy(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha)
        {
            _glBlendFuncSeparate_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparate");
            _glBlendFuncSeparate_fnptr(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendFuncSeparateEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, void> _glBlendFuncSeparateEXT_fnptr = &glBlendFuncSeparateEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendFuncSeparateEXT_Lazy(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha)
        {
            _glBlendFuncSeparateEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparateEXT");
            _glBlendFuncSeparateEXT_fnptr(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendFuncSeparatei</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, void> _glBlendFuncSeparatei_fnptr = &glBlendFuncSeparatei_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendFuncSeparatei_Lazy(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha)
        {
            _glBlendFuncSeparatei_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparatei");
            _glBlendFuncSeparatei_fnptr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendFuncSeparateiARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, void> _glBlendFuncSeparateiARB_fnptr = &glBlendFuncSeparateiARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendFuncSeparateiARB_Lazy(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha)
        {
            _glBlendFuncSeparateiARB_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparateiARB");
            _glBlendFuncSeparateiARB_fnptr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendFuncSeparateiEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, void> _glBlendFuncSeparateiEXT_fnptr = &glBlendFuncSeparateiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendFuncSeparateiEXT_Lazy(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha)
        {
            _glBlendFuncSeparateiEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparateiEXT");
            _glBlendFuncSeparateiEXT_fnptr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendFuncSeparateIndexedAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, void> _glBlendFuncSeparateIndexedAMD_fnptr = &glBlendFuncSeparateIndexedAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendFuncSeparateIndexedAMD_Lazy(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha)
        {
            _glBlendFuncSeparateIndexedAMD_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparateIndexedAMD");
            _glBlendFuncSeparateIndexedAMD_fnptr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendFuncSeparateINGR</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, void> _glBlendFuncSeparateINGR_fnptr = &glBlendFuncSeparateINGR_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendFuncSeparateINGR_Lazy(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha)
        {
            _glBlendFuncSeparateINGR_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparateINGR");
            _glBlendFuncSeparateINGR_fnptr(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendFuncSeparateiOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, void> _glBlendFuncSeparateiOES_fnptr = &glBlendFuncSeparateiOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendFuncSeparateiOES_Lazy(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha)
        {
            _glBlendFuncSeparateiOES_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparateiOES");
            _glBlendFuncSeparateiOES_fnptr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendFuncSeparateOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, void> _glBlendFuncSeparateOES_fnptr = &glBlendFuncSeparateOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendFuncSeparateOES_Lazy(uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha)
        {
            _glBlendFuncSeparateOES_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparateOES");
            _glBlendFuncSeparateOES_fnptr(srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        /// <summary><b>[entry point: <c>glBlendParameteriNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glBlendParameteriNV_fnptr = &glBlendParameteriNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlendParameteriNV_Lazy(uint pname, int value)
        {
            _glBlendParameteriNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBlendParameteriNV");
            _glBlendParameteriNV_fnptr(pname, value);
        }
        
        /// <summary><b>[entry point: <c>glBlitFramebuffer</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void> _glBlitFramebuffer_fnptr = &glBlitFramebuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlitFramebuffer_Lazy(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            _glBlitFramebuffer_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlitFramebuffer");
            _glBlitFramebuffer_fnptr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        /// <summary><b>[entry point: <c>glBlitFramebufferANGLE</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void> _glBlitFramebufferANGLE_fnptr = &glBlitFramebufferANGLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlitFramebufferANGLE_Lazy(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            _glBlitFramebufferANGLE_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlitFramebufferANGLE");
            _glBlitFramebufferANGLE_fnptr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        /// <summary><b>[entry point: <c>glBlitFramebufferEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void> _glBlitFramebufferEXT_fnptr = &glBlitFramebufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlitFramebufferEXT_Lazy(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            _glBlitFramebufferEXT_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlitFramebufferEXT");
            _glBlitFramebufferEXT_fnptr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        /// <summary><b>[entry point: <c>glBlitFramebufferLayerEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, uint, uint, void> _glBlitFramebufferLayerEXT_fnptr = &glBlitFramebufferLayerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlitFramebufferLayerEXT_Lazy(int srcX0, int srcY0, int srcX1, int srcY1, int srcLayer, int dstX0, int dstY0, int dstX1, int dstY1, int dstLayer, uint mask, uint filter)
        {
            _glBlitFramebufferLayerEXT_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlitFramebufferLayerEXT");
            _glBlitFramebufferLayerEXT_fnptr(srcX0, srcY0, srcX1, srcY1, srcLayer, dstX0, dstY0, dstX1, dstY1, dstLayer, mask, filter);
        }
        
        /// <summary><b>[entry point: <c>glBlitFramebufferLayersEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void> _glBlitFramebufferLayersEXT_fnptr = &glBlitFramebufferLayersEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlitFramebufferLayersEXT_Lazy(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            _glBlitFramebufferLayersEXT_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlitFramebufferLayersEXT");
            _glBlitFramebufferLayersEXT_fnptr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        /// <summary><b>[entry point: <c>glBlitFramebufferNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void> _glBlitFramebufferNV_fnptr = &glBlitFramebufferNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlitFramebufferNV_Lazy(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            _glBlitFramebufferNV_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlitFramebufferNV");
            _glBlitFramebufferNV_fnptr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        /// <summary><b>[entry point: <c>glBlitNamedFramebuffer</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, uint, uint, void> _glBlitNamedFramebuffer_fnptr = &glBlitNamedFramebuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glBlitNamedFramebuffer_Lazy(int readFramebuffer, int drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            _glBlitNamedFramebuffer_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlitNamedFramebuffer");
            _glBlitNamedFramebuffer_fnptr(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        /// <summary><b>[entry point: <c>glBufferAddressRangeNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, ulong, nint, void> _glBufferAddressRangeNV_fnptr = &glBufferAddressRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBufferAddressRangeNV_Lazy(uint pname, uint index, ulong address, nint length)
        {
            _glBufferAddressRangeNV_fnptr = (delegate* unmanaged<uint, uint, ulong, nint, void>)GLLoader.BindingsContext.GetProcAddress("glBufferAddressRangeNV");
            _glBufferAddressRangeNV_fnptr(pname, index, address, length);
        }
        
        /// <summary><b>[entry point: <c>glBufferAttachMemoryNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, ulong, void> _glBufferAttachMemoryNV_fnptr = &glBufferAttachMemoryNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBufferAttachMemoryNV_Lazy(uint target, uint memory, ulong offset)
        {
            _glBufferAttachMemoryNV_fnptr = (delegate* unmanaged<uint, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glBufferAttachMemoryNV");
            _glBufferAttachMemoryNV_fnptr(target, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glBufferData</c>]</b></summary>
        public static delegate* unmanaged<uint, nint, void*, uint, void> _glBufferData_fnptr = &glBufferData_Lazy;
        [UnmanagedCallersOnly]
        private static void glBufferData_Lazy(uint target, nint size, void* data, uint usage)
        {
            _glBufferData_fnptr = (delegate* unmanaged<uint, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBufferData");
            _glBufferData_fnptr(target, size, data, usage);
        }
        
        /// <summary><b>[entry point: <c>glBufferDataARB</c>]</b></summary>
        public static delegate* unmanaged<uint, nint, void*, uint, void> _glBufferDataARB_fnptr = &glBufferDataARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glBufferDataARB_Lazy(uint target, nint size, void* data, uint usage)
        {
            _glBufferDataARB_fnptr = (delegate* unmanaged<uint, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBufferDataARB");
            _glBufferDataARB_fnptr(target, size, data, usage);
        }
        
        /// <summary><b>[entry point: <c>glBufferPageCommitmentARB</c>]</b></summary>
        public static delegate* unmanaged<uint, IntPtr, nint, byte, void> _glBufferPageCommitmentARB_fnptr = &glBufferPageCommitmentARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glBufferPageCommitmentARB_Lazy(uint target, IntPtr offset, nint size, byte commit)
        {
            _glBufferPageCommitmentARB_fnptr = (delegate* unmanaged<uint, IntPtr, nint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glBufferPageCommitmentARB");
            _glBufferPageCommitmentARB_fnptr(target, offset, size, commit);
        }
        
        /// <summary><b>[entry point: <c>glBufferPageCommitmentMemNV</c>]</b></summary>
        public static delegate* unmanaged<uint, IntPtr, nint, uint, ulong, byte, void> _glBufferPageCommitmentMemNV_fnptr = &glBufferPageCommitmentMemNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glBufferPageCommitmentMemNV_Lazy(uint target, IntPtr offset, nint size, uint memory, ulong memOffset, byte commit)
        {
            _glBufferPageCommitmentMemNV_fnptr = (delegate* unmanaged<uint, IntPtr, nint, uint, ulong, byte, void>)GLLoader.BindingsContext.GetProcAddress("glBufferPageCommitmentMemNV");
            _glBufferPageCommitmentMemNV_fnptr(target, offset, size, memory, memOffset, commit);
        }
        
        /// <summary><b>[entry point: <c>glBufferParameteriAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glBufferParameteriAPPLE_fnptr = &glBufferParameteriAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glBufferParameteriAPPLE_Lazy(uint target, uint pname, int param)
        {
            _glBufferParameteriAPPLE_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBufferParameteriAPPLE");
            _glBufferParameteriAPPLE_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glBufferStorage</c>]</b></summary>
        public static delegate* unmanaged<uint, nint, void*, uint, void> _glBufferStorage_fnptr = &glBufferStorage_Lazy;
        [UnmanagedCallersOnly]
        private static void glBufferStorage_Lazy(uint target, nint size, void* data, uint flags)
        {
            _glBufferStorage_fnptr = (delegate* unmanaged<uint, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBufferStorage");
            _glBufferStorage_fnptr(target, size, data, flags);
        }
        
        /// <summary><b>[entry point: <c>glBufferStorageEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, nint, void*, uint, void> _glBufferStorageEXT_fnptr = &glBufferStorageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBufferStorageEXT_Lazy(uint target, nint size, void* data, uint flags)
        {
            _glBufferStorageEXT_fnptr = (delegate* unmanaged<uint, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBufferStorageEXT");
            _glBufferStorageEXT_fnptr(target, size, data, flags);
        }
        
        /// <summary><b>[entry point: <c>glBufferStorageExternalEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, IntPtr, nint, void*, uint, void> _glBufferStorageExternalEXT_fnptr = &glBufferStorageExternalEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBufferStorageExternalEXT_Lazy(uint target, IntPtr offset, nint size, void* clientBuffer, uint flags)
        {
            _glBufferStorageExternalEXT_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBufferStorageExternalEXT");
            _glBufferStorageExternalEXT_fnptr(target, offset, size, clientBuffer, flags);
        }
        
        /// <summary><b>[entry point: <c>glBufferStorageMemEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, nint, uint, ulong, void> _glBufferStorageMemEXT_fnptr = &glBufferStorageMemEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glBufferStorageMemEXT_Lazy(uint target, nint size, uint memory, ulong offset)
        {
            _glBufferStorageMemEXT_fnptr = (delegate* unmanaged<uint, nint, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glBufferStorageMemEXT");
            _glBufferStorageMemEXT_fnptr(target, size, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glBufferSubData</c>]</b></summary>
        public static delegate* unmanaged<uint, IntPtr, nint, void*, void> _glBufferSubData_fnptr = &glBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void glBufferSubData_Lazy(uint target, IntPtr offset, nint size, void* data)
        {
            _glBufferSubData_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glBufferSubData");
            _glBufferSubData_fnptr(target, offset, size, data);
        }
        
        /// <summary><b>[entry point: <c>glBufferSubDataARB</c>]</b></summary>
        public static delegate* unmanaged<uint, IntPtr, nint, void*, void> _glBufferSubDataARB_fnptr = &glBufferSubDataARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glBufferSubDataARB_Lazy(uint target, IntPtr offset, nint size, void* data)
        {
            _glBufferSubDataARB_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glBufferSubDataARB");
            _glBufferSubDataARB_fnptr(target, offset, size, data);
        }
        
        /// <summary><b>[entry point: <c>glCallCommandListNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glCallCommandListNV_fnptr = &glCallCommandListNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCallCommandListNV_Lazy(uint list)
        {
            _glCallCommandListNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glCallCommandListNV");
            _glCallCommandListNV_fnptr(list);
        }
        
        /// <summary><b>[entry point: <c>glCallList</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glCallList_fnptr = &glCallList_Lazy;
        [UnmanagedCallersOnly]
        private static void glCallList_Lazy(int list)
        {
            _glCallList_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glCallList");
            _glCallList_fnptr(list);
        }
        
        /// <summary><b>[entry point: <c>glCallLists</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void*, void> _glCallLists_fnptr = &glCallLists_Lazy;
        [UnmanagedCallersOnly]
        private static void glCallLists_Lazy(int n, uint type, void* lists)
        {
            _glCallLists_fnptr = (delegate* unmanaged<int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCallLists");
            _glCallLists_fnptr(n, type, lists);
        }
        
        /// <summary><b>[entry point: <c>glCheckFramebufferStatus</c>]</b></summary>
        public static delegate* unmanaged<uint, uint> _glCheckFramebufferStatus_fnptr = &glCheckFramebufferStatus_Lazy;
        [UnmanagedCallersOnly]
        private static uint glCheckFramebufferStatus_Lazy(uint target)
        {
            _glCheckFramebufferStatus_fnptr = (delegate* unmanaged<uint, uint>)GLLoader.BindingsContext.GetProcAddress("glCheckFramebufferStatus");
            return _glCheckFramebufferStatus_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glCheckFramebufferStatusEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint> _glCheckFramebufferStatusEXT_fnptr = &glCheckFramebufferStatusEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint glCheckFramebufferStatusEXT_Lazy(uint target)
        {
            _glCheckFramebufferStatusEXT_fnptr = (delegate* unmanaged<uint, uint>)GLLoader.BindingsContext.GetProcAddress("glCheckFramebufferStatusEXT");
            return _glCheckFramebufferStatusEXT_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glCheckFramebufferStatusOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint> _glCheckFramebufferStatusOES_fnptr = &glCheckFramebufferStatusOES_Lazy;
        [UnmanagedCallersOnly]
        private static uint glCheckFramebufferStatusOES_Lazy(uint target)
        {
            _glCheckFramebufferStatusOES_fnptr = (delegate* unmanaged<uint, uint>)GLLoader.BindingsContext.GetProcAddress("glCheckFramebufferStatusOES");
            return _glCheckFramebufferStatusOES_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glCheckNamedFramebufferStatus</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint> _glCheckNamedFramebufferStatus_fnptr = &glCheckNamedFramebufferStatus_Lazy;
        [UnmanagedCallersOnly]
        private static uint glCheckNamedFramebufferStatus_Lazy(int framebuffer, uint target)
        {
            _glCheckNamedFramebufferStatus_fnptr = (delegate* unmanaged<int, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glCheckNamedFramebufferStatus");
            return _glCheckNamedFramebufferStatus_fnptr(framebuffer, target);
        }
        
        /// <summary><b>[entry point: <c>glCheckNamedFramebufferStatusEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint> _glCheckNamedFramebufferStatusEXT_fnptr = &glCheckNamedFramebufferStatusEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint glCheckNamedFramebufferStatusEXT_Lazy(int framebuffer, uint target)
        {
            _glCheckNamedFramebufferStatusEXT_fnptr = (delegate* unmanaged<int, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glCheckNamedFramebufferStatusEXT");
            return _glCheckNamedFramebufferStatusEXT_fnptr(framebuffer, target);
        }
        
        /// <summary><b>[entry point: <c>glClampColor</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glClampColor_fnptr = &glClampColor_Lazy;
        [UnmanagedCallersOnly]
        private static void glClampColor_Lazy(uint target, uint clamp)
        {
            _glClampColor_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glClampColor");
            _glClampColor_fnptr(target, clamp);
        }
        
        /// <summary><b>[entry point: <c>glClampColorARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glClampColorARB_fnptr = &glClampColorARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glClampColorARB_Lazy(uint target, uint clamp)
        {
            _glClampColorARB_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glClampColorARB");
            _glClampColorARB_fnptr(target, clamp);
        }
        
        /// <summary><b>[entry point: <c>glClear</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glClear_fnptr = &glClear_Lazy;
        [UnmanagedCallersOnly]
        private static void glClear_Lazy(uint mask)
        {
            _glClear_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glClear");
            _glClear_fnptr(mask);
        }
        
        /// <summary><b>[entry point: <c>glClearAccum</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, void> _glClearAccum_fnptr = &glClearAccum_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearAccum_Lazy(float red, float green, float blue, float alpha)
        {
            _glClearAccum_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glClearAccum");
            _glClearAccum_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glClearAccumxOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glClearAccumxOES_fnptr = &glClearAccumxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearAccumxOES_Lazy(int red, int green, int blue, int alpha)
        {
            _glClearAccumxOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glClearAccumxOES");
            _glClearAccumxOES_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glClearBufferData</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, void*, void> _glClearBufferData_fnptr = &glClearBufferData_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearBufferData_Lazy(uint target, uint internalformat, uint format, uint type, void* data)
        {
            _glClearBufferData_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearBufferData");
            _glClearBufferData_fnptr(target, internalformat, format, type, data);
        }
        
        /// <summary><b>[entry point: <c>glClearBufferfi</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float, int, void> _glClearBufferfi_fnptr = &glClearBufferfi_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearBufferfi_Lazy(uint buffer, int drawbuffer, float depth, int stencil)
        {
            _glClearBufferfi_fnptr = (delegate* unmanaged<uint, int, float, int, void>)GLLoader.BindingsContext.GetProcAddress("glClearBufferfi");
            _glClearBufferfi_fnptr(buffer, drawbuffer, depth, stencil);
        }
        
        /// <summary><b>[entry point: <c>glClearBufferfv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glClearBufferfv_fnptr = &glClearBufferfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearBufferfv_Lazy(uint buffer, int drawbuffer, float* value)
        {
            _glClearBufferfv_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glClearBufferfv");
            _glClearBufferfv_fnptr(buffer, drawbuffer, value);
        }
        
        /// <summary><b>[entry point: <c>glClearBufferiv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, void> _glClearBufferiv_fnptr = &glClearBufferiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearBufferiv_Lazy(uint buffer, int drawbuffer, int* value)
        {
            _glClearBufferiv_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glClearBufferiv");
            _glClearBufferiv_fnptr(buffer, drawbuffer, value);
        }
        
        /// <summary><b>[entry point: <c>glClearBufferSubData</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, IntPtr, nint, uint, uint, void*, void> _glClearBufferSubData_fnptr = &glClearBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearBufferSubData_Lazy(uint target, uint internalformat, IntPtr offset, nint size, uint format, uint type, void* data)
        {
            _glClearBufferSubData_fnptr = (delegate* unmanaged<uint, uint, IntPtr, nint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearBufferSubData");
            _glClearBufferSubData_fnptr(target, internalformat, offset, size, format, type, data);
        }
        
        /// <summary><b>[entry point: <c>glClearBufferuiv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, void> _glClearBufferuiv_fnptr = &glClearBufferuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearBufferuiv_Lazy(uint buffer, int drawbuffer, uint* value)
        {
            _glClearBufferuiv_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glClearBufferuiv");
            _glClearBufferuiv_fnptr(buffer, drawbuffer, value);
        }
        
        /// <summary><b>[entry point: <c>glClearColor</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, void> _glClearColor_fnptr = &glClearColor_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearColor_Lazy(float red, float green, float blue, float alpha)
        {
            _glClearColor_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glClearColor");
            _glClearColor_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glClearColorIiEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glClearColorIiEXT_fnptr = &glClearColorIiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearColorIiEXT_Lazy(int red, int green, int blue, int alpha)
        {
            _glClearColorIiEXT_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glClearColorIiEXT");
            _glClearColorIiEXT_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glClearColorIuiEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, void> _glClearColorIuiEXT_fnptr = &glClearColorIuiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearColorIuiEXT_Lazy(uint red, uint green, uint blue, uint alpha)
        {
            _glClearColorIuiEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glClearColorIuiEXT");
            _glClearColorIuiEXT_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glClearColorx</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glClearColorx_fnptr = &glClearColorx_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearColorx_Lazy(int red, int green, int blue, int alpha)
        {
            _glClearColorx_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glClearColorx");
            _glClearColorx_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glClearColorxOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glClearColorxOES_fnptr = &glClearColorxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearColorxOES_Lazy(int red, int green, int blue, int alpha)
        {
            _glClearColorxOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glClearColorxOES");
            _glClearColorxOES_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glClearDepth</c>]</b></summary>
        public static delegate* unmanaged<double, void> _glClearDepth_fnptr = &glClearDepth_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearDepth_Lazy(double depth)
        {
            _glClearDepth_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glClearDepth");
            _glClearDepth_fnptr(depth);
        }
        
        /// <summary><b>[entry point: <c>glClearDepthdNV</c>]</b></summary>
        public static delegate* unmanaged<double, void> _glClearDepthdNV_fnptr = &glClearDepthdNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearDepthdNV_Lazy(double depth)
        {
            _glClearDepthdNV_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glClearDepthdNV");
            _glClearDepthdNV_fnptr(depth);
        }
        
        /// <summary><b>[entry point: <c>glClearDepthf</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glClearDepthf_fnptr = &glClearDepthf_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearDepthf_Lazy(float d)
        {
            _glClearDepthf_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glClearDepthf");
            _glClearDepthf_fnptr(d);
        }
        
        /// <summary><b>[entry point: <c>glClearDepthfOES</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glClearDepthfOES_fnptr = &glClearDepthfOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearDepthfOES_Lazy(float depth)
        {
            _glClearDepthfOES_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glClearDepthfOES");
            _glClearDepthfOES_fnptr(depth);
        }
        
        /// <summary><b>[entry point: <c>glClearDepthx</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glClearDepthx_fnptr = &glClearDepthx_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearDepthx_Lazy(int depth)
        {
            _glClearDepthx_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glClearDepthx");
            _glClearDepthx_fnptr(depth);
        }
        
        /// <summary><b>[entry point: <c>glClearDepthxOES</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glClearDepthxOES_fnptr = &glClearDepthxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearDepthxOES_Lazy(int depth)
        {
            _glClearDepthxOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glClearDepthxOES");
            _glClearDepthxOES_fnptr(depth);
        }
        
        /// <summary><b>[entry point: <c>glClearIndex</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glClearIndex_fnptr = &glClearIndex_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearIndex_Lazy(float c)
        {
            _glClearIndex_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glClearIndex");
            _glClearIndex_fnptr(c);
        }
        
        /// <summary><b>[entry point: <c>glClearNamedBufferData</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, uint, void*, void> _glClearNamedBufferData_fnptr = &glClearNamedBufferData_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearNamedBufferData_Lazy(int buffer, uint internalformat, uint format, uint type, void* data)
        {
            _glClearNamedBufferData_fnptr = (delegate* unmanaged<int, uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedBufferData");
            _glClearNamedBufferData_fnptr(buffer, internalformat, format, type, data);
        }
        
        /// <summary><b>[entry point: <c>glClearNamedBufferDataEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, uint, void*, void> _glClearNamedBufferDataEXT_fnptr = &glClearNamedBufferDataEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearNamedBufferDataEXT_Lazy(int buffer, uint internalformat, uint format, uint type, void* data)
        {
            _glClearNamedBufferDataEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedBufferDataEXT");
            _glClearNamedBufferDataEXT_fnptr(buffer, internalformat, format, type, data);
        }
        
        /// <summary><b>[entry point: <c>glClearNamedBufferSubData</c>]</b></summary>
        public static delegate* unmanaged<int, uint, IntPtr, nint, uint, uint, void*, void> _glClearNamedBufferSubData_fnptr = &glClearNamedBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearNamedBufferSubData_Lazy(int buffer, uint internalformat, IntPtr offset, nint size, uint format, uint type, void* data)
        {
            _glClearNamedBufferSubData_fnptr = (delegate* unmanaged<int, uint, IntPtr, nint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedBufferSubData");
            _glClearNamedBufferSubData_fnptr(buffer, internalformat, offset, size, format, type, data);
        }
        
        /// <summary><b>[entry point: <c>glClearNamedBufferSubDataEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, nint, nint, uint, uint, void*, void> _glClearNamedBufferSubDataEXT_fnptr = &glClearNamedBufferSubDataEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearNamedBufferSubDataEXT_Lazy(int buffer, uint internalformat, nint offset, nint size, uint format, uint type, void* data)
        {
            _glClearNamedBufferSubDataEXT_fnptr = (delegate* unmanaged<int, uint, nint, nint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedBufferSubDataEXT");
            _glClearNamedBufferSubDataEXT_fnptr(buffer, internalformat, offset, size, format, type, data);
        }
        
        /// <summary><b>[entry point: <c>glClearNamedFramebufferfi</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, float, int, void> _glClearNamedFramebufferfi_fnptr = &glClearNamedFramebufferfi_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearNamedFramebufferfi_Lazy(int framebuffer, uint buffer, int drawbuffer, float depth, int stencil)
        {
            _glClearNamedFramebufferfi_fnptr = (delegate* unmanaged<int, uint, int, float, int, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedFramebufferfi");
            _glClearNamedFramebufferfi_fnptr(framebuffer, buffer, drawbuffer, depth, stencil);
        }
        
        /// <summary><b>[entry point: <c>glClearNamedFramebufferfv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, float*, void> _glClearNamedFramebufferfv_fnptr = &glClearNamedFramebufferfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearNamedFramebufferfv_Lazy(int framebuffer, uint buffer, int drawbuffer, float* value)
        {
            _glClearNamedFramebufferfv_fnptr = (delegate* unmanaged<int, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedFramebufferfv");
            _glClearNamedFramebufferfv_fnptr(framebuffer, buffer, drawbuffer, value);
        }
        
        /// <summary><b>[entry point: <c>glClearNamedFramebufferiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int*, void> _glClearNamedFramebufferiv_fnptr = &glClearNamedFramebufferiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearNamedFramebufferiv_Lazy(int framebuffer, uint buffer, int drawbuffer, int* value)
        {
            _glClearNamedFramebufferiv_fnptr = (delegate* unmanaged<int, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedFramebufferiv");
            _glClearNamedFramebufferiv_fnptr(framebuffer, buffer, drawbuffer, value);
        }
        
        /// <summary><b>[entry point: <c>glClearNamedFramebufferuiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint*, void> _glClearNamedFramebufferuiv_fnptr = &glClearNamedFramebufferuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearNamedFramebufferuiv_Lazy(int framebuffer, uint buffer, int drawbuffer, uint* value)
        {
            _glClearNamedFramebufferuiv_fnptr = (delegate* unmanaged<int, uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedFramebufferuiv");
            _glClearNamedFramebufferuiv_fnptr(framebuffer, buffer, drawbuffer, value);
        }
        
        /// <summary><b>[entry point: <c>glClearPixelLocalStorageuiEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, void> _glClearPixelLocalStorageuiEXT_fnptr = &glClearPixelLocalStorageuiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearPixelLocalStorageuiEXT_Lazy(int offset, int n, uint* values)
        {
            _glClearPixelLocalStorageuiEXT_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glClearPixelLocalStorageuiEXT");
            _glClearPixelLocalStorageuiEXT_fnptr(offset, n, values);
        }
        
        /// <summary><b>[entry point: <c>glClearStencil</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glClearStencil_fnptr = &glClearStencil_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearStencil_Lazy(int s)
        {
            _glClearStencil_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glClearStencil");
            _glClearStencil_fnptr(s);
        }
        
        /// <summary><b>[entry point: <c>glClearTexImage</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, uint, void*, void> _glClearTexImage_fnptr = &glClearTexImage_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearTexImage_Lazy(int texture, int level, uint format, uint type, void* data)
        {
            _glClearTexImage_fnptr = (delegate* unmanaged<int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearTexImage");
            _glClearTexImage_fnptr(texture, level, format, type, data);
        }
        
        /// <summary><b>[entry point: <c>glClearTexImageEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, uint, void*, void> _glClearTexImageEXT_fnptr = &glClearTexImageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearTexImageEXT_Lazy(int texture, int level, uint format, uint type, void* data)
        {
            _glClearTexImageEXT_fnptr = (delegate* unmanaged<int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearTexImageEXT");
            _glClearTexImageEXT_fnptr(texture, level, format, type, data);
        }
        
        /// <summary><b>[entry point: <c>glClearTexSubImage</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void*, void> _glClearTexSubImage_fnptr = &glClearTexSubImage_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearTexSubImage_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* data)
        {
            _glClearTexSubImage_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearTexSubImage");
            _glClearTexSubImage_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        }
        
        /// <summary><b>[entry point: <c>glClearTexSubImageEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void*, void> _glClearTexSubImageEXT_fnptr = &glClearTexSubImageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glClearTexSubImageEXT_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* data)
        {
            _glClearTexSubImageEXT_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearTexSubImageEXT");
            _glClearTexSubImageEXT_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        }
        
        /// <summary><b>[entry point: <c>glClientActiveTexture</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glClientActiveTexture_fnptr = &glClientActiveTexture_Lazy;
        [UnmanagedCallersOnly]
        private static void glClientActiveTexture_Lazy(uint texture)
        {
            _glClientActiveTexture_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glClientActiveTexture");
            _glClientActiveTexture_fnptr(texture);
        }
        
        /// <summary><b>[entry point: <c>glClientActiveTextureARB</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glClientActiveTextureARB_fnptr = &glClientActiveTextureARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glClientActiveTextureARB_Lazy(uint texture)
        {
            _glClientActiveTextureARB_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glClientActiveTextureARB");
            _glClientActiveTextureARB_fnptr(texture);
        }
        
        /// <summary><b>[entry point: <c>glClientActiveVertexStreamATI</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glClientActiveVertexStreamATI_fnptr = &glClientActiveVertexStreamATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glClientActiveVertexStreamATI_Lazy(uint stream)
        {
            _glClientActiveVertexStreamATI_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glClientActiveVertexStreamATI");
            _glClientActiveVertexStreamATI_fnptr(stream);
        }
        
        /// <summary><b>[entry point: <c>glClientAttribDefaultEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glClientAttribDefaultEXT_fnptr = &glClientAttribDefaultEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glClientAttribDefaultEXT_Lazy(uint mask)
        {
            _glClientAttribDefaultEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glClientAttribDefaultEXT");
            _glClientAttribDefaultEXT_fnptr(mask);
        }
        
        /// <summary><b>[entry point: <c>glClientWaitSemaphoreui64NVX</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, ulong*, void> _glClientWaitSemaphoreui64NVX_fnptr = &glClientWaitSemaphoreui64NVX_Lazy;
        [UnmanagedCallersOnly]
        private static void glClientWaitSemaphoreui64NVX_Lazy(int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray)
        {
            _glClientWaitSemaphoreui64NVX_fnptr = (delegate* unmanaged<int, uint*, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glClientWaitSemaphoreui64NVX");
            _glClientWaitSemaphoreui64NVX_fnptr(fenceObjectCount, semaphoreArray, fenceValueArray);
        }
        
        /// <summary><b>[entry point: <c>glClientWaitSync</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, uint, ulong, uint> _glClientWaitSync_fnptr = &glClientWaitSync_Lazy;
        [UnmanagedCallersOnly]
        private static uint glClientWaitSync_Lazy(IntPtr sync, uint flags, ulong timeout)
        {
            _glClientWaitSync_fnptr = (delegate* unmanaged<IntPtr, uint, ulong, uint>)GLLoader.BindingsContext.GetProcAddress("glClientWaitSync");
            return _glClientWaitSync_fnptr(sync, flags, timeout);
        }
        
        /// <summary><b>[entry point: <c>glClientWaitSyncAPPLE</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, uint, ulong, uint> _glClientWaitSyncAPPLE_fnptr = &glClientWaitSyncAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static uint glClientWaitSyncAPPLE_Lazy(IntPtr sync, uint flags, ulong timeout)
        {
            _glClientWaitSyncAPPLE_fnptr = (delegate* unmanaged<IntPtr, uint, ulong, uint>)GLLoader.BindingsContext.GetProcAddress("glClientWaitSyncAPPLE");
            return _glClientWaitSyncAPPLE_fnptr(sync, flags, timeout);
        }
        
        /// <summary><b>[entry point: <c>glClipControl</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glClipControl_fnptr = &glClipControl_Lazy;
        [UnmanagedCallersOnly]
        private static void glClipControl_Lazy(uint origin, uint depth)
        {
            _glClipControl_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glClipControl");
            _glClipControl_fnptr(origin, depth);
        }
        
        /// <summary><b>[entry point: <c>glClipControlEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glClipControlEXT_fnptr = &glClipControlEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glClipControlEXT_Lazy(uint origin, uint depth)
        {
            _glClipControlEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glClipControlEXT");
            _glClipControlEXT_fnptr(origin, depth);
        }
        
        /// <summary><b>[entry point: <c>glClipPlane</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glClipPlane_fnptr = &glClipPlane_Lazy;
        [UnmanagedCallersOnly]
        private static void glClipPlane_Lazy(uint plane, double* equation)
        {
            _glClipPlane_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glClipPlane");
            _glClipPlane_fnptr(plane, equation);
        }
        
        /// <summary><b>[entry point: <c>glClipPlanef</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glClipPlanef_fnptr = &glClipPlanef_Lazy;
        [UnmanagedCallersOnly]
        private static void glClipPlanef_Lazy(uint p, float* eqn)
        {
            _glClipPlanef_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glClipPlanef");
            _glClipPlanef_fnptr(p, eqn);
        }
        
        /// <summary><b>[entry point: <c>glClipPlanefIMG</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glClipPlanefIMG_fnptr = &glClipPlanefIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void glClipPlanefIMG_Lazy(uint p, float* eqn)
        {
            _glClipPlanefIMG_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glClipPlanefIMG");
            _glClipPlanefIMG_fnptr(p, eqn);
        }
        
        /// <summary><b>[entry point: <c>glClipPlanefOES</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glClipPlanefOES_fnptr = &glClipPlanefOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glClipPlanefOES_Lazy(uint plane, float* equation)
        {
            _glClipPlanefOES_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glClipPlanefOES");
            _glClipPlanefOES_fnptr(plane, equation);
        }
        
        /// <summary><b>[entry point: <c>glClipPlanex</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glClipPlanex_fnptr = &glClipPlanex_Lazy;
        [UnmanagedCallersOnly]
        private static void glClipPlanex_Lazy(uint plane, int* equation)
        {
            _glClipPlanex_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glClipPlanex");
            _glClipPlanex_fnptr(plane, equation);
        }
        
        /// <summary><b>[entry point: <c>glClipPlanexIMG</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glClipPlanexIMG_fnptr = &glClipPlanexIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void glClipPlanexIMG_Lazy(uint p, int* eqn)
        {
            _glClipPlanexIMG_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glClipPlanexIMG");
            _glClipPlanexIMG_fnptr(p, eqn);
        }
        
        /// <summary><b>[entry point: <c>glClipPlanexOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glClipPlanexOES_fnptr = &glClipPlanexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glClipPlanexOES_Lazy(uint plane, int* equation)
        {
            _glClipPlanexOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glClipPlanexOES");
            _glClipPlanexOES_fnptr(plane, equation);
        }
        
        /// <summary><b>[entry point: <c>glColor3b</c>]</b></summary>
        public static delegate* unmanaged<sbyte, sbyte, sbyte, void> _glColor3b_fnptr = &glColor3b_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3b_Lazy(sbyte red, sbyte green, sbyte blue)
        {
            _glColor3b_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glColor3b");
            _glColor3b_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glColor3bv</c>]</b></summary>
        public static delegate* unmanaged<sbyte*, void> _glColor3bv_fnptr = &glColor3bv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3bv_Lazy(sbyte* v)
        {
            _glColor3bv_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3bv");
            _glColor3bv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor3d</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, void> _glColor3d_fnptr = &glColor3d_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3d_Lazy(double red, double green, double blue)
        {
            _glColor3d_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glColor3d");
            _glColor3d_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glColor3dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glColor3dv_fnptr = &glColor3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3dv_Lazy(double* v)
        {
            _glColor3dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3dv");
            _glColor3dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor3f</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glColor3f_fnptr = &glColor3f_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3f_Lazy(float red, float green, float blue)
        {
            _glColor3f_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glColor3f");
            _glColor3f_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glColor3fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glColor3fv_fnptr = &glColor3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3fv_Lazy(float* v)
        {
            _glColor3fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3fv");
            _glColor3fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor3fVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, void> _glColor3fVertex3fSUN_fnptr = &glColor3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3fVertex3fSUN_Lazy(float r, float g, float b, float x, float y, float z)
        {
            _glColor3fVertex3fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glColor3fVertex3fSUN");
            _glColor3fVertex3fSUN_fnptr(r, g, b, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glColor3fVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<float*, float*, void> _glColor3fVertex3fvSUN_fnptr = &glColor3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3fVertex3fvSUN_Lazy(float* c, float* v)
        {
            _glColor3fVertex3fvSUN_fnptr = (delegate* unmanaged<float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3fVertex3fvSUN");
            _glColor3fVertex3fvSUN_fnptr(c, v);
        }
        
        /// <summary><b>[entry point: <c>glColor3hNV</c>]</b></summary>
        public static delegate* unmanaged<Half, Half, Half, void> _glColor3hNV_fnptr = &glColor3hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3hNV_Lazy(Half red, Half green, Half blue)
        {
            _glColor3hNV_fnptr = (delegate* unmanaged<Half, Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glColor3hNV");
            _glColor3hNV_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glColor3hvNV</c>]</b></summary>
        public static delegate* unmanaged<Half*, void> _glColor3hvNV_fnptr = &glColor3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3hvNV_Lazy(Half* v)
        {
            _glColor3hvNV_fnptr = (delegate* unmanaged<Half*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3hvNV");
            _glColor3hvNV_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor3i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glColor3i_fnptr = &glColor3i_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3i_Lazy(int red, int green, int blue)
        {
            _glColor3i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glColor3i");
            _glColor3i_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glColor3iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glColor3iv_fnptr = &glColor3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3iv_Lazy(int* v)
        {
            _glColor3iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3iv");
            _glColor3iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor3s</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, void> _glColor3s_fnptr = &glColor3s_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3s_Lazy(short red, short green, short blue)
        {
            _glColor3s_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glColor3s");
            _glColor3s_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glColor3sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glColor3sv_fnptr = &glColor3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3sv_Lazy(short* v)
        {
            _glColor3sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3sv");
            _glColor3sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor3ub</c>]</b></summary>
        public static delegate* unmanaged<byte, byte, byte, void> _glColor3ub_fnptr = &glColor3ub_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3ub_Lazy(byte red, byte green, byte blue)
        {
            _glColor3ub_fnptr = (delegate* unmanaged<byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glColor3ub");
            _glColor3ub_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glColor3ubv</c>]</b></summary>
        public static delegate* unmanaged<byte*, void> _glColor3ubv_fnptr = &glColor3ubv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3ubv_Lazy(byte* v)
        {
            _glColor3ubv_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3ubv");
            _glColor3ubv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor3ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glColor3ui_fnptr = &glColor3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3ui_Lazy(uint red, uint green, uint blue)
        {
            _glColor3ui_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColor3ui");
            _glColor3ui_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glColor3uiv</c>]</b></summary>
        public static delegate* unmanaged<uint*, void> _glColor3uiv_fnptr = &glColor3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3uiv_Lazy(uint* v)
        {
            _glColor3uiv_fnptr = (delegate* unmanaged<uint*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3uiv");
            _glColor3uiv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor3us</c>]</b></summary>
        public static delegate* unmanaged<ushort, ushort, ushort, void> _glColor3us_fnptr = &glColor3us_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3us_Lazy(ushort red, ushort green, ushort blue)
        {
            _glColor3us_fnptr = (delegate* unmanaged<ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glColor3us");
            _glColor3us_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glColor3usv</c>]</b></summary>
        public static delegate* unmanaged<ushort*, void> _glColor3usv_fnptr = &glColor3usv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3usv_Lazy(ushort* v)
        {
            _glColor3usv_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3usv");
            _glColor3usv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor3xOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glColor3xOES_fnptr = &glColor3xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3xOES_Lazy(int red, int green, int blue)
        {
            _glColor3xOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glColor3xOES");
            _glColor3xOES_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glColor3xvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glColor3xvOES_fnptr = &glColor3xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor3xvOES_Lazy(int* components)
        {
            _glColor3xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3xvOES");
            _glColor3xvOES_fnptr(components);
        }
        
        /// <summary><b>[entry point: <c>glColor4b</c>]</b></summary>
        public static delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void> _glColor4b_fnptr = &glColor4b_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4b_Lazy(sbyte red, sbyte green, sbyte blue, sbyte alpha)
        {
            _glColor4b_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glColor4b");
            _glColor4b_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glColor4bv</c>]</b></summary>
        public static delegate* unmanaged<sbyte*, void> _glColor4bv_fnptr = &glColor4bv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4bv_Lazy(sbyte* v)
        {
            _glColor4bv_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4bv");
            _glColor4bv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor4d</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, double, void> _glColor4d_fnptr = &glColor4d_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4d_Lazy(double red, double green, double blue, double alpha)
        {
            _glColor4d_fnptr = (delegate* unmanaged<double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glColor4d");
            _glColor4d_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glColor4dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glColor4dv_fnptr = &glColor4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4dv_Lazy(double* v)
        {
            _glColor4dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4dv");
            _glColor4dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor4f</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, void> _glColor4f_fnptr = &glColor4f_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4f_Lazy(float red, float green, float blue, float alpha)
        {
            _glColor4f_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glColor4f");
            _glColor4f_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glColor4fNormal3fVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, void> _glColor4fNormal3fVertex3fSUN_fnptr = &glColor4fNormal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4fNormal3fVertex3fSUN_Lazy(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            _glColor4fNormal3fVertex3fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glColor4fNormal3fVertex3fSUN");
            _glColor4fNormal3fVertex3fSUN_fnptr(r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glColor4fNormal3fVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<float*, float*, float*, void> _glColor4fNormal3fVertex3fvSUN_fnptr = &glColor4fNormal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4fNormal3fVertex3fvSUN_Lazy(float* c, float* n, float* v)
        {
            _glColor4fNormal3fVertex3fvSUN_fnptr = (delegate* unmanaged<float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4fNormal3fVertex3fvSUN");
            _glColor4fNormal3fVertex3fvSUN_fnptr(c, n, v);
        }
        
        /// <summary><b>[entry point: <c>glColor4fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glColor4fv_fnptr = &glColor4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4fv_Lazy(float* v)
        {
            _glColor4fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4fv");
            _glColor4fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor4hNV</c>]</b></summary>
        public static delegate* unmanaged<Half, Half, Half, Half, void> _glColor4hNV_fnptr = &glColor4hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4hNV_Lazy(Half red, Half green, Half blue, Half alpha)
        {
            _glColor4hNV_fnptr = (delegate* unmanaged<Half, Half, Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glColor4hNV");
            _glColor4hNV_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glColor4hvNV</c>]</b></summary>
        public static delegate* unmanaged<Half*, void> _glColor4hvNV_fnptr = &glColor4hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4hvNV_Lazy(Half* v)
        {
            _glColor4hvNV_fnptr = (delegate* unmanaged<Half*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4hvNV");
            _glColor4hvNV_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor4i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glColor4i_fnptr = &glColor4i_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4i_Lazy(int red, int green, int blue, int alpha)
        {
            _glColor4i_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glColor4i");
            _glColor4i_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glColor4iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glColor4iv_fnptr = &glColor4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4iv_Lazy(int* v)
        {
            _glColor4iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4iv");
            _glColor4iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor4s</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, short, void> _glColor4s_fnptr = &glColor4s_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4s_Lazy(short red, short green, short blue, short alpha)
        {
            _glColor4s_fnptr = (delegate* unmanaged<short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glColor4s");
            _glColor4s_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glColor4sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glColor4sv_fnptr = &glColor4sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4sv_Lazy(short* v)
        {
            _glColor4sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4sv");
            _glColor4sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor4ub</c>]</b></summary>
        public static delegate* unmanaged<byte, byte, byte, byte, void> _glColor4ub_fnptr = &glColor4ub_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4ub_Lazy(byte red, byte green, byte blue, byte alpha)
        {
            _glColor4ub_fnptr = (delegate* unmanaged<byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glColor4ub");
            _glColor4ub_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glColor4ubv</c>]</b></summary>
        public static delegate* unmanaged<byte*, void> _glColor4ubv_fnptr = &glColor4ubv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4ubv_Lazy(byte* v)
        {
            _glColor4ubv_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4ubv");
            _glColor4ubv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor4ubVertex2fSUN</c>]</b></summary>
        public static delegate* unmanaged<byte, byte, byte, byte, float, float, void> _glColor4ubVertex2fSUN_fnptr = &glColor4ubVertex2fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4ubVertex2fSUN_Lazy(byte r, byte g, byte b, byte a, float x, float y)
        {
            _glColor4ubVertex2fSUN_fnptr = (delegate* unmanaged<byte, byte, byte, byte, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glColor4ubVertex2fSUN");
            _glColor4ubVertex2fSUN_fnptr(r, g, b, a, x, y);
        }
        
        /// <summary><b>[entry point: <c>glColor4ubVertex2fvSUN</c>]</b></summary>
        public static delegate* unmanaged<byte*, float*, void> _glColor4ubVertex2fvSUN_fnptr = &glColor4ubVertex2fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4ubVertex2fvSUN_Lazy(byte* c, float* v)
        {
            _glColor4ubVertex2fvSUN_fnptr = (delegate* unmanaged<byte*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4ubVertex2fvSUN");
            _glColor4ubVertex2fvSUN_fnptr(c, v);
        }
        
        /// <summary><b>[entry point: <c>glColor4ubVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<byte, byte, byte, byte, float, float, float, void> _glColor4ubVertex3fSUN_fnptr = &glColor4ubVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4ubVertex3fSUN_Lazy(byte r, byte g, byte b, byte a, float x, float y, float z)
        {
            _glColor4ubVertex3fSUN_fnptr = (delegate* unmanaged<byte, byte, byte, byte, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glColor4ubVertex3fSUN");
            _glColor4ubVertex3fSUN_fnptr(r, g, b, a, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glColor4ubVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<byte*, float*, void> _glColor4ubVertex3fvSUN_fnptr = &glColor4ubVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4ubVertex3fvSUN_Lazy(byte* c, float* v)
        {
            _glColor4ubVertex3fvSUN_fnptr = (delegate* unmanaged<byte*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4ubVertex3fvSUN");
            _glColor4ubVertex3fvSUN_fnptr(c, v);
        }
        
        /// <summary><b>[entry point: <c>glColor4ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, void> _glColor4ui_fnptr = &glColor4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4ui_Lazy(uint red, uint green, uint blue, uint alpha)
        {
            _glColor4ui_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColor4ui");
            _glColor4ui_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glColor4uiv</c>]</b></summary>
        public static delegate* unmanaged<uint*, void> _glColor4uiv_fnptr = &glColor4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4uiv_Lazy(uint* v)
        {
            _glColor4uiv_fnptr = (delegate* unmanaged<uint*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4uiv");
            _glColor4uiv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor4us</c>]</b></summary>
        public static delegate* unmanaged<ushort, ushort, ushort, ushort, void> _glColor4us_fnptr = &glColor4us_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4us_Lazy(ushort red, ushort green, ushort blue, ushort alpha)
        {
            _glColor4us_fnptr = (delegate* unmanaged<ushort, ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glColor4us");
            _glColor4us_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glColor4usv</c>]</b></summary>
        public static delegate* unmanaged<ushort*, void> _glColor4usv_fnptr = &glColor4usv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4usv_Lazy(ushort* v)
        {
            _glColor4usv_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4usv");
            _glColor4usv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glColor4x</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glColor4x_fnptr = &glColor4x_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4x_Lazy(int red, int green, int blue, int alpha)
        {
            _glColor4x_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glColor4x");
            _glColor4x_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glColor4xOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glColor4xOES_fnptr = &glColor4xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4xOES_Lazy(int red, int green, int blue, int alpha)
        {
            _glColor4xOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glColor4xOES");
            _glColor4xOES_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glColor4xvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glColor4xvOES_fnptr = &glColor4xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glColor4xvOES_Lazy(int* components)
        {
            _glColor4xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4xvOES");
            _glColor4xvOES_fnptr(components);
        }
        
        /// <summary><b>[entry point: <c>glColorFormatNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glColorFormatNV_fnptr = &glColorFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorFormatNV_Lazy(int size, uint type, int stride)
        {
            _glColorFormatNV_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glColorFormatNV");
            _glColorFormatNV_fnptr(size, type, stride);
        }
        
        /// <summary><b>[entry point: <c>glColorFragmentOp1ATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, void> _glColorFragmentOp1ATI_fnptr = &glColorFragmentOp1ATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorFragmentOp1ATI_Lazy(uint op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod)
        {
            _glColorFragmentOp1ATI_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColorFragmentOp1ATI");
            _glColorFragmentOp1ATI_fnptr(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
        }
        
        /// <summary><b>[entry point: <c>glColorFragmentOp2ATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _glColorFragmentOp2ATI_fnptr = &glColorFragmentOp2ATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorFragmentOp2ATI_Lazy(uint op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod)
        {
            _glColorFragmentOp2ATI_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColorFragmentOp2ATI");
            _glColorFragmentOp2ATI_fnptr(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        }
        
        /// <summary><b>[entry point: <c>glColorFragmentOp3ATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _glColorFragmentOp3ATI_fnptr = &glColorFragmentOp3ATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorFragmentOp3ATI_Lazy(uint op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod)
        {
            _glColorFragmentOp3ATI_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColorFragmentOp3ATI");
            _glColorFragmentOp3ATI_fnptr(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        }
        
        /// <summary><b>[entry point: <c>glColorMask</c>]</b></summary>
        public static delegate* unmanaged<byte, byte, byte, byte, void> _glColorMask_fnptr = &glColorMask_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorMask_Lazy(byte red, byte green, byte blue, byte alpha)
        {
            _glColorMask_fnptr = (delegate* unmanaged<byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glColorMask");
            _glColorMask_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glColorMaski</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, byte, byte, byte, void> _glColorMaski_fnptr = &glColorMaski_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorMaski_Lazy(uint index, byte r, byte g, byte b, byte a)
        {
            _glColorMaski_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glColorMaski");
            _glColorMaski_fnptr(index, r, g, b, a);
        }
        
        /// <summary><b>[entry point: <c>glColorMaskiEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, byte, byte, byte, void> _glColorMaskiEXT_fnptr = &glColorMaskiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorMaskiEXT_Lazy(uint index, byte r, byte g, byte b, byte a)
        {
            _glColorMaskiEXT_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glColorMaskiEXT");
            _glColorMaskiEXT_fnptr(index, r, g, b, a);
        }
        
        /// <summary><b>[entry point: <c>glColorMaskIndexedEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, byte, byte, byte, void> _glColorMaskIndexedEXT_fnptr = &glColorMaskIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorMaskIndexedEXT_Lazy(uint index, byte r, byte g, byte b, byte a)
        {
            _glColorMaskIndexedEXT_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glColorMaskIndexedEXT");
            _glColorMaskIndexedEXT_fnptr(index, r, g, b, a);
        }
        
        /// <summary><b>[entry point: <c>glColorMaskiOES</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, byte, byte, byte, void> _glColorMaskiOES_fnptr = &glColorMaskiOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorMaskiOES_Lazy(uint index, byte r, byte g, byte b, byte a)
        {
            _glColorMaskiOES_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glColorMaskiOES");
            _glColorMaskiOES_fnptr(index, r, g, b, a);
        }
        
        /// <summary><b>[entry point: <c>glColorMaterial</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glColorMaterial_fnptr = &glColorMaterial_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorMaterial_Lazy(uint face, uint mode)
        {
            _glColorMaterial_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColorMaterial");
            _glColorMaterial_fnptr(face, mode);
        }
        
        /// <summary><b>[entry point: <c>glColorP3ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glColorP3ui_fnptr = &glColorP3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorP3ui_Lazy(uint type, uint color)
        {
            _glColorP3ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColorP3ui");
            _glColorP3ui_fnptr(type, color);
        }
        
        /// <summary><b>[entry point: <c>glColorP3uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glColorP3uiv_fnptr = &glColorP3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorP3uiv_Lazy(uint type, uint* color)
        {
            _glColorP3uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glColorP3uiv");
            _glColorP3uiv_fnptr(type, color);
        }
        
        /// <summary><b>[entry point: <c>glColorP4ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glColorP4ui_fnptr = &glColorP4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorP4ui_Lazy(uint type, uint color)
        {
            _glColorP4ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColorP4ui");
            _glColorP4ui_fnptr(type, color);
        }
        
        /// <summary><b>[entry point: <c>glColorP4uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glColorP4uiv_fnptr = &glColorP4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorP4uiv_Lazy(uint type, uint* color)
        {
            _glColorP4uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glColorP4uiv");
            _glColorP4uiv_fnptr(type, color);
        }
        
        /// <summary><b>[entry point: <c>glColorPointer</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void*, void> _glColorPointer_fnptr = &glColorPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorPointer_Lazy(int size, uint type, int stride, void* pointer)
        {
            _glColorPointer_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glColorPointer");
            _glColorPointer_fnptr(size, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glColorPointerEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, void*, void> _glColorPointerEXT_fnptr = &glColorPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorPointerEXT_Lazy(int size, uint type, int stride, int count, void* pointer)
        {
            _glColorPointerEXT_fnptr = (delegate* unmanaged<int, uint, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glColorPointerEXT");
            _glColorPointerEXT_fnptr(size, type, stride, count, pointer);
        }
        
        /// <summary><b>[entry point: <c>glColorPointerListIBM</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void**, int, void> _glColorPointerListIBM_fnptr = &glColorPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorPointerListIBM_Lazy(int size, uint type, int stride, void** pointer, int ptrstride)
        {
            _glColorPointerListIBM_fnptr = (delegate* unmanaged<int, uint, int, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glColorPointerListIBM");
            _glColorPointerListIBM_fnptr(size, type, stride, pointer, ptrstride);
        }
        
        /// <summary><b>[entry point: <c>glColorPointervINTEL</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void**, void> _glColorPointervINTEL_fnptr = &glColorPointervINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorPointervINTEL_Lazy(int size, uint type, void** pointer)
        {
            _glColorPointervINTEL_fnptr = (delegate* unmanaged<int, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glColorPointervINTEL");
            _glColorPointervINTEL_fnptr(size, type, pointer);
        }
        
        /// <summary><b>[entry point: <c>glColorSubTable</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, uint, uint, void*, void> _glColorSubTable_fnptr = &glColorSubTable_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorSubTable_Lazy(uint target, int start, int count, uint format, uint type, void* data)
        {
            _glColorSubTable_fnptr = (delegate* unmanaged<uint, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glColorSubTable");
            _glColorSubTable_fnptr(target, start, count, format, type, data);
        }
        
        /// <summary><b>[entry point: <c>glColorSubTableEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, uint, uint, void*, void> _glColorSubTableEXT_fnptr = &glColorSubTableEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorSubTableEXT_Lazy(uint target, int start, int count, uint format, uint type, void* data)
        {
            _glColorSubTableEXT_fnptr = (delegate* unmanaged<uint, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glColorSubTableEXT");
            _glColorSubTableEXT_fnptr(target, start, count, format, type, data);
        }
        
        /// <summary><b>[entry point: <c>glColorTable</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, uint, void*, void> _glColorTable_fnptr = &glColorTable_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorTable_Lazy(uint target, uint internalformat, int width, uint format, uint type, void* table)
        {
            _glColorTable_fnptr = (delegate* unmanaged<uint, uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glColorTable");
            _glColorTable_fnptr(target, internalformat, width, format, type, table);
        }
        
        /// <summary><b>[entry point: <c>glColorTableEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, uint, void*, void> _glColorTableEXT_fnptr = &glColorTableEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorTableEXT_Lazy(uint target, uint internalFormat, int width, uint format, uint type, void* table)
        {
            _glColorTableEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glColorTableEXT");
            _glColorTableEXT_fnptr(target, internalFormat, width, format, type, table);
        }
        
        /// <summary><b>[entry point: <c>glColorTableParameterfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glColorTableParameterfv_fnptr = &glColorTableParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorTableParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _glColorTableParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glColorTableParameterfv");
            _glColorTableParameterfv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glColorTableParameterfvSGI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glColorTableParameterfvSGI_fnptr = &glColorTableParameterfvSGI_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorTableParameterfvSGI_Lazy(uint target, uint pname, float* parameters)
        {
            _glColorTableParameterfvSGI_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glColorTableParameterfvSGI");
            _glColorTableParameterfvSGI_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glColorTableParameteriv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glColorTableParameteriv_fnptr = &glColorTableParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorTableParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _glColorTableParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glColorTableParameteriv");
            _glColorTableParameteriv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glColorTableParameterivSGI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glColorTableParameterivSGI_fnptr = &glColorTableParameterivSGI_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorTableParameterivSGI_Lazy(uint target, uint pname, int* parameters)
        {
            _glColorTableParameterivSGI_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glColorTableParameterivSGI");
            _glColorTableParameterivSGI_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glColorTableSGI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, uint, void*, void> _glColorTableSGI_fnptr = &glColorTableSGI_Lazy;
        [UnmanagedCallersOnly]
        private static void glColorTableSGI_Lazy(uint target, uint internalformat, int width, uint format, uint type, void* table)
        {
            _glColorTableSGI_fnptr = (delegate* unmanaged<uint, uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glColorTableSGI");
            _glColorTableSGI_fnptr(target, internalformat, width, format, type, table);
        }
        
        /// <summary><b>[entry point: <c>glCombinerInputNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, uint, void> _glCombinerInputNV_fnptr = &glCombinerInputNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCombinerInputNV_Lazy(uint stage, uint portion, uint variable, uint input, uint mapping, uint componentUsage)
        {
            _glCombinerInputNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glCombinerInputNV");
            _glCombinerInputNV_fnptr(stage, portion, variable, input, mapping, componentUsage);
        }
        
        /// <summary><b>[entry point: <c>glCombinerOutputNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, byte, byte, byte, void> _glCombinerOutputNV_fnptr = &glCombinerOutputNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCombinerOutputNV_Lazy(uint stage, uint portion, uint abOutput, uint cdOutput, uint sumOutput, uint scale, uint bias, byte abDotProduct, byte cdDotProduct, byte muxSum)
        {
            _glCombinerOutputNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glCombinerOutputNV");
            _glCombinerOutputNV_fnptr(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
        }
        
        /// <summary><b>[entry point: <c>glCombinerParameterfNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glCombinerParameterfNV_fnptr = &glCombinerParameterfNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCombinerParameterfNV_Lazy(uint pname, float param)
        {
            _glCombinerParameterfNV_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glCombinerParameterfNV");
            _glCombinerParameterfNV_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glCombinerParameterfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glCombinerParameterfvNV_fnptr = &glCombinerParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCombinerParameterfvNV_Lazy(uint pname, float* parameters)
        {
            _glCombinerParameterfvNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glCombinerParameterfvNV");
            _glCombinerParameterfvNV_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glCombinerParameteriNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glCombinerParameteriNV_fnptr = &glCombinerParameteriNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCombinerParameteriNV_Lazy(uint pname, int param)
        {
            _glCombinerParameteriNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glCombinerParameteriNV");
            _glCombinerParameteriNV_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glCombinerParameterivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glCombinerParameterivNV_fnptr = &glCombinerParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCombinerParameterivNV_Lazy(uint pname, int* parameters)
        {
            _glCombinerParameterivNV_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCombinerParameterivNV");
            _glCombinerParameterivNV_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glCombinerStageParameterfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glCombinerStageParameterfvNV_fnptr = &glCombinerStageParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCombinerStageParameterfvNV_Lazy(uint stage, uint pname, float* parameters)
        {
            _glCombinerStageParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glCombinerStageParameterfvNV");
            _glCombinerStageParameterfvNV_fnptr(stage, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glCommandListSegmentsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glCommandListSegmentsNV_fnptr = &glCommandListSegmentsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCommandListSegmentsNV_Lazy(uint list, uint segments)
        {
            _glCommandListSegmentsNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glCommandListSegmentsNV");
            _glCommandListSegmentsNV_fnptr(list, segments);
        }
        
        /// <summary><b>[entry point: <c>glCompileCommandListNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glCompileCommandListNV_fnptr = &glCompileCommandListNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompileCommandListNV_Lazy(uint list)
        {
            _glCompileCommandListNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glCompileCommandListNV");
            _glCompileCommandListNV_fnptr(list);
        }
        
        /// <summary><b>[entry point: <c>glCompileShader</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glCompileShader_fnptr = &glCompileShader_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompileShader_Lazy(int shader)
        {
            _glCompileShader_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glCompileShader");
            _glCompileShader_fnptr(shader);
        }
        
        /// <summary><b>[entry point: <c>glCompileShaderARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, void> _glCompileShaderARB_fnptr = &glCompileShaderARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompileShaderARB_Lazy(IntPtr shaderObj)
        {
            _glCompileShaderARB_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glCompileShaderARB");
            _glCompileShaderARB_fnptr(shaderObj);
        }
        
        /// <summary><b>[entry point: <c>glCompileShaderIncludeARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte**, int*, void> _glCompileShaderIncludeARB_fnptr = &glCompileShaderIncludeARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompileShaderIncludeARB_Lazy(int shader, int count, byte** path, int* length)
        {
            _glCompileShaderIncludeARB_fnptr = (delegate* unmanaged<int, int, byte**, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCompileShaderIncludeARB");
            _glCompileShaderIncludeARB_fnptr(shader, count, path, length);
        }
        
        /// <summary><b>[entry point: <c>glCompressedMultiTexImage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, int, int, int, void*, void> _glCompressedMultiTexImage1DEXT_fnptr = &glCompressedMultiTexImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedMultiTexImage1DEXT_Lazy(uint texunit, uint target, int level, uint internalformat, int width, int border, int imageSize, void* bits)
        {
            _glCompressedMultiTexImage1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedMultiTexImage1DEXT");
            _glCompressedMultiTexImage1DEXT_fnptr(texunit, target, level, internalformat, width, border, imageSize, bits);
        }
        
        /// <summary><b>[entry point: <c>glCompressedMultiTexImage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, int, int, int, int, void*, void> _glCompressedMultiTexImage2DEXT_fnptr = &glCompressedMultiTexImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedMultiTexImage2DEXT_Lazy(uint texunit, uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* bits)
        {
            _glCompressedMultiTexImage2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedMultiTexImage2DEXT");
            _glCompressedMultiTexImage2DEXT_fnptr(texunit, target, level, internalformat, width, height, border, imageSize, bits);
        }
        
        /// <summary><b>[entry point: <c>glCompressedMultiTexImage3DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, int, int, int, int, int, void*, void> _glCompressedMultiTexImage3DEXT_fnptr = &glCompressedMultiTexImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedMultiTexImage3DEXT_Lazy(uint texunit, uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* bits)
        {
            _glCompressedMultiTexImage3DEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, int, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedMultiTexImage3DEXT");
            _glCompressedMultiTexImage3DEXT_fnptr(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
        }
        
        /// <summary><b>[entry point: <c>glCompressedMultiTexSubImage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, uint, int, void*, void> _glCompressedMultiTexSubImage1DEXT_fnptr = &glCompressedMultiTexSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedMultiTexSubImage1DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int width, uint format, int imageSize, void* bits)
        {
            _glCompressedMultiTexSubImage1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedMultiTexSubImage1DEXT");
            _glCompressedMultiTexSubImage1DEXT_fnptr(texunit, target, level, xoffset, width, format, imageSize, bits);
        }
        
        /// <summary><b>[entry point: <c>glCompressedMultiTexSubImage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, int, uint, int, void*, void> _glCompressedMultiTexSubImage2DEXT_fnptr = &glCompressedMultiTexSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedMultiTexSubImage2DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* bits)
        {
            _glCompressedMultiTexSubImage2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedMultiTexSubImage2DEXT");
            _glCompressedMultiTexSubImage2DEXT_fnptr(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
        }
        
        /// <summary><b>[entry point: <c>glCompressedMultiTexSubImage3DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, uint, int, void*, void> _glCompressedMultiTexSubImage3DEXT_fnptr = &glCompressedMultiTexSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedMultiTexSubImage3DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* bits)
        {
            _glCompressedMultiTexSubImage3DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedMultiTexSubImage3DEXT");
            _glCompressedMultiTexSubImage3DEXT_fnptr(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTexImage1D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, void*, void> _glCompressedTexImage1D_fnptr = &glCompressedTexImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTexImage1D_Lazy(uint target, int level, uint internalformat, int width, int border, int imageSize, void* data)
        {
            _glCompressedTexImage1D_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexImage1D");
            _glCompressedTexImage1D_fnptr(target, level, internalformat, width, border, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTexImage1DARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, void*, void> _glCompressedTexImage1DARB_fnptr = &glCompressedTexImage1DARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTexImage1DARB_Lazy(uint target, int level, uint internalformat, int width, int border, int imageSize, void* data)
        {
            _glCompressedTexImage1DARB_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexImage1DARB");
            _glCompressedTexImage1DARB_fnptr(target, level, internalformat, width, border, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTexImage2D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, int, void*, void> _glCompressedTexImage2D_fnptr = &glCompressedTexImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTexImage2D_Lazy(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* data)
        {
            _glCompressedTexImage2D_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexImage2D");
            _glCompressedTexImage2D_fnptr(target, level, internalformat, width, height, border, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTexImage2DARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, int, void*, void> _glCompressedTexImage2DARB_fnptr = &glCompressedTexImage2DARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTexImage2DARB_Lazy(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* data)
        {
            _glCompressedTexImage2DARB_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexImage2DARB");
            _glCompressedTexImage2DARB_fnptr(target, level, internalformat, width, height, border, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTexImage3D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, int, int, void*, void> _glCompressedTexImage3D_fnptr = &glCompressedTexImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTexImage3D_Lazy(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data)
        {
            _glCompressedTexImage3D_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexImage3D");
            _glCompressedTexImage3D_fnptr(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTexImage3DARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, int, int, void*, void> _glCompressedTexImage3DARB_fnptr = &glCompressedTexImage3DARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTexImage3DARB_Lazy(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data)
        {
            _glCompressedTexImage3DARB_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexImage3DARB");
            _glCompressedTexImage3DARB_fnptr(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTexImage3DOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, int, int, void*, void> _glCompressedTexImage3DOES_fnptr = &glCompressedTexImage3DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTexImage3DOES_Lazy(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data)
        {
            _glCompressedTexImage3DOES_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexImage3DOES");
            _glCompressedTexImage3DOES_fnptr(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTexSubImage1D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, uint, int, void*, void> _glCompressedTexSubImage1D_fnptr = &glCompressedTexSubImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTexSubImage1D_Lazy(uint target, int level, int xoffset, int width, uint format, int imageSize, void* data)
        {
            _glCompressedTexSubImage1D_fnptr = (delegate* unmanaged<uint, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexSubImage1D");
            _glCompressedTexSubImage1D_fnptr(target, level, xoffset, width, format, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTexSubImage1DARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, uint, int, void*, void> _glCompressedTexSubImage1DARB_fnptr = &glCompressedTexSubImage1DARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTexSubImage1DARB_Lazy(uint target, int level, int xoffset, int width, uint format, int imageSize, void* data)
        {
            _glCompressedTexSubImage1DARB_fnptr = (delegate* unmanaged<uint, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexSubImage1DARB");
            _glCompressedTexSubImage1DARB_fnptr(target, level, xoffset, width, format, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTexSubImage2D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, uint, int, void*, void> _glCompressedTexSubImage2D_fnptr = &glCompressedTexSubImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTexSubImage2D_Lazy(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data)
        {
            _glCompressedTexSubImage2D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexSubImage2D");
            _glCompressedTexSubImage2D_fnptr(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTexSubImage2DARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, uint, int, void*, void> _glCompressedTexSubImage2DARB_fnptr = &glCompressedTexSubImage2DARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTexSubImage2DARB_Lazy(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data)
        {
            _glCompressedTexSubImage2DARB_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexSubImage2DARB");
            _glCompressedTexSubImage2DARB_fnptr(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTexSubImage3D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, int, void*, void> _glCompressedTexSubImage3D_fnptr = &glCompressedTexSubImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTexSubImage3D_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data)
        {
            _glCompressedTexSubImage3D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexSubImage3D");
            _glCompressedTexSubImage3D_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTexSubImage3DARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, int, void*, void> _glCompressedTexSubImage3DARB_fnptr = &glCompressedTexSubImage3DARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTexSubImage3DARB_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data)
        {
            _glCompressedTexSubImage3DARB_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexSubImage3DARB");
            _glCompressedTexSubImage3DARB_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTexSubImage3DOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, int, void*, void> _glCompressedTexSubImage3DOES_fnptr = &glCompressedTexSubImage3DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTexSubImage3DOES_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data)
        {
            _glCompressedTexSubImage3DOES_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexSubImage3DOES");
            _glCompressedTexSubImage3DOES_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTextureImage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, int, int, int, void*, void> _glCompressedTextureImage1DEXT_fnptr = &glCompressedTextureImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTextureImage1DEXT_Lazy(int texture, uint target, int level, uint internalformat, int width, int border, int imageSize, void* bits)
        {
            _glCompressedTextureImage1DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureImage1DEXT");
            _glCompressedTextureImage1DEXT_fnptr(texture, target, level, internalformat, width, border, imageSize, bits);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTextureImage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, int, int, int, int, void*, void> _glCompressedTextureImage2DEXT_fnptr = &glCompressedTextureImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTextureImage2DEXT_Lazy(int texture, uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* bits)
        {
            _glCompressedTextureImage2DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureImage2DEXT");
            _glCompressedTextureImage2DEXT_fnptr(texture, target, level, internalformat, width, height, border, imageSize, bits);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTextureImage3DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, int, int, int, int, int, void*, void> _glCompressedTextureImage3DEXT_fnptr = &glCompressedTextureImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTextureImage3DEXT_Lazy(int texture, uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* bits)
        {
            _glCompressedTextureImage3DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureImage3DEXT");
            _glCompressedTextureImage3DEXT_fnptr(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTextureSubImage1D</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, uint, int, void*, void> _glCompressedTextureSubImage1D_fnptr = &glCompressedTextureSubImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTextureSubImage1D_Lazy(int texture, int level, int xoffset, int width, uint format, int imageSize, void* data)
        {
            _glCompressedTextureSubImage1D_fnptr = (delegate* unmanaged<int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureSubImage1D");
            _glCompressedTextureSubImage1D_fnptr(texture, level, xoffset, width, format, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTextureSubImage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, uint, int, void*, void> _glCompressedTextureSubImage1DEXT_fnptr = &glCompressedTextureSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTextureSubImage1DEXT_Lazy(int texture, uint target, int level, int xoffset, int width, uint format, int imageSize, void* bits)
        {
            _glCompressedTextureSubImage1DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureSubImage1DEXT");
            _glCompressedTextureSubImage1DEXT_fnptr(texture, target, level, xoffset, width, format, imageSize, bits);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTextureSubImage2D</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, uint, int, void*, void> _glCompressedTextureSubImage2D_fnptr = &glCompressedTextureSubImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTextureSubImage2D_Lazy(int texture, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data)
        {
            _glCompressedTextureSubImage2D_fnptr = (delegate* unmanaged<int, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureSubImage2D");
            _glCompressedTextureSubImage2D_fnptr(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTextureSubImage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, int, int, uint, int, void*, void> _glCompressedTextureSubImage2DEXT_fnptr = &glCompressedTextureSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTextureSubImage2DEXT_Lazy(int texture, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* bits)
        {
            _glCompressedTextureSubImage2DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureSubImage2DEXT");
            _glCompressedTextureSubImage2DEXT_fnptr(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTextureSubImage3D</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, int, void*, void> _glCompressedTextureSubImage3D_fnptr = &glCompressedTextureSubImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTextureSubImage3D_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data)
        {
            _glCompressedTextureSubImage3D_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureSubImage3D");
            _glCompressedTextureSubImage3D_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        
        /// <summary><b>[entry point: <c>glCompressedTextureSubImage3DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, int, int, int, int, uint, int, void*, void> _glCompressedTextureSubImage3DEXT_fnptr = &glCompressedTextureSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCompressedTextureSubImage3DEXT_Lazy(int texture, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* bits)
        {
            _glCompressedTextureSubImage3DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureSubImage3DEXT");
            _glCompressedTextureSubImage3DEXT_fnptr(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
        }
        
        /// <summary><b>[entry point: <c>glConservativeRasterParameterfNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glConservativeRasterParameterfNV_fnptr = &glConservativeRasterParameterfNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glConservativeRasterParameterfNV_Lazy(uint pname, float value)
        {
            _glConservativeRasterParameterfNV_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glConservativeRasterParameterfNV");
            _glConservativeRasterParameterfNV_fnptr(pname, value);
        }
        
        /// <summary><b>[entry point: <c>glConservativeRasterParameteriNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glConservativeRasterParameteriNV_fnptr = &glConservativeRasterParameteriNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glConservativeRasterParameteriNV_Lazy(uint pname, int param)
        {
            _glConservativeRasterParameteriNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glConservativeRasterParameteriNV");
            _glConservativeRasterParameteriNV_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glConvolutionFilter1D</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, uint, void*, void> _glConvolutionFilter1D_fnptr = &glConvolutionFilter1D_Lazy;
        [UnmanagedCallersOnly]
        private static void glConvolutionFilter1D_Lazy(uint target, uint internalformat, int width, uint format, uint type, void* image)
        {
            _glConvolutionFilter1D_fnptr = (delegate* unmanaged<uint, uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionFilter1D");
            _glConvolutionFilter1D_fnptr(target, internalformat, width, format, type, image);
        }
        
        /// <summary><b>[entry point: <c>glConvolutionFilter1DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, uint, void*, void> _glConvolutionFilter1DEXT_fnptr = &glConvolutionFilter1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glConvolutionFilter1DEXT_Lazy(uint target, uint internalformat, int width, uint format, uint type, void* image)
        {
            _glConvolutionFilter1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionFilter1DEXT");
            _glConvolutionFilter1DEXT_fnptr(target, internalformat, width, format, type, image);
        }
        
        /// <summary><b>[entry point: <c>glConvolutionFilter2D</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void> _glConvolutionFilter2D_fnptr = &glConvolutionFilter2D_Lazy;
        [UnmanagedCallersOnly]
        private static void glConvolutionFilter2D_Lazy(uint target, uint internalformat, int width, int height, uint format, uint type, void* image)
        {
            _glConvolutionFilter2D_fnptr = (delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionFilter2D");
            _glConvolutionFilter2D_fnptr(target, internalformat, width, height, format, type, image);
        }
        
        /// <summary><b>[entry point: <c>glConvolutionFilter2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void> _glConvolutionFilter2DEXT_fnptr = &glConvolutionFilter2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glConvolutionFilter2DEXT_Lazy(uint target, uint internalformat, int width, int height, uint format, uint type, void* image)
        {
            _glConvolutionFilter2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionFilter2DEXT");
            _glConvolutionFilter2DEXT_fnptr(target, internalformat, width, height, format, type, image);
        }
        
        /// <summary><b>[entry point: <c>glConvolutionParameterf</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, void> _glConvolutionParameterf_fnptr = &glConvolutionParameterf_Lazy;
        [UnmanagedCallersOnly]
        private static void glConvolutionParameterf_Lazy(uint target, uint pname, float parameters)
        {
            _glConvolutionParameterf_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameterf");
            _glConvolutionParameterf_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glConvolutionParameterfEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, void> _glConvolutionParameterfEXT_fnptr = &glConvolutionParameterfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glConvolutionParameterfEXT_Lazy(uint target, uint pname, float parameters)
        {
            _glConvolutionParameterfEXT_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameterfEXT");
            _glConvolutionParameterfEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glConvolutionParameterfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glConvolutionParameterfv_fnptr = &glConvolutionParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glConvolutionParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _glConvolutionParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameterfv");
            _glConvolutionParameterfv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glConvolutionParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glConvolutionParameterfvEXT_fnptr = &glConvolutionParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glConvolutionParameterfvEXT_Lazy(uint target, uint pname, float* parameters)
        {
            _glConvolutionParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameterfvEXT");
            _glConvolutionParameterfvEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glConvolutionParameteri</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glConvolutionParameteri_fnptr = &glConvolutionParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void glConvolutionParameteri_Lazy(uint target, uint pname, int parameters)
        {
            _glConvolutionParameteri_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameteri");
            _glConvolutionParameteri_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glConvolutionParameteriEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glConvolutionParameteriEXT_fnptr = &glConvolutionParameteriEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glConvolutionParameteriEXT_Lazy(uint target, uint pname, int parameters)
        {
            _glConvolutionParameteriEXT_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameteriEXT");
            _glConvolutionParameteriEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glConvolutionParameteriv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glConvolutionParameteriv_fnptr = &glConvolutionParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glConvolutionParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _glConvolutionParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameteriv");
            _glConvolutionParameteriv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glConvolutionParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glConvolutionParameterivEXT_fnptr = &glConvolutionParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glConvolutionParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _glConvolutionParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameterivEXT");
            _glConvolutionParameterivEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glConvolutionParameterxOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glConvolutionParameterxOES_fnptr = &glConvolutionParameterxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glConvolutionParameterxOES_Lazy(uint target, uint pname, int param)
        {
            _glConvolutionParameterxOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameterxOES");
            _glConvolutionParameterxOES_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glConvolutionParameterxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glConvolutionParameterxvOES_fnptr = &glConvolutionParameterxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glConvolutionParameterxvOES_Lazy(uint target, uint pname, int* parameters)
        {
            _glConvolutionParameterxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameterxvOES");
            _glConvolutionParameterxvOES_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glCopyBufferSubData</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, IntPtr, IntPtr, nint, void> _glCopyBufferSubData_fnptr = &glCopyBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyBufferSubData_Lazy(uint readTarget, uint writeTarget, IntPtr readOffset, IntPtr writeOffset, nint size)
        {
            _glCopyBufferSubData_fnptr = (delegate* unmanaged<uint, uint, IntPtr, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glCopyBufferSubData");
            _glCopyBufferSubData_fnptr(readTarget, writeTarget, readOffset, writeOffset, size);
        }
        
        /// <summary><b>[entry point: <c>glCopyBufferSubDataNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, IntPtr, IntPtr, nint, void> _glCopyBufferSubDataNV_fnptr = &glCopyBufferSubDataNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyBufferSubDataNV_Lazy(uint readTarget, uint writeTarget, IntPtr readOffset, IntPtr writeOffset, nint size)
        {
            _glCopyBufferSubDataNV_fnptr = (delegate* unmanaged<uint, uint, IntPtr, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glCopyBufferSubDataNV");
            _glCopyBufferSubDataNV_fnptr(readTarget, writeTarget, readOffset, writeOffset, size);
        }
        
        /// <summary><b>[entry point: <c>glCopyColorSubTable</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, void> _glCopyColorSubTable_fnptr = &glCopyColorSubTable_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyColorSubTable_Lazy(uint target, int start, int x, int y, int width)
        {
            _glCopyColorSubTable_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyColorSubTable");
            _glCopyColorSubTable_fnptr(target, start, x, y, width);
        }
        
        /// <summary><b>[entry point: <c>glCopyColorSubTableEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, void> _glCopyColorSubTableEXT_fnptr = &glCopyColorSubTableEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyColorSubTableEXT_Lazy(uint target, int start, int x, int y, int width)
        {
            _glCopyColorSubTableEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyColorSubTableEXT");
            _glCopyColorSubTableEXT_fnptr(target, start, x, y, width);
        }
        
        /// <summary><b>[entry point: <c>glCopyColorTable</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, void> _glCopyColorTable_fnptr = &glCopyColorTable_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyColorTable_Lazy(uint target, uint internalformat, int x, int y, int width)
        {
            _glCopyColorTable_fnptr = (delegate* unmanaged<uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyColorTable");
            _glCopyColorTable_fnptr(target, internalformat, x, y, width);
        }
        
        /// <summary><b>[entry point: <c>glCopyColorTableSGI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, void> _glCopyColorTableSGI_fnptr = &glCopyColorTableSGI_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyColorTableSGI_Lazy(uint target, uint internalformat, int x, int y, int width)
        {
            _glCopyColorTableSGI_fnptr = (delegate* unmanaged<uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyColorTableSGI");
            _glCopyColorTableSGI_fnptr(target, internalformat, x, y, width);
        }
        
        /// <summary><b>[entry point: <c>glCopyConvolutionFilter1D</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, void> _glCopyConvolutionFilter1D_fnptr = &glCopyConvolutionFilter1D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyConvolutionFilter1D_Lazy(uint target, uint internalformat, int x, int y, int width)
        {
            _glCopyConvolutionFilter1D_fnptr = (delegate* unmanaged<uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyConvolutionFilter1D");
            _glCopyConvolutionFilter1D_fnptr(target, internalformat, x, y, width);
        }
        
        /// <summary><b>[entry point: <c>glCopyConvolutionFilter1DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, void> _glCopyConvolutionFilter1DEXT_fnptr = &glCopyConvolutionFilter1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyConvolutionFilter1DEXT_Lazy(uint target, uint internalformat, int x, int y, int width)
        {
            _glCopyConvolutionFilter1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyConvolutionFilter1DEXT");
            _glCopyConvolutionFilter1DEXT_fnptr(target, internalformat, x, y, width);
        }
        
        /// <summary><b>[entry point: <c>glCopyConvolutionFilter2D</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, void> _glCopyConvolutionFilter2D_fnptr = &glCopyConvolutionFilter2D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyConvolutionFilter2D_Lazy(uint target, uint internalformat, int x, int y, int width, int height)
        {
            _glCopyConvolutionFilter2D_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyConvolutionFilter2D");
            _glCopyConvolutionFilter2D_fnptr(target, internalformat, x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glCopyConvolutionFilter2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, void> _glCopyConvolutionFilter2DEXT_fnptr = &glCopyConvolutionFilter2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyConvolutionFilter2DEXT_Lazy(uint target, uint internalformat, int x, int y, int width, int height)
        {
            _glCopyConvolutionFilter2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyConvolutionFilter2DEXT");
            _glCopyConvolutionFilter2DEXT_fnptr(target, internalformat, x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glCopyImageSubData</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void> _glCopyImageSubData_fnptr = &glCopyImageSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyImageSubData_Lazy(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            _glCopyImageSubData_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyImageSubData");
            _glCopyImageSubData_fnptr(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        /// <summary><b>[entry point: <c>glCopyImageSubDataEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void> _glCopyImageSubDataEXT_fnptr = &glCopyImageSubDataEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyImageSubDataEXT_Lazy(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            _glCopyImageSubDataEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyImageSubDataEXT");
            _glCopyImageSubDataEXT_fnptr(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        /// <summary><b>[entry point: <c>glCopyImageSubDataNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void> _glCopyImageSubDataNV_fnptr = &glCopyImageSubDataNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyImageSubDataNV_Lazy(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)
        {
            _glCopyImageSubDataNV_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyImageSubDataNV");
            _glCopyImageSubDataNV_fnptr(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        }
        
        /// <summary><b>[entry point: <c>glCopyImageSubDataOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void> _glCopyImageSubDataOES_fnptr = &glCopyImageSubDataOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyImageSubDataOES_Lazy(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            _glCopyImageSubDataOES_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyImageSubDataOES");
            _glCopyImageSubDataOES_fnptr(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        /// <summary><b>[entry point: <c>glCopyMultiTexImage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, int, int, int, int, void> _glCopyMultiTexImage1DEXT_fnptr = &glCopyMultiTexImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyMultiTexImage1DEXT_Lazy(uint texunit, uint target, int level, uint internalformat, int x, int y, int width, int border)
        {
            _glCopyMultiTexImage1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyMultiTexImage1DEXT");
            _glCopyMultiTexImage1DEXT_fnptr(texunit, target, level, internalformat, x, y, width, border);
        }
        
        /// <summary><b>[entry point: <c>glCopyMultiTexImage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, int, int, int, int, int, void> _glCopyMultiTexImage2DEXT_fnptr = &glCopyMultiTexImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyMultiTexImage2DEXT_Lazy(uint texunit, uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
        {
            _glCopyMultiTexImage2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyMultiTexImage2DEXT");
            _glCopyMultiTexImage2DEXT_fnptr(texunit, target, level, internalformat, x, y, width, height, border);
        }
        
        /// <summary><b>[entry point: <c>glCopyMultiTexSubImage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, int, void> _glCopyMultiTexSubImage1DEXT_fnptr = &glCopyMultiTexSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyMultiTexSubImage1DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int x, int y, int width)
        {
            _glCopyMultiTexSubImage1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyMultiTexSubImage1DEXT");
            _glCopyMultiTexSubImage1DEXT_fnptr(texunit, target, level, xoffset, x, y, width);
        }
        
        /// <summary><b>[entry point: <c>glCopyMultiTexSubImage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, void> _glCopyMultiTexSubImage2DEXT_fnptr = &glCopyMultiTexSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyMultiTexSubImage2DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _glCopyMultiTexSubImage2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyMultiTexSubImage2DEXT");
            _glCopyMultiTexSubImage2DEXT_fnptr(texunit, target, level, xoffset, yoffset, x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glCopyMultiTexSubImage3DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, void> _glCopyMultiTexSubImage3DEXT_fnptr = &glCopyMultiTexSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyMultiTexSubImage3DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _glCopyMultiTexSubImage3DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyMultiTexSubImage3DEXT");
            _glCopyMultiTexSubImage3DEXT_fnptr(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glCopyNamedBufferSubData</c>]</b></summary>
        public static delegate* unmanaged<int, int, IntPtr, IntPtr, nint, void> _glCopyNamedBufferSubData_fnptr = &glCopyNamedBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyNamedBufferSubData_Lazy(int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size)
        {
            _glCopyNamedBufferSubData_fnptr = (delegate* unmanaged<int, int, IntPtr, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glCopyNamedBufferSubData");
            _glCopyNamedBufferSubData_fnptr(readBuffer, writeBuffer, readOffset, writeOffset, size);
        }
        
        /// <summary><b>[entry point: <c>glCopyPathNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glCopyPathNV_fnptr = &glCopyPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyPathNV_Lazy(uint resultPath, uint srcPath)
        {
            _glCopyPathNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glCopyPathNV");
            _glCopyPathNV_fnptr(resultPath, srcPath);
        }
        
        /// <summary><b>[entry point: <c>glCopyPixels</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, uint, void> _glCopyPixels_fnptr = &glCopyPixels_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyPixels_Lazy(int x, int y, int width, int height, uint type)
        {
            _glCopyPixels_fnptr = (delegate* unmanaged<int, int, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glCopyPixels");
            _glCopyPixels_fnptr(x, y, width, height, type);
        }
        
        /// <summary><b>[entry point: <c>glCopyTexImage1D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, int, void> _glCopyTexImage1D_fnptr = &glCopyTexImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTexImage1D_Lazy(uint target, int level, uint internalformat, int x, int y, int width, int border)
        {
            _glCopyTexImage1D_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexImage1D");
            _glCopyTexImage1D_fnptr(target, level, internalformat, x, y, width, border);
        }
        
        /// <summary><b>[entry point: <c>glCopyTexImage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, int, void> _glCopyTexImage1DEXT_fnptr = &glCopyTexImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTexImage1DEXT_Lazy(uint target, int level, uint internalformat, int x, int y, int width, int border)
        {
            _glCopyTexImage1DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexImage1DEXT");
            _glCopyTexImage1DEXT_fnptr(target, level, internalformat, x, y, width, border);
        }
        
        /// <summary><b>[entry point: <c>glCopyTexImage2D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, int, int, void> _glCopyTexImage2D_fnptr = &glCopyTexImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTexImage2D_Lazy(uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
        {
            _glCopyTexImage2D_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexImage2D");
            _glCopyTexImage2D_fnptr(target, level, internalformat, x, y, width, height, border);
        }
        
        /// <summary><b>[entry point: <c>glCopyTexImage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, int, int, void> _glCopyTexImage2DEXT_fnptr = &glCopyTexImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTexImage2DEXT_Lazy(uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
        {
            _glCopyTexImage2DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexImage2DEXT");
            _glCopyTexImage2DEXT_fnptr(target, level, internalformat, x, y, width, height, border);
        }
        
        /// <summary><b>[entry point: <c>glCopyTexSubImage1D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, void> _glCopyTexSubImage1D_fnptr = &glCopyTexSubImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTexSubImage1D_Lazy(uint target, int level, int xoffset, int x, int y, int width)
        {
            _glCopyTexSubImage1D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexSubImage1D");
            _glCopyTexSubImage1D_fnptr(target, level, xoffset, x, y, width);
        }
        
        /// <summary><b>[entry point: <c>glCopyTexSubImage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, void> _glCopyTexSubImage1DEXT_fnptr = &glCopyTexSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTexSubImage1DEXT_Lazy(uint target, int level, int xoffset, int x, int y, int width)
        {
            _glCopyTexSubImage1DEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexSubImage1DEXT");
            _glCopyTexSubImage1DEXT_fnptr(target, level, xoffset, x, y, width);
        }
        
        /// <summary><b>[entry point: <c>glCopyTexSubImage2D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, void> _glCopyTexSubImage2D_fnptr = &glCopyTexSubImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTexSubImage2D_Lazy(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _glCopyTexSubImage2D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexSubImage2D");
            _glCopyTexSubImage2D_fnptr(target, level, xoffset, yoffset, x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glCopyTexSubImage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, void> _glCopyTexSubImage2DEXT_fnptr = &glCopyTexSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTexSubImage2DEXT_Lazy(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _glCopyTexSubImage2DEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexSubImage2DEXT");
            _glCopyTexSubImage2DEXT_fnptr(target, level, xoffset, yoffset, x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glCopyTexSubImage3D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void> _glCopyTexSubImage3D_fnptr = &glCopyTexSubImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTexSubImage3D_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _glCopyTexSubImage3D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexSubImage3D");
            _glCopyTexSubImage3D_fnptr(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glCopyTexSubImage3DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void> _glCopyTexSubImage3DEXT_fnptr = &glCopyTexSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTexSubImage3DEXT_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _glCopyTexSubImage3DEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexSubImage3DEXT");
            _glCopyTexSubImage3DEXT_fnptr(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glCopyTexSubImage3DOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void> _glCopyTexSubImage3DOES_fnptr = &glCopyTexSubImage3DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTexSubImage3DOES_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _glCopyTexSubImage3DOES_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexSubImage3DOES");
            _glCopyTexSubImage3DOES_fnptr(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glCopyTextureImage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, int, int, int, int, void> _glCopyTextureImage1DEXT_fnptr = &glCopyTextureImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTextureImage1DEXT_Lazy(int texture, uint target, int level, uint internalformat, int x, int y, int width, int border)
        {
            _glCopyTextureImage1DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureImage1DEXT");
            _glCopyTextureImage1DEXT_fnptr(texture, target, level, internalformat, x, y, width, border);
        }
        
        /// <summary><b>[entry point: <c>glCopyTextureImage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, int, int, int, int, int, void> _glCopyTextureImage2DEXT_fnptr = &glCopyTextureImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTextureImage2DEXT_Lazy(int texture, uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
        {
            _glCopyTextureImage2DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureImage2DEXT");
            _glCopyTextureImage2DEXT_fnptr(texture, target, level, internalformat, x, y, width, height, border);
        }
        
        /// <summary><b>[entry point: <c>glCopyTextureLevelsAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, void> _glCopyTextureLevelsAPPLE_fnptr = &glCopyTextureLevelsAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTextureLevelsAPPLE_Lazy(uint destinationTexture, uint sourceTexture, int sourceBaseLevel, int sourceLevelCount)
        {
            _glCopyTextureLevelsAPPLE_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureLevelsAPPLE");
            _glCopyTextureLevelsAPPLE_fnptr(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
        }
        
        /// <summary><b>[entry point: <c>glCopyTextureSubImage1D</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, void> _glCopyTextureSubImage1D_fnptr = &glCopyTextureSubImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTextureSubImage1D_Lazy(int texture, int level, int xoffset, int x, int y, int width)
        {
            _glCopyTextureSubImage1D_fnptr = (delegate* unmanaged<int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureSubImage1D");
            _glCopyTextureSubImage1D_fnptr(texture, level, xoffset, x, y, width);
        }
        
        /// <summary><b>[entry point: <c>glCopyTextureSubImage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, int, int, void> _glCopyTextureSubImage1DEXT_fnptr = &glCopyTextureSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTextureSubImage1DEXT_Lazy(int texture, uint target, int level, int xoffset, int x, int y, int width)
        {
            _glCopyTextureSubImage1DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureSubImage1DEXT");
            _glCopyTextureSubImage1DEXT_fnptr(texture, target, level, xoffset, x, y, width);
        }
        
        /// <summary><b>[entry point: <c>glCopyTextureSubImage2D</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, void> _glCopyTextureSubImage2D_fnptr = &glCopyTextureSubImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTextureSubImage2D_Lazy(int texture, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _glCopyTextureSubImage2D_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureSubImage2D");
            _glCopyTextureSubImage2D_fnptr(texture, level, xoffset, yoffset, x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glCopyTextureSubImage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, int, int, int, int, void> _glCopyTextureSubImage2DEXT_fnptr = &glCopyTextureSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTextureSubImage2DEXT_Lazy(int texture, uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _glCopyTextureSubImage2DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureSubImage2DEXT");
            _glCopyTextureSubImage2DEXT_fnptr(texture, target, level, xoffset, yoffset, x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glCopyTextureSubImage3D</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, int, void> _glCopyTextureSubImage3D_fnptr = &glCopyTextureSubImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTextureSubImage3D_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _glCopyTextureSubImage3D_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureSubImage3D");
            _glCopyTextureSubImage3D_fnptr(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glCopyTextureSubImage3DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, int, int, int, int, int, void> _glCopyTextureSubImage3DEXT_fnptr = &glCopyTextureSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCopyTextureSubImage3DEXT_Lazy(int texture, uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _glCopyTextureSubImage3DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureSubImage3DEXT");
            _glCopyTextureSubImage3DEXT_fnptr(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glCoverageMaskNV</c>]</b></summary>
        public static delegate* unmanaged<byte, void> _glCoverageMaskNV_fnptr = &glCoverageMaskNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCoverageMaskNV_Lazy(byte mask)
        {
            _glCoverageMaskNV_fnptr = (delegate* unmanaged<byte, void>)GLLoader.BindingsContext.GetProcAddress("glCoverageMaskNV");
            _glCoverageMaskNV_fnptr(mask);
        }
        
        /// <summary><b>[entry point: <c>glCoverageModulationNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glCoverageModulationNV_fnptr = &glCoverageModulationNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCoverageModulationNV_Lazy(uint components)
        {
            _glCoverageModulationNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glCoverageModulationNV");
            _glCoverageModulationNV_fnptr(components);
        }
        
        /// <summary><b>[entry point: <c>glCoverageModulationTableNV</c>]</b></summary>
        public static delegate* unmanaged<int, float*, void> _glCoverageModulationTableNV_fnptr = &glCoverageModulationTableNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCoverageModulationTableNV_Lazy(int n, float* v)
        {
            _glCoverageModulationTableNV_fnptr = (delegate* unmanaged<int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glCoverageModulationTableNV");
            _glCoverageModulationTableNV_fnptr(n, v);
        }
        
        /// <summary><b>[entry point: <c>glCoverageOperationNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glCoverageOperationNV_fnptr = &glCoverageOperationNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCoverageOperationNV_Lazy(uint operation)
        {
            _glCoverageOperationNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glCoverageOperationNV");
            _glCoverageOperationNV_fnptr(operation);
        }
        
        /// <summary><b>[entry point: <c>glCoverFillPathInstancedNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void*, uint, uint, uint, float*, void> _glCoverFillPathInstancedNV_fnptr = &glCoverFillPathInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCoverFillPathInstancedNV_Lazy(int numPaths, uint pathNameType, void* paths, uint pathBase, uint coverMode, uint transformType, float* transformValues)
        {
            _glCoverFillPathInstancedNV_fnptr = (delegate* unmanaged<int, uint, void*, uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glCoverFillPathInstancedNV");
            _glCoverFillPathInstancedNV_fnptr(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
        }
        
        /// <summary><b>[entry point: <c>glCoverFillPathNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glCoverFillPathNV_fnptr = &glCoverFillPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCoverFillPathNV_Lazy(uint path, uint coverMode)
        {
            _glCoverFillPathNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glCoverFillPathNV");
            _glCoverFillPathNV_fnptr(path, coverMode);
        }
        
        /// <summary><b>[entry point: <c>glCoverStrokePathInstancedNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void*, uint, uint, uint, float*, void> _glCoverStrokePathInstancedNV_fnptr = &glCoverStrokePathInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCoverStrokePathInstancedNV_Lazy(int numPaths, uint pathNameType, void* paths, uint pathBase, uint coverMode, uint transformType, float* transformValues)
        {
            _glCoverStrokePathInstancedNV_fnptr = (delegate* unmanaged<int, uint, void*, uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glCoverStrokePathInstancedNV");
            _glCoverStrokePathInstancedNV_fnptr(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
        }
        
        /// <summary><b>[entry point: <c>glCoverStrokePathNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glCoverStrokePathNV_fnptr = &glCoverStrokePathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCoverStrokePathNV_Lazy(uint path, uint coverMode)
        {
            _glCoverStrokePathNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glCoverStrokePathNV");
            _glCoverStrokePathNV_fnptr(path, coverMode);
        }
        
        /// <summary><b>[entry point: <c>glCreateBuffers</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glCreateBuffers_fnptr = &glCreateBuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void glCreateBuffers_Lazy(int n, int* buffers)
        {
            _glCreateBuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateBuffers");
            _glCreateBuffers_fnptr(n, buffers);
        }
        
        /// <summary><b>[entry point: <c>glCreateCommandListsNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glCreateCommandListsNV_fnptr = &glCreateCommandListsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCreateCommandListsNV_Lazy(int n, uint* lists)
        {
            _glCreateCommandListsNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateCommandListsNV");
            _glCreateCommandListsNV_fnptr(n, lists);
        }
        
        /// <summary><b>[entry point: <c>glCreateFramebuffers</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glCreateFramebuffers_fnptr = &glCreateFramebuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void glCreateFramebuffers_Lazy(int n, int* framebuffers)
        {
            _glCreateFramebuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateFramebuffers");
            _glCreateFramebuffers_fnptr(n, framebuffers);
        }
        
        /// <summary><b>[entry point: <c>glCreateMemoryObjectsEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glCreateMemoryObjectsEXT_fnptr = &glCreateMemoryObjectsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCreateMemoryObjectsEXT_Lazy(int n, uint* memoryObjects)
        {
            _glCreateMemoryObjectsEXT_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateMemoryObjectsEXT");
            _glCreateMemoryObjectsEXT_fnptr(n, memoryObjects);
        }
        
        /// <summary><b>[entry point: <c>glCreatePerfQueryINTEL</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glCreatePerfQueryINTEL_fnptr = &glCreatePerfQueryINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glCreatePerfQueryINTEL_Lazy(uint queryId, int* queryHandle)
        {
            _glCreatePerfQueryINTEL_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreatePerfQueryINTEL");
            _glCreatePerfQueryINTEL_fnptr(queryId, queryHandle);
        }
        
        /// <summary><b>[entry point: <c>glCreateProgram</c>]</b></summary>
        public static delegate* unmanaged<int> _glCreateProgram_fnptr = &glCreateProgram_Lazy;
        [UnmanagedCallersOnly]
        private static int glCreateProgram_Lazy()
        {
            _glCreateProgram_fnptr = (delegate* unmanaged<int>)GLLoader.BindingsContext.GetProcAddress("glCreateProgram");
            return _glCreateProgram_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glCreateProgramObjectARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr> _glCreateProgramObjectARB_fnptr = &glCreateProgramObjectARB_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr glCreateProgramObjectARB_Lazy()
        {
            _glCreateProgramObjectARB_fnptr = (delegate* unmanaged<IntPtr>)GLLoader.BindingsContext.GetProcAddress("glCreateProgramObjectARB");
            return _glCreateProgramObjectARB_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glCreateProgramPipelines</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glCreateProgramPipelines_fnptr = &glCreateProgramPipelines_Lazy;
        [UnmanagedCallersOnly]
        private static void glCreateProgramPipelines_Lazy(int n, int* pipelines)
        {
            _glCreateProgramPipelines_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateProgramPipelines");
            _glCreateProgramPipelines_fnptr(n, pipelines);
        }
        
        /// <summary><b>[entry point: <c>glCreateProgressFenceNVX</c>]</b></summary>
        public static delegate* unmanaged<uint> _glCreateProgressFenceNVX_fnptr = &glCreateProgressFenceNVX_Lazy;
        [UnmanagedCallersOnly]
        private static uint glCreateProgressFenceNVX_Lazy()
        {
            _glCreateProgressFenceNVX_fnptr = (delegate* unmanaged<uint>)GLLoader.BindingsContext.GetProcAddress("glCreateProgressFenceNVX");
            return _glCreateProgressFenceNVX_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glCreateQueries</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, void> _glCreateQueries_fnptr = &glCreateQueries_Lazy;
        [UnmanagedCallersOnly]
        private static void glCreateQueries_Lazy(uint target, int n, int* ids)
        {
            _glCreateQueries_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateQueries");
            _glCreateQueries_fnptr(target, n, ids);
        }
        
        /// <summary><b>[entry point: <c>glCreateRenderbuffers</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glCreateRenderbuffers_fnptr = &glCreateRenderbuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void glCreateRenderbuffers_Lazy(int n, int* renderbuffers)
        {
            _glCreateRenderbuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateRenderbuffers");
            _glCreateRenderbuffers_fnptr(n, renderbuffers);
        }
        
        /// <summary><b>[entry point: <c>glCreateSamplers</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glCreateSamplers_fnptr = &glCreateSamplers_Lazy;
        [UnmanagedCallersOnly]
        private static void glCreateSamplers_Lazy(int n, int* samplers)
        {
            _glCreateSamplers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateSamplers");
            _glCreateSamplers_fnptr(n, samplers);
        }
        
        /// <summary><b>[entry point: <c>glCreateSemaphoresNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glCreateSemaphoresNV_fnptr = &glCreateSemaphoresNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCreateSemaphoresNV_Lazy(int n, uint* semaphores)
        {
            _glCreateSemaphoresNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateSemaphoresNV");
            _glCreateSemaphoresNV_fnptr(n, semaphores);
        }
        
        /// <summary><b>[entry point: <c>glCreateShader</c>]</b></summary>
        public static delegate* unmanaged<uint, int> _glCreateShader_fnptr = &glCreateShader_Lazy;
        [UnmanagedCallersOnly]
        private static int glCreateShader_Lazy(uint type)
        {
            _glCreateShader_fnptr = (delegate* unmanaged<uint, int>)GLLoader.BindingsContext.GetProcAddress("glCreateShader");
            return _glCreateShader_fnptr(type);
        }
        
        /// <summary><b>[entry point: <c>glCreateShaderObjectARB</c>]</b></summary>
        public static delegate* unmanaged<uint, IntPtr> _glCreateShaderObjectARB_fnptr = &glCreateShaderObjectARB_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr glCreateShaderObjectARB_Lazy(uint shaderType)
        {
            _glCreateShaderObjectARB_fnptr = (delegate* unmanaged<uint, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glCreateShaderObjectARB");
            return _glCreateShaderObjectARB_fnptr(shaderType);
        }
        
        /// <summary><b>[entry point: <c>glCreateShaderProgramEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, byte*, int> _glCreateShaderProgramEXT_fnptr = &glCreateShaderProgramEXT_Lazy;
        [UnmanagedCallersOnly]
        private static int glCreateShaderProgramEXT_Lazy(uint type, byte* str)
        {
            _glCreateShaderProgramEXT_fnptr = (delegate* unmanaged<uint, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glCreateShaderProgramEXT");
            return _glCreateShaderProgramEXT_fnptr(type, str);
        }
        
        /// <summary><b>[entry point: <c>glCreateShaderProgramv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, byte**, int> _glCreateShaderProgramv_fnptr = &glCreateShaderProgramv_Lazy;
        [UnmanagedCallersOnly]
        private static int glCreateShaderProgramv_Lazy(uint type, int count, byte** strings)
        {
            _glCreateShaderProgramv_fnptr = (delegate* unmanaged<uint, int, byte**, int>)GLLoader.BindingsContext.GetProcAddress("glCreateShaderProgramv");
            return _glCreateShaderProgramv_fnptr(type, count, strings);
        }
        
        /// <summary><b>[entry point: <c>glCreateShaderProgramvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, byte**, int> _glCreateShaderProgramvEXT_fnptr = &glCreateShaderProgramvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static int glCreateShaderProgramvEXT_Lazy(uint type, int count, byte** strings)
        {
            _glCreateShaderProgramvEXT_fnptr = (delegate* unmanaged<uint, int, byte**, int>)GLLoader.BindingsContext.GetProcAddress("glCreateShaderProgramvEXT");
            return _glCreateShaderProgramvEXT_fnptr(type, count, strings);
        }
        
        /// <summary><b>[entry point: <c>glCreateStatesNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glCreateStatesNV_fnptr = &glCreateStatesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glCreateStatesNV_Lazy(int n, uint* states)
        {
            _glCreateStatesNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateStatesNV");
            _glCreateStatesNV_fnptr(n, states);
        }
        
        /// <summary><b>[entry point: <c>glCreateSyncFromCLeventARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr*, IntPtr*, uint, IntPtr> _glCreateSyncFromCLeventARB_fnptr = &glCreateSyncFromCLeventARB_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr glCreateSyncFromCLeventARB_Lazy(IntPtr* context, IntPtr* @event, uint flags)
        {
            _glCreateSyncFromCLeventARB_fnptr = (delegate* unmanaged<IntPtr*, IntPtr*, uint, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glCreateSyncFromCLeventARB");
            return _glCreateSyncFromCLeventARB_fnptr(context, @event, flags);
        }
        
        /// <summary><b>[entry point: <c>glCreateTextures</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, void> _glCreateTextures_fnptr = &glCreateTextures_Lazy;
        [UnmanagedCallersOnly]
        private static void glCreateTextures_Lazy(uint target, int n, int* textures)
        {
            _glCreateTextures_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateTextures");
            _glCreateTextures_fnptr(target, n, textures);
        }
        
        /// <summary><b>[entry point: <c>glCreateTransformFeedbacks</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glCreateTransformFeedbacks_fnptr = &glCreateTransformFeedbacks_Lazy;
        [UnmanagedCallersOnly]
        private static void glCreateTransformFeedbacks_Lazy(int n, int* ids)
        {
            _glCreateTransformFeedbacks_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateTransformFeedbacks");
            _glCreateTransformFeedbacks_fnptr(n, ids);
        }
        
        /// <summary><b>[entry point: <c>glCreateVertexArrays</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glCreateVertexArrays_fnptr = &glCreateVertexArrays_Lazy;
        [UnmanagedCallersOnly]
        private static void glCreateVertexArrays_Lazy(int n, int* arrays)
        {
            _glCreateVertexArrays_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateVertexArrays");
            _glCreateVertexArrays_fnptr(n, arrays);
        }
        
        /// <summary><b>[entry point: <c>glCullFace</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glCullFace_fnptr = &glCullFace_Lazy;
        [UnmanagedCallersOnly]
        private static void glCullFace_Lazy(uint mode)
        {
            _glCullFace_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glCullFace");
            _glCullFace_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glCullParameterdvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glCullParameterdvEXT_fnptr = &glCullParameterdvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCullParameterdvEXT_Lazy(uint pname, double* parameters)
        {
            _glCullParameterdvEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glCullParameterdvEXT");
            _glCullParameterdvEXT_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glCullParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glCullParameterfvEXT_fnptr = &glCullParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glCullParameterfvEXT_Lazy(uint pname, float* parameters)
        {
            _glCullParameterfvEXT_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glCullParameterfvEXT");
            _glCullParameterfvEXT_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glCurrentPaletteMatrixARB</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glCurrentPaletteMatrixARB_fnptr = &glCurrentPaletteMatrixARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glCurrentPaletteMatrixARB_Lazy(int index)
        {
            _glCurrentPaletteMatrixARB_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glCurrentPaletteMatrixARB");
            _glCurrentPaletteMatrixARB_fnptr(index);
        }
        
        /// <summary><b>[entry point: <c>glCurrentPaletteMatrixOES</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glCurrentPaletteMatrixOES_fnptr = &glCurrentPaletteMatrixOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glCurrentPaletteMatrixOES_Lazy(uint matrixpaletteindex)
        {
            _glCurrentPaletteMatrixOES_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glCurrentPaletteMatrixOES");
            _glCurrentPaletteMatrixOES_fnptr(matrixpaletteindex);
        }
        
        /// <summary><b>[entry point: <c>glDebugMessageCallback</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, void*, void> _glDebugMessageCallback_fnptr = &glDebugMessageCallback_Lazy;
        [UnmanagedCallersOnly]
        private static void glDebugMessageCallback_Lazy(IntPtr callback, void* userParam)
        {
            _glDebugMessageCallback_fnptr = (delegate* unmanaged<IntPtr, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageCallback");
            _glDebugMessageCallback_fnptr(callback, userParam);
        }
        
        /// <summary><b>[entry point: <c>glDebugMessageCallbackAMD</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, void*, void> _glDebugMessageCallbackAMD_fnptr = &glDebugMessageCallbackAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glDebugMessageCallbackAMD_Lazy(IntPtr callback, void* userParam)
        {
            _glDebugMessageCallbackAMD_fnptr = (delegate* unmanaged<IntPtr, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageCallbackAMD");
            _glDebugMessageCallbackAMD_fnptr(callback, userParam);
        }
        
        /// <summary><b>[entry point: <c>glDebugMessageCallbackARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, void*, void> _glDebugMessageCallbackARB_fnptr = &glDebugMessageCallbackARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glDebugMessageCallbackARB_Lazy(IntPtr callback, void* userParam)
        {
            _glDebugMessageCallbackARB_fnptr = (delegate* unmanaged<IntPtr, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageCallbackARB");
            _glDebugMessageCallbackARB_fnptr(callback, userParam);
        }
        
        /// <summary><b>[entry point: <c>glDebugMessageCallbackKHR</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, void*, void> _glDebugMessageCallbackKHR_fnptr = &glDebugMessageCallbackKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glDebugMessageCallbackKHR_Lazy(IntPtr callback, void* userParam)
        {
            _glDebugMessageCallbackKHR_fnptr = (delegate* unmanaged<IntPtr, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageCallbackKHR");
            _glDebugMessageCallbackKHR_fnptr(callback, userParam);
        }
        
        /// <summary><b>[entry point: <c>glDebugMessageControl</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, uint*, byte, void> _glDebugMessageControl_fnptr = &glDebugMessageControl_Lazy;
        [UnmanagedCallersOnly]
        private static void glDebugMessageControl_Lazy(uint source, uint type, uint severity, int count, uint* ids, byte enabled)
        {
            _glDebugMessageControl_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint*, byte, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageControl");
            _glDebugMessageControl_fnptr(source, type, severity, count, ids, enabled);
        }
        
        /// <summary><b>[entry point: <c>glDebugMessageControlARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, uint*, byte, void> _glDebugMessageControlARB_fnptr = &glDebugMessageControlARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glDebugMessageControlARB_Lazy(uint source, uint type, uint severity, int count, uint* ids, byte enabled)
        {
            _glDebugMessageControlARB_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint*, byte, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageControlARB");
            _glDebugMessageControlARB_fnptr(source, type, severity, count, ids, enabled);
        }
        
        /// <summary><b>[entry point: <c>glDebugMessageControlKHR</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, uint*, byte, void> _glDebugMessageControlKHR_fnptr = &glDebugMessageControlKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glDebugMessageControlKHR_Lazy(uint source, uint type, uint severity, int count, uint* ids, byte enabled)
        {
            _glDebugMessageControlKHR_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint*, byte, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageControlKHR");
            _glDebugMessageControlKHR_fnptr(source, type, severity, count, ids, enabled);
        }
        
        /// <summary><b>[entry point: <c>glDebugMessageEnableAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint*, byte, void> _glDebugMessageEnableAMD_fnptr = &glDebugMessageEnableAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glDebugMessageEnableAMD_Lazy(uint category, uint severity, int count, uint* ids, byte enabled)
        {
            _glDebugMessageEnableAMD_fnptr = (delegate* unmanaged<uint, uint, int, uint*, byte, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageEnableAMD");
            _glDebugMessageEnableAMD_fnptr(category, severity, count, ids, enabled);
        }
        
        /// <summary><b>[entry point: <c>glDebugMessageInsert</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, int, byte*, void> _glDebugMessageInsert_fnptr = &glDebugMessageInsert_Lazy;
        [UnmanagedCallersOnly]
        private static void glDebugMessageInsert_Lazy(uint source, uint type, uint id, uint severity, int length, byte* buf)
        {
            _glDebugMessageInsert_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageInsert");
            _glDebugMessageInsert_fnptr(source, type, id, severity, length, buf);
        }
        
        /// <summary><b>[entry point: <c>glDebugMessageInsertAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, byte*, void> _glDebugMessageInsertAMD_fnptr = &glDebugMessageInsertAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glDebugMessageInsertAMD_Lazy(uint category, uint severity, uint id, int length, byte* buf)
        {
            _glDebugMessageInsertAMD_fnptr = (delegate* unmanaged<uint, uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageInsertAMD");
            _glDebugMessageInsertAMD_fnptr(category, severity, id, length, buf);
        }
        
        /// <summary><b>[entry point: <c>glDebugMessageInsertARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, int, byte*, void> _glDebugMessageInsertARB_fnptr = &glDebugMessageInsertARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glDebugMessageInsertARB_Lazy(uint source, uint type, uint id, uint severity, int length, byte* buf)
        {
            _glDebugMessageInsertARB_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageInsertARB");
            _glDebugMessageInsertARB_fnptr(source, type, id, severity, length, buf);
        }
        
        /// <summary><b>[entry point: <c>glDebugMessageInsertKHR</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, int, byte*, void> _glDebugMessageInsertKHR_fnptr = &glDebugMessageInsertKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glDebugMessageInsertKHR_Lazy(uint source, uint type, uint id, uint severity, int length, byte* buf)
        {
            _glDebugMessageInsertKHR_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageInsertKHR");
            _glDebugMessageInsertKHR_fnptr(source, type, id, severity, length, buf);
        }
        
        /// <summary><b>[entry point: <c>glDeformationMap3dSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, int, int, double, double, int, int, double, double, int, int, double*, void> _glDeformationMap3dSGIX_fnptr = &glDeformationMap3dSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeformationMap3dSGIX_Lazy(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double* points)
        {
            _glDeformationMap3dSGIX_fnptr = (delegate* unmanaged<uint, double, double, int, int, double, double, int, int, double, double, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glDeformationMap3dSGIX");
            _glDeformationMap3dSGIX_fnptr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }
        
        /// <summary><b>[entry point: <c>glDeformationMap3fSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, int, int, float, float, int, int, float, float, int, int, float*, void> _glDeformationMap3fSGIX_fnptr = &glDeformationMap3fSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeformationMap3fSGIX_Lazy(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float* points)
        {
            _glDeformationMap3fSGIX_fnptr = (delegate* unmanaged<uint, float, float, int, int, float, float, int, int, float, float, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glDeformationMap3fSGIX");
            _glDeformationMap3fSGIX_fnptr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }
        
        /// <summary><b>[entry point: <c>glDeformSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glDeformSGIX_fnptr = &glDeformSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeformSGIX_Lazy(uint mask)
        {
            _glDeformSGIX_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDeformSGIX");
            _glDeformSGIX_fnptr(mask);
        }
        
        /// <summary><b>[entry point: <c>glDeleteAsyncMarkersSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glDeleteAsyncMarkersSGIX_fnptr = &glDeleteAsyncMarkersSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteAsyncMarkersSGIX_Lazy(uint marker, int range)
        {
            _glDeleteAsyncMarkersSGIX_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteAsyncMarkersSGIX");
            _glDeleteAsyncMarkersSGIX_fnptr(marker, range);
        }
        
        /// <summary><b>[entry point: <c>glDeleteBuffers</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteBuffers_fnptr = &glDeleteBuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteBuffers_Lazy(int n, int* buffers)
        {
            _glDeleteBuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteBuffers");
            _glDeleteBuffers_fnptr(n, buffers);
        }
        
        /// <summary><b>[entry point: <c>glDeleteBuffersARB</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteBuffersARB_fnptr = &glDeleteBuffersARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteBuffersARB_Lazy(int n, int* buffers)
        {
            _glDeleteBuffersARB_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteBuffersARB");
            _glDeleteBuffersARB_fnptr(n, buffers);
        }
        
        /// <summary><b>[entry point: <c>glDeleteCommandListsNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glDeleteCommandListsNV_fnptr = &glDeleteCommandListsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteCommandListsNV_Lazy(int n, uint* lists)
        {
            _glDeleteCommandListsNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteCommandListsNV");
            _glDeleteCommandListsNV_fnptr(n, lists);
        }
        
        /// <summary><b>[entry point: <c>glDeleteFencesAPPLE</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glDeleteFencesAPPLE_fnptr = &glDeleteFencesAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteFencesAPPLE_Lazy(int n, uint* fences)
        {
            _glDeleteFencesAPPLE_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteFencesAPPLE");
            _glDeleteFencesAPPLE_fnptr(n, fences);
        }
        
        /// <summary><b>[entry point: <c>glDeleteFencesNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glDeleteFencesNV_fnptr = &glDeleteFencesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteFencesNV_Lazy(int n, uint* fences)
        {
            _glDeleteFencesNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteFencesNV");
            _glDeleteFencesNV_fnptr(n, fences);
        }
        
        /// <summary><b>[entry point: <c>glDeleteFragmentShaderATI</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glDeleteFragmentShaderATI_fnptr = &glDeleteFragmentShaderATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteFragmentShaderATI_Lazy(uint id)
        {
            _glDeleteFragmentShaderATI_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteFragmentShaderATI");
            _glDeleteFragmentShaderATI_fnptr(id);
        }
        
        /// <summary><b>[entry point: <c>glDeleteFramebuffers</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteFramebuffers_fnptr = &glDeleteFramebuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteFramebuffers_Lazy(int n, int* framebuffers)
        {
            _glDeleteFramebuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteFramebuffers");
            _glDeleteFramebuffers_fnptr(n, framebuffers);
        }
        
        /// <summary><b>[entry point: <c>glDeleteFramebuffersEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteFramebuffersEXT_fnptr = &glDeleteFramebuffersEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteFramebuffersEXT_Lazy(int n, int* framebuffers)
        {
            _glDeleteFramebuffersEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteFramebuffersEXT");
            _glDeleteFramebuffersEXT_fnptr(n, framebuffers);
        }
        
        /// <summary><b>[entry point: <c>glDeleteFramebuffersOES</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteFramebuffersOES_fnptr = &glDeleteFramebuffersOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteFramebuffersOES_Lazy(int n, int* framebuffers)
        {
            _glDeleteFramebuffersOES_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteFramebuffersOES");
            _glDeleteFramebuffersOES_fnptr(n, framebuffers);
        }
        
        /// <summary><b>[entry point: <c>glDeleteLists</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glDeleteLists_fnptr = &glDeleteLists_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteLists_Lazy(int list, int range)
        {
            _glDeleteLists_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteLists");
            _glDeleteLists_fnptr(list, range);
        }
        
        /// <summary><b>[entry point: <c>glDeleteMemoryObjectsEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glDeleteMemoryObjectsEXT_fnptr = &glDeleteMemoryObjectsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteMemoryObjectsEXT_Lazy(int n, uint* memoryObjects)
        {
            _glDeleteMemoryObjectsEXT_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteMemoryObjectsEXT");
            _glDeleteMemoryObjectsEXT_fnptr(n, memoryObjects);
        }
        
        /// <summary><b>[entry point: <c>glDeleteNamedStringARB</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, void> _glDeleteNamedStringARB_fnptr = &glDeleteNamedStringARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteNamedStringARB_Lazy(int namelen, byte* name)
        {
            _glDeleteNamedStringARB_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteNamedStringARB");
            _glDeleteNamedStringARB_fnptr(namelen, name);
        }
        
        /// <summary><b>[entry point: <c>glDeleteNamesAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glDeleteNamesAMD_fnptr = &glDeleteNamesAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteNamesAMD_Lazy(uint identifier, uint num, uint* names)
        {
            _glDeleteNamesAMD_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteNamesAMD");
            _glDeleteNamesAMD_fnptr(identifier, num, names);
        }
        
        /// <summary><b>[entry point: <c>glDeleteObjectARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, void> _glDeleteObjectARB_fnptr = &glDeleteObjectARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteObjectARB_Lazy(IntPtr obj)
        {
            _glDeleteObjectARB_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteObjectARB");
            _glDeleteObjectARB_fnptr(obj);
        }
        
        /// <summary><b>[entry point: <c>glDeleteOcclusionQueriesNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glDeleteOcclusionQueriesNV_fnptr = &glDeleteOcclusionQueriesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteOcclusionQueriesNV_Lazy(int n, uint* ids)
        {
            _glDeleteOcclusionQueriesNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteOcclusionQueriesNV");
            _glDeleteOcclusionQueriesNV_fnptr(n, ids);
        }
        
        /// <summary><b>[entry point: <c>glDeletePathsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glDeletePathsNV_fnptr = &glDeletePathsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeletePathsNV_Lazy(uint path, int range)
        {
            _glDeletePathsNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDeletePathsNV");
            _glDeletePathsNV_fnptr(path, range);
        }
        
        /// <summary><b>[entry point: <c>glDeletePerfMonitorsAMD</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glDeletePerfMonitorsAMD_fnptr = &glDeletePerfMonitorsAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeletePerfMonitorsAMD_Lazy(int n, uint* monitors)
        {
            _glDeletePerfMonitorsAMD_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeletePerfMonitorsAMD");
            _glDeletePerfMonitorsAMD_fnptr(n, monitors);
        }
        
        /// <summary><b>[entry point: <c>glDeletePerfQueryINTEL</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glDeletePerfQueryINTEL_fnptr = &glDeletePerfQueryINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeletePerfQueryINTEL_Lazy(int queryHandle)
        {
            _glDeletePerfQueryINTEL_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glDeletePerfQueryINTEL");
            _glDeletePerfQueryINTEL_fnptr(queryHandle);
        }
        
        /// <summary><b>[entry point: <c>glDeleteProgram</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glDeleteProgram_fnptr = &glDeleteProgram_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteProgram_Lazy(int program)
        {
            _glDeleteProgram_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteProgram");
            _glDeleteProgram_fnptr(program);
        }
        
        /// <summary><b>[entry point: <c>glDeleteProgramPipelines</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteProgramPipelines_fnptr = &glDeleteProgramPipelines_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteProgramPipelines_Lazy(int n, int* pipelines)
        {
            _glDeleteProgramPipelines_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteProgramPipelines");
            _glDeleteProgramPipelines_fnptr(n, pipelines);
        }
        
        /// <summary><b>[entry point: <c>glDeleteProgramPipelinesEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteProgramPipelinesEXT_fnptr = &glDeleteProgramPipelinesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteProgramPipelinesEXT_Lazy(int n, int* pipelines)
        {
            _glDeleteProgramPipelinesEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteProgramPipelinesEXT");
            _glDeleteProgramPipelinesEXT_fnptr(n, pipelines);
        }
        
        /// <summary><b>[entry point: <c>glDeleteProgramsARB</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteProgramsARB_fnptr = &glDeleteProgramsARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteProgramsARB_Lazy(int n, int* programs)
        {
            _glDeleteProgramsARB_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteProgramsARB");
            _glDeleteProgramsARB_fnptr(n, programs);
        }
        
        /// <summary><b>[entry point: <c>glDeleteProgramsNV</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteProgramsNV_fnptr = &glDeleteProgramsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteProgramsNV_Lazy(int n, int* programs)
        {
            _glDeleteProgramsNV_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteProgramsNV");
            _glDeleteProgramsNV_fnptr(n, programs);
        }
        
        /// <summary><b>[entry point: <c>glDeleteQueries</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteQueries_fnptr = &glDeleteQueries_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteQueries_Lazy(int n, int* ids)
        {
            _glDeleteQueries_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteQueries");
            _glDeleteQueries_fnptr(n, ids);
        }
        
        /// <summary><b>[entry point: <c>glDeleteQueriesARB</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteQueriesARB_fnptr = &glDeleteQueriesARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteQueriesARB_Lazy(int n, int* ids)
        {
            _glDeleteQueriesARB_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteQueriesARB");
            _glDeleteQueriesARB_fnptr(n, ids);
        }
        
        /// <summary><b>[entry point: <c>glDeleteQueriesEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteQueriesEXT_fnptr = &glDeleteQueriesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteQueriesEXT_Lazy(int n, int* ids)
        {
            _glDeleteQueriesEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteQueriesEXT");
            _glDeleteQueriesEXT_fnptr(n, ids);
        }
        
        /// <summary><b>[entry point: <c>glDeleteQueryResourceTagNV</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteQueryResourceTagNV_fnptr = &glDeleteQueryResourceTagNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteQueryResourceTagNV_Lazy(int n, int* tagIds)
        {
            _glDeleteQueryResourceTagNV_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteQueryResourceTagNV");
            _glDeleteQueryResourceTagNV_fnptr(n, tagIds);
        }
        
        /// <summary><b>[entry point: <c>glDeleteRenderbuffers</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteRenderbuffers_fnptr = &glDeleteRenderbuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteRenderbuffers_Lazy(int n, int* renderbuffers)
        {
            _glDeleteRenderbuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteRenderbuffers");
            _glDeleteRenderbuffers_fnptr(n, renderbuffers);
        }
        
        /// <summary><b>[entry point: <c>glDeleteRenderbuffersEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteRenderbuffersEXT_fnptr = &glDeleteRenderbuffersEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteRenderbuffersEXT_Lazy(int n, int* renderbuffers)
        {
            _glDeleteRenderbuffersEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteRenderbuffersEXT");
            _glDeleteRenderbuffersEXT_fnptr(n, renderbuffers);
        }
        
        /// <summary><b>[entry point: <c>glDeleteRenderbuffersOES</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteRenderbuffersOES_fnptr = &glDeleteRenderbuffersOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteRenderbuffersOES_Lazy(int n, int* renderbuffers)
        {
            _glDeleteRenderbuffersOES_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteRenderbuffersOES");
            _glDeleteRenderbuffersOES_fnptr(n, renderbuffers);
        }
        
        /// <summary><b>[entry point: <c>glDeleteSamplers</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteSamplers_fnptr = &glDeleteSamplers_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteSamplers_Lazy(int count, int* samplers)
        {
            _glDeleteSamplers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteSamplers");
            _glDeleteSamplers_fnptr(count, samplers);
        }
        
        /// <summary><b>[entry point: <c>glDeleteSemaphoresEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glDeleteSemaphoresEXT_fnptr = &glDeleteSemaphoresEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteSemaphoresEXT_Lazy(int n, uint* semaphores)
        {
            _glDeleteSemaphoresEXT_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteSemaphoresEXT");
            _glDeleteSemaphoresEXT_fnptr(n, semaphores);
        }
        
        /// <summary><b>[entry point: <c>glDeleteShader</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glDeleteShader_fnptr = &glDeleteShader_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteShader_Lazy(int shader)
        {
            _glDeleteShader_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteShader");
            _glDeleteShader_fnptr(shader);
        }
        
        /// <summary><b>[entry point: <c>glDeleteStatesNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glDeleteStatesNV_fnptr = &glDeleteStatesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteStatesNV_Lazy(int n, uint* states)
        {
            _glDeleteStatesNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteStatesNV");
            _glDeleteStatesNV_fnptr(n, states);
        }
        
        /// <summary><b>[entry point: <c>glDeleteSync</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, void> _glDeleteSync_fnptr = &glDeleteSync_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteSync_Lazy(IntPtr sync)
        {
            _glDeleteSync_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteSync");
            _glDeleteSync_fnptr(sync);
        }
        
        /// <summary><b>[entry point: <c>glDeleteSyncAPPLE</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, void> _glDeleteSyncAPPLE_fnptr = &glDeleteSyncAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteSyncAPPLE_Lazy(IntPtr sync)
        {
            _glDeleteSyncAPPLE_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteSyncAPPLE");
            _glDeleteSyncAPPLE_fnptr(sync);
        }
        
        /// <summary><b>[entry point: <c>glDeleteTextures</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteTextures_fnptr = &glDeleteTextures_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteTextures_Lazy(int n, int* textures)
        {
            _glDeleteTextures_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteTextures");
            _glDeleteTextures_fnptr(n, textures);
        }
        
        /// <summary><b>[entry point: <c>glDeleteTexturesEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteTexturesEXT_fnptr = &glDeleteTexturesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteTexturesEXT_Lazy(int n, int* textures)
        {
            _glDeleteTexturesEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteTexturesEXT");
            _glDeleteTexturesEXT_fnptr(n, textures);
        }
        
        /// <summary><b>[entry point: <c>glDeleteTransformFeedbacks</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteTransformFeedbacks_fnptr = &glDeleteTransformFeedbacks_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteTransformFeedbacks_Lazy(int n, int* ids)
        {
            _glDeleteTransformFeedbacks_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteTransformFeedbacks");
            _glDeleteTransformFeedbacks_fnptr(n, ids);
        }
        
        /// <summary><b>[entry point: <c>glDeleteTransformFeedbacksNV</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteTransformFeedbacksNV_fnptr = &glDeleteTransformFeedbacksNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteTransformFeedbacksNV_Lazy(int n, int* ids)
        {
            _glDeleteTransformFeedbacksNV_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteTransformFeedbacksNV");
            _glDeleteTransformFeedbacksNV_fnptr(n, ids);
        }
        
        /// <summary><b>[entry point: <c>glDeleteVertexArrays</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteVertexArrays_fnptr = &glDeleteVertexArrays_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteVertexArrays_Lazy(int n, int* arrays)
        {
            _glDeleteVertexArrays_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteVertexArrays");
            _glDeleteVertexArrays_fnptr(n, arrays);
        }
        
        /// <summary><b>[entry point: <c>glDeleteVertexArraysAPPLE</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteVertexArraysAPPLE_fnptr = &glDeleteVertexArraysAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteVertexArraysAPPLE_Lazy(int n, int* arrays)
        {
            _glDeleteVertexArraysAPPLE_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteVertexArraysAPPLE");
            _glDeleteVertexArraysAPPLE_fnptr(n, arrays);
        }
        
        /// <summary><b>[entry point: <c>glDeleteVertexArraysOES</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glDeleteVertexArraysOES_fnptr = &glDeleteVertexArraysOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteVertexArraysOES_Lazy(int n, int* arrays)
        {
            _glDeleteVertexArraysOES_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteVertexArraysOES");
            _glDeleteVertexArraysOES_fnptr(n, arrays);
        }
        
        /// <summary><b>[entry point: <c>glDeleteVertexShaderEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glDeleteVertexShaderEXT_fnptr = &glDeleteVertexShaderEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDeleteVertexShaderEXT_Lazy(uint id)
        {
            _glDeleteVertexShaderEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteVertexShaderEXT");
            _glDeleteVertexShaderEXT_fnptr(id);
        }
        
        /// <summary><b>[entry point: <c>glDepthBoundsdNV</c>]</b></summary>
        public static delegate* unmanaged<double, double, void> _glDepthBoundsdNV_fnptr = &glDepthBoundsdNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthBoundsdNV_Lazy(double zmin, double zmax)
        {
            _glDepthBoundsdNV_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glDepthBoundsdNV");
            _glDepthBoundsdNV_fnptr(zmin, zmax);
        }
        
        /// <summary><b>[entry point: <c>glDepthBoundsEXT</c>]</b></summary>
        public static delegate* unmanaged<double, double, void> _glDepthBoundsEXT_fnptr = &glDepthBoundsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthBoundsEXT_Lazy(double zmin, double zmax)
        {
            _glDepthBoundsEXT_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glDepthBoundsEXT");
            _glDepthBoundsEXT_fnptr(zmin, zmax);
        }
        
        /// <summary><b>[entry point: <c>glDepthFunc</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glDepthFunc_fnptr = &glDepthFunc_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthFunc_Lazy(uint func)
        {
            _glDepthFunc_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDepthFunc");
            _glDepthFunc_fnptr(func);
        }
        
        /// <summary><b>[entry point: <c>glDepthMask</c>]</b></summary>
        public static delegate* unmanaged<byte, void> _glDepthMask_fnptr = &glDepthMask_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthMask_Lazy(byte flag)
        {
            _glDepthMask_fnptr = (delegate* unmanaged<byte, void>)GLLoader.BindingsContext.GetProcAddress("glDepthMask");
            _glDepthMask_fnptr(flag);
        }
        
        /// <summary><b>[entry point: <c>glDepthRange</c>]</b></summary>
        public static delegate* unmanaged<double, double, void> _glDepthRange_fnptr = &glDepthRange_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthRange_Lazy(double n, double f)
        {
            _glDepthRange_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRange");
            _glDepthRange_fnptr(n, f);
        }
        
        /// <summary><b>[entry point: <c>glDepthRangeArraydvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, double*, void> _glDepthRangeArraydvNV_fnptr = &glDepthRangeArraydvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthRangeArraydvNV_Lazy(uint first, int count, double* v)
        {
            _glDepthRangeArraydvNV_fnptr = (delegate* unmanaged<uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeArraydvNV");
            _glDepthRangeArraydvNV_fnptr(first, count, v);
        }
        
        /// <summary><b>[entry point: <c>glDepthRangeArrayfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glDepthRangeArrayfvNV_fnptr = &glDepthRangeArrayfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthRangeArrayfvNV_Lazy(uint first, int count, float* v)
        {
            _glDepthRangeArrayfvNV_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeArrayfvNV");
            _glDepthRangeArrayfvNV_fnptr(first, count, v);
        }
        
        /// <summary><b>[entry point: <c>glDepthRangeArrayfvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glDepthRangeArrayfvOES_fnptr = &glDepthRangeArrayfvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthRangeArrayfvOES_Lazy(uint first, int count, float* v)
        {
            _glDepthRangeArrayfvOES_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeArrayfvOES");
            _glDepthRangeArrayfvOES_fnptr(first, count, v);
        }
        
        /// <summary><b>[entry point: <c>glDepthRangeArrayv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, double*, void> _glDepthRangeArrayv_fnptr = &glDepthRangeArrayv_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthRangeArrayv_Lazy(uint first, int count, double* v)
        {
            _glDepthRangeArrayv_fnptr = (delegate* unmanaged<uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeArrayv");
            _glDepthRangeArrayv_fnptr(first, count, v);
        }
        
        /// <summary><b>[entry point: <c>glDepthRangedNV</c>]</b></summary>
        public static delegate* unmanaged<double, double, void> _glDepthRangedNV_fnptr = &glDepthRangedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthRangedNV_Lazy(double zNear, double zFar)
        {
            _glDepthRangedNV_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangedNV");
            _glDepthRangedNV_fnptr(zNear, zFar);
        }
        
        /// <summary><b>[entry point: <c>glDepthRangef</c>]</b></summary>
        public static delegate* unmanaged<float, float, void> _glDepthRangef_fnptr = &glDepthRangef_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthRangef_Lazy(float n, float f)
        {
            _glDepthRangef_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangef");
            _glDepthRangef_fnptr(n, f);
        }
        
        /// <summary><b>[entry point: <c>glDepthRangefOES</c>]</b></summary>
        public static delegate* unmanaged<float, float, void> _glDepthRangefOES_fnptr = &glDepthRangefOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthRangefOES_Lazy(float n, float f)
        {
            _glDepthRangefOES_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangefOES");
            _glDepthRangefOES_fnptr(n, f);
        }
        
        /// <summary><b>[entry point: <c>glDepthRangeIndexed</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, void> _glDepthRangeIndexed_fnptr = &glDepthRangeIndexed_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthRangeIndexed_Lazy(uint index, double n, double f)
        {
            _glDepthRangeIndexed_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeIndexed");
            _glDepthRangeIndexed_fnptr(index, n, f);
        }
        
        /// <summary><b>[entry point: <c>glDepthRangeIndexeddNV</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, void> _glDepthRangeIndexeddNV_fnptr = &glDepthRangeIndexeddNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthRangeIndexeddNV_Lazy(uint index, double n, double f)
        {
            _glDepthRangeIndexeddNV_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeIndexeddNV");
            _glDepthRangeIndexeddNV_fnptr(index, n, f);
        }
        
        /// <summary><b>[entry point: <c>glDepthRangeIndexedfNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, void> _glDepthRangeIndexedfNV_fnptr = &glDepthRangeIndexedfNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthRangeIndexedfNV_Lazy(uint index, float n, float f)
        {
            _glDepthRangeIndexedfNV_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeIndexedfNV");
            _glDepthRangeIndexedfNV_fnptr(index, n, f);
        }
        
        /// <summary><b>[entry point: <c>glDepthRangeIndexedfOES</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, void> _glDepthRangeIndexedfOES_fnptr = &glDepthRangeIndexedfOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthRangeIndexedfOES_Lazy(uint index, float n, float f)
        {
            _glDepthRangeIndexedfOES_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeIndexedfOES");
            _glDepthRangeIndexedfOES_fnptr(index, n, f);
        }
        
        /// <summary><b>[entry point: <c>glDepthRangex</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glDepthRangex_fnptr = &glDepthRangex_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthRangex_Lazy(int n, int f)
        {
            _glDepthRangex_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangex");
            _glDepthRangex_fnptr(n, f);
        }
        
        /// <summary><b>[entry point: <c>glDepthRangexOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glDepthRangexOES_fnptr = &glDepthRangexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDepthRangexOES_Lazy(int n, int f)
        {
            _glDepthRangexOES_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangexOES");
            _glDepthRangexOES_fnptr(n, f);
        }
        
        /// <summary><b>[entry point: <c>glDetachObjectARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, IntPtr, void> _glDetachObjectARB_fnptr = &glDetachObjectARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glDetachObjectARB_Lazy(IntPtr containerObj, IntPtr attachedObj)
        {
            _glDetachObjectARB_fnptr = (delegate* unmanaged<IntPtr, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glDetachObjectARB");
            _glDetachObjectARB_fnptr(containerObj, attachedObj);
        }
        
        /// <summary><b>[entry point: <c>glDetachShader</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glDetachShader_fnptr = &glDetachShader_Lazy;
        [UnmanagedCallersOnly]
        private static void glDetachShader_Lazy(int program, int shader)
        {
            _glDetachShader_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDetachShader");
            _glDetachShader_fnptr(program, shader);
        }
        
        /// <summary><b>[entry point: <c>glDetailTexFuncSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glDetailTexFuncSGIS_fnptr = &glDetailTexFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glDetailTexFuncSGIS_Lazy(uint target, int n, float* points)
        {
            _glDetailTexFuncSGIS_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glDetailTexFuncSGIS");
            _glDetailTexFuncSGIS_fnptr(target, n, points);
        }
        
        /// <summary><b>[entry point: <c>glDisable</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glDisable_fnptr = &glDisable_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisable_Lazy(uint cap)
        {
            _glDisable_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisable");
            _glDisable_fnptr(cap);
        }
        
        /// <summary><b>[entry point: <c>glDisableClientState</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glDisableClientState_fnptr = &glDisableClientState_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisableClientState_Lazy(uint array)
        {
            _glDisableClientState_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableClientState");
            _glDisableClientState_fnptr(array);
        }
        
        /// <summary><b>[entry point: <c>glDisableClientStateiEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glDisableClientStateiEXT_fnptr = &glDisableClientStateiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisableClientStateiEXT_Lazy(uint array, uint index)
        {
            _glDisableClientStateiEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableClientStateiEXT");
            _glDisableClientStateiEXT_fnptr(array, index);
        }
        
        /// <summary><b>[entry point: <c>glDisableClientStateIndexedEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glDisableClientStateIndexedEXT_fnptr = &glDisableClientStateIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisableClientStateIndexedEXT_Lazy(uint array, uint index)
        {
            _glDisableClientStateIndexedEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableClientStateIndexedEXT");
            _glDisableClientStateIndexedEXT_fnptr(array, index);
        }
        
        /// <summary><b>[entry point: <c>glDisableDriverControlQCOM</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glDisableDriverControlQCOM_fnptr = &glDisableDriverControlQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisableDriverControlQCOM_Lazy(uint driverControl)
        {
            _glDisableDriverControlQCOM_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableDriverControlQCOM");
            _glDisableDriverControlQCOM_fnptr(driverControl);
        }
        
        /// <summary><b>[entry point: <c>glDisablei</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glDisablei_fnptr = &glDisablei_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisablei_Lazy(uint target, uint index)
        {
            _glDisablei_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisablei");
            _glDisablei_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glDisableiEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glDisableiEXT_fnptr = &glDisableiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisableiEXT_Lazy(uint target, uint index)
        {
            _glDisableiEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableiEXT");
            _glDisableiEXT_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glDisableIndexedEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glDisableIndexedEXT_fnptr = &glDisableIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisableIndexedEXT_Lazy(uint target, uint index)
        {
            _glDisableIndexedEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableIndexedEXT");
            _glDisableIndexedEXT_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glDisableiNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glDisableiNV_fnptr = &glDisableiNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisableiNV_Lazy(uint target, uint index)
        {
            _glDisableiNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableiNV");
            _glDisableiNV_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glDisableiOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glDisableiOES_fnptr = &glDisableiOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisableiOES_Lazy(uint target, uint index)
        {
            _glDisableiOES_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableiOES");
            _glDisableiOES_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glDisableVariantClientStateEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glDisableVariantClientStateEXT_fnptr = &glDisableVariantClientStateEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisableVariantClientStateEXT_Lazy(uint id)
        {
            _glDisableVariantClientStateEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableVariantClientStateEXT");
            _glDisableVariantClientStateEXT_fnptr(id);
        }
        
        /// <summary><b>[entry point: <c>glDisableVertexArrayAttrib</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glDisableVertexArrayAttrib_fnptr = &glDisableVertexArrayAttrib_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisableVertexArrayAttrib_Lazy(int vaobj, uint index)
        {
            _glDisableVertexArrayAttrib_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableVertexArrayAttrib");
            _glDisableVertexArrayAttrib_fnptr(vaobj, index);
        }
        
        /// <summary><b>[entry point: <c>glDisableVertexArrayAttribEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glDisableVertexArrayAttribEXT_fnptr = &glDisableVertexArrayAttribEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisableVertexArrayAttribEXT_Lazy(int vaobj, uint index)
        {
            _glDisableVertexArrayAttribEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableVertexArrayAttribEXT");
            _glDisableVertexArrayAttribEXT_fnptr(vaobj, index);
        }
        
        /// <summary><b>[entry point: <c>glDisableVertexArrayEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glDisableVertexArrayEXT_fnptr = &glDisableVertexArrayEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisableVertexArrayEXT_Lazy(int vaobj, uint array)
        {
            _glDisableVertexArrayEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableVertexArrayEXT");
            _glDisableVertexArrayEXT_fnptr(vaobj, array);
        }
        
        /// <summary><b>[entry point: <c>glDisableVertexAttribAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glDisableVertexAttribAPPLE_fnptr = &glDisableVertexAttribAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisableVertexAttribAPPLE_Lazy(uint index, uint pname)
        {
            _glDisableVertexAttribAPPLE_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableVertexAttribAPPLE");
            _glDisableVertexAttribAPPLE_fnptr(index, pname);
        }
        
        /// <summary><b>[entry point: <c>glDisableVertexAttribArray</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glDisableVertexAttribArray_fnptr = &glDisableVertexAttribArray_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisableVertexAttribArray_Lazy(uint index)
        {
            _glDisableVertexAttribArray_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableVertexAttribArray");
            _glDisableVertexAttribArray_fnptr(index);
        }
        
        /// <summary><b>[entry point: <c>glDisableVertexAttribArrayARB</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glDisableVertexAttribArrayARB_fnptr = &glDisableVertexAttribArrayARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glDisableVertexAttribArrayARB_Lazy(uint index)
        {
            _glDisableVertexAttribArrayARB_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableVertexAttribArrayARB");
            _glDisableVertexAttribArrayARB_fnptr(index);
        }
        
        /// <summary><b>[entry point: <c>glDiscardFramebufferEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, void> _glDiscardFramebufferEXT_fnptr = &glDiscardFramebufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDiscardFramebufferEXT_Lazy(uint target, int numAttachments, uint* attachments)
        {
            _glDiscardFramebufferEXT_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDiscardFramebufferEXT");
            _glDiscardFramebufferEXT_fnptr(target, numAttachments, attachments);
        }
        
        /// <summary><b>[entry point: <c>glDispatchCompute</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glDispatchCompute_fnptr = &glDispatchCompute_Lazy;
        [UnmanagedCallersOnly]
        private static void glDispatchCompute_Lazy(uint num_groups_x, uint num_groups_y, uint num_groups_z)
        {
            _glDispatchCompute_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDispatchCompute");
            _glDispatchCompute_fnptr(num_groups_x, num_groups_y, num_groups_z);
        }
        
        /// <summary><b>[entry point: <c>glDispatchComputeGroupSizeARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, uint, void> _glDispatchComputeGroupSizeARB_fnptr = &glDispatchComputeGroupSizeARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glDispatchComputeGroupSizeARB_Lazy(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z)
        {
            _glDispatchComputeGroupSizeARB_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDispatchComputeGroupSizeARB");
            _glDispatchComputeGroupSizeARB_fnptr(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
        }
        
        /// <summary><b>[entry point: <c>glDispatchComputeIndirect</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, void> _glDispatchComputeIndirect_fnptr = &glDispatchComputeIndirect_Lazy;
        [UnmanagedCallersOnly]
        private static void glDispatchComputeIndirect_Lazy(IntPtr indirect)
        {
            _glDispatchComputeIndirect_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glDispatchComputeIndirect");
            _glDispatchComputeIndirect_fnptr(indirect);
        }
        
        /// <summary><b>[entry point: <c>glDrawArrays</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void> _glDrawArrays_fnptr = &glDrawArrays_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawArrays_Lazy(uint mode, int first, int count)
        {
            _glDrawArrays_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArrays");
            _glDrawArrays_fnptr(mode, first, count);
        }
        
        /// <summary><b>[entry point: <c>glDrawArraysEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void> _glDrawArraysEXT_fnptr = &glDrawArraysEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawArraysEXT_Lazy(uint mode, int first, int count)
        {
            _glDrawArraysEXT_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysEXT");
            _glDrawArraysEXT_fnptr(mode, first, count);
        }
        
        /// <summary><b>[entry point: <c>glDrawArraysIndirect</c>]</b></summary>
        public static delegate* unmanaged<uint, void*, void> _glDrawArraysIndirect_fnptr = &glDrawArraysIndirect_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawArraysIndirect_Lazy(uint mode, void* indirect)
        {
            _glDrawArraysIndirect_fnptr = (delegate* unmanaged<uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysIndirect");
            _glDrawArraysIndirect_fnptr(mode, indirect);
        }
        
        /// <summary><b>[entry point: <c>glDrawArraysInstanced</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, void> _glDrawArraysInstanced_fnptr = &glDrawArraysInstanced_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawArraysInstanced_Lazy(uint mode, int first, int count, int instancecount)
        {
            _glDrawArraysInstanced_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysInstanced");
            _glDrawArraysInstanced_fnptr(mode, first, count, instancecount);
        }
        
        /// <summary><b>[entry point: <c>glDrawArraysInstancedANGLE</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, void> _glDrawArraysInstancedANGLE_fnptr = &glDrawArraysInstancedANGLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawArraysInstancedANGLE_Lazy(uint mode, int first, int count, int primcount)
        {
            _glDrawArraysInstancedANGLE_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysInstancedANGLE");
            _glDrawArraysInstancedANGLE_fnptr(mode, first, count, primcount);
        }
        
        /// <summary><b>[entry point: <c>glDrawArraysInstancedARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, void> _glDrawArraysInstancedARB_fnptr = &glDrawArraysInstancedARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawArraysInstancedARB_Lazy(uint mode, int first, int count, int primcount)
        {
            _glDrawArraysInstancedARB_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysInstancedARB");
            _glDrawArraysInstancedARB_fnptr(mode, first, count, primcount);
        }
        
        /// <summary><b>[entry point: <c>glDrawArraysInstancedBaseInstance</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, uint, void> _glDrawArraysInstancedBaseInstance_fnptr = &glDrawArraysInstancedBaseInstance_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawArraysInstancedBaseInstance_Lazy(uint mode, int first, int count, int instancecount, uint baseinstance)
        {
            _glDrawArraysInstancedBaseInstance_fnptr = (delegate* unmanaged<uint, int, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysInstancedBaseInstance");
            _glDrawArraysInstancedBaseInstance_fnptr(mode, first, count, instancecount, baseinstance);
        }
        
        /// <summary><b>[entry point: <c>glDrawArraysInstancedBaseInstanceEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, uint, void> _glDrawArraysInstancedBaseInstanceEXT_fnptr = &glDrawArraysInstancedBaseInstanceEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawArraysInstancedBaseInstanceEXT_Lazy(uint mode, int first, int count, int instancecount, uint baseinstance)
        {
            _glDrawArraysInstancedBaseInstanceEXT_fnptr = (delegate* unmanaged<uint, int, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysInstancedBaseInstanceEXT");
            _glDrawArraysInstancedBaseInstanceEXT_fnptr(mode, first, count, instancecount, baseinstance);
        }
        
        /// <summary><b>[entry point: <c>glDrawArraysInstancedEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, void> _glDrawArraysInstancedEXT_fnptr = &glDrawArraysInstancedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawArraysInstancedEXT_Lazy(uint mode, int start, int count, int primcount)
        {
            _glDrawArraysInstancedEXT_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysInstancedEXT");
            _glDrawArraysInstancedEXT_fnptr(mode, start, count, primcount);
        }
        
        /// <summary><b>[entry point: <c>glDrawArraysInstancedNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, void> _glDrawArraysInstancedNV_fnptr = &glDrawArraysInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawArraysInstancedNV_Lazy(uint mode, int first, int count, int primcount)
        {
            _glDrawArraysInstancedNV_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysInstancedNV");
            _glDrawArraysInstancedNV_fnptr(mode, first, count, primcount);
        }
        
        /// <summary><b>[entry point: <c>glDrawBuffer</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glDrawBuffer_fnptr = &glDrawBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawBuffer_Lazy(uint buf)
        {
            _glDrawBuffer_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawBuffer");
            _glDrawBuffer_fnptr(buf);
        }
        
        /// <summary><b>[entry point: <c>glDrawBuffers</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glDrawBuffers_fnptr = &glDrawBuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawBuffers_Lazy(int n, uint* bufs)
        {
            _glDrawBuffers_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawBuffers");
            _glDrawBuffers_fnptr(n, bufs);
        }
        
        /// <summary><b>[entry point: <c>glDrawBuffersARB</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glDrawBuffersARB_fnptr = &glDrawBuffersARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawBuffersARB_Lazy(int n, uint* bufs)
        {
            _glDrawBuffersARB_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawBuffersARB");
            _glDrawBuffersARB_fnptr(n, bufs);
        }
        
        /// <summary><b>[entry point: <c>glDrawBuffersATI</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glDrawBuffersATI_fnptr = &glDrawBuffersATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawBuffersATI_Lazy(int n, uint* bufs)
        {
            _glDrawBuffersATI_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawBuffersATI");
            _glDrawBuffersATI_fnptr(n, bufs);
        }
        
        /// <summary><b>[entry point: <c>glDrawBuffersEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glDrawBuffersEXT_fnptr = &glDrawBuffersEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawBuffersEXT_Lazy(int n, uint* bufs)
        {
            _glDrawBuffersEXT_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawBuffersEXT");
            _glDrawBuffersEXT_fnptr(n, bufs);
        }
        
        /// <summary><b>[entry point: <c>glDrawBuffersIndexedEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, int*, void> _glDrawBuffersIndexedEXT_fnptr = &glDrawBuffersIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawBuffersIndexedEXT_Lazy(int n, uint* location, int* indices)
        {
            _glDrawBuffersIndexedEXT_fnptr = (delegate* unmanaged<int, uint*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawBuffersIndexedEXT");
            _glDrawBuffersIndexedEXT_fnptr(n, location, indices);
        }
        
        /// <summary><b>[entry point: <c>glDrawBuffersNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glDrawBuffersNV_fnptr = &glDrawBuffersNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawBuffersNV_Lazy(int n, uint* bufs)
        {
            _glDrawBuffersNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawBuffersNV");
            _glDrawBuffersNV_fnptr(n, bufs);
        }
        
        /// <summary><b>[entry point: <c>glDrawCommandsAddressNV</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong*, int*, uint, void> _glDrawCommandsAddressNV_fnptr = &glDrawCommandsAddressNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawCommandsAddressNV_Lazy(uint primitiveMode, ulong* indirects, int* sizes, uint count)
        {
            _glDrawCommandsAddressNV_fnptr = (delegate* unmanaged<uint, ulong*, int*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawCommandsAddressNV");
            _glDrawCommandsAddressNV_fnptr(primitiveMode, indirects, sizes, count);
        }
        
        /// <summary><b>[entry point: <c>glDrawCommandsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, IntPtr*, int*, uint, void> _glDrawCommandsNV_fnptr = &glDrawCommandsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawCommandsNV_Lazy(uint primitiveMode, uint buffer, IntPtr* indirects, int* sizes, uint count)
        {
            _glDrawCommandsNV_fnptr = (delegate* unmanaged<uint, uint, IntPtr*, int*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawCommandsNV");
            _glDrawCommandsNV_fnptr(primitiveMode, buffer, indirects, sizes, count);
        }
        
        /// <summary><b>[entry point: <c>glDrawCommandsStatesAddressNV</c>]</b></summary>
        public static delegate* unmanaged<ulong*, int*, uint*, uint*, uint, void> _glDrawCommandsStatesAddressNV_fnptr = &glDrawCommandsStatesAddressNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawCommandsStatesAddressNV_Lazy(ulong* indirects, int* sizes, uint* states, uint* fbos, uint count)
        {
            _glDrawCommandsStatesAddressNV_fnptr = (delegate* unmanaged<ulong*, int*, uint*, uint*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawCommandsStatesAddressNV");
            _glDrawCommandsStatesAddressNV_fnptr(indirects, sizes, states, fbos, count);
        }
        
        /// <summary><b>[entry point: <c>glDrawCommandsStatesNV</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr*, int*, uint*, uint*, uint, void> _glDrawCommandsStatesNV_fnptr = &glDrawCommandsStatesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawCommandsStatesNV_Lazy(int buffer, IntPtr* indirects, int* sizes, uint* states, uint* fbos, uint count)
        {
            _glDrawCommandsStatesNV_fnptr = (delegate* unmanaged<int, IntPtr*, int*, uint*, uint*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawCommandsStatesNV");
            _glDrawCommandsStatesNV_fnptr(buffer, indirects, sizes, states, fbos, count);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementArrayAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void> _glDrawElementArrayAPPLE_fnptr = &glDrawElementArrayAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementArrayAPPLE_Lazy(uint mode, int first, int count)
        {
            _glDrawElementArrayAPPLE_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementArrayAPPLE");
            _glDrawElementArrayAPPLE_fnptr(mode, first, count);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementArrayATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glDrawElementArrayATI_fnptr = &glDrawElementArrayATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementArrayATI_Lazy(uint mode, int count)
        {
            _glDrawElementArrayATI_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementArrayATI");
            _glDrawElementArrayATI_fnptr(mode, count);
        }
        
        /// <summary><b>[entry point: <c>glDrawElements</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, void> _glDrawElements_fnptr = &glDrawElements_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElements_Lazy(uint mode, int count, uint type, void* indices)
        {
            _glDrawElements_fnptr = (delegate* unmanaged<uint, int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElements");
            _glDrawElements_fnptr(mode, count, type, indices);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsBaseVertex</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, int, void> _glDrawElementsBaseVertex_fnptr = &glDrawElementsBaseVertex_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsBaseVertex_Lazy(uint mode, int count, uint type, void* indices, int basevertex)
        {
            _glDrawElementsBaseVertex_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsBaseVertex");
            _glDrawElementsBaseVertex_fnptr(mode, count, type, indices, basevertex);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsBaseVertexEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, int, void> _glDrawElementsBaseVertexEXT_fnptr = &glDrawElementsBaseVertexEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsBaseVertexEXT_Lazy(uint mode, int count, uint type, void* indices, int basevertex)
        {
            _glDrawElementsBaseVertexEXT_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsBaseVertexEXT");
            _glDrawElementsBaseVertexEXT_fnptr(mode, count, type, indices, basevertex);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsBaseVertexOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, int, void> _glDrawElementsBaseVertexOES_fnptr = &glDrawElementsBaseVertexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsBaseVertexOES_Lazy(uint mode, int count, uint type, void* indices, int basevertex)
        {
            _glDrawElementsBaseVertexOES_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsBaseVertexOES");
            _glDrawElementsBaseVertexOES_fnptr(mode, count, type, indices, basevertex);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsIndirect</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, void> _glDrawElementsIndirect_fnptr = &glDrawElementsIndirect_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsIndirect_Lazy(uint mode, uint type, void* indirect)
        {
            _glDrawElementsIndirect_fnptr = (delegate* unmanaged<uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsIndirect");
            _glDrawElementsIndirect_fnptr(mode, type, indirect);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsInstanced</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, int, void> _glDrawElementsInstanced_fnptr = &glDrawElementsInstanced_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsInstanced_Lazy(uint mode, int count, uint type, void* indices, int instancecount)
        {
            _glDrawElementsInstanced_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstanced");
            _glDrawElementsInstanced_fnptr(mode, count, type, indices, instancecount);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsInstancedANGLE</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, int, void> _glDrawElementsInstancedANGLE_fnptr = &glDrawElementsInstancedANGLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsInstancedANGLE_Lazy(uint mode, int count, uint type, void* indices, int primcount)
        {
            _glDrawElementsInstancedANGLE_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedANGLE");
            _glDrawElementsInstancedANGLE_fnptr(mode, count, type, indices, primcount);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsInstancedARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, int, void> _glDrawElementsInstancedARB_fnptr = &glDrawElementsInstancedARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsInstancedARB_Lazy(uint mode, int count, uint type, void* indices, int primcount)
        {
            _glDrawElementsInstancedARB_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedARB");
            _glDrawElementsInstancedARB_fnptr(mode, count, type, indices, primcount);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsInstancedBaseInstance</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, int, uint, void> _glDrawElementsInstancedBaseInstance_fnptr = &glDrawElementsInstancedBaseInstance_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsInstancedBaseInstance_Lazy(uint mode, int count, uint type, void* indices, int instancecount, uint baseinstance)
        {
            _glDrawElementsInstancedBaseInstance_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedBaseInstance");
            _glDrawElementsInstancedBaseInstance_fnptr(mode, count, type, indices, instancecount, baseinstance);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsInstancedBaseInstanceEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, int, uint, void> _glDrawElementsInstancedBaseInstanceEXT_fnptr = &glDrawElementsInstancedBaseInstanceEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsInstancedBaseInstanceEXT_Lazy(uint mode, int count, uint type, void* indices, int instancecount, uint baseinstance)
        {
            _glDrawElementsInstancedBaseInstanceEXT_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedBaseInstanceEXT");
            _glDrawElementsInstancedBaseInstanceEXT_fnptr(mode, count, type, indices, instancecount, baseinstance);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsInstancedBaseVertex</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, int, int, void> _glDrawElementsInstancedBaseVertex_fnptr = &glDrawElementsInstancedBaseVertex_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsInstancedBaseVertex_Lazy(uint mode, int count, uint type, void* indices, int instancecount, int basevertex)
        {
            _glDrawElementsInstancedBaseVertex_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedBaseVertex");
            _glDrawElementsInstancedBaseVertex_fnptr(mode, count, type, indices, instancecount, basevertex);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsInstancedBaseVertexBaseInstance</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, int, int, uint, void> _glDrawElementsInstancedBaseVertexBaseInstance_fnptr = &glDrawElementsInstancedBaseVertexBaseInstance_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsInstancedBaseVertexBaseInstance_Lazy(uint mode, int count, uint type, void* indices, int instancecount, int basevertex, uint baseinstance)
        {
            _glDrawElementsInstancedBaseVertexBaseInstance_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance");
            _glDrawElementsInstancedBaseVertexBaseInstance_fnptr(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsInstancedBaseVertexBaseInstanceEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, int, int, uint, void> _glDrawElementsInstancedBaseVertexBaseInstanceEXT_fnptr = &glDrawElementsInstancedBaseVertexBaseInstanceEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsInstancedBaseVertexBaseInstanceEXT_Lazy(uint mode, int count, uint type, void* indices, int instancecount, int basevertex, uint baseinstance)
        {
            _glDrawElementsInstancedBaseVertexBaseInstanceEXT_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedBaseVertexBaseInstanceEXT");
            _glDrawElementsInstancedBaseVertexBaseInstanceEXT_fnptr(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsInstancedBaseVertexEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, int, int, void> _glDrawElementsInstancedBaseVertexEXT_fnptr = &glDrawElementsInstancedBaseVertexEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsInstancedBaseVertexEXT_Lazy(uint mode, int count, uint type, void* indices, int instancecount, int basevertex)
        {
            _glDrawElementsInstancedBaseVertexEXT_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedBaseVertexEXT");
            _glDrawElementsInstancedBaseVertexEXT_fnptr(mode, count, type, indices, instancecount, basevertex);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsInstancedBaseVertexOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, int, int, void> _glDrawElementsInstancedBaseVertexOES_fnptr = &glDrawElementsInstancedBaseVertexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsInstancedBaseVertexOES_Lazy(uint mode, int count, uint type, void* indices, int instancecount, int basevertex)
        {
            _glDrawElementsInstancedBaseVertexOES_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedBaseVertexOES");
            _glDrawElementsInstancedBaseVertexOES_fnptr(mode, count, type, indices, instancecount, basevertex);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsInstancedEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, int, void> _glDrawElementsInstancedEXT_fnptr = &glDrawElementsInstancedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsInstancedEXT_Lazy(uint mode, int count, uint type, void* indices, int primcount)
        {
            _glDrawElementsInstancedEXT_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedEXT");
            _glDrawElementsInstancedEXT_fnptr(mode, count, type, indices, primcount);
        }
        
        /// <summary><b>[entry point: <c>glDrawElementsInstancedNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, int, void> _glDrawElementsInstancedNV_fnptr = &glDrawElementsInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawElementsInstancedNV_Lazy(uint mode, int count, uint type, void* indices, int primcount)
        {
            _glDrawElementsInstancedNV_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedNV");
            _glDrawElementsInstancedNV_fnptr(mode, count, type, indices, primcount);
        }
        
        /// <summary><b>[entry point: <c>glDrawMeshArraysSUN</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, void> _glDrawMeshArraysSUN_fnptr = &glDrawMeshArraysSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawMeshArraysSUN_Lazy(uint mode, int first, int count, int width)
        {
            _glDrawMeshArraysSUN_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawMeshArraysSUN");
            _glDrawMeshArraysSUN_fnptr(mode, first, count, width);
        }
        
        /// <summary><b>[entry point: <c>glDrawMeshTasksIndirectNV</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, void> _glDrawMeshTasksIndirectNV_fnptr = &glDrawMeshTasksIndirectNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawMeshTasksIndirectNV_Lazy(IntPtr indirect)
        {
            _glDrawMeshTasksIndirectNV_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glDrawMeshTasksIndirectNV");
            _glDrawMeshTasksIndirectNV_fnptr(indirect);
        }
        
        /// <summary><b>[entry point: <c>glDrawMeshTasksNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glDrawMeshTasksNV_fnptr = &glDrawMeshTasksNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawMeshTasksNV_Lazy(uint first, uint count)
        {
            _glDrawMeshTasksNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawMeshTasksNV");
            _glDrawMeshTasksNV_fnptr(first, count);
        }
        
        /// <summary><b>[entry point: <c>glDrawPixels</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, uint, void*, void> _glDrawPixels_fnptr = &glDrawPixels_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawPixels_Lazy(int width, int height, uint format, uint type, void* pixels)
        {
            _glDrawPixels_fnptr = (delegate* unmanaged<int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawPixels");
            _glDrawPixels_fnptr(width, height, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glDrawRangeElementArrayAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int, void> _glDrawRangeElementArrayAPPLE_fnptr = &glDrawRangeElementArrayAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawRangeElementArrayAPPLE_Lazy(uint mode, uint start, uint end, int first, int count)
        {
            _glDrawRangeElementArrayAPPLE_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawRangeElementArrayAPPLE");
            _glDrawRangeElementArrayAPPLE_fnptr(mode, start, end, first, count);
        }
        
        /// <summary><b>[entry point: <c>glDrawRangeElementArrayATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, void> _glDrawRangeElementArrayATI_fnptr = &glDrawRangeElementArrayATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawRangeElementArrayATI_Lazy(uint mode, uint start, uint end, int count)
        {
            _glDrawRangeElementArrayATI_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawRangeElementArrayATI");
            _glDrawRangeElementArrayATI_fnptr(mode, start, end, count);
        }
        
        /// <summary><b>[entry point: <c>glDrawRangeElements</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, uint, void*, void> _glDrawRangeElements_fnptr = &glDrawRangeElements_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawRangeElements_Lazy(uint mode, uint start, uint end, int count, uint type, void* indices)
        {
            _glDrawRangeElements_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawRangeElements");
            _glDrawRangeElements_fnptr(mode, start, end, count, type, indices);
        }
        
        /// <summary><b>[entry point: <c>glDrawRangeElementsBaseVertex</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void> _glDrawRangeElementsBaseVertex_fnptr = &glDrawRangeElementsBaseVertex_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawRangeElementsBaseVertex_Lazy(uint mode, uint start, uint end, int count, uint type, void* indices, int basevertex)
        {
            _glDrawRangeElementsBaseVertex_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawRangeElementsBaseVertex");
            _glDrawRangeElementsBaseVertex_fnptr(mode, start, end, count, type, indices, basevertex);
        }
        
        /// <summary><b>[entry point: <c>glDrawRangeElementsBaseVertexEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void> _glDrawRangeElementsBaseVertexEXT_fnptr = &glDrawRangeElementsBaseVertexEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawRangeElementsBaseVertexEXT_Lazy(uint mode, uint start, uint end, int count, uint type, void* indices, int basevertex)
        {
            _glDrawRangeElementsBaseVertexEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawRangeElementsBaseVertexEXT");
            _glDrawRangeElementsBaseVertexEXT_fnptr(mode, start, end, count, type, indices, basevertex);
        }
        
        /// <summary><b>[entry point: <c>glDrawRangeElementsBaseVertexOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void> _glDrawRangeElementsBaseVertexOES_fnptr = &glDrawRangeElementsBaseVertexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawRangeElementsBaseVertexOES_Lazy(uint mode, uint start, uint end, int count, uint type, void* indices, int basevertex)
        {
            _glDrawRangeElementsBaseVertexOES_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawRangeElementsBaseVertexOES");
            _glDrawRangeElementsBaseVertexOES_fnptr(mode, start, end, count, type, indices, basevertex);
        }
        
        /// <summary><b>[entry point: <c>glDrawRangeElementsEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, uint, void*, void> _glDrawRangeElementsEXT_fnptr = &glDrawRangeElementsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawRangeElementsEXT_Lazy(uint mode, uint start, uint end, int count, uint type, void* indices)
        {
            _glDrawRangeElementsEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawRangeElementsEXT");
            _glDrawRangeElementsEXT_fnptr(mode, start, end, count, type, indices);
        }
        
        /// <summary><b>[entry point: <c>glDrawTexfOES</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, void> _glDrawTexfOES_fnptr = &glDrawTexfOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTexfOES_Lazy(float x, float y, float z, float width, float height)
        {
            _glDrawTexfOES_fnptr = (delegate* unmanaged<float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexfOES");
            _glDrawTexfOES_fnptr(x, y, z, width, height);
        }
        
        /// <summary><b>[entry point: <c>glDrawTexfvOES</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glDrawTexfvOES_fnptr = &glDrawTexfvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTexfvOES_Lazy(float* coords)
        {
            _glDrawTexfvOES_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexfvOES");
            _glDrawTexfvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glDrawTexiOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, void> _glDrawTexiOES_fnptr = &glDrawTexiOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTexiOES_Lazy(int x, int y, int z, int width, int height)
        {
            _glDrawTexiOES_fnptr = (delegate* unmanaged<int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexiOES");
            _glDrawTexiOES_fnptr(x, y, z, width, height);
        }
        
        /// <summary><b>[entry point: <c>glDrawTexivOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glDrawTexivOES_fnptr = &glDrawTexivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTexivOES_Lazy(int* coords)
        {
            _glDrawTexivOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexivOES");
            _glDrawTexivOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glDrawTexsOES</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, short, short, void> _glDrawTexsOES_fnptr = &glDrawTexsOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTexsOES_Lazy(short x, short y, short z, short width, short height)
        {
            _glDrawTexsOES_fnptr = (delegate* unmanaged<short, short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexsOES");
            _glDrawTexsOES_fnptr(x, y, z, width, height);
        }
        
        /// <summary><b>[entry point: <c>glDrawTexsvOES</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glDrawTexsvOES_fnptr = &glDrawTexsvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTexsvOES_Lazy(short* coords)
        {
            _glDrawTexsvOES_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexsvOES");
            _glDrawTexsvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glDrawTextureNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, float, float, float, float, float, float, float, float, float, void> _glDrawTextureNV_fnptr = &glDrawTextureNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTextureNV_Lazy(int texture, int sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
        {
            _glDrawTextureNV_fnptr = (delegate* unmanaged<int, int, float, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTextureNV");
            _glDrawTextureNV_fnptr(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        }
        
        /// <summary><b>[entry point: <c>glDrawTexxOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, void> _glDrawTexxOES_fnptr = &glDrawTexxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTexxOES_Lazy(int x, int y, int z, int width, int height)
        {
            _glDrawTexxOES_fnptr = (delegate* unmanaged<int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexxOES");
            _glDrawTexxOES_fnptr(x, y, z, width, height);
        }
        
        /// <summary><b>[entry point: <c>glDrawTexxvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glDrawTexxvOES_fnptr = &glDrawTexxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTexxvOES_Lazy(int* coords)
        {
            _glDrawTexxvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexxvOES");
            _glDrawTexxvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glDrawTransformFeedback</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glDrawTransformFeedback_fnptr = &glDrawTransformFeedback_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTransformFeedback_Lazy(uint mode, int id)
        {
            _glDrawTransformFeedback_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTransformFeedback");
            _glDrawTransformFeedback_fnptr(mode, id);
        }
        
        /// <summary><b>[entry point: <c>glDrawTransformFeedbackEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glDrawTransformFeedbackEXT_fnptr = &glDrawTransformFeedbackEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTransformFeedbackEXT_Lazy(uint mode, int id)
        {
            _glDrawTransformFeedbackEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTransformFeedbackEXT");
            _glDrawTransformFeedbackEXT_fnptr(mode, id);
        }
        
        /// <summary><b>[entry point: <c>glDrawTransformFeedbackInstanced</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void> _glDrawTransformFeedbackInstanced_fnptr = &glDrawTransformFeedbackInstanced_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTransformFeedbackInstanced_Lazy(uint mode, int id, int instancecount)
        {
            _glDrawTransformFeedbackInstanced_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTransformFeedbackInstanced");
            _glDrawTransformFeedbackInstanced_fnptr(mode, id, instancecount);
        }
        
        /// <summary><b>[entry point: <c>glDrawTransformFeedbackInstancedEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void> _glDrawTransformFeedbackInstancedEXT_fnptr = &glDrawTransformFeedbackInstancedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTransformFeedbackInstancedEXT_Lazy(uint mode, int id, int instancecount)
        {
            _glDrawTransformFeedbackInstancedEXT_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTransformFeedbackInstancedEXT");
            _glDrawTransformFeedbackInstancedEXT_fnptr(mode, id, instancecount);
        }
        
        /// <summary><b>[entry point: <c>glDrawTransformFeedbackNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glDrawTransformFeedbackNV_fnptr = &glDrawTransformFeedbackNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTransformFeedbackNV_Lazy(uint mode, int id)
        {
            _glDrawTransformFeedbackNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTransformFeedbackNV");
            _glDrawTransformFeedbackNV_fnptr(mode, id);
        }
        
        /// <summary><b>[entry point: <c>glDrawTransformFeedbackStream</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void> _glDrawTransformFeedbackStream_fnptr = &glDrawTransformFeedbackStream_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTransformFeedbackStream_Lazy(uint mode, int id, uint stream)
        {
            _glDrawTransformFeedbackStream_fnptr = (delegate* unmanaged<uint, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTransformFeedbackStream");
            _glDrawTransformFeedbackStream_fnptr(mode, id, stream);
        }
        
        /// <summary><b>[entry point: <c>glDrawTransformFeedbackStreamInstanced</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, void> _glDrawTransformFeedbackStreamInstanced_fnptr = &glDrawTransformFeedbackStreamInstanced_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawTransformFeedbackStreamInstanced_Lazy(uint mode, int id, uint stream, int instancecount)
        {
            _glDrawTransformFeedbackStreamInstanced_fnptr = (delegate* unmanaged<uint, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTransformFeedbackStreamInstanced");
            _glDrawTransformFeedbackStreamInstanced_fnptr(mode, id, stream, instancecount);
        }
        
        /// <summary><b>[entry point: <c>glDrawVkImageNV</c>]</b></summary>
        public static delegate* unmanaged<ulong, int, float, float, float, float, float, float, float, float, float, void> _glDrawVkImageNV_fnptr = &glDrawVkImageNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glDrawVkImageNV_Lazy(ulong vkImage, int sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
        {
            _glDrawVkImageNV_fnptr = (delegate* unmanaged<ulong, int, float, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glDrawVkImageNV");
            _glDrawVkImageNV_fnptr(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        }
        
        /// <summary><b>[entry point: <c>glEdgeFlag</c>]</b></summary>
        public static delegate* unmanaged<byte, void> _glEdgeFlag_fnptr = &glEdgeFlag_Lazy;
        [UnmanagedCallersOnly]
        private static void glEdgeFlag_Lazy(byte flag)
        {
            _glEdgeFlag_fnptr = (delegate* unmanaged<byte, void>)GLLoader.BindingsContext.GetProcAddress("glEdgeFlag");
            _glEdgeFlag_fnptr(flag);
        }
        
        /// <summary><b>[entry point: <c>glEdgeFlagFormatNV</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glEdgeFlagFormatNV_fnptr = &glEdgeFlagFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glEdgeFlagFormatNV_Lazy(int stride)
        {
            _glEdgeFlagFormatNV_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glEdgeFlagFormatNV");
            _glEdgeFlagFormatNV_fnptr(stride);
        }
        
        /// <summary><b>[entry point: <c>glEdgeFlagPointer</c>]</b></summary>
        public static delegate* unmanaged<int, void*, void> _glEdgeFlagPointer_fnptr = &glEdgeFlagPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void glEdgeFlagPointer_Lazy(int stride, void* pointer)
        {
            _glEdgeFlagPointer_fnptr = (delegate* unmanaged<int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glEdgeFlagPointer");
            _glEdgeFlagPointer_fnptr(stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glEdgeFlagPointerEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte*, void> _glEdgeFlagPointerEXT_fnptr = &glEdgeFlagPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glEdgeFlagPointerEXT_Lazy(int stride, int count, byte* pointer)
        {
            _glEdgeFlagPointerEXT_fnptr = (delegate* unmanaged<int, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glEdgeFlagPointerEXT");
            _glEdgeFlagPointerEXT_fnptr(stride, count, pointer);
        }
        
        /// <summary><b>[entry point: <c>glEdgeFlagPointerListIBM</c>]</b></summary>
        public static delegate* unmanaged<int, byte**, int, void> _glEdgeFlagPointerListIBM_fnptr = &glEdgeFlagPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void glEdgeFlagPointerListIBM_Lazy(int stride, byte** pointer, int ptrstride)
        {
            _glEdgeFlagPointerListIBM_fnptr = (delegate* unmanaged<int, byte**, int, void>)GLLoader.BindingsContext.GetProcAddress("glEdgeFlagPointerListIBM");
            _glEdgeFlagPointerListIBM_fnptr(stride, pointer, ptrstride);
        }
        
        /// <summary><b>[entry point: <c>glEdgeFlagv</c>]</b></summary>
        public static delegate* unmanaged<byte*, void> _glEdgeFlagv_fnptr = &glEdgeFlagv_Lazy;
        [UnmanagedCallersOnly]
        private static void glEdgeFlagv_Lazy(byte* flag)
        {
            _glEdgeFlagv_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glEdgeFlagv");
            _glEdgeFlagv_fnptr(flag);
        }
        
        /// <summary><b>[entry point: <c>glEGLImageTargetRenderbufferStorageOES</c>]</b></summary>
        public static delegate* unmanaged<uint, void*, void> _glEGLImageTargetRenderbufferStorageOES_fnptr = &glEGLImageTargetRenderbufferStorageOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glEGLImageTargetRenderbufferStorageOES_Lazy(uint target, void* image)
        {
            _glEGLImageTargetRenderbufferStorageOES_fnptr = (delegate* unmanaged<uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glEGLImageTargetRenderbufferStorageOES");
            _glEGLImageTargetRenderbufferStorageOES_fnptr(target, image);
        }
        
        /// <summary><b>[entry point: <c>glEGLImageTargetTexStorageEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void*, int*, void> _glEGLImageTargetTexStorageEXT_fnptr = &glEGLImageTargetTexStorageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glEGLImageTargetTexStorageEXT_Lazy(uint target, void* image, int* attrib_list)
        {
            _glEGLImageTargetTexStorageEXT_fnptr = (delegate* unmanaged<uint, void*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glEGLImageTargetTexStorageEXT");
            _glEGLImageTargetTexStorageEXT_fnptr(target, image, attrib_list);
        }
        
        /// <summary><b>[entry point: <c>glEGLImageTargetTexture2DOES</c>]</b></summary>
        public static delegate* unmanaged<uint, void*, void> _glEGLImageTargetTexture2DOES_fnptr = &glEGLImageTargetTexture2DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glEGLImageTargetTexture2DOES_Lazy(uint target, void* image)
        {
            _glEGLImageTargetTexture2DOES_fnptr = (delegate* unmanaged<uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glEGLImageTargetTexture2DOES");
            _glEGLImageTargetTexture2DOES_fnptr(target, image);
        }
        
        /// <summary><b>[entry point: <c>glEGLImageTargetTextureStorageEXT</c>]</b></summary>
        public static delegate* unmanaged<int, void*, int*, void> _glEGLImageTargetTextureStorageEXT_fnptr = &glEGLImageTargetTextureStorageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glEGLImageTargetTextureStorageEXT_Lazy(int texture, void* image, int* attrib_list)
        {
            _glEGLImageTargetTextureStorageEXT_fnptr = (delegate* unmanaged<int, void*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glEGLImageTargetTextureStorageEXT");
            _glEGLImageTargetTextureStorageEXT_fnptr(texture, image, attrib_list);
        }
        
        /// <summary><b>[entry point: <c>glElementPointerAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, void*, void> _glElementPointerAPPLE_fnptr = &glElementPointerAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glElementPointerAPPLE_Lazy(uint type, void* pointer)
        {
            _glElementPointerAPPLE_fnptr = (delegate* unmanaged<uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glElementPointerAPPLE");
            _glElementPointerAPPLE_fnptr(type, pointer);
        }
        
        /// <summary><b>[entry point: <c>glElementPointerATI</c>]</b></summary>
        public static delegate* unmanaged<uint, void*, void> _glElementPointerATI_fnptr = &glElementPointerATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glElementPointerATI_Lazy(uint type, void* pointer)
        {
            _glElementPointerATI_fnptr = (delegate* unmanaged<uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glElementPointerATI");
            _glElementPointerATI_fnptr(type, pointer);
        }
        
        /// <summary><b>[entry point: <c>glEnable</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glEnable_fnptr = &glEnable_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnable_Lazy(uint cap)
        {
            _glEnable_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnable");
            _glEnable_fnptr(cap);
        }
        
        /// <summary><b>[entry point: <c>glEnableClientState</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glEnableClientState_fnptr = &glEnableClientState_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnableClientState_Lazy(uint array)
        {
            _glEnableClientState_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableClientState");
            _glEnableClientState_fnptr(array);
        }
        
        /// <summary><b>[entry point: <c>glEnableClientStateiEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glEnableClientStateiEXT_fnptr = &glEnableClientStateiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnableClientStateiEXT_Lazy(uint array, uint index)
        {
            _glEnableClientStateiEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableClientStateiEXT");
            _glEnableClientStateiEXT_fnptr(array, index);
        }
        
        /// <summary><b>[entry point: <c>glEnableClientStateIndexedEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glEnableClientStateIndexedEXT_fnptr = &glEnableClientStateIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnableClientStateIndexedEXT_Lazy(uint array, uint index)
        {
            _glEnableClientStateIndexedEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableClientStateIndexedEXT");
            _glEnableClientStateIndexedEXT_fnptr(array, index);
        }
        
        /// <summary><b>[entry point: <c>glEnableDriverControlQCOM</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glEnableDriverControlQCOM_fnptr = &glEnableDriverControlQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnableDriverControlQCOM_Lazy(uint driverControl)
        {
            _glEnableDriverControlQCOM_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableDriverControlQCOM");
            _glEnableDriverControlQCOM_fnptr(driverControl);
        }
        
        /// <summary><b>[entry point: <c>glEnablei</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glEnablei_fnptr = &glEnablei_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnablei_Lazy(uint target, uint index)
        {
            _glEnablei_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnablei");
            _glEnablei_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glEnableiEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glEnableiEXT_fnptr = &glEnableiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnableiEXT_Lazy(uint target, uint index)
        {
            _glEnableiEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableiEXT");
            _glEnableiEXT_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glEnableIndexedEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glEnableIndexedEXT_fnptr = &glEnableIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnableIndexedEXT_Lazy(uint target, uint index)
        {
            _glEnableIndexedEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableIndexedEXT");
            _glEnableIndexedEXT_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glEnableiNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glEnableiNV_fnptr = &glEnableiNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnableiNV_Lazy(uint target, uint index)
        {
            _glEnableiNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableiNV");
            _glEnableiNV_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glEnableiOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glEnableiOES_fnptr = &glEnableiOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnableiOES_Lazy(uint target, uint index)
        {
            _glEnableiOES_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableiOES");
            _glEnableiOES_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glEnableVariantClientStateEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glEnableVariantClientStateEXT_fnptr = &glEnableVariantClientStateEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnableVariantClientStateEXT_Lazy(uint id)
        {
            _glEnableVariantClientStateEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableVariantClientStateEXT");
            _glEnableVariantClientStateEXT_fnptr(id);
        }
        
        /// <summary><b>[entry point: <c>glEnableVertexArrayAttrib</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glEnableVertexArrayAttrib_fnptr = &glEnableVertexArrayAttrib_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnableVertexArrayAttrib_Lazy(int vaobj, uint index)
        {
            _glEnableVertexArrayAttrib_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableVertexArrayAttrib");
            _glEnableVertexArrayAttrib_fnptr(vaobj, index);
        }
        
        /// <summary><b>[entry point: <c>glEnableVertexArrayAttribEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glEnableVertexArrayAttribEXT_fnptr = &glEnableVertexArrayAttribEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnableVertexArrayAttribEXT_Lazy(int vaobj, uint index)
        {
            _glEnableVertexArrayAttribEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableVertexArrayAttribEXT");
            _glEnableVertexArrayAttribEXT_fnptr(vaobj, index);
        }
        
        /// <summary><b>[entry point: <c>glEnableVertexArrayEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glEnableVertexArrayEXT_fnptr = &glEnableVertexArrayEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnableVertexArrayEXT_Lazy(int vaobj, uint array)
        {
            _glEnableVertexArrayEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableVertexArrayEXT");
            _glEnableVertexArrayEXT_fnptr(vaobj, array);
        }
        
        /// <summary><b>[entry point: <c>glEnableVertexAttribAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glEnableVertexAttribAPPLE_fnptr = &glEnableVertexAttribAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnableVertexAttribAPPLE_Lazy(uint index, uint pname)
        {
            _glEnableVertexAttribAPPLE_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableVertexAttribAPPLE");
            _glEnableVertexAttribAPPLE_fnptr(index, pname);
        }
        
        /// <summary><b>[entry point: <c>glEnableVertexAttribArray</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glEnableVertexAttribArray_fnptr = &glEnableVertexAttribArray_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnableVertexAttribArray_Lazy(uint index)
        {
            _glEnableVertexAttribArray_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableVertexAttribArray");
            _glEnableVertexAttribArray_fnptr(index);
        }
        
        /// <summary><b>[entry point: <c>glEnableVertexAttribArrayARB</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glEnableVertexAttribArrayARB_fnptr = &glEnableVertexAttribArrayARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnableVertexAttribArrayARB_Lazy(uint index)
        {
            _glEnableVertexAttribArrayARB_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableVertexAttribArrayARB");
            _glEnableVertexAttribArrayARB_fnptr(index);
        }
        
        /// <summary><b>[entry point: <c>glEnd</c>]</b></summary>
        public static delegate* unmanaged<void> _glEnd_fnptr = &glEnd_Lazy;
        [UnmanagedCallersOnly]
        private static void glEnd_Lazy()
        {
            _glEnd_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEnd");
            _glEnd_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glEndConditionalRender</c>]</b></summary>
        public static delegate* unmanaged<void> _glEndConditionalRender_fnptr = &glEndConditionalRender_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndConditionalRender_Lazy()
        {
            _glEndConditionalRender_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndConditionalRender");
            _glEndConditionalRender_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glEndConditionalRenderNV</c>]</b></summary>
        public static delegate* unmanaged<void> _glEndConditionalRenderNV_fnptr = &glEndConditionalRenderNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndConditionalRenderNV_Lazy()
        {
            _glEndConditionalRenderNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndConditionalRenderNV");
            _glEndConditionalRenderNV_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glEndConditionalRenderNVX</c>]</b></summary>
        public static delegate* unmanaged<void> _glEndConditionalRenderNVX_fnptr = &glEndConditionalRenderNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndConditionalRenderNVX_Lazy()
        {
            _glEndConditionalRenderNVX_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndConditionalRenderNVX");
            _glEndConditionalRenderNVX_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glEndFragmentShaderATI</c>]</b></summary>
        public static delegate* unmanaged<void> _glEndFragmentShaderATI_fnptr = &glEndFragmentShaderATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndFragmentShaderATI_Lazy()
        {
            _glEndFragmentShaderATI_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndFragmentShaderATI");
            _glEndFragmentShaderATI_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glEndList</c>]</b></summary>
        public static delegate* unmanaged<void> _glEndList_fnptr = &glEndList_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndList_Lazy()
        {
            _glEndList_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndList");
            _glEndList_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glEndOcclusionQueryNV</c>]</b></summary>
        public static delegate* unmanaged<void> _glEndOcclusionQueryNV_fnptr = &glEndOcclusionQueryNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndOcclusionQueryNV_Lazy()
        {
            _glEndOcclusionQueryNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndOcclusionQueryNV");
            _glEndOcclusionQueryNV_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glEndPerfMonitorAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glEndPerfMonitorAMD_fnptr = &glEndPerfMonitorAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndPerfMonitorAMD_Lazy(uint monitor)
        {
            _glEndPerfMonitorAMD_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEndPerfMonitorAMD");
            _glEndPerfMonitorAMD_fnptr(monitor);
        }
        
        /// <summary><b>[entry point: <c>glEndPerfQueryINTEL</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glEndPerfQueryINTEL_fnptr = &glEndPerfQueryINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndPerfQueryINTEL_Lazy(int queryHandle)
        {
            _glEndPerfQueryINTEL_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glEndPerfQueryINTEL");
            _glEndPerfQueryINTEL_fnptr(queryHandle);
        }
        
        /// <summary><b>[entry point: <c>glEndQuery</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glEndQuery_fnptr = &glEndQuery_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndQuery_Lazy(uint target)
        {
            _glEndQuery_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEndQuery");
            _glEndQuery_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glEndQueryARB</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glEndQueryARB_fnptr = &glEndQueryARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndQueryARB_Lazy(uint target)
        {
            _glEndQueryARB_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEndQueryARB");
            _glEndQueryARB_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glEndQueryEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glEndQueryEXT_fnptr = &glEndQueryEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndQueryEXT_Lazy(uint target)
        {
            _glEndQueryEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEndQueryEXT");
            _glEndQueryEXT_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glEndQueryIndexed</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glEndQueryIndexed_fnptr = &glEndQueryIndexed_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndQueryIndexed_Lazy(uint target, uint index)
        {
            _glEndQueryIndexed_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEndQueryIndexed");
            _glEndQueryIndexed_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glEndTilingQCOM</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glEndTilingQCOM_fnptr = &glEndTilingQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndTilingQCOM_Lazy(uint preserveMask)
        {
            _glEndTilingQCOM_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEndTilingQCOM");
            _glEndTilingQCOM_fnptr(preserveMask);
        }
        
        /// <summary><b>[entry point: <c>glEndTransformFeedback</c>]</b></summary>
        public static delegate* unmanaged<void> _glEndTransformFeedback_fnptr = &glEndTransformFeedback_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndTransformFeedback_Lazy()
        {
            _glEndTransformFeedback_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndTransformFeedback");
            _glEndTransformFeedback_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glEndTransformFeedbackEXT</c>]</b></summary>
        public static delegate* unmanaged<void> _glEndTransformFeedbackEXT_fnptr = &glEndTransformFeedbackEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndTransformFeedbackEXT_Lazy()
        {
            _glEndTransformFeedbackEXT_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndTransformFeedbackEXT");
            _glEndTransformFeedbackEXT_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glEndTransformFeedbackNV</c>]</b></summary>
        public static delegate* unmanaged<void> _glEndTransformFeedbackNV_fnptr = &glEndTransformFeedbackNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndTransformFeedbackNV_Lazy()
        {
            _glEndTransformFeedbackNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndTransformFeedbackNV");
            _glEndTransformFeedbackNV_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glEndVertexShaderEXT</c>]</b></summary>
        public static delegate* unmanaged<void> _glEndVertexShaderEXT_fnptr = &glEndVertexShaderEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndVertexShaderEXT_Lazy()
        {
            _glEndVertexShaderEXT_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndVertexShaderEXT");
            _glEndVertexShaderEXT_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glEndVideoCaptureNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glEndVideoCaptureNV_fnptr = &glEndVideoCaptureNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glEndVideoCaptureNV_Lazy(uint video_capture_slot)
        {
            _glEndVideoCaptureNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEndVideoCaptureNV");
            _glEndVideoCaptureNV_fnptr(video_capture_slot);
        }
        
        /// <summary><b>[entry point: <c>glEvalCoord1d</c>]</b></summary>
        public static delegate* unmanaged<double, void> _glEvalCoord1d_fnptr = &glEvalCoord1d_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalCoord1d_Lazy(double u)
        {
            _glEvalCoord1d_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord1d");
            _glEvalCoord1d_fnptr(u);
        }
        
        /// <summary><b>[entry point: <c>glEvalCoord1dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glEvalCoord1dv_fnptr = &glEvalCoord1dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalCoord1dv_Lazy(double* u)
        {
            _glEvalCoord1dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord1dv");
            _glEvalCoord1dv_fnptr(u);
        }
        
        /// <summary><b>[entry point: <c>glEvalCoord1f</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glEvalCoord1f_fnptr = &glEvalCoord1f_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalCoord1f_Lazy(float u)
        {
            _glEvalCoord1f_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord1f");
            _glEvalCoord1f_fnptr(u);
        }
        
        /// <summary><b>[entry point: <c>glEvalCoord1fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glEvalCoord1fv_fnptr = &glEvalCoord1fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalCoord1fv_Lazy(float* u)
        {
            _glEvalCoord1fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord1fv");
            _glEvalCoord1fv_fnptr(u);
        }
        
        /// <summary><b>[entry point: <c>glEvalCoord1xOES</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glEvalCoord1xOES_fnptr = &glEvalCoord1xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalCoord1xOES_Lazy(int u)
        {
            _glEvalCoord1xOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord1xOES");
            _glEvalCoord1xOES_fnptr(u);
        }
        
        /// <summary><b>[entry point: <c>glEvalCoord1xvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glEvalCoord1xvOES_fnptr = &glEvalCoord1xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalCoord1xvOES_Lazy(int* coords)
        {
            _glEvalCoord1xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord1xvOES");
            _glEvalCoord1xvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glEvalCoord2d</c>]</b></summary>
        public static delegate* unmanaged<double, double, void> _glEvalCoord2d_fnptr = &glEvalCoord2d_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalCoord2d_Lazy(double u, double v)
        {
            _glEvalCoord2d_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord2d");
            _glEvalCoord2d_fnptr(u, v);
        }
        
        /// <summary><b>[entry point: <c>glEvalCoord2dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glEvalCoord2dv_fnptr = &glEvalCoord2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalCoord2dv_Lazy(double* u)
        {
            _glEvalCoord2dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord2dv");
            _glEvalCoord2dv_fnptr(u);
        }
        
        /// <summary><b>[entry point: <c>glEvalCoord2f</c>]</b></summary>
        public static delegate* unmanaged<float, float, void> _glEvalCoord2f_fnptr = &glEvalCoord2f_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalCoord2f_Lazy(float u, float v)
        {
            _glEvalCoord2f_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord2f");
            _glEvalCoord2f_fnptr(u, v);
        }
        
        /// <summary><b>[entry point: <c>glEvalCoord2fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glEvalCoord2fv_fnptr = &glEvalCoord2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalCoord2fv_Lazy(float* u)
        {
            _glEvalCoord2fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord2fv");
            _glEvalCoord2fv_fnptr(u);
        }
        
        /// <summary><b>[entry point: <c>glEvalCoord2xOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glEvalCoord2xOES_fnptr = &glEvalCoord2xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalCoord2xOES_Lazy(int u, int v)
        {
            _glEvalCoord2xOES_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord2xOES");
            _glEvalCoord2xOES_fnptr(u, v);
        }
        
        /// <summary><b>[entry point: <c>glEvalCoord2xvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glEvalCoord2xvOES_fnptr = &glEvalCoord2xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalCoord2xvOES_Lazy(int* coords)
        {
            _glEvalCoord2xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord2xvOES");
            _glEvalCoord2xvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glEvalMapsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glEvalMapsNV_fnptr = &glEvalMapsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalMapsNV_Lazy(uint target, uint mode)
        {
            _glEvalMapsNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEvalMapsNV");
            _glEvalMapsNV_fnptr(target, mode);
        }
        
        /// <summary><b>[entry point: <c>glEvalMesh1</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void> _glEvalMesh1_fnptr = &glEvalMesh1_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalMesh1_Lazy(uint mode, int i1, int i2)
        {
            _glEvalMesh1_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glEvalMesh1");
            _glEvalMesh1_fnptr(mode, i1, i2);
        }
        
        /// <summary><b>[entry point: <c>glEvalMesh2</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, void> _glEvalMesh2_fnptr = &glEvalMesh2_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalMesh2_Lazy(uint mode, int i1, int i2, int j1, int j2)
        {
            _glEvalMesh2_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glEvalMesh2");
            _glEvalMesh2_fnptr(mode, i1, i2, j1, j2);
        }
        
        /// <summary><b>[entry point: <c>glEvalPoint1</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glEvalPoint1_fnptr = &glEvalPoint1_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalPoint1_Lazy(int i)
        {
            _glEvalPoint1_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glEvalPoint1");
            _glEvalPoint1_fnptr(i);
        }
        
        /// <summary><b>[entry point: <c>glEvalPoint2</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glEvalPoint2_fnptr = &glEvalPoint2_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvalPoint2_Lazy(int i, int j)
        {
            _glEvalPoint2_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glEvalPoint2");
            _glEvalPoint2_fnptr(i, j);
        }
        
        /// <summary><b>[entry point: <c>glEvaluateDepthValuesARB</c>]</b></summary>
        public static delegate* unmanaged<void> _glEvaluateDepthValuesARB_fnptr = &glEvaluateDepthValuesARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glEvaluateDepthValuesARB_Lazy()
        {
            _glEvaluateDepthValuesARB_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEvaluateDepthValuesARB");
            _glEvaluateDepthValuesARB_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glExecuteProgramNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glExecuteProgramNV_fnptr = &glExecuteProgramNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glExecuteProgramNV_Lazy(uint target, uint id, float* parameters)
        {
            _glExecuteProgramNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glExecuteProgramNV");
            _glExecuteProgramNV_fnptr(target, id, parameters);
        }
        
        /// <summary><b>[entry point: <c>glExtGetBufferPointervQCOM</c>]</b></summary>
        public static delegate* unmanaged<uint, void**, void> _glExtGetBufferPointervQCOM_fnptr = &glExtGetBufferPointervQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glExtGetBufferPointervQCOM_Lazy(uint target, void** parameters)
        {
            _glExtGetBufferPointervQCOM_fnptr = (delegate* unmanaged<uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetBufferPointervQCOM");
            _glExtGetBufferPointervQCOM_fnptr(target, parameters);
        }
        
        /// <summary><b>[entry point: <c>glExtGetBuffersQCOM</c>]</b></summary>
        public static delegate* unmanaged<int*, int, int*, void> _glExtGetBuffersQCOM_fnptr = &glExtGetBuffersQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glExtGetBuffersQCOM_Lazy(int* buffers, int maxBuffers, int* numBuffers)
        {
            _glExtGetBuffersQCOM_fnptr = (delegate* unmanaged<int*, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetBuffersQCOM");
            _glExtGetBuffersQCOM_fnptr(buffers, maxBuffers, numBuffers);
        }
        
        /// <summary><b>[entry point: <c>glExtGetFramebuffersQCOM</c>]</b></summary>
        public static delegate* unmanaged<int*, int, int*, void> _glExtGetFramebuffersQCOM_fnptr = &glExtGetFramebuffersQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glExtGetFramebuffersQCOM_Lazy(int* framebuffers, int maxFramebuffers, int* numFramebuffers)
        {
            _glExtGetFramebuffersQCOM_fnptr = (delegate* unmanaged<int*, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetFramebuffersQCOM");
            _glExtGetFramebuffersQCOM_fnptr(framebuffers, maxFramebuffers, numFramebuffers);
        }
        
        /// <summary><b>[entry point: <c>glExtGetProgramBinarySourceQCOM</c>]</b></summary>
        public static delegate* unmanaged<int, uint, byte*, int*, void> _glExtGetProgramBinarySourceQCOM_fnptr = &glExtGetProgramBinarySourceQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glExtGetProgramBinarySourceQCOM_Lazy(int program, uint shadertype, byte* source, int* length)
        {
            _glExtGetProgramBinarySourceQCOM_fnptr = (delegate* unmanaged<int, uint, byte*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetProgramBinarySourceQCOM");
            _glExtGetProgramBinarySourceQCOM_fnptr(program, shadertype, source, length);
        }
        
        /// <summary><b>[entry point: <c>glExtGetProgramsQCOM</c>]</b></summary>
        public static delegate* unmanaged<int*, int, int*, void> _glExtGetProgramsQCOM_fnptr = &glExtGetProgramsQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glExtGetProgramsQCOM_Lazy(int* programs, int maxPrograms, int* numPrograms)
        {
            _glExtGetProgramsQCOM_fnptr = (delegate* unmanaged<int*, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetProgramsQCOM");
            _glExtGetProgramsQCOM_fnptr(programs, maxPrograms, numPrograms);
        }
        
        /// <summary><b>[entry point: <c>glExtGetRenderbuffersQCOM</c>]</b></summary>
        public static delegate* unmanaged<int*, int, int*, void> _glExtGetRenderbuffersQCOM_fnptr = &glExtGetRenderbuffersQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glExtGetRenderbuffersQCOM_Lazy(int* renderbuffers, int maxRenderbuffers, int* numRenderbuffers)
        {
            _glExtGetRenderbuffersQCOM_fnptr = (delegate* unmanaged<int*, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetRenderbuffersQCOM");
            _glExtGetRenderbuffersQCOM_fnptr(renderbuffers, maxRenderbuffers, numRenderbuffers);
        }
        
        /// <summary><b>[entry point: <c>glExtGetShadersQCOM</c>]</b></summary>
        public static delegate* unmanaged<int*, int, int*, void> _glExtGetShadersQCOM_fnptr = &glExtGetShadersQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glExtGetShadersQCOM_Lazy(int* shaders, int maxShaders, int* numShaders)
        {
            _glExtGetShadersQCOM_fnptr = (delegate* unmanaged<int*, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetShadersQCOM");
            _glExtGetShadersQCOM_fnptr(shaders, maxShaders, numShaders);
        }
        
        /// <summary><b>[entry point: <c>glExtGetTexLevelParameterivQCOM</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, int*, void> _glExtGetTexLevelParameterivQCOM_fnptr = &glExtGetTexLevelParameterivQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glExtGetTexLevelParameterivQCOM_Lazy(int texture, uint face, int level, uint pname, int* parameters)
        {
            _glExtGetTexLevelParameterivQCOM_fnptr = (delegate* unmanaged<int, uint, int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetTexLevelParameterivQCOM");
            _glExtGetTexLevelParameterivQCOM_fnptr(texture, face, level, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glExtGetTexSubImageQCOM</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void> _glExtGetTexSubImageQCOM_fnptr = &glExtGetTexSubImageQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glExtGetTexSubImageQCOM_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* texels)
        {
            _glExtGetTexSubImageQCOM_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetTexSubImageQCOM");
            _glExtGetTexSubImageQCOM_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
        }
        
        /// <summary><b>[entry point: <c>glExtGetTexturesQCOM</c>]</b></summary>
        public static delegate* unmanaged<int*, int, int*, void> _glExtGetTexturesQCOM_fnptr = &glExtGetTexturesQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glExtGetTexturesQCOM_Lazy(int* textures, int maxTextures, int* numTextures)
        {
            _glExtGetTexturesQCOM_fnptr = (delegate* unmanaged<int*, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetTexturesQCOM");
            _glExtGetTexturesQCOM_fnptr(textures, maxTextures, numTextures);
        }
        
        /// <summary><b>[entry point: <c>glExtIsProgramBinaryQCOM</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glExtIsProgramBinaryQCOM_fnptr = &glExtIsProgramBinaryQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static byte glExtIsProgramBinaryQCOM_Lazy(int program)
        {
            _glExtIsProgramBinaryQCOM_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glExtIsProgramBinaryQCOM");
            return _glExtIsProgramBinaryQCOM_fnptr(program);
        }
        
        /// <summary><b>[entry point: <c>glExtractComponentEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glExtractComponentEXT_fnptr = &glExtractComponentEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glExtractComponentEXT_Lazy(uint res, uint src, uint num)
        {
            _glExtractComponentEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glExtractComponentEXT");
            _glExtractComponentEXT_fnptr(res, src, num);
        }
        
        /// <summary><b>[entry point: <c>glExtrapolateTex2DQCOM</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, float, void> _glExtrapolateTex2DQCOM_fnptr = &glExtrapolateTex2DQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glExtrapolateTex2DQCOM_Lazy(int src1, int src2, int output, float scaleFactor)
        {
            _glExtrapolateTex2DQCOM_fnptr = (delegate* unmanaged<int, int, int, float, void>)GLLoader.BindingsContext.GetProcAddress("glExtrapolateTex2DQCOM");
            _glExtrapolateTex2DQCOM_fnptr(src1, src2, output, scaleFactor);
        }
        
        /// <summary><b>[entry point: <c>glExtTexObjectStateOverrideiQCOM</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glExtTexObjectStateOverrideiQCOM_fnptr = &glExtTexObjectStateOverrideiQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glExtTexObjectStateOverrideiQCOM_Lazy(uint target, uint pname, int param)
        {
            _glExtTexObjectStateOverrideiQCOM_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glExtTexObjectStateOverrideiQCOM");
            _glExtTexObjectStateOverrideiQCOM_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glFeedbackBuffer</c>]</b></summary>
        public static delegate* unmanaged<int, uint, float*, void> _glFeedbackBuffer_fnptr = &glFeedbackBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glFeedbackBuffer_Lazy(int size, uint type, float* buffer)
        {
            _glFeedbackBuffer_fnptr = (delegate* unmanaged<int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFeedbackBuffer");
            _glFeedbackBuffer_fnptr(size, type, buffer);
        }
        
        /// <summary><b>[entry point: <c>glFeedbackBufferxOES</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glFeedbackBufferxOES_fnptr = &glFeedbackBufferxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glFeedbackBufferxOES_Lazy(int n, uint type, int* buffer)
        {
            _glFeedbackBufferxOES_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glFeedbackBufferxOES");
            _glFeedbackBufferxOES_fnptr(n, type, buffer);
        }
        
        /// <summary><b>[entry point: <c>glFenceSync</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, IntPtr> _glFenceSync_fnptr = &glFenceSync_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr glFenceSync_Lazy(uint condition, uint flags)
        {
            _glFenceSync_fnptr = (delegate* unmanaged<uint, uint, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glFenceSync");
            return _glFenceSync_fnptr(condition, flags);
        }
        
        /// <summary><b>[entry point: <c>glFenceSyncAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, IntPtr> _glFenceSyncAPPLE_fnptr = &glFenceSyncAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr glFenceSyncAPPLE_Lazy(uint condition, uint flags)
        {
            _glFenceSyncAPPLE_fnptr = (delegate* unmanaged<uint, uint, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glFenceSyncAPPLE");
            return _glFenceSyncAPPLE_fnptr(condition, flags);
        }
        
        /// <summary><b>[entry point: <c>glFinalCombinerInputNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, void> _glFinalCombinerInputNV_fnptr = &glFinalCombinerInputNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glFinalCombinerInputNV_Lazy(uint variable, uint input, uint mapping, uint componentUsage)
        {
            _glFinalCombinerInputNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glFinalCombinerInputNV");
            _glFinalCombinerInputNV_fnptr(variable, input, mapping, componentUsage);
        }
        
        /// <summary><b>[entry point: <c>glFinish</c>]</b></summary>
        public static delegate* unmanaged<void> _glFinish_fnptr = &glFinish_Lazy;
        [UnmanagedCallersOnly]
        private static void glFinish_Lazy()
        {
            _glFinish_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFinish");
            _glFinish_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glFinishAsyncSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint*, int> _glFinishAsyncSGIX_fnptr = &glFinishAsyncSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static int glFinishAsyncSGIX_Lazy(uint* markerp)
        {
            _glFinishAsyncSGIX_fnptr = (delegate* unmanaged<uint*, int>)GLLoader.BindingsContext.GetProcAddress("glFinishAsyncSGIX");
            return _glFinishAsyncSGIX_fnptr(markerp);
        }
        
        /// <summary><b>[entry point: <c>glFinishFenceAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glFinishFenceAPPLE_fnptr = &glFinishFenceAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glFinishFenceAPPLE_Lazy(uint fence)
        {
            _glFinishFenceAPPLE_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glFinishFenceAPPLE");
            _glFinishFenceAPPLE_fnptr(fence);
        }
        
        /// <summary><b>[entry point: <c>glFinishFenceNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glFinishFenceNV_fnptr = &glFinishFenceNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glFinishFenceNV_Lazy(uint fence)
        {
            _glFinishFenceNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glFinishFenceNV");
            _glFinishFenceNV_fnptr(fence);
        }
        
        /// <summary><b>[entry point: <c>glFinishObjectAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glFinishObjectAPPLE_fnptr = &glFinishObjectAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glFinishObjectAPPLE_Lazy(uint obj, int name)
        {
            _glFinishObjectAPPLE_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFinishObjectAPPLE");
            _glFinishObjectAPPLE_fnptr(obj, name);
        }
        
        /// <summary><b>[entry point: <c>glFinishTextureSUNX</c>]</b></summary>
        public static delegate* unmanaged<void> _glFinishTextureSUNX_fnptr = &glFinishTextureSUNX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFinishTextureSUNX_Lazy()
        {
            _glFinishTextureSUNX_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFinishTextureSUNX");
            _glFinishTextureSUNX_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glFlush</c>]</b></summary>
        public static delegate* unmanaged<void> _glFlush_fnptr = &glFlush_Lazy;
        [UnmanagedCallersOnly]
        private static void glFlush_Lazy()
        {
            _glFlush_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFlush");
            _glFlush_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glFlushMappedBufferRange</c>]</b></summary>
        public static delegate* unmanaged<uint, IntPtr, nint, void> _glFlushMappedBufferRange_fnptr = &glFlushMappedBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void glFlushMappedBufferRange_Lazy(uint target, IntPtr offset, nint length)
        {
            _glFlushMappedBufferRange_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glFlushMappedBufferRange");
            _glFlushMappedBufferRange_fnptr(target, offset, length);
        }
        
        /// <summary><b>[entry point: <c>glFlushMappedBufferRangeAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, IntPtr, nint, void> _glFlushMappedBufferRangeAPPLE_fnptr = &glFlushMappedBufferRangeAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glFlushMappedBufferRangeAPPLE_Lazy(uint target, IntPtr offset, nint size)
        {
            _glFlushMappedBufferRangeAPPLE_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glFlushMappedBufferRangeAPPLE");
            _glFlushMappedBufferRangeAPPLE_fnptr(target, offset, size);
        }
        
        /// <summary><b>[entry point: <c>glFlushMappedBufferRangeEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, IntPtr, nint, void> _glFlushMappedBufferRangeEXT_fnptr = &glFlushMappedBufferRangeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFlushMappedBufferRangeEXT_Lazy(uint target, IntPtr offset, nint length)
        {
            _glFlushMappedBufferRangeEXT_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glFlushMappedBufferRangeEXT");
            _glFlushMappedBufferRangeEXT_fnptr(target, offset, length);
        }
        
        /// <summary><b>[entry point: <c>glFlushMappedNamedBufferRange</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr, nint, void> _glFlushMappedNamedBufferRange_fnptr = &glFlushMappedNamedBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void glFlushMappedNamedBufferRange_Lazy(int buffer, IntPtr offset, nint length)
        {
            _glFlushMappedNamedBufferRange_fnptr = (delegate* unmanaged<int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glFlushMappedNamedBufferRange");
            _glFlushMappedNamedBufferRange_fnptr(buffer, offset, length);
        }
        
        /// <summary><b>[entry point: <c>glFlushMappedNamedBufferRangeEXT</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr, nint, void> _glFlushMappedNamedBufferRangeEXT_fnptr = &glFlushMappedNamedBufferRangeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFlushMappedNamedBufferRangeEXT_Lazy(int buffer, IntPtr offset, nint length)
        {
            _glFlushMappedNamedBufferRangeEXT_fnptr = (delegate* unmanaged<int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glFlushMappedNamedBufferRangeEXT");
            _glFlushMappedNamedBufferRangeEXT_fnptr(buffer, offset, length);
        }
        
        /// <summary><b>[entry point: <c>glFlushPixelDataRangeNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glFlushPixelDataRangeNV_fnptr = &glFlushPixelDataRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glFlushPixelDataRangeNV_Lazy(uint target)
        {
            _glFlushPixelDataRangeNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glFlushPixelDataRangeNV");
            _glFlushPixelDataRangeNV_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glFlushRasterSGIX</c>]</b></summary>
        public static delegate* unmanaged<void> _glFlushRasterSGIX_fnptr = &glFlushRasterSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFlushRasterSGIX_Lazy()
        {
            _glFlushRasterSGIX_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFlushRasterSGIX");
            _glFlushRasterSGIX_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glFlushStaticDataIBM</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glFlushStaticDataIBM_fnptr = &glFlushStaticDataIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void glFlushStaticDataIBM_Lazy(uint target)
        {
            _glFlushStaticDataIBM_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glFlushStaticDataIBM");
            _glFlushStaticDataIBM_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glFlushVertexArrayRangeAPPLE</c>]</b></summary>
        public static delegate* unmanaged<int, void*, void> _glFlushVertexArrayRangeAPPLE_fnptr = &glFlushVertexArrayRangeAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glFlushVertexArrayRangeAPPLE_Lazy(int length, void* pointer)
        {
            _glFlushVertexArrayRangeAPPLE_fnptr = (delegate* unmanaged<int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glFlushVertexArrayRangeAPPLE");
            _glFlushVertexArrayRangeAPPLE_fnptr(length, pointer);
        }
        
        /// <summary><b>[entry point: <c>glFlushVertexArrayRangeNV</c>]</b></summary>
        public static delegate* unmanaged<void> _glFlushVertexArrayRangeNV_fnptr = &glFlushVertexArrayRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glFlushVertexArrayRangeNV_Lazy()
        {
            _glFlushVertexArrayRangeNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFlushVertexArrayRangeNV");
            _glFlushVertexArrayRangeNV_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glFogCoordd</c>]</b></summary>
        public static delegate* unmanaged<double, void> _glFogCoordd_fnptr = &glFogCoordd_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogCoordd_Lazy(double coord)
        {
            _glFogCoordd_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordd");
            _glFogCoordd_fnptr(coord);
        }
        
        /// <summary><b>[entry point: <c>glFogCoorddEXT</c>]</b></summary>
        public static delegate* unmanaged<double, void> _glFogCoorddEXT_fnptr = &glFogCoorddEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogCoorddEXT_Lazy(double coord)
        {
            _glFogCoorddEXT_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoorddEXT");
            _glFogCoorddEXT_fnptr(coord);
        }
        
        /// <summary><b>[entry point: <c>glFogCoorddv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glFogCoorddv_fnptr = &glFogCoorddv_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogCoorddv_Lazy(double* coord)
        {
            _glFogCoorddv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoorddv");
            _glFogCoorddv_fnptr(coord);
        }
        
        /// <summary><b>[entry point: <c>glFogCoorddvEXT</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glFogCoorddvEXT_fnptr = &glFogCoorddvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogCoorddvEXT_Lazy(double* coord)
        {
            _glFogCoorddvEXT_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoorddvEXT");
            _glFogCoorddvEXT_fnptr(coord);
        }
        
        /// <summary><b>[entry point: <c>glFogCoordf</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glFogCoordf_fnptr = &glFogCoordf_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogCoordf_Lazy(float coord)
        {
            _glFogCoordf_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordf");
            _glFogCoordf_fnptr(coord);
        }
        
        /// <summary><b>[entry point: <c>glFogCoordfEXT</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glFogCoordfEXT_fnptr = &glFogCoordfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogCoordfEXT_Lazy(float coord)
        {
            _glFogCoordfEXT_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordfEXT");
            _glFogCoordfEXT_fnptr(coord);
        }
        
        /// <summary><b>[entry point: <c>glFogCoordFormatNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glFogCoordFormatNV_fnptr = &glFogCoordFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogCoordFormatNV_Lazy(uint type, int stride)
        {
            _glFogCoordFormatNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordFormatNV");
            _glFogCoordFormatNV_fnptr(type, stride);
        }
        
        /// <summary><b>[entry point: <c>glFogCoordfv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glFogCoordfv_fnptr = &glFogCoordfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogCoordfv_Lazy(float* coord)
        {
            _glFogCoordfv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordfv");
            _glFogCoordfv_fnptr(coord);
        }
        
        /// <summary><b>[entry point: <c>glFogCoordfvEXT</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glFogCoordfvEXT_fnptr = &glFogCoordfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogCoordfvEXT_Lazy(float* coord)
        {
            _glFogCoordfvEXT_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordfvEXT");
            _glFogCoordfvEXT_fnptr(coord);
        }
        
        /// <summary><b>[entry point: <c>glFogCoordhNV</c>]</b></summary>
        public static delegate* unmanaged<Half, void> _glFogCoordhNV_fnptr = &glFogCoordhNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogCoordhNV_Lazy(Half fog)
        {
            _glFogCoordhNV_fnptr = (delegate* unmanaged<Half, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordhNV");
            _glFogCoordhNV_fnptr(fog);
        }
        
        /// <summary><b>[entry point: <c>glFogCoordhvNV</c>]</b></summary>
        public static delegate* unmanaged<Half*, void> _glFogCoordhvNV_fnptr = &glFogCoordhvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogCoordhvNV_Lazy(Half* fog)
        {
            _glFogCoordhvNV_fnptr = (delegate* unmanaged<Half*, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordhvNV");
            _glFogCoordhvNV_fnptr(fog);
        }
        
        /// <summary><b>[entry point: <c>glFogCoordPointer</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void*, void> _glFogCoordPointer_fnptr = &glFogCoordPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogCoordPointer_Lazy(uint type, int stride, void* pointer)
        {
            _glFogCoordPointer_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordPointer");
            _glFogCoordPointer_fnptr(type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glFogCoordPointerEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void*, void> _glFogCoordPointerEXT_fnptr = &glFogCoordPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogCoordPointerEXT_Lazy(uint type, int stride, void* pointer)
        {
            _glFogCoordPointerEXT_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordPointerEXT");
            _glFogCoordPointerEXT_fnptr(type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glFogCoordPointerListIBM</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void**, int, void> _glFogCoordPointerListIBM_fnptr = &glFogCoordPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogCoordPointerListIBM_Lazy(uint type, int stride, void** pointer, int ptrstride)
        {
            _glFogCoordPointerListIBM_fnptr = (delegate* unmanaged<uint, int, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordPointerListIBM");
            _glFogCoordPointerListIBM_fnptr(type, stride, pointer, ptrstride);
        }
        
        /// <summary><b>[entry point: <c>glFogf</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glFogf_fnptr = &glFogf_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogf_Lazy(uint pname, float param)
        {
            _glFogf_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glFogf");
            _glFogf_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glFogFuncSGIS</c>]</b></summary>
        public static delegate* unmanaged<int, float*, void> _glFogFuncSGIS_fnptr = &glFogFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogFuncSGIS_Lazy(int n, float* points)
        {
            _glFogFuncSGIS_fnptr = (delegate* unmanaged<int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFogFuncSGIS");
            _glFogFuncSGIS_fnptr(n, points);
        }
        
        /// <summary><b>[entry point: <c>glFogfv</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glFogfv_fnptr = &glFogfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogfv_Lazy(uint pname, float* parameters)
        {
            _glFogfv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFogfv");
            _glFogfv_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glFogi</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glFogi_fnptr = &glFogi_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogi_Lazy(uint pname, int param)
        {
            _glFogi_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFogi");
            _glFogi_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glFogiv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glFogiv_fnptr = &glFogiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogiv_Lazy(uint pname, int* parameters)
        {
            _glFogiv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glFogiv");
            _glFogiv_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glFogx</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glFogx_fnptr = &glFogx_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogx_Lazy(uint pname, int param)
        {
            _glFogx_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFogx");
            _glFogx_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glFogxOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glFogxOES_fnptr = &glFogxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogxOES_Lazy(uint pname, int param)
        {
            _glFogxOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFogxOES");
            _glFogxOES_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glFogxv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glFogxv_fnptr = &glFogxv_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogxv_Lazy(uint pname, int* param)
        {
            _glFogxv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glFogxv");
            _glFogxv_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glFogxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glFogxvOES_fnptr = &glFogxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glFogxvOES_Lazy(uint pname, int* param)
        {
            _glFogxvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glFogxvOES");
            _glFogxvOES_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glFragmentColorMaterialSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glFragmentColorMaterialSGIX_fnptr = &glFragmentColorMaterialSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFragmentColorMaterialSGIX_Lazy(uint face, uint mode)
        {
            _glFragmentColorMaterialSGIX_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentColorMaterialSGIX");
            _glFragmentColorMaterialSGIX_fnptr(face, mode);
        }
        
        /// <summary><b>[entry point: <c>glFragmentCoverageColorNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glFragmentCoverageColorNV_fnptr = &glFragmentCoverageColorNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glFragmentCoverageColorNV_Lazy(uint color)
        {
            _glFragmentCoverageColorNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentCoverageColorNV");
            _glFragmentCoverageColorNV_fnptr(color);
        }
        
        /// <summary><b>[entry point: <c>glFragmentLightfSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, void> _glFragmentLightfSGIX_fnptr = &glFragmentLightfSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFragmentLightfSGIX_Lazy(uint light, uint pname, float param)
        {
            _glFragmentLightfSGIX_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightfSGIX");
            _glFragmentLightfSGIX_fnptr(light, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glFragmentLightfvSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glFragmentLightfvSGIX_fnptr = &glFragmentLightfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFragmentLightfvSGIX_Lazy(uint light, uint pname, float* parameters)
        {
            _glFragmentLightfvSGIX_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightfvSGIX");
            _glFragmentLightfvSGIX_fnptr(light, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glFragmentLightiSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glFragmentLightiSGIX_fnptr = &glFragmentLightiSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFragmentLightiSGIX_Lazy(uint light, uint pname, int param)
        {
            _glFragmentLightiSGIX_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightiSGIX");
            _glFragmentLightiSGIX_fnptr(light, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glFragmentLightivSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glFragmentLightivSGIX_fnptr = &glFragmentLightivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFragmentLightivSGIX_Lazy(uint light, uint pname, int* parameters)
        {
            _glFragmentLightivSGIX_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightivSGIX");
            _glFragmentLightivSGIX_fnptr(light, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glFragmentLightModelfSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glFragmentLightModelfSGIX_fnptr = &glFragmentLightModelfSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFragmentLightModelfSGIX_Lazy(uint pname, float param)
        {
            _glFragmentLightModelfSGIX_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightModelfSGIX");
            _glFragmentLightModelfSGIX_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glFragmentLightModelfvSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glFragmentLightModelfvSGIX_fnptr = &glFragmentLightModelfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFragmentLightModelfvSGIX_Lazy(uint pname, float* parameters)
        {
            _glFragmentLightModelfvSGIX_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightModelfvSGIX");
            _glFragmentLightModelfvSGIX_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glFragmentLightModeliSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glFragmentLightModeliSGIX_fnptr = &glFragmentLightModeliSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFragmentLightModeliSGIX_Lazy(uint pname, int param)
        {
            _glFragmentLightModeliSGIX_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightModeliSGIX");
            _glFragmentLightModeliSGIX_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glFragmentLightModelivSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glFragmentLightModelivSGIX_fnptr = &glFragmentLightModelivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFragmentLightModelivSGIX_Lazy(uint pname, int* parameters)
        {
            _glFragmentLightModelivSGIX_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightModelivSGIX");
            _glFragmentLightModelivSGIX_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glFragmentMaterialfSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, void> _glFragmentMaterialfSGIX_fnptr = &glFragmentMaterialfSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFragmentMaterialfSGIX_Lazy(uint face, uint pname, float param)
        {
            _glFragmentMaterialfSGIX_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentMaterialfSGIX");
            _glFragmentMaterialfSGIX_fnptr(face, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glFragmentMaterialfvSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glFragmentMaterialfvSGIX_fnptr = &glFragmentMaterialfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFragmentMaterialfvSGIX_Lazy(uint face, uint pname, float* parameters)
        {
            _glFragmentMaterialfvSGIX_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentMaterialfvSGIX");
            _glFragmentMaterialfvSGIX_fnptr(face, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glFragmentMaterialiSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glFragmentMaterialiSGIX_fnptr = &glFragmentMaterialiSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFragmentMaterialiSGIX_Lazy(uint face, uint pname, int param)
        {
            _glFragmentMaterialiSGIX_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentMaterialiSGIX");
            _glFragmentMaterialiSGIX_fnptr(face, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glFragmentMaterialivSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glFragmentMaterialivSGIX_fnptr = &glFragmentMaterialivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFragmentMaterialivSGIX_Lazy(uint face, uint pname, int* parameters)
        {
            _glFragmentMaterialivSGIX_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentMaterialivSGIX");
            _glFragmentMaterialivSGIX_fnptr(face, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferDrawBufferEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glFramebufferDrawBufferEXT_fnptr = &glFramebufferDrawBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferDrawBufferEXT_Lazy(int framebuffer, uint mode)
        {
            _glFramebufferDrawBufferEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferDrawBufferEXT");
            _glFramebufferDrawBufferEXT_fnptr(framebuffer, mode);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferDrawBuffersEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, void> _glFramebufferDrawBuffersEXT_fnptr = &glFramebufferDrawBuffersEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferDrawBuffersEXT_Lazy(int framebuffer, int n, uint* bufs)
        {
            _glFramebufferDrawBuffersEXT_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferDrawBuffersEXT");
            _glFramebufferDrawBuffersEXT_fnptr(framebuffer, n, bufs);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferFetchBarrierEXT</c>]</b></summary>
        public static delegate* unmanaged<void> _glFramebufferFetchBarrierEXT_fnptr = &glFramebufferFetchBarrierEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferFetchBarrierEXT_Lazy()
        {
            _glFramebufferFetchBarrierEXT_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferFetchBarrierEXT");
            _glFramebufferFetchBarrierEXT_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glFramebufferFetchBarrierQCOM</c>]</b></summary>
        public static delegate* unmanaged<void> _glFramebufferFetchBarrierQCOM_fnptr = &glFramebufferFetchBarrierQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferFetchBarrierQCOM_Lazy()
        {
            _glFramebufferFetchBarrierQCOM_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferFetchBarrierQCOM");
            _glFramebufferFetchBarrierQCOM_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glFramebufferFoveationConfigQCOM</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, uint, uint*, void> _glFramebufferFoveationConfigQCOM_fnptr = &glFramebufferFoveationConfigQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferFoveationConfigQCOM_Lazy(int framebuffer, uint numLayers, uint focalPointsPerLayer, uint requestedFeatures, uint* providedFeatures)
        {
            _glFramebufferFoveationConfigQCOM_fnptr = (delegate* unmanaged<int, uint, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferFoveationConfigQCOM");
            _glFramebufferFoveationConfigQCOM_fnptr(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferFoveationParametersQCOM</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, float, float, float, float, float, void> _glFramebufferFoveationParametersQCOM_fnptr = &glFramebufferFoveationParametersQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferFoveationParametersQCOM_Lazy(int framebuffer, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea)
        {
            _glFramebufferFoveationParametersQCOM_fnptr = (delegate* unmanaged<int, uint, uint, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferFoveationParametersQCOM");
            _glFramebufferFoveationParametersQCOM_fnptr(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferParameteri</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glFramebufferParameteri_fnptr = &glFramebufferParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferParameteri_Lazy(uint target, uint pname, int param)
        {
            _glFramebufferParameteri_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferParameteri");
            _glFramebufferParameteri_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferParameteriMESA</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glFramebufferParameteriMESA_fnptr = &glFramebufferParameteriMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferParameteriMESA_Lazy(uint target, uint pname, int param)
        {
            _glFramebufferParameteriMESA_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferParameteriMESA");
            _glFramebufferParameteriMESA_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferPixelLocalStorageSizeEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glFramebufferPixelLocalStorageSizeEXT_fnptr = &glFramebufferPixelLocalStorageSizeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferPixelLocalStorageSizeEXT_Lazy(uint target, int size)
        {
            _glFramebufferPixelLocalStorageSizeEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferPixelLocalStorageSizeEXT");
            _glFramebufferPixelLocalStorageSizeEXT_fnptr(target, size);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferReadBufferEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glFramebufferReadBufferEXT_fnptr = &glFramebufferReadBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferReadBufferEXT_Lazy(int framebuffer, uint mode)
        {
            _glFramebufferReadBufferEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferReadBufferEXT");
            _glFramebufferReadBufferEXT_fnptr(framebuffer, mode);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferRenderbuffer</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, void> _glFramebufferRenderbuffer_fnptr = &glFramebufferRenderbuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferRenderbuffer_Lazy(uint target, uint attachment, uint renderbuffertarget, int renderbuffer)
        {
            _glFramebufferRenderbuffer_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferRenderbuffer");
            _glFramebufferRenderbuffer_fnptr(target, attachment, renderbuffertarget, renderbuffer);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferRenderbufferEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, void> _glFramebufferRenderbufferEXT_fnptr = &glFramebufferRenderbufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferRenderbufferEXT_Lazy(uint target, uint attachment, uint renderbuffertarget, int renderbuffer)
        {
            _glFramebufferRenderbufferEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferRenderbufferEXT");
            _glFramebufferRenderbufferEXT_fnptr(target, attachment, renderbuffertarget, renderbuffer);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferRenderbufferOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, void> _glFramebufferRenderbufferOES_fnptr = &glFramebufferRenderbufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferRenderbufferOES_Lazy(uint target, uint attachment, uint renderbuffertarget, int renderbuffer)
        {
            _glFramebufferRenderbufferOES_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferRenderbufferOES");
            _glFramebufferRenderbufferOES_fnptr(target, attachment, renderbuffertarget, renderbuffer);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferSampleLocationsfvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, float*, void> _glFramebufferSampleLocationsfvARB_fnptr = &glFramebufferSampleLocationsfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferSampleLocationsfvARB_Lazy(uint target, uint start, int count, float* v)
        {
            _glFramebufferSampleLocationsfvARB_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferSampleLocationsfvARB");
            _glFramebufferSampleLocationsfvARB_fnptr(target, start, count, v);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferSampleLocationsfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, float*, void> _glFramebufferSampleLocationsfvNV_fnptr = &glFramebufferSampleLocationsfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferSampleLocationsfvNV_Lazy(uint target, uint start, int count, float* v)
        {
            _glFramebufferSampleLocationsfvNV_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferSampleLocationsfvNV");
            _glFramebufferSampleLocationsfvNV_fnptr(target, start, count, v);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferSamplePositionsfvAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float*, void> _glFramebufferSamplePositionsfvAMD_fnptr = &glFramebufferSamplePositionsfvAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferSamplePositionsfvAMD_Lazy(uint target, uint numsamples, uint pixelindex, float* values)
        {
            _glFramebufferSamplePositionsfvAMD_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferSamplePositionsfvAMD");
            _glFramebufferSamplePositionsfvAMD_fnptr(target, numsamples, pixelindex, values);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferShadingRateEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, int, void> _glFramebufferShadingRateEXT_fnptr = &glFramebufferShadingRateEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferShadingRateEXT_Lazy(uint target, uint attachment, int texture, int baseLayer, int numLayers, int texelWidth, int texelHeight)
        {
            _glFramebufferShadingRateEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferShadingRateEXT");
            _glFramebufferShadingRateEXT_fnptr(target, attachment, texture, baseLayer, numLayers, texelWidth, texelHeight);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTexture</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, void> _glFramebufferTexture_fnptr = &glFramebufferTexture_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTexture_Lazy(uint target, uint attachment, int texture, int level)
        {
            _glFramebufferTexture_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture");
            _glFramebufferTexture_fnptr(target, attachment, texture, level);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTexture1D</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int, void> _glFramebufferTexture1D_fnptr = &glFramebufferTexture1D_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTexture1D_Lazy(uint target, uint attachment, uint textarget, int texture, int level)
        {
            _glFramebufferTexture1D_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture1D");
            _glFramebufferTexture1D_fnptr(target, attachment, textarget, texture, level);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTexture1DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int, void> _glFramebufferTexture1DEXT_fnptr = &glFramebufferTexture1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTexture1DEXT_Lazy(uint target, uint attachment, uint textarget, int texture, int level)
        {
            _glFramebufferTexture1DEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture1DEXT");
            _glFramebufferTexture1DEXT_fnptr(target, attachment, textarget, texture, level);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTexture2D</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int, void> _glFramebufferTexture2D_fnptr = &glFramebufferTexture2D_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTexture2D_Lazy(uint target, uint attachment, uint textarget, int texture, int level)
        {
            _glFramebufferTexture2D_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture2D");
            _glFramebufferTexture2D_fnptr(target, attachment, textarget, texture, level);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTexture2DDownsampleIMG</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int, int, int, void> _glFramebufferTexture2DDownsampleIMG_fnptr = &glFramebufferTexture2DDownsampleIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTexture2DDownsampleIMG_Lazy(uint target, uint attachment, uint textarget, int texture, int level, int xscale, int yscale)
        {
            _glFramebufferTexture2DDownsampleIMG_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture2DDownsampleIMG");
            _glFramebufferTexture2DDownsampleIMG_fnptr(target, attachment, textarget, texture, level, xscale, yscale);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTexture2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int, void> _glFramebufferTexture2DEXT_fnptr = &glFramebufferTexture2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTexture2DEXT_Lazy(uint target, uint attachment, uint textarget, int texture, int level)
        {
            _glFramebufferTexture2DEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture2DEXT");
            _glFramebufferTexture2DEXT_fnptr(target, attachment, textarget, texture, level);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTexture2DMultisampleEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int, int, void> _glFramebufferTexture2DMultisampleEXT_fnptr = &glFramebufferTexture2DMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTexture2DMultisampleEXT_Lazy(uint target, uint attachment, uint textarget, int texture, int level, int samples)
        {
            _glFramebufferTexture2DMultisampleEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture2DMultisampleEXT");
            _glFramebufferTexture2DMultisampleEXT_fnptr(target, attachment, textarget, texture, level, samples);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTexture2DMultisampleIMG</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int, int, void> _glFramebufferTexture2DMultisampleIMG_fnptr = &glFramebufferTexture2DMultisampleIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTexture2DMultisampleIMG_Lazy(uint target, uint attachment, uint textarget, int texture, int level, int samples)
        {
            _glFramebufferTexture2DMultisampleIMG_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture2DMultisampleIMG");
            _glFramebufferTexture2DMultisampleIMG_fnptr(target, attachment, textarget, texture, level, samples);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTexture2DOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int, void> _glFramebufferTexture2DOES_fnptr = &glFramebufferTexture2DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTexture2DOES_Lazy(uint target, uint attachment, uint textarget, int texture, int level)
        {
            _glFramebufferTexture2DOES_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture2DOES");
            _glFramebufferTexture2DOES_fnptr(target, attachment, textarget, texture, level);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTexture3D</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int, int, void> _glFramebufferTexture3D_fnptr = &glFramebufferTexture3D_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTexture3D_Lazy(uint target, uint attachment, uint textarget, int texture, int level, int zoffset)
        {
            _glFramebufferTexture3D_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture3D");
            _glFramebufferTexture3D_fnptr(target, attachment, textarget, texture, level, zoffset);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTexture3DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int, int, void> _glFramebufferTexture3DEXT_fnptr = &glFramebufferTexture3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTexture3DEXT_Lazy(uint target, uint attachment, uint textarget, int texture, int level, int zoffset)
        {
            _glFramebufferTexture3DEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture3DEXT");
            _glFramebufferTexture3DEXT_fnptr(target, attachment, textarget, texture, level, zoffset);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTexture3DOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int, int, void> _glFramebufferTexture3DOES_fnptr = &glFramebufferTexture3DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTexture3DOES_Lazy(uint target, uint attachment, uint textarget, int texture, int level, int zoffset)
        {
            _glFramebufferTexture3DOES_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture3DOES");
            _glFramebufferTexture3DOES_fnptr(target, attachment, textarget, texture, level, zoffset);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTextureARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, void> _glFramebufferTextureARB_fnptr = &glFramebufferTextureARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTextureARB_Lazy(uint target, uint attachment, int texture, int level)
        {
            _glFramebufferTextureARB_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureARB");
            _glFramebufferTextureARB_fnptr(target, attachment, texture, level);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTextureEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, void> _glFramebufferTextureEXT_fnptr = &glFramebufferTextureEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTextureEXT_Lazy(uint target, uint attachment, int texture, int level)
        {
            _glFramebufferTextureEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureEXT");
            _glFramebufferTextureEXT_fnptr(target, attachment, texture, level);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTextureFaceARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, uint, void> _glFramebufferTextureFaceARB_fnptr = &glFramebufferTextureFaceARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTextureFaceARB_Lazy(uint target, uint attachment, int texture, int level, uint face)
        {
            _glFramebufferTextureFaceARB_fnptr = (delegate* unmanaged<uint, uint, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureFaceARB");
            _glFramebufferTextureFaceARB_fnptr(target, attachment, texture, level, face);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTextureFaceEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, uint, void> _glFramebufferTextureFaceEXT_fnptr = &glFramebufferTextureFaceEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTextureFaceEXT_Lazy(uint target, uint attachment, int texture, int level, uint face)
        {
            _glFramebufferTextureFaceEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureFaceEXT");
            _glFramebufferTextureFaceEXT_fnptr(target, attachment, texture, level, face);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTextureLayer</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, void> _glFramebufferTextureLayer_fnptr = &glFramebufferTextureLayer_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTextureLayer_Lazy(uint target, uint attachment, int texture, int level, int layer)
        {
            _glFramebufferTextureLayer_fnptr = (delegate* unmanaged<uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureLayer");
            _glFramebufferTextureLayer_fnptr(target, attachment, texture, level, layer);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTextureLayerARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, void> _glFramebufferTextureLayerARB_fnptr = &glFramebufferTextureLayerARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTextureLayerARB_Lazy(uint target, uint attachment, int texture, int level, int layer)
        {
            _glFramebufferTextureLayerARB_fnptr = (delegate* unmanaged<uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureLayerARB");
            _glFramebufferTextureLayerARB_fnptr(target, attachment, texture, level, layer);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTextureLayerDownsampleIMG</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, int, void> _glFramebufferTextureLayerDownsampleIMG_fnptr = &glFramebufferTextureLayerDownsampleIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTextureLayerDownsampleIMG_Lazy(uint target, uint attachment, int texture, int level, int layer, int xscale, int yscale)
        {
            _glFramebufferTextureLayerDownsampleIMG_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureLayerDownsampleIMG");
            _glFramebufferTextureLayerDownsampleIMG_fnptr(target, attachment, texture, level, layer, xscale, yscale);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTextureLayerEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, void> _glFramebufferTextureLayerEXT_fnptr = &glFramebufferTextureLayerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTextureLayerEXT_Lazy(uint target, uint attachment, int texture, int level, int layer)
        {
            _glFramebufferTextureLayerEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureLayerEXT");
            _glFramebufferTextureLayerEXT_fnptr(target, attachment, texture, level, layer);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTextureMultisampleMultiviewOVR</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, int, void> _glFramebufferTextureMultisampleMultiviewOVR_fnptr = &glFramebufferTextureMultisampleMultiviewOVR_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTextureMultisampleMultiviewOVR_Lazy(uint target, uint attachment, int texture, int level, int samples, int baseViewIndex, int numViews)
        {
            _glFramebufferTextureMultisampleMultiviewOVR_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureMultisampleMultiviewOVR");
            _glFramebufferTextureMultisampleMultiviewOVR_fnptr(target, attachment, texture, level, samples, baseViewIndex, numViews);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTextureMultiviewOVR</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, void> _glFramebufferTextureMultiviewOVR_fnptr = &glFramebufferTextureMultiviewOVR_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTextureMultiviewOVR_Lazy(uint target, uint attachment, int texture, int level, int baseViewIndex, int numViews)
        {
            _glFramebufferTextureMultiviewOVR_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureMultiviewOVR");
            _glFramebufferTextureMultiviewOVR_fnptr(target, attachment, texture, level, baseViewIndex, numViews);
        }
        
        /// <summary><b>[entry point: <c>glFramebufferTextureOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, void> _glFramebufferTextureOES_fnptr = &glFramebufferTextureOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glFramebufferTextureOES_Lazy(uint target, uint attachment, int texture, int level)
        {
            _glFramebufferTextureOES_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureOES");
            _glFramebufferTextureOES_fnptr(target, attachment, texture, level);
        }
        
        /// <summary><b>[entry point: <c>glFrameTerminatorGREMEDY</c>]</b></summary>
        public static delegate* unmanaged<void> _glFrameTerminatorGREMEDY_fnptr = &glFrameTerminatorGREMEDY_Lazy;
        [UnmanagedCallersOnly]
        private static void glFrameTerminatorGREMEDY_Lazy()
        {
            _glFrameTerminatorGREMEDY_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFrameTerminatorGREMEDY");
            _glFrameTerminatorGREMEDY_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glFrameZoomSGIX</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glFrameZoomSGIX_fnptr = &glFrameZoomSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glFrameZoomSGIX_Lazy(int factor)
        {
            _glFrameZoomSGIX_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glFrameZoomSGIX");
            _glFrameZoomSGIX_fnptr(factor);
        }
        
        /// <summary><b>[entry point: <c>glFreeObjectBufferATI</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glFreeObjectBufferATI_fnptr = &glFreeObjectBufferATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glFreeObjectBufferATI_Lazy(int buffer)
        {
            _glFreeObjectBufferATI_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glFreeObjectBufferATI");
            _glFreeObjectBufferATI_fnptr(buffer);
        }
        
        /// <summary><b>[entry point: <c>glFrontFace</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glFrontFace_fnptr = &glFrontFace_Lazy;
        [UnmanagedCallersOnly]
        private static void glFrontFace_Lazy(uint mode)
        {
            _glFrontFace_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glFrontFace");
            _glFrontFace_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glFrustum</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, double, double, double, void> _glFrustum_fnptr = &glFrustum_Lazy;
        [UnmanagedCallersOnly]
        private static void glFrustum_Lazy(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            _glFrustum_fnptr = (delegate* unmanaged<double, double, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glFrustum");
            _glFrustum_fnptr(left, right, bottom, top, zNear, zFar);
        }
        
        /// <summary><b>[entry point: <c>glFrustumf</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, void> _glFrustumf_fnptr = &glFrustumf_Lazy;
        [UnmanagedCallersOnly]
        private static void glFrustumf_Lazy(float l, float r, float b, float t, float n, float f)
        {
            _glFrustumf_fnptr = (delegate* unmanaged<float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glFrustumf");
            _glFrustumf_fnptr(l, r, b, t, n, f);
        }
        
        /// <summary><b>[entry point: <c>glFrustumfOES</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, void> _glFrustumfOES_fnptr = &glFrustumfOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glFrustumfOES_Lazy(float l, float r, float b, float t, float n, float f)
        {
            _glFrustumfOES_fnptr = (delegate* unmanaged<float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glFrustumfOES");
            _glFrustumfOES_fnptr(l, r, b, t, n, f);
        }
        
        /// <summary><b>[entry point: <c>glFrustumx</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, void> _glFrustumx_fnptr = &glFrustumx_Lazy;
        [UnmanagedCallersOnly]
        private static void glFrustumx_Lazy(int l, int r, int b, int t, int n, int f)
        {
            _glFrustumx_fnptr = (delegate* unmanaged<int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFrustumx");
            _glFrustumx_fnptr(l, r, b, t, n, f);
        }
        
        /// <summary><b>[entry point: <c>glFrustumxOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, void> _glFrustumxOES_fnptr = &glFrustumxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glFrustumxOES_Lazy(int l, int r, int b, int t, int n, int f)
        {
            _glFrustumxOES_fnptr = (delegate* unmanaged<int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFrustumxOES");
            _glFrustumxOES_fnptr(l, r, b, t, n, f);
        }
        
        /// <summary><b>[entry point: <c>glGenAsyncMarkersSGIX</c>]</b></summary>
        public static delegate* unmanaged<int, uint> _glGenAsyncMarkersSGIX_fnptr = &glGenAsyncMarkersSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGenAsyncMarkersSGIX_Lazy(int range)
        {
            _glGenAsyncMarkersSGIX_fnptr = (delegate* unmanaged<int, uint>)GLLoader.BindingsContext.GetProcAddress("glGenAsyncMarkersSGIX");
            return _glGenAsyncMarkersSGIX_fnptr(range);
        }
        
        /// <summary><b>[entry point: <c>glGenBuffers</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenBuffers_fnptr = &glGenBuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenBuffers_Lazy(int n, int* buffers)
        {
            _glGenBuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenBuffers");
            _glGenBuffers_fnptr(n, buffers);
        }
        
        /// <summary><b>[entry point: <c>glGenBuffersARB</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenBuffersARB_fnptr = &glGenBuffersARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenBuffersARB_Lazy(int n, int* buffers)
        {
            _glGenBuffersARB_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenBuffersARB");
            _glGenBuffersARB_fnptr(n, buffers);
        }
        
        /// <summary><b>[entry point: <c>glGenerateMipmap</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glGenerateMipmap_fnptr = &glGenerateMipmap_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenerateMipmap_Lazy(uint target)
        {
            _glGenerateMipmap_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glGenerateMipmap");
            _glGenerateMipmap_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glGenerateMipmapEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glGenerateMipmapEXT_fnptr = &glGenerateMipmapEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenerateMipmapEXT_Lazy(uint target)
        {
            _glGenerateMipmapEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glGenerateMipmapEXT");
            _glGenerateMipmapEXT_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glGenerateMipmapOES</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glGenerateMipmapOES_fnptr = &glGenerateMipmapOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenerateMipmapOES_Lazy(uint target)
        {
            _glGenerateMipmapOES_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glGenerateMipmapOES");
            _glGenerateMipmapOES_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glGenerateMultiTexMipmapEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glGenerateMultiTexMipmapEXT_fnptr = &glGenerateMultiTexMipmapEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenerateMultiTexMipmapEXT_Lazy(uint texunit, uint target)
        {
            _glGenerateMultiTexMipmapEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glGenerateMultiTexMipmapEXT");
            _glGenerateMultiTexMipmapEXT_fnptr(texunit, target);
        }
        
        /// <summary><b>[entry point: <c>glGenerateTextureMipmap</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glGenerateTextureMipmap_fnptr = &glGenerateTextureMipmap_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenerateTextureMipmap_Lazy(int texture)
        {
            _glGenerateTextureMipmap_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glGenerateTextureMipmap");
            _glGenerateTextureMipmap_fnptr(texture);
        }
        
        /// <summary><b>[entry point: <c>glGenerateTextureMipmapEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glGenerateTextureMipmapEXT_fnptr = &glGenerateTextureMipmapEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenerateTextureMipmapEXT_Lazy(int texture, uint target)
        {
            _glGenerateTextureMipmapEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glGenerateTextureMipmapEXT");
            _glGenerateTextureMipmapEXT_fnptr(texture, target);
        }
        
        /// <summary><b>[entry point: <c>glGenFencesAPPLE</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glGenFencesAPPLE_fnptr = &glGenFencesAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenFencesAPPLE_Lazy(int n, uint* fences)
        {
            _glGenFencesAPPLE_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGenFencesAPPLE");
            _glGenFencesAPPLE_fnptr(n, fences);
        }
        
        /// <summary><b>[entry point: <c>glGenFencesNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glGenFencesNV_fnptr = &glGenFencesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenFencesNV_Lazy(int n, uint* fences)
        {
            _glGenFencesNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGenFencesNV");
            _glGenFencesNV_fnptr(n, fences);
        }
        
        /// <summary><b>[entry point: <c>glGenFragmentShadersATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint> _glGenFragmentShadersATI_fnptr = &glGenFragmentShadersATI_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGenFragmentShadersATI_Lazy(uint range)
        {
            _glGenFragmentShadersATI_fnptr = (delegate* unmanaged<uint, uint>)GLLoader.BindingsContext.GetProcAddress("glGenFragmentShadersATI");
            return _glGenFragmentShadersATI_fnptr(range);
        }
        
        /// <summary><b>[entry point: <c>glGenFramebuffers</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenFramebuffers_fnptr = &glGenFramebuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenFramebuffers_Lazy(int n, int* framebuffers)
        {
            _glGenFramebuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenFramebuffers");
            _glGenFramebuffers_fnptr(n, framebuffers);
        }
        
        /// <summary><b>[entry point: <c>glGenFramebuffersEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenFramebuffersEXT_fnptr = &glGenFramebuffersEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenFramebuffersEXT_Lazy(int n, int* framebuffers)
        {
            _glGenFramebuffersEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenFramebuffersEXT");
            _glGenFramebuffersEXT_fnptr(n, framebuffers);
        }
        
        /// <summary><b>[entry point: <c>glGenFramebuffersOES</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenFramebuffersOES_fnptr = &glGenFramebuffersOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenFramebuffersOES_Lazy(int n, int* framebuffers)
        {
            _glGenFramebuffersOES_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenFramebuffersOES");
            _glGenFramebuffersOES_fnptr(n, framebuffers);
        }
        
        /// <summary><b>[entry point: <c>glGenLists</c>]</b></summary>
        public static delegate* unmanaged<int, int> _glGenLists_fnptr = &glGenLists_Lazy;
        [UnmanagedCallersOnly]
        private static int glGenLists_Lazy(int range)
        {
            _glGenLists_fnptr = (delegate* unmanaged<int, int>)GLLoader.BindingsContext.GetProcAddress("glGenLists");
            return _glGenLists_fnptr(range);
        }
        
        /// <summary><b>[entry point: <c>glGenNamesAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glGenNamesAMD_fnptr = &glGenNamesAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenNamesAMD_Lazy(uint identifier, uint num, uint* names)
        {
            _glGenNamesAMD_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGenNamesAMD");
            _glGenNamesAMD_fnptr(identifier, num, names);
        }
        
        /// <summary><b>[entry point: <c>glGenOcclusionQueriesNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glGenOcclusionQueriesNV_fnptr = &glGenOcclusionQueriesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenOcclusionQueriesNV_Lazy(int n, uint* ids)
        {
            _glGenOcclusionQueriesNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGenOcclusionQueriesNV");
            _glGenOcclusionQueriesNV_fnptr(n, ids);
        }
        
        /// <summary><b>[entry point: <c>glGenPathsNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint> _glGenPathsNV_fnptr = &glGenPathsNV_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGenPathsNV_Lazy(int range)
        {
            _glGenPathsNV_fnptr = (delegate* unmanaged<int, uint>)GLLoader.BindingsContext.GetProcAddress("glGenPathsNV");
            return _glGenPathsNV_fnptr(range);
        }
        
        /// <summary><b>[entry point: <c>glGenPerfMonitorsAMD</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glGenPerfMonitorsAMD_fnptr = &glGenPerfMonitorsAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenPerfMonitorsAMD_Lazy(int n, uint* monitors)
        {
            _glGenPerfMonitorsAMD_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGenPerfMonitorsAMD");
            _glGenPerfMonitorsAMD_fnptr(n, monitors);
        }
        
        /// <summary><b>[entry point: <c>glGenProgramPipelines</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenProgramPipelines_fnptr = &glGenProgramPipelines_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenProgramPipelines_Lazy(int n, int* pipelines)
        {
            _glGenProgramPipelines_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenProgramPipelines");
            _glGenProgramPipelines_fnptr(n, pipelines);
        }
        
        /// <summary><b>[entry point: <c>glGenProgramPipelinesEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenProgramPipelinesEXT_fnptr = &glGenProgramPipelinesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenProgramPipelinesEXT_Lazy(int n, int* pipelines)
        {
            _glGenProgramPipelinesEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenProgramPipelinesEXT");
            _glGenProgramPipelinesEXT_fnptr(n, pipelines);
        }
        
        /// <summary><b>[entry point: <c>glGenProgramsARB</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenProgramsARB_fnptr = &glGenProgramsARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenProgramsARB_Lazy(int n, int* programs)
        {
            _glGenProgramsARB_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenProgramsARB");
            _glGenProgramsARB_fnptr(n, programs);
        }
        
        /// <summary><b>[entry point: <c>glGenProgramsNV</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenProgramsNV_fnptr = &glGenProgramsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenProgramsNV_Lazy(int n, int* programs)
        {
            _glGenProgramsNV_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenProgramsNV");
            _glGenProgramsNV_fnptr(n, programs);
        }
        
        /// <summary><b>[entry point: <c>glGenQueries</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenQueries_fnptr = &glGenQueries_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenQueries_Lazy(int n, int* ids)
        {
            _glGenQueries_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenQueries");
            _glGenQueries_fnptr(n, ids);
        }
        
        /// <summary><b>[entry point: <c>glGenQueriesARB</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenQueriesARB_fnptr = &glGenQueriesARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenQueriesARB_Lazy(int n, int* ids)
        {
            _glGenQueriesARB_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenQueriesARB");
            _glGenQueriesARB_fnptr(n, ids);
        }
        
        /// <summary><b>[entry point: <c>glGenQueriesEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenQueriesEXT_fnptr = &glGenQueriesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenQueriesEXT_Lazy(int n, int* ids)
        {
            _glGenQueriesEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenQueriesEXT");
            _glGenQueriesEXT_fnptr(n, ids);
        }
        
        /// <summary><b>[entry point: <c>glGenQueryResourceTagNV</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenQueryResourceTagNV_fnptr = &glGenQueryResourceTagNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenQueryResourceTagNV_Lazy(int n, int* tagIds)
        {
            _glGenQueryResourceTagNV_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenQueryResourceTagNV");
            _glGenQueryResourceTagNV_fnptr(n, tagIds);
        }
        
        /// <summary><b>[entry point: <c>glGenRenderbuffers</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenRenderbuffers_fnptr = &glGenRenderbuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenRenderbuffers_Lazy(int n, int* renderbuffers)
        {
            _glGenRenderbuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenRenderbuffers");
            _glGenRenderbuffers_fnptr(n, renderbuffers);
        }
        
        /// <summary><b>[entry point: <c>glGenRenderbuffersEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenRenderbuffersEXT_fnptr = &glGenRenderbuffersEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenRenderbuffersEXT_Lazy(int n, int* renderbuffers)
        {
            _glGenRenderbuffersEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenRenderbuffersEXT");
            _glGenRenderbuffersEXT_fnptr(n, renderbuffers);
        }
        
        /// <summary><b>[entry point: <c>glGenRenderbuffersOES</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenRenderbuffersOES_fnptr = &glGenRenderbuffersOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenRenderbuffersOES_Lazy(int n, int* renderbuffers)
        {
            _glGenRenderbuffersOES_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenRenderbuffersOES");
            _glGenRenderbuffersOES_fnptr(n, renderbuffers);
        }
        
        /// <summary><b>[entry point: <c>glGenSamplers</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenSamplers_fnptr = &glGenSamplers_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenSamplers_Lazy(int count, int* samplers)
        {
            _glGenSamplers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenSamplers");
            _glGenSamplers_fnptr(count, samplers);
        }
        
        /// <summary><b>[entry point: <c>glGenSemaphoresEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glGenSemaphoresEXT_fnptr = &glGenSemaphoresEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenSemaphoresEXT_Lazy(int n, uint* semaphores)
        {
            _glGenSemaphoresEXT_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGenSemaphoresEXT");
            _glGenSemaphoresEXT_fnptr(n, semaphores);
        }
        
        /// <summary><b>[entry point: <c>glGenSymbolsEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint> _glGenSymbolsEXT_fnptr = &glGenSymbolsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGenSymbolsEXT_Lazy(uint datatype, uint storagetype, uint range, uint components)
        {
            _glGenSymbolsEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glGenSymbolsEXT");
            return _glGenSymbolsEXT_fnptr(datatype, storagetype, range, components);
        }
        
        /// <summary><b>[entry point: <c>glGenTextures</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenTextures_fnptr = &glGenTextures_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenTextures_Lazy(int n, int* textures)
        {
            _glGenTextures_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenTextures");
            _glGenTextures_fnptr(n, textures);
        }
        
        /// <summary><b>[entry point: <c>glGenTexturesEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenTexturesEXT_fnptr = &glGenTexturesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenTexturesEXT_Lazy(int n, int* textures)
        {
            _glGenTexturesEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenTexturesEXT");
            _glGenTexturesEXT_fnptr(n, textures);
        }
        
        /// <summary><b>[entry point: <c>glGenTransformFeedbacks</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenTransformFeedbacks_fnptr = &glGenTransformFeedbacks_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenTransformFeedbacks_Lazy(int n, int* ids)
        {
            _glGenTransformFeedbacks_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenTransformFeedbacks");
            _glGenTransformFeedbacks_fnptr(n, ids);
        }
        
        /// <summary><b>[entry point: <c>glGenTransformFeedbacksNV</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenTransformFeedbacksNV_fnptr = &glGenTransformFeedbacksNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenTransformFeedbacksNV_Lazy(int n, int* ids)
        {
            _glGenTransformFeedbacksNV_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenTransformFeedbacksNV");
            _glGenTransformFeedbacksNV_fnptr(n, ids);
        }
        
        /// <summary><b>[entry point: <c>glGenVertexArrays</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenVertexArrays_fnptr = &glGenVertexArrays_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenVertexArrays_Lazy(int n, int* arrays)
        {
            _glGenVertexArrays_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenVertexArrays");
            _glGenVertexArrays_fnptr(n, arrays);
        }
        
        /// <summary><b>[entry point: <c>glGenVertexArraysAPPLE</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenVertexArraysAPPLE_fnptr = &glGenVertexArraysAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenVertexArraysAPPLE_Lazy(int n, int* arrays)
        {
            _glGenVertexArraysAPPLE_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenVertexArraysAPPLE");
            _glGenVertexArraysAPPLE_fnptr(n, arrays);
        }
        
        /// <summary><b>[entry point: <c>glGenVertexArraysOES</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glGenVertexArraysOES_fnptr = &glGenVertexArraysOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGenVertexArraysOES_Lazy(int n, int* arrays)
        {
            _glGenVertexArraysOES_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenVertexArraysOES");
            _glGenVertexArraysOES_fnptr(n, arrays);
        }
        
        /// <summary><b>[entry point: <c>glGenVertexShadersEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint> _glGenVertexShadersEXT_fnptr = &glGenVertexShadersEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGenVertexShadersEXT_Lazy(uint range)
        {
            _glGenVertexShadersEXT_fnptr = (delegate* unmanaged<uint, uint>)GLLoader.BindingsContext.GetProcAddress("glGenVertexShadersEXT");
            return _glGenVertexShadersEXT_fnptr(range);
        }
        
        /// <summary><b>[entry point: <c>glGetActiveAtomicCounterBufferiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glGetActiveAtomicCounterBufferiv_fnptr = &glGetActiveAtomicCounterBufferiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetActiveAtomicCounterBufferiv_Lazy(int program, uint bufferIndex, uint pname, int* parameters)
        {
            _glGetActiveAtomicCounterBufferiv_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveAtomicCounterBufferiv");
            _glGetActiveAtomicCounterBufferiv_fnptr(program, bufferIndex, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetActiveAttrib</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void> _glGetActiveAttrib_fnptr = &glGetActiveAttrib_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetActiveAttrib_Lazy(int program, uint index, int bufSize, int* length, int* size, uint* type, byte* name)
        {
            _glGetActiveAttrib_fnptr = (delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveAttrib");
            _glGetActiveAttrib_fnptr(program, index, bufSize, length, size, type, name);
        }
        
        /// <summary><b>[entry point: <c>glGetActiveAttribARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, uint, int, int*, int*, uint*, byte*, void> _glGetActiveAttribARB_fnptr = &glGetActiveAttribARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetActiveAttribARB_Lazy(IntPtr programObj, uint index, int maxLength, int* length, int* size, uint* type, byte* name)
        {
            _glGetActiveAttribARB_fnptr = (delegate* unmanaged<IntPtr, uint, int, int*, int*, uint*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveAttribARB");
            _glGetActiveAttribARB_fnptr(programObj, index, maxLength, length, size, type, name);
        }
        
        /// <summary><b>[entry point: <c>glGetActiveSubroutineName</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, int*, byte*, void> _glGetActiveSubroutineName_fnptr = &glGetActiveSubroutineName_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetActiveSubroutineName_Lazy(int program, uint shadertype, uint index, int bufSize, int* length, byte* name)
        {
            _glGetActiveSubroutineName_fnptr = (delegate* unmanaged<int, uint, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveSubroutineName");
            _glGetActiveSubroutineName_fnptr(program, shadertype, index, bufSize, length, name);
        }
        
        /// <summary><b>[entry point: <c>glGetActiveSubroutineUniformiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, uint, int*, void> _glGetActiveSubroutineUniformiv_fnptr = &glGetActiveSubroutineUniformiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetActiveSubroutineUniformiv_Lazy(int program, uint shadertype, uint index, uint pname, int* values)
        {
            _glGetActiveSubroutineUniformiv_fnptr = (delegate* unmanaged<int, uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveSubroutineUniformiv");
            _glGetActiveSubroutineUniformiv_fnptr(program, shadertype, index, pname, values);
        }
        
        /// <summary><b>[entry point: <c>glGetActiveSubroutineUniformName</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, int*, byte*, void> _glGetActiveSubroutineUniformName_fnptr = &glGetActiveSubroutineUniformName_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetActiveSubroutineUniformName_Lazy(int program, uint shadertype, uint index, int bufSize, int* length, byte* name)
        {
            _glGetActiveSubroutineUniformName_fnptr = (delegate* unmanaged<int, uint, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveSubroutineUniformName");
            _glGetActiveSubroutineUniformName_fnptr(program, shadertype, index, bufSize, length, name);
        }
        
        /// <summary><b>[entry point: <c>glGetActiveUniform</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void> _glGetActiveUniform_fnptr = &glGetActiveUniform_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetActiveUniform_Lazy(int program, uint index, int bufSize, int* length, int* size, uint* type, byte* name)
        {
            _glGetActiveUniform_fnptr = (delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveUniform");
            _glGetActiveUniform_fnptr(program, index, bufSize, length, size, type, name);
        }
        
        /// <summary><b>[entry point: <c>glGetActiveUniformARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, uint, int, int*, int*, uint*, byte*, void> _glGetActiveUniformARB_fnptr = &glGetActiveUniformARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetActiveUniformARB_Lazy(IntPtr programObj, uint index, int maxLength, int* length, int* size, uint* type, byte* name)
        {
            _glGetActiveUniformARB_fnptr = (delegate* unmanaged<IntPtr, uint, int, int*, int*, uint*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveUniformARB");
            _glGetActiveUniformARB_fnptr(programObj, index, maxLength, length, size, type, name);
        }
        
        /// <summary><b>[entry point: <c>glGetActiveUniformBlockiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glGetActiveUniformBlockiv_fnptr = &glGetActiveUniformBlockiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetActiveUniformBlockiv_Lazy(int program, uint uniformBlockIndex, uint pname, int* parameters)
        {
            _glGetActiveUniformBlockiv_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveUniformBlockiv");
            _glGetActiveUniformBlockiv_fnptr(program, uniformBlockIndex, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetActiveUniformBlockName</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int*, byte*, void> _glGetActiveUniformBlockName_fnptr = &glGetActiveUniformBlockName_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetActiveUniformBlockName_Lazy(int program, uint uniformBlockIndex, int bufSize, int* length, byte* uniformBlockName)
        {
            _glGetActiveUniformBlockName_fnptr = (delegate* unmanaged<int, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveUniformBlockName");
            _glGetActiveUniformBlockName_fnptr(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        }
        
        /// <summary><b>[entry point: <c>glGetActiveUniformName</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int*, byte*, void> _glGetActiveUniformName_fnptr = &glGetActiveUniformName_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetActiveUniformName_Lazy(int program, uint uniformIndex, int bufSize, int* length, byte* uniformName)
        {
            _glGetActiveUniformName_fnptr = (delegate* unmanaged<int, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveUniformName");
            _glGetActiveUniformName_fnptr(program, uniformIndex, bufSize, length, uniformName);
        }
        
        /// <summary><b>[entry point: <c>glGetActiveUniformsiv</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, uint, int*, void> _glGetActiveUniformsiv_fnptr = &glGetActiveUniformsiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetActiveUniformsiv_Lazy(int program, int uniformCount, uint* uniformIndices, uint pname, int* parameters)
        {
            _glGetActiveUniformsiv_fnptr = (delegate* unmanaged<int, int, uint*, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveUniformsiv");
            _glGetActiveUniformsiv_fnptr(program, uniformCount, uniformIndices, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetActiveVaryingNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void> _glGetActiveVaryingNV_fnptr = &glGetActiveVaryingNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetActiveVaryingNV_Lazy(int program, uint index, int bufSize, int* length, int* size, uint* type, byte* name)
        {
            _glGetActiveVaryingNV_fnptr = (delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveVaryingNV");
            _glGetActiveVaryingNV_fnptr(program, index, bufSize, length, size, type, name);
        }
        
        /// <summary><b>[entry point: <c>glGetArrayObjectfvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetArrayObjectfvATI_fnptr = &glGetArrayObjectfvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetArrayObjectfvATI_Lazy(uint array, uint pname, float* parameters)
        {
            _glGetArrayObjectfvATI_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetArrayObjectfvATI");
            _glGetArrayObjectfvATI_fnptr(array, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetArrayObjectivATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetArrayObjectivATI_fnptr = &glGetArrayObjectivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetArrayObjectivATI_Lazy(uint array, uint pname, int* parameters)
        {
            _glGetArrayObjectivATI_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetArrayObjectivATI");
            _glGetArrayObjectivATI_fnptr(array, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetAttachedObjectsARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, int, int*, IntPtr*, void> _glGetAttachedObjectsARB_fnptr = &glGetAttachedObjectsARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetAttachedObjectsARB_Lazy(IntPtr containerObj, int maxCount, int* count, IntPtr* obj)
        {
            _glGetAttachedObjectsARB_fnptr = (delegate* unmanaged<IntPtr, int, int*, IntPtr*, void>)GLLoader.BindingsContext.GetProcAddress("glGetAttachedObjectsARB");
            _glGetAttachedObjectsARB_fnptr(containerObj, maxCount, count, obj);
        }
        
        /// <summary><b>[entry point: <c>glGetAttachedShaders</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, int*, void> _glGetAttachedShaders_fnptr = &glGetAttachedShaders_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetAttachedShaders_Lazy(int program, int maxCount, int* count, int* shaders)
        {
            _glGetAttachedShaders_fnptr = (delegate* unmanaged<int, int, int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetAttachedShaders");
            _glGetAttachedShaders_fnptr(program, maxCount, count, shaders);
        }
        
        /// <summary><b>[entry point: <c>glGetAttribLocation</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, int> _glGetAttribLocation_fnptr = &glGetAttribLocation_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetAttribLocation_Lazy(int program, byte* name)
        {
            _glGetAttribLocation_fnptr = (delegate* unmanaged<int, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetAttribLocation");
            return _glGetAttribLocation_fnptr(program, name);
        }
        
        /// <summary><b>[entry point: <c>glGetAttribLocationARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, byte*, int> _glGetAttribLocationARB_fnptr = &glGetAttribLocationARB_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetAttribLocationARB_Lazy(IntPtr programObj, byte* name)
        {
            _glGetAttribLocationARB_fnptr = (delegate* unmanaged<IntPtr, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetAttribLocationARB");
            return _glGetAttribLocationARB_fnptr(programObj, name);
        }
        
        /// <summary><b>[entry point: <c>glGetBooleani_v</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte*, void> _glGetBooleani_v_fnptr = &glGetBooleani_v_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetBooleani_v_Lazy(uint target, uint index, byte* data)
        {
            _glGetBooleani_v_fnptr = (delegate* unmanaged<uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBooleani_v");
            _glGetBooleani_v_fnptr(target, index, data);
        }
        
        /// <summary><b>[entry point: <c>glGetBooleanIndexedvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte*, void> _glGetBooleanIndexedvEXT_fnptr = &glGetBooleanIndexedvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetBooleanIndexedvEXT_Lazy(uint target, uint index, byte* data)
        {
            _glGetBooleanIndexedvEXT_fnptr = (delegate* unmanaged<uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBooleanIndexedvEXT");
            _glGetBooleanIndexedvEXT_fnptr(target, index, data);
        }
        
        /// <summary><b>[entry point: <c>glGetBooleanv</c>]</b></summary>
        public static delegate* unmanaged<uint, byte*, void> _glGetBooleanv_fnptr = &glGetBooleanv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetBooleanv_Lazy(uint pname, byte* data)
        {
            _glGetBooleanv_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBooleanv");
            _glGetBooleanv_fnptr(pname, data);
        }
        
        /// <summary><b>[entry point: <c>glGetBufferParameteri64v</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, long*, void> _glGetBufferParameteri64v_fnptr = &glGetBufferParameteri64v_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetBufferParameteri64v_Lazy(uint target, uint pname, long* parameters)
        {
            _glGetBufferParameteri64v_fnptr = (delegate* unmanaged<uint, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferParameteri64v");
            _glGetBufferParameteri64v_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetBufferParameteriv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetBufferParameteriv_fnptr = &glGetBufferParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetBufferParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetBufferParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferParameteriv");
            _glGetBufferParameteriv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetBufferParameterivARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetBufferParameterivARB_fnptr = &glGetBufferParameterivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetBufferParameterivARB_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetBufferParameterivARB_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferParameterivARB");
            _glGetBufferParameterivARB_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetBufferParameterui64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, ulong*, void> _glGetBufferParameterui64vNV_fnptr = &glGetBufferParameterui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetBufferParameterui64vNV_Lazy(uint target, uint pname, ulong* parameters)
        {
            _glGetBufferParameterui64vNV_fnptr = (delegate* unmanaged<uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferParameterui64vNV");
            _glGetBufferParameterui64vNV_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetBufferPointerv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void**, void> _glGetBufferPointerv_fnptr = &glGetBufferPointerv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetBufferPointerv_Lazy(uint target, uint pname, void** parameters)
        {
            _glGetBufferPointerv_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferPointerv");
            _glGetBufferPointerv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetBufferPointervARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void**, void> _glGetBufferPointervARB_fnptr = &glGetBufferPointervARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetBufferPointervARB_Lazy(uint target, uint pname, void** parameters)
        {
            _glGetBufferPointervARB_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferPointervARB");
            _glGetBufferPointervARB_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetBufferPointervOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void**, void> _glGetBufferPointervOES_fnptr = &glGetBufferPointervOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetBufferPointervOES_Lazy(uint target, uint pname, void** parameters)
        {
            _glGetBufferPointervOES_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferPointervOES");
            _glGetBufferPointervOES_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetBufferSubData</c>]</b></summary>
        public static delegate* unmanaged<uint, IntPtr, nint, void*, void> _glGetBufferSubData_fnptr = &glGetBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetBufferSubData_Lazy(uint target, IntPtr offset, nint size, void* data)
        {
            _glGetBufferSubData_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferSubData");
            _glGetBufferSubData_fnptr(target, offset, size, data);
        }
        
        /// <summary><b>[entry point: <c>glGetBufferSubDataARB</c>]</b></summary>
        public static delegate* unmanaged<uint, IntPtr, nint, void*, void> _glGetBufferSubDataARB_fnptr = &glGetBufferSubDataARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetBufferSubDataARB_Lazy(uint target, IntPtr offset, nint size, void* data)
        {
            _glGetBufferSubDataARB_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferSubDataARB");
            _glGetBufferSubDataARB_fnptr(target, offset, size, data);
        }
        
        /// <summary><b>[entry point: <c>glGetClipPlane</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glGetClipPlane_fnptr = &glGetClipPlane_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetClipPlane_Lazy(uint plane, double* equation)
        {
            _glGetClipPlane_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetClipPlane");
            _glGetClipPlane_fnptr(plane, equation);
        }
        
        /// <summary><b>[entry point: <c>glGetClipPlanef</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glGetClipPlanef_fnptr = &glGetClipPlanef_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetClipPlanef_Lazy(uint plane, float* equation)
        {
            _glGetClipPlanef_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetClipPlanef");
            _glGetClipPlanef_fnptr(plane, equation);
        }
        
        /// <summary><b>[entry point: <c>glGetClipPlanefOES</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glGetClipPlanefOES_fnptr = &glGetClipPlanefOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetClipPlanefOES_Lazy(uint plane, float* equation)
        {
            _glGetClipPlanefOES_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetClipPlanefOES");
            _glGetClipPlanefOES_fnptr(plane, equation);
        }
        
        /// <summary><b>[entry point: <c>glGetClipPlanex</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glGetClipPlanex_fnptr = &glGetClipPlanex_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetClipPlanex_Lazy(uint plane, int* equation)
        {
            _glGetClipPlanex_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetClipPlanex");
            _glGetClipPlanex_fnptr(plane, equation);
        }
        
        /// <summary><b>[entry point: <c>glGetClipPlanexOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glGetClipPlanexOES_fnptr = &glGetClipPlanexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetClipPlanexOES_Lazy(uint plane, int* equation)
        {
            _glGetClipPlanexOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetClipPlanexOES");
            _glGetClipPlanexOES_fnptr(plane, equation);
        }
        
        /// <summary><b>[entry point: <c>glGetColorTable</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void*, void> _glGetColorTable_fnptr = &glGetColorTable_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetColorTable_Lazy(uint target, uint format, uint type, void* table)
        {
            _glGetColorTable_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTable");
            _glGetColorTable_fnptr(target, format, type, table);
        }
        
        /// <summary><b>[entry point: <c>glGetColorTableEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void*, void> _glGetColorTableEXT_fnptr = &glGetColorTableEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetColorTableEXT_Lazy(uint target, uint format, uint type, void* data)
        {
            _glGetColorTableEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableEXT");
            _glGetColorTableEXT_fnptr(target, format, type, data);
        }
        
        /// <summary><b>[entry point: <c>glGetColorTableParameterfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetColorTableParameterfv_fnptr = &glGetColorTableParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetColorTableParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _glGetColorTableParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableParameterfv");
            _glGetColorTableParameterfv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetColorTableParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetColorTableParameterfvEXT_fnptr = &glGetColorTableParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetColorTableParameterfvEXT_Lazy(uint target, uint pname, float* parameters)
        {
            _glGetColorTableParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableParameterfvEXT");
            _glGetColorTableParameterfvEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetColorTableParameterfvSGI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetColorTableParameterfvSGI_fnptr = &glGetColorTableParameterfvSGI_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetColorTableParameterfvSGI_Lazy(uint target, uint pname, float* parameters)
        {
            _glGetColorTableParameterfvSGI_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableParameterfvSGI");
            _glGetColorTableParameterfvSGI_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetColorTableParameteriv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetColorTableParameteriv_fnptr = &glGetColorTableParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetColorTableParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetColorTableParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableParameteriv");
            _glGetColorTableParameteriv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetColorTableParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetColorTableParameterivEXT_fnptr = &glGetColorTableParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetColorTableParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetColorTableParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableParameterivEXT");
            _glGetColorTableParameterivEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetColorTableParameterivSGI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetColorTableParameterivSGI_fnptr = &glGetColorTableParameterivSGI_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetColorTableParameterivSGI_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetColorTableParameterivSGI_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableParameterivSGI");
            _glGetColorTableParameterivSGI_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetColorTableSGI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void*, void> _glGetColorTableSGI_fnptr = &glGetColorTableSGI_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetColorTableSGI_Lazy(uint target, uint format, uint type, void* table)
        {
            _glGetColorTableSGI_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableSGI");
            _glGetColorTableSGI_fnptr(target, format, type, table);
        }
        
        /// <summary><b>[entry point: <c>glGetCombinerInputParameterfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, float*, void> _glGetCombinerInputParameterfvNV_fnptr = &glGetCombinerInputParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetCombinerInputParameterfvNV_Lazy(uint stage, uint portion, uint variable, uint pname, float* parameters)
        {
            _glGetCombinerInputParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCombinerInputParameterfvNV");
            _glGetCombinerInputParameterfvNV_fnptr(stage, portion, variable, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetCombinerInputParameterivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, int*, void> _glGetCombinerInputParameterivNV_fnptr = &glGetCombinerInputParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetCombinerInputParameterivNV_Lazy(uint stage, uint portion, uint variable, uint pname, int* parameters)
        {
            _glGetCombinerInputParameterivNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCombinerInputParameterivNV");
            _glGetCombinerInputParameterivNV_fnptr(stage, portion, variable, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetCombinerOutputParameterfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float*, void> _glGetCombinerOutputParameterfvNV_fnptr = &glGetCombinerOutputParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetCombinerOutputParameterfvNV_Lazy(uint stage, uint portion, uint pname, float* parameters)
        {
            _glGetCombinerOutputParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCombinerOutputParameterfvNV");
            _glGetCombinerOutputParameterfvNV_fnptr(stage, portion, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetCombinerOutputParameterivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glGetCombinerOutputParameterivNV_fnptr = &glGetCombinerOutputParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetCombinerOutputParameterivNV_Lazy(uint stage, uint portion, uint pname, int* parameters)
        {
            _glGetCombinerOutputParameterivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCombinerOutputParameterivNV");
            _glGetCombinerOutputParameterivNV_fnptr(stage, portion, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetCombinerStageParameterfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetCombinerStageParameterfvNV_fnptr = &glGetCombinerStageParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetCombinerStageParameterfvNV_Lazy(uint stage, uint pname, float* parameters)
        {
            _glGetCombinerStageParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCombinerStageParameterfvNV");
            _glGetCombinerStageParameterfvNV_fnptr(stage, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetCommandHeaderNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint> _glGetCommandHeaderNV_fnptr = &glGetCommandHeaderNV_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGetCommandHeaderNV_Lazy(uint tokenID, uint size)
        {
            _glGetCommandHeaderNV_fnptr = (delegate* unmanaged<uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glGetCommandHeaderNV");
            return _glGetCommandHeaderNV_fnptr(tokenID, size);
        }
        
        /// <summary><b>[entry point: <c>glGetCompressedMultiTexImageEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void*, void> _glGetCompressedMultiTexImageEXT_fnptr = &glGetCompressedMultiTexImageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetCompressedMultiTexImageEXT_Lazy(uint texunit, uint target, int lod, void* img)
        {
            _glGetCompressedMultiTexImageEXT_fnptr = (delegate* unmanaged<uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCompressedMultiTexImageEXT");
            _glGetCompressedMultiTexImageEXT_fnptr(texunit, target, lod, img);
        }
        
        /// <summary><b>[entry point: <c>glGetCompressedTexImage</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void*, void> _glGetCompressedTexImage_fnptr = &glGetCompressedTexImage_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetCompressedTexImage_Lazy(uint target, int level, void* img)
        {
            _glGetCompressedTexImage_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCompressedTexImage");
            _glGetCompressedTexImage_fnptr(target, level, img);
        }
        
        /// <summary><b>[entry point: <c>glGetCompressedTexImageARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void*, void> _glGetCompressedTexImageARB_fnptr = &glGetCompressedTexImageARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetCompressedTexImageARB_Lazy(uint target, int level, void* img)
        {
            _glGetCompressedTexImageARB_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCompressedTexImageARB");
            _glGetCompressedTexImageARB_fnptr(target, level, img);
        }
        
        /// <summary><b>[entry point: <c>glGetCompressedTextureImage</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void*, void> _glGetCompressedTextureImage_fnptr = &glGetCompressedTextureImage_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetCompressedTextureImage_Lazy(int texture, int level, int bufSize, void* pixels)
        {
            _glGetCompressedTextureImage_fnptr = (delegate* unmanaged<int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCompressedTextureImage");
            _glGetCompressedTextureImage_fnptr(texture, level, bufSize, pixels);
        }
        
        /// <summary><b>[entry point: <c>glGetCompressedTextureImageEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void*, void> _glGetCompressedTextureImageEXT_fnptr = &glGetCompressedTextureImageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetCompressedTextureImageEXT_Lazy(int texture, uint target, int lod, void* img)
        {
            _glGetCompressedTextureImageEXT_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCompressedTextureImageEXT");
            _glGetCompressedTextureImageEXT_fnptr(texture, target, lod, img);
        }
        
        /// <summary><b>[entry point: <c>glGetCompressedTextureSubImage</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, int, void*, void> _glGetCompressedTextureSubImage_fnptr = &glGetCompressedTextureSubImage_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetCompressedTextureSubImage_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, void* pixels)
        {
            _glGetCompressedTextureSubImage_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCompressedTextureSubImage");
            _glGetCompressedTextureSubImage_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
        }
        
        /// <summary><b>[entry point: <c>glGetConvolutionFilter</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void*, void> _glGetConvolutionFilter_fnptr = &glGetConvolutionFilter_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetConvolutionFilter_Lazy(uint target, uint format, uint type, void* image)
        {
            _glGetConvolutionFilter_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetConvolutionFilter");
            _glGetConvolutionFilter_fnptr(target, format, type, image);
        }
        
        /// <summary><b>[entry point: <c>glGetConvolutionFilterEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void*, void> _glGetConvolutionFilterEXT_fnptr = &glGetConvolutionFilterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetConvolutionFilterEXT_Lazy(uint target, uint format, uint type, void* image)
        {
            _glGetConvolutionFilterEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetConvolutionFilterEXT");
            _glGetConvolutionFilterEXT_fnptr(target, format, type, image);
        }
        
        /// <summary><b>[entry point: <c>glGetConvolutionParameterfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetConvolutionParameterfv_fnptr = &glGetConvolutionParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetConvolutionParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _glGetConvolutionParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetConvolutionParameterfv");
            _glGetConvolutionParameterfv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetConvolutionParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetConvolutionParameterfvEXT_fnptr = &glGetConvolutionParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetConvolutionParameterfvEXT_Lazy(uint target, uint pname, float* parameters)
        {
            _glGetConvolutionParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetConvolutionParameterfvEXT");
            _glGetConvolutionParameterfvEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetConvolutionParameteriv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetConvolutionParameteriv_fnptr = &glGetConvolutionParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetConvolutionParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetConvolutionParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetConvolutionParameteriv");
            _glGetConvolutionParameteriv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetConvolutionParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetConvolutionParameterivEXT_fnptr = &glGetConvolutionParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetConvolutionParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetConvolutionParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetConvolutionParameterivEXT");
            _glGetConvolutionParameterivEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetConvolutionParameterxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetConvolutionParameterxvOES_fnptr = &glGetConvolutionParameterxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetConvolutionParameterxvOES_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetConvolutionParameterxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetConvolutionParameterxvOES");
            _glGetConvolutionParameterxvOES_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetCoverageModulationTableNV</c>]</b></summary>
        public static delegate* unmanaged<int, float*, void> _glGetCoverageModulationTableNV_fnptr = &glGetCoverageModulationTableNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetCoverageModulationTableNV_Lazy(int bufSize, float* v)
        {
            _glGetCoverageModulationTableNV_fnptr = (delegate* unmanaged<int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCoverageModulationTableNV");
            _glGetCoverageModulationTableNV_fnptr(bufSize, v);
        }
        
        /// <summary><b>[entry point: <c>glGetDebugMessageLog</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint> _glGetDebugMessageLog_fnptr = &glGetDebugMessageLog_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGetDebugMessageLog_Lazy(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, byte* messageLog)
        {
            _glGetDebugMessageLog_fnptr = (delegate* unmanaged<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint>)GLLoader.BindingsContext.GetProcAddress("glGetDebugMessageLog");
            return _glGetDebugMessageLog_fnptr(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        }
        
        /// <summary><b>[entry point: <c>glGetDebugMessageLogAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, uint*, uint*, int*, byte*, uint> _glGetDebugMessageLogAMD_fnptr = &glGetDebugMessageLogAMD_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGetDebugMessageLogAMD_Lazy(uint count, int bufSize, uint* categories, uint* severities, uint* ids, int* lengths, byte* message)
        {
            _glGetDebugMessageLogAMD_fnptr = (delegate* unmanaged<uint, int, uint*, uint*, uint*, int*, byte*, uint>)GLLoader.BindingsContext.GetProcAddress("glGetDebugMessageLogAMD");
            return _glGetDebugMessageLogAMD_fnptr(count, bufSize, categories, severities, ids, lengths, message);
        }
        
        /// <summary><b>[entry point: <c>glGetDebugMessageLogARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint> _glGetDebugMessageLogARB_fnptr = &glGetDebugMessageLogARB_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGetDebugMessageLogARB_Lazy(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, byte* messageLog)
        {
            _glGetDebugMessageLogARB_fnptr = (delegate* unmanaged<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint>)GLLoader.BindingsContext.GetProcAddress("glGetDebugMessageLogARB");
            return _glGetDebugMessageLogARB_fnptr(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        }
        
        /// <summary><b>[entry point: <c>glGetDebugMessageLogKHR</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint> _glGetDebugMessageLogKHR_fnptr = &glGetDebugMessageLogKHR_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGetDebugMessageLogKHR_Lazy(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, byte* messageLog)
        {
            _glGetDebugMessageLogKHR_fnptr = (delegate* unmanaged<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint>)GLLoader.BindingsContext.GetProcAddress("glGetDebugMessageLogKHR");
            return _glGetDebugMessageLogKHR_fnptr(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        }
        
        /// <summary><b>[entry point: <c>glGetDetailTexFuncSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glGetDetailTexFuncSGIS_fnptr = &glGetDetailTexFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetDetailTexFuncSGIS_Lazy(uint target, float* points)
        {
            _glGetDetailTexFuncSGIS_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetDetailTexFuncSGIS");
            _glGetDetailTexFuncSGIS_fnptr(target, points);
        }
        
        /// <summary><b>[entry point: <c>glGetDoublei_v</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glGetDoublei_v_fnptr = &glGetDoublei_v_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetDoublei_v_Lazy(uint target, uint index, double* data)
        {
            _glGetDoublei_v_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetDoublei_v");
            _glGetDoublei_v_fnptr(target, index, data);
        }
        
        /// <summary><b>[entry point: <c>glGetDoublei_vEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glGetDoublei_vEXT_fnptr = &glGetDoublei_vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetDoublei_vEXT_Lazy(uint pname, uint index, double* parameters)
        {
            _glGetDoublei_vEXT_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetDoublei_vEXT");
            _glGetDoublei_vEXT_fnptr(pname, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetDoubleIndexedvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glGetDoubleIndexedvEXT_fnptr = &glGetDoubleIndexedvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetDoubleIndexedvEXT_Lazy(uint target, uint index, double* data)
        {
            _glGetDoubleIndexedvEXT_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetDoubleIndexedvEXT");
            _glGetDoubleIndexedvEXT_fnptr(target, index, data);
        }
        
        /// <summary><b>[entry point: <c>glGetDoublev</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glGetDoublev_fnptr = &glGetDoublev_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetDoublev_Lazy(uint pname, double* data)
        {
            _glGetDoublev_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetDoublev");
            _glGetDoublev_fnptr(pname, data);
        }
        
        /// <summary><b>[entry point: <c>glGetDriverControlsQCOM</c>]</b></summary>
        public static delegate* unmanaged<int*, int, uint*, void> _glGetDriverControlsQCOM_fnptr = &glGetDriverControlsQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetDriverControlsQCOM_Lazy(int* num, int size, uint* driverControls)
        {
            _glGetDriverControlsQCOM_fnptr = (delegate* unmanaged<int*, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetDriverControlsQCOM");
            _glGetDriverControlsQCOM_fnptr(num, size, driverControls);
        }
        
        /// <summary><b>[entry point: <c>glGetDriverControlStringQCOM</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, byte*, void> _glGetDriverControlStringQCOM_fnptr = &glGetDriverControlStringQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetDriverControlStringQCOM_Lazy(uint driverControl, int bufSize, int* length, byte* driverControlString)
        {
            _glGetDriverControlStringQCOM_fnptr = (delegate* unmanaged<uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetDriverControlStringQCOM");
            _glGetDriverControlStringQCOM_fnptr(driverControl, bufSize, length, driverControlString);
        }
        
        /// <summary><b>[entry point: <c>glGetError</c>]</b></summary>
        public static delegate* unmanaged<uint> _glGetError_fnptr = &glGetError_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGetError_Lazy()
        {
            _glGetError_fnptr = (delegate* unmanaged<uint>)GLLoader.BindingsContext.GetProcAddress("glGetError");
            return _glGetError_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glGetFenceivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetFenceivNV_fnptr = &glGetFenceivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFenceivNV_Lazy(uint fence, uint pname, int* parameters)
        {
            _glGetFenceivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFenceivNV");
            _glGetFenceivNV_fnptr(fence, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFinalCombinerInputParameterfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetFinalCombinerInputParameterfvNV_fnptr = &glGetFinalCombinerInputParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFinalCombinerInputParameterfvNV_Lazy(uint variable, uint pname, float* parameters)
        {
            _glGetFinalCombinerInputParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFinalCombinerInputParameterfvNV");
            _glGetFinalCombinerInputParameterfvNV_fnptr(variable, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFinalCombinerInputParameterivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetFinalCombinerInputParameterivNV_fnptr = &glGetFinalCombinerInputParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFinalCombinerInputParameterivNV_Lazy(uint variable, uint pname, int* parameters)
        {
            _glGetFinalCombinerInputParameterivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFinalCombinerInputParameterivNV");
            _glGetFinalCombinerInputParameterivNV_fnptr(variable, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFirstPerfQueryIdINTEL</c>]</b></summary>
        public static delegate* unmanaged<uint*, void> _glGetFirstPerfQueryIdINTEL_fnptr = &glGetFirstPerfQueryIdINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFirstPerfQueryIdINTEL_Lazy(uint* queryId)
        {
            _glGetFirstPerfQueryIdINTEL_fnptr = (delegate* unmanaged<uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFirstPerfQueryIdINTEL");
            _glGetFirstPerfQueryIdINTEL_fnptr(queryId);
        }
        
        /// <summary><b>[entry point: <c>glGetFixedv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glGetFixedv_fnptr = &glGetFixedv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFixedv_Lazy(uint pname, int* parameters)
        {
            _glGetFixedv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFixedv");
            _glGetFixedv_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFixedvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glGetFixedvOES_fnptr = &glGetFixedvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFixedvOES_Lazy(uint pname, int* parameters)
        {
            _glGetFixedvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFixedvOES");
            _glGetFixedvOES_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFloati_v</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetFloati_v_fnptr = &glGetFloati_v_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFloati_v_Lazy(uint target, uint index, float* data)
        {
            _glGetFloati_v_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFloati_v");
            _glGetFloati_v_fnptr(target, index, data);
        }
        
        /// <summary><b>[entry point: <c>glGetFloati_vEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetFloati_vEXT_fnptr = &glGetFloati_vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFloati_vEXT_Lazy(uint pname, uint index, float* parameters)
        {
            _glGetFloati_vEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFloati_vEXT");
            _glGetFloati_vEXT_fnptr(pname, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFloati_vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetFloati_vNV_fnptr = &glGetFloati_vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFloati_vNV_Lazy(uint target, uint index, float* data)
        {
            _glGetFloati_vNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFloati_vNV");
            _glGetFloati_vNV_fnptr(target, index, data);
        }
        
        /// <summary><b>[entry point: <c>glGetFloati_vOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetFloati_vOES_fnptr = &glGetFloati_vOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFloati_vOES_Lazy(uint target, uint index, float* data)
        {
            _glGetFloati_vOES_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFloati_vOES");
            _glGetFloati_vOES_fnptr(target, index, data);
        }
        
        /// <summary><b>[entry point: <c>glGetFloatIndexedvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetFloatIndexedvEXT_fnptr = &glGetFloatIndexedvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFloatIndexedvEXT_Lazy(uint target, uint index, float* data)
        {
            _glGetFloatIndexedvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFloatIndexedvEXT");
            _glGetFloatIndexedvEXT_fnptr(target, index, data);
        }
        
        /// <summary><b>[entry point: <c>glGetFloatv</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glGetFloatv_fnptr = &glGetFloatv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFloatv_Lazy(uint pname, float* data)
        {
            _glGetFloatv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFloatv");
            _glGetFloatv_fnptr(pname, data);
        }
        
        /// <summary><b>[entry point: <c>glGetFogFuncSGIS</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glGetFogFuncSGIS_fnptr = &glGetFogFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFogFuncSGIS_Lazy(float* points)
        {
            _glGetFogFuncSGIS_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFogFuncSGIS");
            _glGetFogFuncSGIS_fnptr(points);
        }
        
        /// <summary><b>[entry point: <c>glGetFragDataIndex</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, int> _glGetFragDataIndex_fnptr = &glGetFragDataIndex_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetFragDataIndex_Lazy(int program, byte* name)
        {
            _glGetFragDataIndex_fnptr = (delegate* unmanaged<int, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetFragDataIndex");
            return _glGetFragDataIndex_fnptr(program, name);
        }
        
        /// <summary><b>[entry point: <c>glGetFragDataIndexEXT</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, int> _glGetFragDataIndexEXT_fnptr = &glGetFragDataIndexEXT_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetFragDataIndexEXT_Lazy(int program, byte* name)
        {
            _glGetFragDataIndexEXT_fnptr = (delegate* unmanaged<int, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetFragDataIndexEXT");
            return _glGetFragDataIndexEXT_fnptr(program, name);
        }
        
        /// <summary><b>[entry point: <c>glGetFragDataLocation</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, int> _glGetFragDataLocation_fnptr = &glGetFragDataLocation_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetFragDataLocation_Lazy(int program, byte* name)
        {
            _glGetFragDataLocation_fnptr = (delegate* unmanaged<int, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetFragDataLocation");
            return _glGetFragDataLocation_fnptr(program, name);
        }
        
        /// <summary><b>[entry point: <c>glGetFragDataLocationEXT</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, int> _glGetFragDataLocationEXT_fnptr = &glGetFragDataLocationEXT_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetFragDataLocationEXT_Lazy(int program, byte* name)
        {
            _glGetFragDataLocationEXT_fnptr = (delegate* unmanaged<int, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetFragDataLocationEXT");
            return _glGetFragDataLocationEXT_fnptr(program, name);
        }
        
        /// <summary><b>[entry point: <c>glGetFragmentLightfvSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetFragmentLightfvSGIX_fnptr = &glGetFragmentLightfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFragmentLightfvSGIX_Lazy(uint light, uint pname, float* parameters)
        {
            _glGetFragmentLightfvSGIX_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFragmentLightfvSGIX");
            _glGetFragmentLightfvSGIX_fnptr(light, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFragmentLightivSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetFragmentLightivSGIX_fnptr = &glGetFragmentLightivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFragmentLightivSGIX_Lazy(uint light, uint pname, int* parameters)
        {
            _glGetFragmentLightivSGIX_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFragmentLightivSGIX");
            _glGetFragmentLightivSGIX_fnptr(light, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFragmentMaterialfvSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetFragmentMaterialfvSGIX_fnptr = &glGetFragmentMaterialfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFragmentMaterialfvSGIX_Lazy(uint face, uint pname, float* parameters)
        {
            _glGetFragmentMaterialfvSGIX_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFragmentMaterialfvSGIX");
            _glGetFragmentMaterialfvSGIX_fnptr(face, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFragmentMaterialivSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetFragmentMaterialivSGIX_fnptr = &glGetFragmentMaterialivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFragmentMaterialivSGIX_Lazy(uint face, uint pname, int* parameters)
        {
            _glGetFragmentMaterialivSGIX_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFragmentMaterialivSGIX");
            _glGetFragmentMaterialivSGIX_fnptr(face, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFragmentShadingRatesEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, uint*, void> _glGetFragmentShadingRatesEXT_fnptr = &glGetFragmentShadingRatesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFragmentShadingRatesEXT_Lazy(int samples, int maxCount, int* count, uint* shadingRates)
        {
            _glGetFragmentShadingRatesEXT_fnptr = (delegate* unmanaged<int, int, int*, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFragmentShadingRatesEXT");
            _glGetFragmentShadingRatesEXT_fnptr(samples, maxCount, count, shadingRates);
        }
        
        /// <summary><b>[entry point: <c>glGetFramebufferAttachmentParameteriv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glGetFramebufferAttachmentParameteriv_fnptr = &glGetFramebufferAttachmentParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFramebufferAttachmentParameteriv_Lazy(uint target, uint attachment, uint pname, int* parameters)
        {
            _glGetFramebufferAttachmentParameteriv_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferAttachmentParameteriv");
            _glGetFramebufferAttachmentParameteriv_fnptr(target, attachment, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFramebufferAttachmentParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glGetFramebufferAttachmentParameterivEXT_fnptr = &glGetFramebufferAttachmentParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFramebufferAttachmentParameterivEXT_Lazy(uint target, uint attachment, uint pname, int* parameters)
        {
            _glGetFramebufferAttachmentParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferAttachmentParameterivEXT");
            _glGetFramebufferAttachmentParameterivEXT_fnptr(target, attachment, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFramebufferAttachmentParameterivOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glGetFramebufferAttachmentParameterivOES_fnptr = &glGetFramebufferAttachmentParameterivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFramebufferAttachmentParameterivOES_Lazy(uint target, uint attachment, uint pname, int* parameters)
        {
            _glGetFramebufferAttachmentParameterivOES_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferAttachmentParameterivOES");
            _glGetFramebufferAttachmentParameterivOES_fnptr(target, attachment, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFramebufferParameterfvAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, int, float*, void> _glGetFramebufferParameterfvAMD_fnptr = &glGetFramebufferParameterfvAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFramebufferParameterfvAMD_Lazy(uint target, uint pname, uint numsamples, uint pixelindex, int size, float* values)
        {
            _glGetFramebufferParameterfvAMD_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferParameterfvAMD");
            _glGetFramebufferParameterfvAMD_fnptr(target, pname, numsamples, pixelindex, size, values);
        }
        
        /// <summary><b>[entry point: <c>glGetFramebufferParameteriv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetFramebufferParameteriv_fnptr = &glGetFramebufferParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFramebufferParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetFramebufferParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferParameteriv");
            _glGetFramebufferParameteriv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFramebufferParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetFramebufferParameterivEXT_fnptr = &glGetFramebufferParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFramebufferParameterivEXT_Lazy(int framebuffer, uint pname, int* parameters)
        {
            _glGetFramebufferParameterivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferParameterivEXT");
            _glGetFramebufferParameterivEXT_fnptr(framebuffer, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFramebufferParameterivMESA</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetFramebufferParameterivMESA_fnptr = &glGetFramebufferParameterivMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetFramebufferParameterivMESA_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetFramebufferParameterivMESA_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferParameterivMESA");
            _glGetFramebufferParameterivMESA_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetFramebufferPixelLocalStorageSizeEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int> _glGetFramebufferPixelLocalStorageSizeEXT_fnptr = &glGetFramebufferPixelLocalStorageSizeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetFramebufferPixelLocalStorageSizeEXT_Lazy(uint target)
        {
            _glGetFramebufferPixelLocalStorageSizeEXT_fnptr = (delegate* unmanaged<uint, int>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferPixelLocalStorageSizeEXT");
            return _glGetFramebufferPixelLocalStorageSizeEXT_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glGetGraphicsResetStatus</c>]</b></summary>
        public static delegate* unmanaged<uint> _glGetGraphicsResetStatus_fnptr = &glGetGraphicsResetStatus_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGetGraphicsResetStatus_Lazy()
        {
            _glGetGraphicsResetStatus_fnptr = (delegate* unmanaged<uint>)GLLoader.BindingsContext.GetProcAddress("glGetGraphicsResetStatus");
            return _glGetGraphicsResetStatus_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glGetGraphicsResetStatusARB</c>]</b></summary>
        public static delegate* unmanaged<uint> _glGetGraphicsResetStatusARB_fnptr = &glGetGraphicsResetStatusARB_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGetGraphicsResetStatusARB_Lazy()
        {
            _glGetGraphicsResetStatusARB_fnptr = (delegate* unmanaged<uint>)GLLoader.BindingsContext.GetProcAddress("glGetGraphicsResetStatusARB");
            return _glGetGraphicsResetStatusARB_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glGetGraphicsResetStatusEXT</c>]</b></summary>
        public static delegate* unmanaged<uint> _glGetGraphicsResetStatusEXT_fnptr = &glGetGraphicsResetStatusEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGetGraphicsResetStatusEXT_Lazy()
        {
            _glGetGraphicsResetStatusEXT_fnptr = (delegate* unmanaged<uint>)GLLoader.BindingsContext.GetProcAddress("glGetGraphicsResetStatusEXT");
            return _glGetGraphicsResetStatusEXT_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glGetGraphicsResetStatusKHR</c>]</b></summary>
        public static delegate* unmanaged<uint> _glGetGraphicsResetStatusKHR_fnptr = &glGetGraphicsResetStatusKHR_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGetGraphicsResetStatusKHR_Lazy()
        {
            _glGetGraphicsResetStatusKHR_fnptr = (delegate* unmanaged<uint>)GLLoader.BindingsContext.GetProcAddress("glGetGraphicsResetStatusKHR");
            return _glGetGraphicsResetStatusKHR_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glGetHandleARB</c>]</b></summary>
        public static delegate* unmanaged<uint, IntPtr> _glGetHandleARB_fnptr = &glGetHandleARB_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr glGetHandleARB_Lazy(uint pname)
        {
            _glGetHandleARB_fnptr = (delegate* unmanaged<uint, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glGetHandleARB");
            return _glGetHandleARB_fnptr(pname);
        }
        
        /// <summary><b>[entry point: <c>glGetHistogram</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, uint, uint, void*, void> _glGetHistogram_fnptr = &glGetHistogram_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetHistogram_Lazy(uint target, byte reset, uint format, uint type, void* values)
        {
            _glGetHistogram_fnptr = (delegate* unmanaged<uint, byte, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetHistogram");
            _glGetHistogram_fnptr(target, reset, format, type, values);
        }
        
        /// <summary><b>[entry point: <c>glGetHistogramEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, uint, uint, void*, void> _glGetHistogramEXT_fnptr = &glGetHistogramEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetHistogramEXT_Lazy(uint target, byte reset, uint format, uint type, void* values)
        {
            _glGetHistogramEXT_fnptr = (delegate* unmanaged<uint, byte, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetHistogramEXT");
            _glGetHistogramEXT_fnptr(target, reset, format, type, values);
        }
        
        /// <summary><b>[entry point: <c>glGetHistogramParameterfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetHistogramParameterfv_fnptr = &glGetHistogramParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetHistogramParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _glGetHistogramParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetHistogramParameterfv");
            _glGetHistogramParameterfv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetHistogramParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetHistogramParameterfvEXT_fnptr = &glGetHistogramParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetHistogramParameterfvEXT_Lazy(uint target, uint pname, float* parameters)
        {
            _glGetHistogramParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetHistogramParameterfvEXT");
            _glGetHistogramParameterfvEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetHistogramParameteriv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetHistogramParameteriv_fnptr = &glGetHistogramParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetHistogramParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetHistogramParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetHistogramParameteriv");
            _glGetHistogramParameteriv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetHistogramParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetHistogramParameterivEXT_fnptr = &glGetHistogramParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetHistogramParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetHistogramParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetHistogramParameterivEXT");
            _glGetHistogramParameterivEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetHistogramParameterxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetHistogramParameterxvOES_fnptr = &glGetHistogramParameterxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetHistogramParameterxvOES_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetHistogramParameterxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetHistogramParameterxvOES");
            _glGetHistogramParameterxvOES_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetImageHandleARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, int, uint, ulong> _glGetImageHandleARB_fnptr = &glGetImageHandleARB_Lazy;
        [UnmanagedCallersOnly]
        private static ulong glGetImageHandleARB_Lazy(int texture, int level, byte layered, int layer, uint format)
        {
            _glGetImageHandleARB_fnptr = (delegate* unmanaged<int, int, byte, int, uint, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetImageHandleARB");
            return _glGetImageHandleARB_fnptr(texture, level, layered, layer, format);
        }
        
        /// <summary><b>[entry point: <c>glGetImageHandleNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, int, uint, ulong> _glGetImageHandleNV_fnptr = &glGetImageHandleNV_Lazy;
        [UnmanagedCallersOnly]
        private static ulong glGetImageHandleNV_Lazy(int texture, int level, byte layered, int layer, uint format)
        {
            _glGetImageHandleNV_fnptr = (delegate* unmanaged<int, int, byte, int, uint, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetImageHandleNV");
            return _glGetImageHandleNV_fnptr(texture, level, layered, layer, format);
        }
        
        /// <summary><b>[entry point: <c>glGetImageTransformParameterfvHP</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetImageTransformParameterfvHP_fnptr = &glGetImageTransformParameterfvHP_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetImageTransformParameterfvHP_Lazy(uint target, uint pname, float* parameters)
        {
            _glGetImageTransformParameterfvHP_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetImageTransformParameterfvHP");
            _glGetImageTransformParameterfvHP_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetImageTransformParameterivHP</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetImageTransformParameterivHP_fnptr = &glGetImageTransformParameterivHP_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetImageTransformParameterivHP_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetImageTransformParameterivHP_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetImageTransformParameterivHP");
            _glGetImageTransformParameterivHP_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetInfoLogARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, int, int*, byte*, void> _glGetInfoLogARB_fnptr = &glGetInfoLogARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetInfoLogARB_Lazy(IntPtr obj, int maxLength, int* length, byte* infoLog)
        {
            _glGetInfoLogARB_fnptr = (delegate* unmanaged<IntPtr, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInfoLogARB");
            _glGetInfoLogARB_fnptr(obj, maxLength, length, infoLog);
        }
        
        /// <summary><b>[entry point: <c>glGetInstrumentsSGIX</c>]</b></summary>
        public static delegate* unmanaged<int> _glGetInstrumentsSGIX_fnptr = &glGetInstrumentsSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetInstrumentsSGIX_Lazy()
        {
            _glGetInstrumentsSGIX_fnptr = (delegate* unmanaged<int>)GLLoader.BindingsContext.GetProcAddress("glGetInstrumentsSGIX");
            return _glGetInstrumentsSGIX_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glGetInteger64i_v</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, long*, void> _glGetInteger64i_v_fnptr = &glGetInteger64i_v_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetInteger64i_v_Lazy(uint target, uint index, long* data)
        {
            _glGetInteger64i_v_fnptr = (delegate* unmanaged<uint, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInteger64i_v");
            _glGetInteger64i_v_fnptr(target, index, data);
        }
        
        /// <summary><b>[entry point: <c>glGetInteger64v</c>]</b></summary>
        public static delegate* unmanaged<uint, long*, void> _glGetInteger64v_fnptr = &glGetInteger64v_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetInteger64v_Lazy(uint pname, long* data)
        {
            _glGetInteger64v_fnptr = (delegate* unmanaged<uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInteger64v");
            _glGetInteger64v_fnptr(pname, data);
        }
        
        /// <summary><b>[entry point: <c>glGetInteger64vAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, long*, void> _glGetInteger64vAPPLE_fnptr = &glGetInteger64vAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetInteger64vAPPLE_Lazy(uint pname, long* parameters)
        {
            _glGetInteger64vAPPLE_fnptr = (delegate* unmanaged<uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInteger64vAPPLE");
            _glGetInteger64vAPPLE_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetInteger64vEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, long*, void> _glGetInteger64vEXT_fnptr = &glGetInteger64vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetInteger64vEXT_Lazy(uint pname, long* data)
        {
            _glGetInteger64vEXT_fnptr = (delegate* unmanaged<uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInteger64vEXT");
            _glGetInteger64vEXT_fnptr(pname, data);
        }
        
        /// <summary><b>[entry point: <c>glGetIntegeri_v</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetIntegeri_v_fnptr = &glGetIntegeri_v_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetIntegeri_v_Lazy(uint target, uint index, int* data)
        {
            _glGetIntegeri_v_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetIntegeri_v");
            _glGetIntegeri_v_fnptr(target, index, data);
        }
        
        /// <summary><b>[entry point: <c>glGetIntegeri_vEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetIntegeri_vEXT_fnptr = &glGetIntegeri_vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetIntegeri_vEXT_Lazy(uint target, uint index, int* data)
        {
            _glGetIntegeri_vEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetIntegeri_vEXT");
            _glGetIntegeri_vEXT_fnptr(target, index, data);
        }
        
        /// <summary><b>[entry point: <c>glGetIntegerIndexedvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetIntegerIndexedvEXT_fnptr = &glGetIntegerIndexedvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetIntegerIndexedvEXT_Lazy(uint target, uint index, int* data)
        {
            _glGetIntegerIndexedvEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetIntegerIndexedvEXT");
            _glGetIntegerIndexedvEXT_fnptr(target, index, data);
        }
        
        /// <summary><b>[entry point: <c>glGetIntegerui64i_vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, ulong*, void> _glGetIntegerui64i_vNV_fnptr = &glGetIntegerui64i_vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetIntegerui64i_vNV_Lazy(uint value, uint index, ulong* result)
        {
            _glGetIntegerui64i_vNV_fnptr = (delegate* unmanaged<uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetIntegerui64i_vNV");
            _glGetIntegerui64i_vNV_fnptr(value, index, result);
        }
        
        /// <summary><b>[entry point: <c>glGetIntegerui64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong*, void> _glGetIntegerui64vNV_fnptr = &glGetIntegerui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetIntegerui64vNV_Lazy(uint value, ulong* result)
        {
            _glGetIntegerui64vNV_fnptr = (delegate* unmanaged<uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetIntegerui64vNV");
            _glGetIntegerui64vNV_fnptr(value, result);
        }
        
        /// <summary><b>[entry point: <c>glGetIntegerv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glGetIntegerv_fnptr = &glGetIntegerv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetIntegerv_Lazy(uint pname, int* data)
        {
            _glGetIntegerv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetIntegerv");
            _glGetIntegerv_fnptr(pname, data);
        }
        
        /// <summary><b>[entry point: <c>glGetInternalformati64v</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, long*, void> _glGetInternalformati64v_fnptr = &glGetInternalformati64v_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetInternalformati64v_Lazy(uint target, uint internalformat, uint pname, int count, long* parameters)
        {
            _glGetInternalformati64v_fnptr = (delegate* unmanaged<uint, uint, uint, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInternalformati64v");
            _glGetInternalformati64v_fnptr(target, internalformat, pname, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetInternalformativ</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int*, void> _glGetInternalformativ_fnptr = &glGetInternalformativ_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetInternalformativ_Lazy(uint target, uint internalformat, uint pname, int count, int* parameters)
        {
            _glGetInternalformativ_fnptr = (delegate* unmanaged<uint, uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInternalformativ");
            _glGetInternalformativ_fnptr(target, internalformat, pname, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetInternalformatSampleivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, int, int*, void> _glGetInternalformatSampleivNV_fnptr = &glGetInternalformatSampleivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetInternalformatSampleivNV_Lazy(uint target, uint internalformat, int samples, uint pname, int count, int* parameters)
        {
            _glGetInternalformatSampleivNV_fnptr = (delegate* unmanaged<uint, uint, int, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInternalformatSampleivNV");
            _glGetInternalformatSampleivNV_fnptr(target, internalformat, samples, pname, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetInvariantBooleanvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte*, void> _glGetInvariantBooleanvEXT_fnptr = &glGetInvariantBooleanvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetInvariantBooleanvEXT_Lazy(uint id, uint value, byte* data)
        {
            _glGetInvariantBooleanvEXT_fnptr = (delegate* unmanaged<uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInvariantBooleanvEXT");
            _glGetInvariantBooleanvEXT_fnptr(id, value, data);
        }
        
        /// <summary><b>[entry point: <c>glGetInvariantFloatvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetInvariantFloatvEXT_fnptr = &glGetInvariantFloatvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetInvariantFloatvEXT_Lazy(uint id, uint value, float* data)
        {
            _glGetInvariantFloatvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInvariantFloatvEXT");
            _glGetInvariantFloatvEXT_fnptr(id, value, data);
        }
        
        /// <summary><b>[entry point: <c>glGetInvariantIntegervEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetInvariantIntegervEXT_fnptr = &glGetInvariantIntegervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetInvariantIntegervEXT_Lazy(uint id, uint value, int* data)
        {
            _glGetInvariantIntegervEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInvariantIntegervEXT");
            _glGetInvariantIntegervEXT_fnptr(id, value, data);
        }
        
        /// <summary><b>[entry point: <c>glGetLightfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetLightfv_fnptr = &glGetLightfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetLightfv_Lazy(uint light, uint pname, float* parameters)
        {
            _glGetLightfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLightfv");
            _glGetLightfv_fnptr(light, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetLightiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetLightiv_fnptr = &glGetLightiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetLightiv_Lazy(uint light, uint pname, int* parameters)
        {
            _glGetLightiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLightiv");
            _glGetLightiv_fnptr(light, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetLightxOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetLightxOES_fnptr = &glGetLightxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetLightxOES_Lazy(uint light, uint pname, int* parameters)
        {
            _glGetLightxOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLightxOES");
            _glGetLightxOES_fnptr(light, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetLightxv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetLightxv_fnptr = &glGetLightxv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetLightxv_Lazy(uint light, uint pname, int* parameters)
        {
            _glGetLightxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLightxv");
            _glGetLightxv_fnptr(light, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetLightxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetLightxvOES_fnptr = &glGetLightxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetLightxvOES_Lazy(uint light, uint pname, int* parameters)
        {
            _glGetLightxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLightxvOES");
            _glGetLightxvOES_fnptr(light, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetListParameterfvSGIX</c>]</b></summary>
        public static delegate* unmanaged<int, uint, float*, void> _glGetListParameterfvSGIX_fnptr = &glGetListParameterfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetListParameterfvSGIX_Lazy(int list, uint pname, float* parameters)
        {
            _glGetListParameterfvSGIX_fnptr = (delegate* unmanaged<int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetListParameterfvSGIX");
            _glGetListParameterfvSGIX_fnptr(list, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetListParameterivSGIX</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetListParameterivSGIX_fnptr = &glGetListParameterivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetListParameterivSGIX_Lazy(int list, uint pname, int* parameters)
        {
            _glGetListParameterivSGIX_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetListParameterivSGIX");
            _glGetListParameterivSGIX_fnptr(list, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetLocalConstantBooleanvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte*, void> _glGetLocalConstantBooleanvEXT_fnptr = &glGetLocalConstantBooleanvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetLocalConstantBooleanvEXT_Lazy(uint id, uint value, byte* data)
        {
            _glGetLocalConstantBooleanvEXT_fnptr = (delegate* unmanaged<uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLocalConstantBooleanvEXT");
            _glGetLocalConstantBooleanvEXT_fnptr(id, value, data);
        }
        
        /// <summary><b>[entry point: <c>glGetLocalConstantFloatvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetLocalConstantFloatvEXT_fnptr = &glGetLocalConstantFloatvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetLocalConstantFloatvEXT_Lazy(uint id, uint value, float* data)
        {
            _glGetLocalConstantFloatvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLocalConstantFloatvEXT");
            _glGetLocalConstantFloatvEXT_fnptr(id, value, data);
        }
        
        /// <summary><b>[entry point: <c>glGetLocalConstantIntegervEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetLocalConstantIntegervEXT_fnptr = &glGetLocalConstantIntegervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetLocalConstantIntegervEXT_Lazy(uint id, uint value, int* data)
        {
            _glGetLocalConstantIntegervEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLocalConstantIntegervEXT");
            _glGetLocalConstantIntegervEXT_fnptr(id, value, data);
        }
        
        /// <summary><b>[entry point: <c>glGetMapAttribParameterfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float*, void> _glGetMapAttribParameterfvNV_fnptr = &glGetMapAttribParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMapAttribParameterfvNV_Lazy(uint target, uint index, uint pname, float* parameters)
        {
            _glGetMapAttribParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapAttribParameterfvNV");
            _glGetMapAttribParameterfvNV_fnptr(target, index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMapAttribParameterivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glGetMapAttribParameterivNV_fnptr = &glGetMapAttribParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMapAttribParameterivNV_Lazy(uint target, uint index, uint pname, int* parameters)
        {
            _glGetMapAttribParameterivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapAttribParameterivNV");
            _glGetMapAttribParameterivNV_fnptr(target, index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMapControlPointsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int, byte, void*, void> _glGetMapControlPointsNV_fnptr = &glGetMapControlPointsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMapControlPointsNV_Lazy(uint target, uint index, uint type, int ustride, int vstride, byte packed, void* points)
        {
            _glGetMapControlPointsNV_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, byte, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapControlPointsNV");
            _glGetMapControlPointsNV_fnptr(target, index, type, ustride, vstride, packed, points);
        }
        
        /// <summary><b>[entry point: <c>glGetMapdv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glGetMapdv_fnptr = &glGetMapdv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMapdv_Lazy(uint target, uint query, double* v)
        {
            _glGetMapdv_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapdv");
            _glGetMapdv_fnptr(target, query, v);
        }
        
        /// <summary><b>[entry point: <c>glGetMapfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetMapfv_fnptr = &glGetMapfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMapfv_Lazy(uint target, uint query, float* v)
        {
            _glGetMapfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapfv");
            _glGetMapfv_fnptr(target, query, v);
        }
        
        /// <summary><b>[entry point: <c>glGetMapiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetMapiv_fnptr = &glGetMapiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMapiv_Lazy(uint target, uint query, int* v)
        {
            _glGetMapiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapiv");
            _glGetMapiv_fnptr(target, query, v);
        }
        
        /// <summary><b>[entry point: <c>glGetMapParameterfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetMapParameterfvNV_fnptr = &glGetMapParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMapParameterfvNV_Lazy(uint target, uint pname, float* parameters)
        {
            _glGetMapParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapParameterfvNV");
            _glGetMapParameterfvNV_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMapParameterivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetMapParameterivNV_fnptr = &glGetMapParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMapParameterivNV_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetMapParameterivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapParameterivNV");
            _glGetMapParameterivNV_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMapxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetMapxvOES_fnptr = &glGetMapxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMapxvOES_Lazy(uint target, uint query, int* v)
        {
            _glGetMapxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapxvOES");
            _glGetMapxvOES_fnptr(target, query, v);
        }
        
        /// <summary><b>[entry point: <c>glGetMaterialfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetMaterialfv_fnptr = &glGetMaterialfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMaterialfv_Lazy(uint face, uint pname, float* parameters)
        {
            _glGetMaterialfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMaterialfv");
            _glGetMaterialfv_fnptr(face, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMaterialiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetMaterialiv_fnptr = &glGetMaterialiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMaterialiv_Lazy(uint face, uint pname, int* parameters)
        {
            _glGetMaterialiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMaterialiv");
            _glGetMaterialiv_fnptr(face, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMaterialxOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glGetMaterialxOES_fnptr = &glGetMaterialxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMaterialxOES_Lazy(uint face, uint pname, int param)
        {
            _glGetMaterialxOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glGetMaterialxOES");
            _glGetMaterialxOES_fnptr(face, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glGetMaterialxv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetMaterialxv_fnptr = &glGetMaterialxv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMaterialxv_Lazy(uint face, uint pname, int* parameters)
        {
            _glGetMaterialxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMaterialxv");
            _glGetMaterialxv_fnptr(face, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMaterialxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetMaterialxvOES_fnptr = &glGetMaterialxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMaterialxvOES_Lazy(uint face, uint pname, int* parameters)
        {
            _glGetMaterialxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMaterialxvOES");
            _glGetMaterialxvOES_fnptr(face, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMemoryObjectDetachedResourcesuivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, uint*, void> _glGetMemoryObjectDetachedResourcesuivNV_fnptr = &glGetMemoryObjectDetachedResourcesuivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMemoryObjectDetachedResourcesuivNV_Lazy(uint memory, uint pname, int first, int count, uint* parameters)
        {
            _glGetMemoryObjectDetachedResourcesuivNV_fnptr = (delegate* unmanaged<uint, uint, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMemoryObjectDetachedResourcesuivNV");
            _glGetMemoryObjectDetachedResourcesuivNV_fnptr(memory, pname, first, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMemoryObjectParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetMemoryObjectParameterivEXT_fnptr = &glGetMemoryObjectParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMemoryObjectParameterivEXT_Lazy(uint memoryObject, uint pname, int* parameters)
        {
            _glGetMemoryObjectParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMemoryObjectParameterivEXT");
            _glGetMemoryObjectParameterivEXT_fnptr(memoryObject, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMinmax</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, uint, uint, void*, void> _glGetMinmax_fnptr = &glGetMinmax_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMinmax_Lazy(uint target, byte reset, uint format, uint type, void* values)
        {
            _glGetMinmax_fnptr = (delegate* unmanaged<uint, byte, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMinmax");
            _glGetMinmax_fnptr(target, reset, format, type, values);
        }
        
        /// <summary><b>[entry point: <c>glGetMinmaxEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, uint, uint, void*, void> _glGetMinmaxEXT_fnptr = &glGetMinmaxEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMinmaxEXT_Lazy(uint target, byte reset, uint format, uint type, void* values)
        {
            _glGetMinmaxEXT_fnptr = (delegate* unmanaged<uint, byte, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMinmaxEXT");
            _glGetMinmaxEXT_fnptr(target, reset, format, type, values);
        }
        
        /// <summary><b>[entry point: <c>glGetMinmaxParameterfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetMinmaxParameterfv_fnptr = &glGetMinmaxParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMinmaxParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _glGetMinmaxParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMinmaxParameterfv");
            _glGetMinmaxParameterfv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMinmaxParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetMinmaxParameterfvEXT_fnptr = &glGetMinmaxParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMinmaxParameterfvEXT_Lazy(uint target, uint pname, float* parameters)
        {
            _glGetMinmaxParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMinmaxParameterfvEXT");
            _glGetMinmaxParameterfvEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMinmaxParameteriv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetMinmaxParameteriv_fnptr = &glGetMinmaxParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMinmaxParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetMinmaxParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMinmaxParameteriv");
            _glGetMinmaxParameteriv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMinmaxParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetMinmaxParameterivEXT_fnptr = &glGetMinmaxParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMinmaxParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetMinmaxParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMinmaxParameterivEXT");
            _glGetMinmaxParameterivEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMultisamplefv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetMultisamplefv_fnptr = &glGetMultisamplefv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMultisamplefv_Lazy(uint pname, uint index, float* val)
        {
            _glGetMultisamplefv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultisamplefv");
            _glGetMultisamplefv_fnptr(pname, index, val);
        }
        
        /// <summary><b>[entry point: <c>glGetMultisamplefvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetMultisamplefvNV_fnptr = &glGetMultisamplefvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMultisamplefvNV_Lazy(uint pname, uint index, float* val)
        {
            _glGetMultisamplefvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultisamplefvNV");
            _glGetMultisamplefvNV_fnptr(pname, index, val);
        }
        
        /// <summary><b>[entry point: <c>glGetMultiTexEnvfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float*, void> _glGetMultiTexEnvfvEXT_fnptr = &glGetMultiTexEnvfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMultiTexEnvfvEXT_Lazy(uint texunit, uint target, uint pname, float* parameters)
        {
            _glGetMultiTexEnvfvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexEnvfvEXT");
            _glGetMultiTexEnvfvEXT_fnptr(texunit, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMultiTexEnvivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glGetMultiTexEnvivEXT_fnptr = &glGetMultiTexEnvivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMultiTexEnvivEXT_Lazy(uint texunit, uint target, uint pname, int* parameters)
        {
            _glGetMultiTexEnvivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexEnvivEXT");
            _glGetMultiTexEnvivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMultiTexGendvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, double*, void> _glGetMultiTexGendvEXT_fnptr = &glGetMultiTexGendvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMultiTexGendvEXT_Lazy(uint texunit, uint coord, uint pname, double* parameters)
        {
            _glGetMultiTexGendvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexGendvEXT");
            _glGetMultiTexGendvEXT_fnptr(texunit, coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMultiTexGenfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float*, void> _glGetMultiTexGenfvEXT_fnptr = &glGetMultiTexGenfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMultiTexGenfvEXT_Lazy(uint texunit, uint coord, uint pname, float* parameters)
        {
            _glGetMultiTexGenfvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexGenfvEXT");
            _glGetMultiTexGenfvEXT_fnptr(texunit, coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMultiTexGenivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glGetMultiTexGenivEXT_fnptr = &glGetMultiTexGenivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMultiTexGenivEXT_Lazy(uint texunit, uint coord, uint pname, int* parameters)
        {
            _glGetMultiTexGenivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexGenivEXT");
            _glGetMultiTexGenivEXT_fnptr(texunit, coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMultiTexImageEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, uint, void*, void> _glGetMultiTexImageEXT_fnptr = &glGetMultiTexImageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMultiTexImageEXT_Lazy(uint texunit, uint target, int level, uint format, uint type, void* pixels)
        {
            _glGetMultiTexImageEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexImageEXT");
            _glGetMultiTexImageEXT_fnptr(texunit, target, level, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glGetMultiTexLevelParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, float*, void> _glGetMultiTexLevelParameterfvEXT_fnptr = &glGetMultiTexLevelParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMultiTexLevelParameterfvEXT_Lazy(uint texunit, uint target, int level, uint pname, float* parameters)
        {
            _glGetMultiTexLevelParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexLevelParameterfvEXT");
            _glGetMultiTexLevelParameterfvEXT_fnptr(texunit, target, level, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMultiTexLevelParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, int*, void> _glGetMultiTexLevelParameterivEXT_fnptr = &glGetMultiTexLevelParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMultiTexLevelParameterivEXT_Lazy(uint texunit, uint target, int level, uint pname, int* parameters)
        {
            _glGetMultiTexLevelParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexLevelParameterivEXT");
            _glGetMultiTexLevelParameterivEXT_fnptr(texunit, target, level, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMultiTexParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float*, void> _glGetMultiTexParameterfvEXT_fnptr = &glGetMultiTexParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMultiTexParameterfvEXT_Lazy(uint texunit, uint target, uint pname, float* parameters)
        {
            _glGetMultiTexParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexParameterfvEXT");
            _glGetMultiTexParameterfvEXT_fnptr(texunit, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMultiTexParameterIivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glGetMultiTexParameterIivEXT_fnptr = &glGetMultiTexParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMultiTexParameterIivEXT_Lazy(uint texunit, uint target, uint pname, int* parameters)
        {
            _glGetMultiTexParameterIivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexParameterIivEXT");
            _glGetMultiTexParameterIivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMultiTexParameterIuivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint*, void> _glGetMultiTexParameterIuivEXT_fnptr = &glGetMultiTexParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMultiTexParameterIuivEXT_Lazy(uint texunit, uint target, uint pname, uint* parameters)
        {
            _glGetMultiTexParameterIuivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexParameterIuivEXT");
            _glGetMultiTexParameterIuivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetMultiTexParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glGetMultiTexParameterivEXT_fnptr = &glGetMultiTexParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetMultiTexParameterivEXT_Lazy(uint texunit, uint target, uint pname, int* parameters)
        {
            _glGetMultiTexParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexParameterivEXT");
            _glGetMultiTexParameterivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedBufferParameteri64v</c>]</b></summary>
        public static delegate* unmanaged<int, uint, long*, void> _glGetNamedBufferParameteri64v_fnptr = &glGetNamedBufferParameteri64v_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedBufferParameteri64v_Lazy(int buffer, uint pname, long* parameters)
        {
            _glGetNamedBufferParameteri64v_fnptr = (delegate* unmanaged<int, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferParameteri64v");
            _glGetNamedBufferParameteri64v_fnptr(buffer, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedBufferParameteriv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetNamedBufferParameteriv_fnptr = &glGetNamedBufferParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedBufferParameteriv_Lazy(int buffer, uint pname, int* parameters)
        {
            _glGetNamedBufferParameteriv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferParameteriv");
            _glGetNamedBufferParameteriv_fnptr(buffer, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedBufferParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetNamedBufferParameterivEXT_fnptr = &glGetNamedBufferParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedBufferParameterivEXT_Lazy(int buffer, uint pname, int* parameters)
        {
            _glGetNamedBufferParameterivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferParameterivEXT");
            _glGetNamedBufferParameterivEXT_fnptr(buffer, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedBufferParameterui64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, ulong*, void> _glGetNamedBufferParameterui64vNV_fnptr = &glGetNamedBufferParameterui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedBufferParameterui64vNV_Lazy(int buffer, uint pname, ulong* parameters)
        {
            _glGetNamedBufferParameterui64vNV_fnptr = (delegate* unmanaged<int, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferParameterui64vNV");
            _glGetNamedBufferParameterui64vNV_fnptr(buffer, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedBufferPointerv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void**, void> _glGetNamedBufferPointerv_fnptr = &glGetNamedBufferPointerv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedBufferPointerv_Lazy(int buffer, uint pname, void** parameters)
        {
            _glGetNamedBufferPointerv_fnptr = (delegate* unmanaged<int, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferPointerv");
            _glGetNamedBufferPointerv_fnptr(buffer, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedBufferPointervEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void**, void> _glGetNamedBufferPointervEXT_fnptr = &glGetNamedBufferPointervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedBufferPointervEXT_Lazy(int buffer, uint pname, void** parameters)
        {
            _glGetNamedBufferPointervEXT_fnptr = (delegate* unmanaged<int, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferPointervEXT");
            _glGetNamedBufferPointervEXT_fnptr(buffer, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedBufferSubData</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr, nint, void*, void> _glGetNamedBufferSubData_fnptr = &glGetNamedBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedBufferSubData_Lazy(int buffer, IntPtr offset, nint size, void* data)
        {
            _glGetNamedBufferSubData_fnptr = (delegate* unmanaged<int, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferSubData");
            _glGetNamedBufferSubData_fnptr(buffer, offset, size, data);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedBufferSubDataEXT</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr, nint, void*, void> _glGetNamedBufferSubDataEXT_fnptr = &glGetNamedBufferSubDataEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedBufferSubDataEXT_Lazy(int buffer, IntPtr offset, nint size, void* data)
        {
            _glGetNamedBufferSubDataEXT_fnptr = (delegate* unmanaged<int, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferSubDataEXT");
            _glGetNamedBufferSubDataEXT_fnptr(buffer, offset, size, data);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedFramebufferAttachmentParameteriv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glGetNamedFramebufferAttachmentParameteriv_fnptr = &glGetNamedFramebufferAttachmentParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedFramebufferAttachmentParameteriv_Lazy(int framebuffer, uint attachment, uint pname, int* parameters)
        {
            _glGetNamedFramebufferAttachmentParameteriv_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedFramebufferAttachmentParameteriv");
            _glGetNamedFramebufferAttachmentParameteriv_fnptr(framebuffer, attachment, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedFramebufferAttachmentParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glGetNamedFramebufferAttachmentParameterivEXT_fnptr = &glGetNamedFramebufferAttachmentParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedFramebufferAttachmentParameterivEXT_Lazy(int framebuffer, uint attachment, uint pname, int* parameters)
        {
            _glGetNamedFramebufferAttachmentParameterivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedFramebufferAttachmentParameterivEXT");
            _glGetNamedFramebufferAttachmentParameterivEXT_fnptr(framebuffer, attachment, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedFramebufferParameterfvAMD</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, uint, int, float*, void> _glGetNamedFramebufferParameterfvAMD_fnptr = &glGetNamedFramebufferParameterfvAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedFramebufferParameterfvAMD_Lazy(int framebuffer, uint pname, uint numsamples, uint pixelindex, int size, float* values)
        {
            _glGetNamedFramebufferParameterfvAMD_fnptr = (delegate* unmanaged<int, uint, uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedFramebufferParameterfvAMD");
            _glGetNamedFramebufferParameterfvAMD_fnptr(framebuffer, pname, numsamples, pixelindex, size, values);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedFramebufferParameteriv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetNamedFramebufferParameteriv_fnptr = &glGetNamedFramebufferParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedFramebufferParameteriv_Lazy(int framebuffer, uint pname, int* param)
        {
            _glGetNamedFramebufferParameteriv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedFramebufferParameteriv");
            _glGetNamedFramebufferParameteriv_fnptr(framebuffer, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedFramebufferParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetNamedFramebufferParameterivEXT_fnptr = &glGetNamedFramebufferParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedFramebufferParameterivEXT_Lazy(int framebuffer, uint pname, int* parameters)
        {
            _glGetNamedFramebufferParameterivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedFramebufferParameterivEXT");
            _glGetNamedFramebufferParameterivEXT_fnptr(framebuffer, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedProgramivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glGetNamedProgramivEXT_fnptr = &glGetNamedProgramivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedProgramivEXT_Lazy(int program, uint target, uint pname, int* parameters)
        {
            _glGetNamedProgramivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedProgramivEXT");
            _glGetNamedProgramivEXT_fnptr(program, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedProgramLocalParameterdvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, double*, void> _glGetNamedProgramLocalParameterdvEXT_fnptr = &glGetNamedProgramLocalParameterdvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedProgramLocalParameterdvEXT_Lazy(int program, uint target, uint index, double* parameters)
        {
            _glGetNamedProgramLocalParameterdvEXT_fnptr = (delegate* unmanaged<int, uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedProgramLocalParameterdvEXT");
            _glGetNamedProgramLocalParameterdvEXT_fnptr(program, target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedProgramLocalParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, float*, void> _glGetNamedProgramLocalParameterfvEXT_fnptr = &glGetNamedProgramLocalParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedProgramLocalParameterfvEXT_Lazy(int program, uint target, uint index, float* parameters)
        {
            _glGetNamedProgramLocalParameterfvEXT_fnptr = (delegate* unmanaged<int, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedProgramLocalParameterfvEXT");
            _glGetNamedProgramLocalParameterfvEXT_fnptr(program, target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedProgramLocalParameterIivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glGetNamedProgramLocalParameterIivEXT_fnptr = &glGetNamedProgramLocalParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedProgramLocalParameterIivEXT_Lazy(int program, uint target, uint index, int* parameters)
        {
            _glGetNamedProgramLocalParameterIivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedProgramLocalParameterIivEXT");
            _glGetNamedProgramLocalParameterIivEXT_fnptr(program, target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedProgramLocalParameterIuivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, uint*, void> _glGetNamedProgramLocalParameterIuivEXT_fnptr = &glGetNamedProgramLocalParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedProgramLocalParameterIuivEXT_Lazy(int program, uint target, uint index, uint* parameters)
        {
            _glGetNamedProgramLocalParameterIuivEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedProgramLocalParameterIuivEXT");
            _glGetNamedProgramLocalParameterIuivEXT_fnptr(program, target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedProgramStringEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, void*, void> _glGetNamedProgramStringEXT_fnptr = &glGetNamedProgramStringEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedProgramStringEXT_Lazy(int program, uint target, uint pname, void* str)
        {
            _glGetNamedProgramStringEXT_fnptr = (delegate* unmanaged<int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedProgramStringEXT");
            _glGetNamedProgramStringEXT_fnptr(program, target, pname, str);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedRenderbufferParameteriv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetNamedRenderbufferParameteriv_fnptr = &glGetNamedRenderbufferParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedRenderbufferParameteriv_Lazy(int renderbuffer, uint pname, int* parameters)
        {
            _glGetNamedRenderbufferParameteriv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedRenderbufferParameteriv");
            _glGetNamedRenderbufferParameteriv_fnptr(renderbuffer, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedRenderbufferParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetNamedRenderbufferParameterivEXT_fnptr = &glGetNamedRenderbufferParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedRenderbufferParameterivEXT_Lazy(int renderbuffer, uint pname, int* parameters)
        {
            _glGetNamedRenderbufferParameterivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedRenderbufferParameterivEXT");
            _glGetNamedRenderbufferParameterivEXT_fnptr(renderbuffer, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedStringARB</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, int, int*, byte*, void> _glGetNamedStringARB_fnptr = &glGetNamedStringARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedStringARB_Lazy(int namelen, byte* name, int bufSize, int* stringlen, byte* str)
        {
            _glGetNamedStringARB_fnptr = (delegate* unmanaged<int, byte*, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedStringARB");
            _glGetNamedStringARB_fnptr(namelen, name, bufSize, stringlen, str);
        }
        
        /// <summary><b>[entry point: <c>glGetNamedStringivARB</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, uint, int*, void> _glGetNamedStringivARB_fnptr = &glGetNamedStringivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNamedStringivARB_Lazy(int namelen, byte* name, uint pname, int* parameters)
        {
            _glGetNamedStringivARB_fnptr = (delegate* unmanaged<int, byte*, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedStringivARB");
            _glGetNamedStringivARB_fnptr(namelen, name, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetnColorTable</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, void*, void> _glGetnColorTable_fnptr = &glGetnColorTable_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnColorTable_Lazy(uint target, uint format, uint type, int bufSize, void* table)
        {
            _glGetnColorTable_fnptr = (delegate* unmanaged<uint, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnColorTable");
            _glGetnColorTable_fnptr(target, format, type, bufSize, table);
        }
        
        /// <summary><b>[entry point: <c>glGetnColorTableARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, void*, void> _glGetnColorTableARB_fnptr = &glGetnColorTableARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnColorTableARB_Lazy(uint target, uint format, uint type, int bufSize, void* table)
        {
            _glGetnColorTableARB_fnptr = (delegate* unmanaged<uint, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnColorTableARB");
            _glGetnColorTableARB_fnptr(target, format, type, bufSize, table);
        }
        
        /// <summary><b>[entry point: <c>glGetnCompressedTexImage</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void*, void> _glGetnCompressedTexImage_fnptr = &glGetnCompressedTexImage_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnCompressedTexImage_Lazy(uint target, int lod, int bufSize, void* pixels)
        {
            _glGetnCompressedTexImage_fnptr = (delegate* unmanaged<uint, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnCompressedTexImage");
            _glGetnCompressedTexImage_fnptr(target, lod, bufSize, pixels);
        }
        
        /// <summary><b>[entry point: <c>glGetnCompressedTexImageARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void*, void> _glGetnCompressedTexImageARB_fnptr = &glGetnCompressedTexImageARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnCompressedTexImageARB_Lazy(uint target, int lod, int bufSize, void* img)
        {
            _glGetnCompressedTexImageARB_fnptr = (delegate* unmanaged<uint, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnCompressedTexImageARB");
            _glGetnCompressedTexImageARB_fnptr(target, lod, bufSize, img);
        }
        
        /// <summary><b>[entry point: <c>glGetnConvolutionFilter</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, void*, void> _glGetnConvolutionFilter_fnptr = &glGetnConvolutionFilter_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnConvolutionFilter_Lazy(uint target, uint format, uint type, int bufSize, void* image)
        {
            _glGetnConvolutionFilter_fnptr = (delegate* unmanaged<uint, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnConvolutionFilter");
            _glGetnConvolutionFilter_fnptr(target, format, type, bufSize, image);
        }
        
        /// <summary><b>[entry point: <c>glGetnConvolutionFilterARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, void*, void> _glGetnConvolutionFilterARB_fnptr = &glGetnConvolutionFilterARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnConvolutionFilterARB_Lazy(uint target, uint format, uint type, int bufSize, void* image)
        {
            _glGetnConvolutionFilterARB_fnptr = (delegate* unmanaged<uint, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnConvolutionFilterARB");
            _glGetnConvolutionFilterARB_fnptr(target, format, type, bufSize, image);
        }
        
        /// <summary><b>[entry point: <c>glGetNextPerfQueryIdINTEL</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glGetNextPerfQueryIdINTEL_fnptr = &glGetNextPerfQueryIdINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetNextPerfQueryIdINTEL_Lazy(uint queryId, uint* nextQueryId)
        {
            _glGetNextPerfQueryIdINTEL_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNextPerfQueryIdINTEL");
            _glGetNextPerfQueryIdINTEL_fnptr(queryId, nextQueryId);
        }
        
        /// <summary><b>[entry point: <c>glGetnHistogram</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, uint, uint, int, void*, void> _glGetnHistogram_fnptr = &glGetnHistogram_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnHistogram_Lazy(uint target, byte reset, uint format, uint type, int bufSize, void* values)
        {
            _glGetnHistogram_fnptr = (delegate* unmanaged<uint, byte, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnHistogram");
            _glGetnHistogram_fnptr(target, reset, format, type, bufSize, values);
        }
        
        /// <summary><b>[entry point: <c>glGetnHistogramARB</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, uint, uint, int, void*, void> _glGetnHistogramARB_fnptr = &glGetnHistogramARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnHistogramARB_Lazy(uint target, byte reset, uint format, uint type, int bufSize, void* values)
        {
            _glGetnHistogramARB_fnptr = (delegate* unmanaged<uint, byte, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnHistogramARB");
            _glGetnHistogramARB_fnptr(target, reset, format, type, bufSize, values);
        }
        
        /// <summary><b>[entry point: <c>glGetnMapdv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, double*, void> _glGetnMapdv_fnptr = &glGetnMapdv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnMapdv_Lazy(uint target, uint query, int bufSize, double* v)
        {
            _glGetnMapdv_fnptr = (delegate* unmanaged<uint, uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMapdv");
            _glGetnMapdv_fnptr(target, query, bufSize, v);
        }
        
        /// <summary><b>[entry point: <c>glGetnMapdvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, double*, void> _glGetnMapdvARB_fnptr = &glGetnMapdvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnMapdvARB_Lazy(uint target, uint query, int bufSize, double* v)
        {
            _glGetnMapdvARB_fnptr = (delegate* unmanaged<uint, uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMapdvARB");
            _glGetnMapdvARB_fnptr(target, query, bufSize, v);
        }
        
        /// <summary><b>[entry point: <c>glGetnMapfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, float*, void> _glGetnMapfv_fnptr = &glGetnMapfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnMapfv_Lazy(uint target, uint query, int bufSize, float* v)
        {
            _glGetnMapfv_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMapfv");
            _glGetnMapfv_fnptr(target, query, bufSize, v);
        }
        
        /// <summary><b>[entry point: <c>glGetnMapfvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, float*, void> _glGetnMapfvARB_fnptr = &glGetnMapfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnMapfvARB_Lazy(uint target, uint query, int bufSize, float* v)
        {
            _glGetnMapfvARB_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMapfvARB");
            _glGetnMapfvARB_fnptr(target, query, bufSize, v);
        }
        
        /// <summary><b>[entry point: <c>glGetnMapiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int*, void> _glGetnMapiv_fnptr = &glGetnMapiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnMapiv_Lazy(uint target, uint query, int bufSize, int* v)
        {
            _glGetnMapiv_fnptr = (delegate* unmanaged<uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMapiv");
            _glGetnMapiv_fnptr(target, query, bufSize, v);
        }
        
        /// <summary><b>[entry point: <c>glGetnMapivARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int*, void> _glGetnMapivARB_fnptr = &glGetnMapivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnMapivARB_Lazy(uint target, uint query, int bufSize, int* v)
        {
            _glGetnMapivARB_fnptr = (delegate* unmanaged<uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMapivARB");
            _glGetnMapivARB_fnptr(target, query, bufSize, v);
        }
        
        /// <summary><b>[entry point: <c>glGetnMinmax</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, uint, uint, int, void*, void> _glGetnMinmax_fnptr = &glGetnMinmax_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnMinmax_Lazy(uint target, byte reset, uint format, uint type, int bufSize, void* values)
        {
            _glGetnMinmax_fnptr = (delegate* unmanaged<uint, byte, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMinmax");
            _glGetnMinmax_fnptr(target, reset, format, type, bufSize, values);
        }
        
        /// <summary><b>[entry point: <c>glGetnMinmaxARB</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, uint, uint, int, void*, void> _glGetnMinmaxARB_fnptr = &glGetnMinmaxARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnMinmaxARB_Lazy(uint target, byte reset, uint format, uint type, int bufSize, void* values)
        {
            _glGetnMinmaxARB_fnptr = (delegate* unmanaged<uint, byte, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMinmaxARB");
            _glGetnMinmaxARB_fnptr(target, reset, format, type, bufSize, values);
        }
        
        /// <summary><b>[entry point: <c>glGetnPixelMapfv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glGetnPixelMapfv_fnptr = &glGetnPixelMapfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnPixelMapfv_Lazy(uint map, int bufSize, float* values)
        {
            _glGetnPixelMapfv_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPixelMapfv");
            _glGetnPixelMapfv_fnptr(map, bufSize, values);
        }
        
        /// <summary><b>[entry point: <c>glGetnPixelMapfvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glGetnPixelMapfvARB_fnptr = &glGetnPixelMapfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnPixelMapfvARB_Lazy(uint map, int bufSize, float* values)
        {
            _glGetnPixelMapfvARB_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPixelMapfvARB");
            _glGetnPixelMapfvARB_fnptr(map, bufSize, values);
        }
        
        /// <summary><b>[entry point: <c>glGetnPixelMapuiv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, void> _glGetnPixelMapuiv_fnptr = &glGetnPixelMapuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnPixelMapuiv_Lazy(uint map, int bufSize, uint* values)
        {
            _glGetnPixelMapuiv_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPixelMapuiv");
            _glGetnPixelMapuiv_fnptr(map, bufSize, values);
        }
        
        /// <summary><b>[entry point: <c>glGetnPixelMapuivARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, void> _glGetnPixelMapuivARB_fnptr = &glGetnPixelMapuivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnPixelMapuivARB_Lazy(uint map, int bufSize, uint* values)
        {
            _glGetnPixelMapuivARB_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPixelMapuivARB");
            _glGetnPixelMapuivARB_fnptr(map, bufSize, values);
        }
        
        /// <summary><b>[entry point: <c>glGetnPixelMapusv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, ushort*, void> _glGetnPixelMapusv_fnptr = &glGetnPixelMapusv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnPixelMapusv_Lazy(uint map, int bufSize, ushort* values)
        {
            _glGetnPixelMapusv_fnptr = (delegate* unmanaged<uint, int, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPixelMapusv");
            _glGetnPixelMapusv_fnptr(map, bufSize, values);
        }
        
        /// <summary><b>[entry point: <c>glGetnPixelMapusvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, ushort*, void> _glGetnPixelMapusvARB_fnptr = &glGetnPixelMapusvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnPixelMapusvARB_Lazy(uint map, int bufSize, ushort* values)
        {
            _glGetnPixelMapusvARB_fnptr = (delegate* unmanaged<uint, int, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPixelMapusvARB");
            _glGetnPixelMapusvARB_fnptr(map, bufSize, values);
        }
        
        /// <summary><b>[entry point: <c>glGetnPolygonStipple</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, void> _glGetnPolygonStipple_fnptr = &glGetnPolygonStipple_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnPolygonStipple_Lazy(int bufSize, byte* pattern)
        {
            _glGetnPolygonStipple_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPolygonStipple");
            _glGetnPolygonStipple_fnptr(bufSize, pattern);
        }
        
        /// <summary><b>[entry point: <c>glGetnPolygonStippleARB</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, void> _glGetnPolygonStippleARB_fnptr = &glGetnPolygonStippleARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnPolygonStippleARB_Lazy(int bufSize, byte* pattern)
        {
            _glGetnPolygonStippleARB_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPolygonStippleARB");
            _glGetnPolygonStippleARB_fnptr(bufSize, pattern);
        }
        
        /// <summary><b>[entry point: <c>glGetnSeparableFilter</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, void*, int, void*, void*, void> _glGetnSeparableFilter_fnptr = &glGetnSeparableFilter_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnSeparableFilter_Lazy(uint target, uint format, uint type, int rowBufSize, void* row, int columnBufSize, void* column, void* span)
        {
            _glGetnSeparableFilter_fnptr = (delegate* unmanaged<uint, uint, uint, int, void*, int, void*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnSeparableFilter");
            _glGetnSeparableFilter_fnptr(target, format, type, rowBufSize, row, columnBufSize, column, span);
        }
        
        /// <summary><b>[entry point: <c>glGetnSeparableFilterARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, void*, int, void*, void*, void> _glGetnSeparableFilterARB_fnptr = &glGetnSeparableFilterARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnSeparableFilterARB_Lazy(uint target, uint format, uint type, int rowBufSize, void* row, int columnBufSize, void* column, void* span)
        {
            _glGetnSeparableFilterARB_fnptr = (delegate* unmanaged<uint, uint, uint, int, void*, int, void*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnSeparableFilterARB");
            _glGetnSeparableFilterARB_fnptr(target, format, type, rowBufSize, row, columnBufSize, column, span);
        }
        
        /// <summary><b>[entry point: <c>glGetnTexImage</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, uint, int, void*, void> _glGetnTexImage_fnptr = &glGetnTexImage_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnTexImage_Lazy(uint target, int level, uint format, uint type, int bufSize, void* pixels)
        {
            _glGetnTexImage_fnptr = (delegate* unmanaged<uint, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnTexImage");
            _glGetnTexImage_fnptr(target, level, format, type, bufSize, pixels);
        }
        
        /// <summary><b>[entry point: <c>glGetnTexImageARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, uint, int, void*, void> _glGetnTexImageARB_fnptr = &glGetnTexImageARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnTexImageARB_Lazy(uint target, int level, uint format, uint type, int bufSize, void* img)
        {
            _glGetnTexImageARB_fnptr = (delegate* unmanaged<uint, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnTexImageARB");
            _glGetnTexImageARB_fnptr(target, level, format, type, bufSize, img);
        }
        
        /// <summary><b>[entry point: <c>glGetnUniformdv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, double*, void> _glGetnUniformdv_fnptr = &glGetnUniformdv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnUniformdv_Lazy(int program, int location, int bufSize, double* parameters)
        {
            _glGetnUniformdv_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformdv");
            _glGetnUniformdv_fnptr(program, location, bufSize, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetnUniformdvARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, double*, void> _glGetnUniformdvARB_fnptr = &glGetnUniformdvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnUniformdvARB_Lazy(int program, int location, int bufSize, double* parameters)
        {
            _glGetnUniformdvARB_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformdvARB");
            _glGetnUniformdvARB_fnptr(program, location, bufSize, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetnUniformfv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, float*, void> _glGetnUniformfv_fnptr = &glGetnUniformfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnUniformfv_Lazy(int program, int location, int bufSize, float* parameters)
        {
            _glGetnUniformfv_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformfv");
            _glGetnUniformfv_fnptr(program, location, bufSize, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetnUniformfvARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, float*, void> _glGetnUniformfvARB_fnptr = &glGetnUniformfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnUniformfvARB_Lazy(int program, int location, int bufSize, float* parameters)
        {
            _glGetnUniformfvARB_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformfvARB");
            _glGetnUniformfvARB_fnptr(program, location, bufSize, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetnUniformfvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, float*, void> _glGetnUniformfvEXT_fnptr = &glGetnUniformfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnUniformfvEXT_Lazy(int program, int location, int bufSize, float* parameters)
        {
            _glGetnUniformfvEXT_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformfvEXT");
            _glGetnUniformfvEXT_fnptr(program, location, bufSize, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetnUniformfvKHR</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, float*, void> _glGetnUniformfvKHR_fnptr = &glGetnUniformfvKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnUniformfvKHR_Lazy(int program, int location, int bufSize, float* parameters)
        {
            _glGetnUniformfvKHR_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformfvKHR");
            _glGetnUniformfvKHR_fnptr(program, location, bufSize, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetnUniformi64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, long*, void> _glGetnUniformi64vARB_fnptr = &glGetnUniformi64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnUniformi64vARB_Lazy(int program, int location, int bufSize, long* parameters)
        {
            _glGetnUniformi64vARB_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformi64vARB");
            _glGetnUniformi64vARB_fnptr(program, location, bufSize, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetnUniformiv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int*, void> _glGetnUniformiv_fnptr = &glGetnUniformiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnUniformiv_Lazy(int program, int location, int bufSize, int* parameters)
        {
            _glGetnUniformiv_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformiv");
            _glGetnUniformiv_fnptr(program, location, bufSize, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetnUniformivARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int*, void> _glGetnUniformivARB_fnptr = &glGetnUniformivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnUniformivARB_Lazy(int program, int location, int bufSize, int* parameters)
        {
            _glGetnUniformivARB_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformivARB");
            _glGetnUniformivARB_fnptr(program, location, bufSize, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetnUniformivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int*, void> _glGetnUniformivEXT_fnptr = &glGetnUniformivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnUniformivEXT_Lazy(int program, int location, int bufSize, int* parameters)
        {
            _glGetnUniformivEXT_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformivEXT");
            _glGetnUniformivEXT_fnptr(program, location, bufSize, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetnUniformivKHR</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int*, void> _glGetnUniformivKHR_fnptr = &glGetnUniformivKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnUniformivKHR_Lazy(int program, int location, int bufSize, int* parameters)
        {
            _glGetnUniformivKHR_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformivKHR");
            _glGetnUniformivKHR_fnptr(program, location, bufSize, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetnUniformui64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, ulong*, void> _glGetnUniformui64vARB_fnptr = &glGetnUniformui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnUniformui64vARB_Lazy(int program, int location, int bufSize, ulong* parameters)
        {
            _glGetnUniformui64vARB_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformui64vARB");
            _glGetnUniformui64vARB_fnptr(program, location, bufSize, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetnUniformuiv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint*, void> _glGetnUniformuiv_fnptr = &glGetnUniformuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnUniformuiv_Lazy(int program, int location, int bufSize, uint* parameters)
        {
            _glGetnUniformuiv_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformuiv");
            _glGetnUniformuiv_fnptr(program, location, bufSize, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetnUniformuivARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint*, void> _glGetnUniformuivARB_fnptr = &glGetnUniformuivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnUniformuivARB_Lazy(int program, int location, int bufSize, uint* parameters)
        {
            _glGetnUniformuivARB_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformuivARB");
            _glGetnUniformuivARB_fnptr(program, location, bufSize, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetnUniformuivKHR</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint*, void> _glGetnUniformuivKHR_fnptr = &glGetnUniformuivKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetnUniformuivKHR_Lazy(int program, int location, int bufSize, uint* parameters)
        {
            _glGetnUniformuivKHR_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformuivKHR");
            _glGetnUniformuivKHR_fnptr(program, location, bufSize, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetObjectBufferfvATI</c>]</b></summary>
        public static delegate* unmanaged<int, uint, float*, void> _glGetObjectBufferfvATI_fnptr = &glGetObjectBufferfvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetObjectBufferfvATI_Lazy(int buffer, uint pname, float* parameters)
        {
            _glGetObjectBufferfvATI_fnptr = (delegate* unmanaged<int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectBufferfvATI");
            _glGetObjectBufferfvATI_fnptr(buffer, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetObjectBufferivATI</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetObjectBufferivATI_fnptr = &glGetObjectBufferivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetObjectBufferivATI_Lazy(int buffer, uint pname, int* parameters)
        {
            _glGetObjectBufferivATI_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectBufferivATI");
            _glGetObjectBufferivATI_fnptr(buffer, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetObjectLabel</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int*, byte*, void> _glGetObjectLabel_fnptr = &glGetObjectLabel_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetObjectLabel_Lazy(uint identifier, uint name, int bufSize, int* length, byte* label)
        {
            _glGetObjectLabel_fnptr = (delegate* unmanaged<uint, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectLabel");
            _glGetObjectLabel_fnptr(identifier, name, bufSize, length, label);
        }
        
        /// <summary><b>[entry point: <c>glGetObjectLabelEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int*, byte*, void> _glGetObjectLabelEXT_fnptr = &glGetObjectLabelEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetObjectLabelEXT_Lazy(uint type, uint obj, int bufSize, int* length, byte* label)
        {
            _glGetObjectLabelEXT_fnptr = (delegate* unmanaged<uint, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectLabelEXT");
            _glGetObjectLabelEXT_fnptr(type, obj, bufSize, length, label);
        }
        
        /// <summary><b>[entry point: <c>glGetObjectLabelKHR</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int*, byte*, void> _glGetObjectLabelKHR_fnptr = &glGetObjectLabelKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetObjectLabelKHR_Lazy(uint identifier, uint name, int bufSize, int* length, byte* label)
        {
            _glGetObjectLabelKHR_fnptr = (delegate* unmanaged<uint, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectLabelKHR");
            _glGetObjectLabelKHR_fnptr(identifier, name, bufSize, length, label);
        }
        
        /// <summary><b>[entry point: <c>glGetObjectParameterfvARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, uint, float*, void> _glGetObjectParameterfvARB_fnptr = &glGetObjectParameterfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetObjectParameterfvARB_Lazy(IntPtr obj, uint pname, float* parameters)
        {
            _glGetObjectParameterfvARB_fnptr = (delegate* unmanaged<IntPtr, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectParameterfvARB");
            _glGetObjectParameterfvARB_fnptr(obj, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetObjectParameterivAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glGetObjectParameterivAPPLE_fnptr = &glGetObjectParameterivAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetObjectParameterivAPPLE_Lazy(uint objectType, uint name, uint pname, int* parameters)
        {
            _glGetObjectParameterivAPPLE_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectParameterivAPPLE");
            _glGetObjectParameterivAPPLE_fnptr(objectType, name, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetObjectParameterivARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, uint, int*, void> _glGetObjectParameterivARB_fnptr = &glGetObjectParameterivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetObjectParameterivARB_Lazy(IntPtr obj, uint pname, int* parameters)
        {
            _glGetObjectParameterivARB_fnptr = (delegate* unmanaged<IntPtr, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectParameterivARB");
            _glGetObjectParameterivARB_fnptr(obj, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetObjectPtrLabel</c>]</b></summary>
        public static delegate* unmanaged<void*, int, int*, byte*, void> _glGetObjectPtrLabel_fnptr = &glGetObjectPtrLabel_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetObjectPtrLabel_Lazy(void* ptr, int bufSize, int* length, byte* label)
        {
            _glGetObjectPtrLabel_fnptr = (delegate* unmanaged<void*, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectPtrLabel");
            _glGetObjectPtrLabel_fnptr(ptr, bufSize, length, label);
        }
        
        /// <summary><b>[entry point: <c>glGetObjectPtrLabelKHR</c>]</b></summary>
        public static delegate* unmanaged<void*, int, int*, byte*, void> _glGetObjectPtrLabelKHR_fnptr = &glGetObjectPtrLabelKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetObjectPtrLabelKHR_Lazy(void* ptr, int bufSize, int* length, byte* label)
        {
            _glGetObjectPtrLabelKHR_fnptr = (delegate* unmanaged<void*, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectPtrLabelKHR");
            _glGetObjectPtrLabelKHR_fnptr(ptr, bufSize, length, label);
        }
        
        /// <summary><b>[entry point: <c>glGetOcclusionQueryivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetOcclusionQueryivNV_fnptr = &glGetOcclusionQueryivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetOcclusionQueryivNV_Lazy(uint id, uint pname, int* parameters)
        {
            _glGetOcclusionQueryivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetOcclusionQueryivNV");
            _glGetOcclusionQueryivNV_fnptr(id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetOcclusionQueryuivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glGetOcclusionQueryuivNV_fnptr = &glGetOcclusionQueryuivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetOcclusionQueryuivNV_Lazy(uint id, uint pname, uint* parameters)
        {
            _glGetOcclusionQueryuivNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetOcclusionQueryuivNV");
            _glGetOcclusionQueryuivNV_fnptr(id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetPathColorGenfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetPathColorGenfvNV_fnptr = &glGetPathColorGenfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPathColorGenfvNV_Lazy(uint color, uint pname, float* value)
        {
            _glGetPathColorGenfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathColorGenfvNV");
            _glGetPathColorGenfvNV_fnptr(color, pname, value);
        }
        
        /// <summary><b>[entry point: <c>glGetPathColorGenivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetPathColorGenivNV_fnptr = &glGetPathColorGenivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPathColorGenivNV_Lazy(uint color, uint pname, int* value)
        {
            _glGetPathColorGenivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathColorGenivNV");
            _glGetPathColorGenivNV_fnptr(color, pname, value);
        }
        
        /// <summary><b>[entry point: <c>glGetPathCommandsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, byte*, void> _glGetPathCommandsNV_fnptr = &glGetPathCommandsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPathCommandsNV_Lazy(uint path, byte* commands)
        {
            _glGetPathCommandsNV_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathCommandsNV");
            _glGetPathCommandsNV_fnptr(path, commands);
        }
        
        /// <summary><b>[entry point: <c>glGetPathCoordsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glGetPathCoordsNV_fnptr = &glGetPathCoordsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPathCoordsNV_Lazy(uint path, float* coords)
        {
            _glGetPathCoordsNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathCoordsNV");
            _glGetPathCoordsNV_fnptr(path, coords);
        }
        
        /// <summary><b>[entry point: <c>glGetPathDashArrayNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glGetPathDashArrayNV_fnptr = &glGetPathDashArrayNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPathDashArrayNV_Lazy(uint path, float* dashArray)
        {
            _glGetPathDashArrayNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathDashArrayNV");
            _glGetPathDashArrayNV_fnptr(path, dashArray);
        }
        
        /// <summary><b>[entry point: <c>glGetPathLengthNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, float> _glGetPathLengthNV_fnptr = &glGetPathLengthNV_Lazy;
        [UnmanagedCallersOnly]
        private static float glGetPathLengthNV_Lazy(uint path, int startSegment, int numSegments)
        {
            _glGetPathLengthNV_fnptr = (delegate* unmanaged<uint, int, int, float>)GLLoader.BindingsContext.GetProcAddress("glGetPathLengthNV");
            return _glGetPathLengthNV_fnptr(path, startSegment, numSegments);
        }
        
        /// <summary><b>[entry point: <c>glGetPathMetricRangeNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, float*, void> _glGetPathMetricRangeNV_fnptr = &glGetPathMetricRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPathMetricRangeNV_Lazy(uint metricQueryMask, uint firstPathName, int numPaths, int stride, float* metrics)
        {
            _glGetPathMetricRangeNV_fnptr = (delegate* unmanaged<uint, uint, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathMetricRangeNV");
            _glGetPathMetricRangeNV_fnptr(metricQueryMask, firstPathName, numPaths, stride, metrics);
        }
        
        /// <summary><b>[entry point: <c>glGetPathMetricsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, uint, int, float*, void> _glGetPathMetricsNV_fnptr = &glGetPathMetricsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPathMetricsNV_Lazy(uint metricQueryMask, int numPaths, uint pathNameType, void* paths, uint pathBase, int stride, float* metrics)
        {
            _glGetPathMetricsNV_fnptr = (delegate* unmanaged<uint, int, uint, void*, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathMetricsNV");
            _glGetPathMetricsNV_fnptr(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
        }
        
        /// <summary><b>[entry point: <c>glGetPathParameterfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetPathParameterfvNV_fnptr = &glGetPathParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPathParameterfvNV_Lazy(uint path, uint pname, float* value)
        {
            _glGetPathParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathParameterfvNV");
            _glGetPathParameterfvNV_fnptr(path, pname, value);
        }
        
        /// <summary><b>[entry point: <c>glGetPathParameterivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetPathParameterivNV_fnptr = &glGetPathParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPathParameterivNV_Lazy(uint path, uint pname, int* value)
        {
            _glGetPathParameterivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathParameterivNV");
            _glGetPathParameterivNV_fnptr(path, pname, value);
        }
        
        /// <summary><b>[entry point: <c>glGetPathSpacingNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, uint, float, float, uint, float*, void> _glGetPathSpacingNV_fnptr = &glGetPathSpacingNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPathSpacingNV_Lazy(uint pathListMode, int numPaths, uint pathNameType, void* paths, uint pathBase, float advanceScale, float kerningScale, uint transformType, float* returnedSpacing)
        {
            _glGetPathSpacingNV_fnptr = (delegate* unmanaged<uint, int, uint, void*, uint, float, float, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathSpacingNV");
            _glGetPathSpacingNV_fnptr(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
        }
        
        /// <summary><b>[entry point: <c>glGetPathTexGenfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetPathTexGenfvNV_fnptr = &glGetPathTexGenfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPathTexGenfvNV_Lazy(uint texCoordSet, uint pname, float* value)
        {
            _glGetPathTexGenfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathTexGenfvNV");
            _glGetPathTexGenfvNV_fnptr(texCoordSet, pname, value);
        }
        
        /// <summary><b>[entry point: <c>glGetPathTexGenivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetPathTexGenivNV_fnptr = &glGetPathTexGenivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPathTexGenivNV_Lazy(uint texCoordSet, uint pname, int* value)
        {
            _glGetPathTexGenivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathTexGenivNV");
            _glGetPathTexGenivNV_fnptr(texCoordSet, pname, value);
        }
        
        /// <summary><b>[entry point: <c>glGetPerfCounterInfoINTEL</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, byte*, uint, byte*, uint*, uint*, uint*, uint*, ulong*, void> _glGetPerfCounterInfoINTEL_fnptr = &glGetPerfCounterInfoINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPerfCounterInfoINTEL_Lazy(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
        {
            _glGetPerfCounterInfoINTEL_fnptr = (delegate* unmanaged<uint, uint, uint, byte*, uint, byte*, uint*, uint*, uint*, uint*, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfCounterInfoINTEL");
            _glGetPerfCounterInfoINTEL_fnptr(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
        }
        
        /// <summary><b>[entry point: <c>glGetPerfMonitorCounterDataAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint*, int*, void> _glGetPerfMonitorCounterDataAMD_fnptr = &glGetPerfMonitorCounterDataAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPerfMonitorCounterDataAMD_Lazy(uint monitor, uint pname, int dataSize, uint* data, int* bytesWritten)
        {
            _glGetPerfMonitorCounterDataAMD_fnptr = (delegate* unmanaged<uint, uint, int, uint*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfMonitorCounterDataAMD");
            _glGetPerfMonitorCounterDataAMD_fnptr(monitor, pname, dataSize, data, bytesWritten);
        }
        
        /// <summary><b>[entry point: <c>glGetPerfMonitorCounterInfoAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void*, void> _glGetPerfMonitorCounterInfoAMD_fnptr = &glGetPerfMonitorCounterInfoAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPerfMonitorCounterInfoAMD_Lazy(uint group, uint counter, uint pname, void* data)
        {
            _glGetPerfMonitorCounterInfoAMD_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfMonitorCounterInfoAMD");
            _glGetPerfMonitorCounterInfoAMD_fnptr(group, counter, pname, data);
        }
        
        /// <summary><b>[entry point: <c>glGetPerfMonitorCountersAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, int*, int, uint*, void> _glGetPerfMonitorCountersAMD_fnptr = &glGetPerfMonitorCountersAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPerfMonitorCountersAMD_Lazy(uint group, int* numCounters, int* maxActiveCounters, int counterSize, uint* counters)
        {
            _glGetPerfMonitorCountersAMD_fnptr = (delegate* unmanaged<uint, int*, int*, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfMonitorCountersAMD");
            _glGetPerfMonitorCountersAMD_fnptr(group, numCounters, maxActiveCounters, counterSize, counters);
        }
        
        /// <summary><b>[entry point: <c>glGetPerfMonitorCounterStringAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int*, byte*, void> _glGetPerfMonitorCounterStringAMD_fnptr = &glGetPerfMonitorCounterStringAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPerfMonitorCounterStringAMD_Lazy(uint group, uint counter, int bufSize, int* length, byte* counterString)
        {
            _glGetPerfMonitorCounterStringAMD_fnptr = (delegate* unmanaged<uint, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfMonitorCounterStringAMD");
            _glGetPerfMonitorCounterStringAMD_fnptr(group, counter, bufSize, length, counterString);
        }
        
        /// <summary><b>[entry point: <c>glGetPerfMonitorGroupsAMD</c>]</b></summary>
        public static delegate* unmanaged<int*, int, uint*, void> _glGetPerfMonitorGroupsAMD_fnptr = &glGetPerfMonitorGroupsAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPerfMonitorGroupsAMD_Lazy(int* numGroups, int groupsSize, uint* groups)
        {
            _glGetPerfMonitorGroupsAMD_fnptr = (delegate* unmanaged<int*, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfMonitorGroupsAMD");
            _glGetPerfMonitorGroupsAMD_fnptr(numGroups, groupsSize, groups);
        }
        
        /// <summary><b>[entry point: <c>glGetPerfMonitorGroupStringAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, byte*, void> _glGetPerfMonitorGroupStringAMD_fnptr = &glGetPerfMonitorGroupStringAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPerfMonitorGroupStringAMD_Lazy(uint group, int bufSize, int* length, byte* groupString)
        {
            _glGetPerfMonitorGroupStringAMD_fnptr = (delegate* unmanaged<uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfMonitorGroupStringAMD");
            _glGetPerfMonitorGroupStringAMD_fnptr(group, bufSize, length, groupString);
        }
        
        /// <summary><b>[entry point: <c>glGetPerfQueryDataINTEL</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void*, uint*, void> _glGetPerfQueryDataINTEL_fnptr = &glGetPerfQueryDataINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPerfQueryDataINTEL_Lazy(int queryHandle, uint flags, int dataSize, void* data, uint* bytesWritten)
        {
            _glGetPerfQueryDataINTEL_fnptr = (delegate* unmanaged<int, uint, int, void*, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfQueryDataINTEL");
            _glGetPerfQueryDataINTEL_fnptr(queryHandle, flags, dataSize, data, bytesWritten);
        }
        
        /// <summary><b>[entry point: <c>glGetPerfQueryIdByNameINTEL</c>]</b></summary>
        public static delegate* unmanaged<byte*, uint*, void> _glGetPerfQueryIdByNameINTEL_fnptr = &glGetPerfQueryIdByNameINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPerfQueryIdByNameINTEL_Lazy(byte* queryName, uint* queryId)
        {
            _glGetPerfQueryIdByNameINTEL_fnptr = (delegate* unmanaged<byte*, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfQueryIdByNameINTEL");
            _glGetPerfQueryIdByNameINTEL_fnptr(queryName, queryId);
        }
        
        /// <summary><b>[entry point: <c>glGetPerfQueryInfoINTEL</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte*, uint*, uint*, uint*, uint*, void> _glGetPerfQueryInfoINTEL_fnptr = &glGetPerfQueryInfoINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPerfQueryInfoINTEL_Lazy(uint queryId, uint queryNameLength, byte* queryName, uint* dataSize, uint* noCounters, uint* noInstances, uint* capsMask)
        {
            _glGetPerfQueryInfoINTEL_fnptr = (delegate* unmanaged<uint, uint, byte*, uint*, uint*, uint*, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfQueryInfoINTEL");
            _glGetPerfQueryInfoINTEL_fnptr(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
        }
        
        /// <summary><b>[entry point: <c>glGetPixelMapfv</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glGetPixelMapfv_fnptr = &glGetPixelMapfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPixelMapfv_Lazy(uint map, float* values)
        {
            _glGetPixelMapfv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelMapfv");
            _glGetPixelMapfv_fnptr(map, values);
        }
        
        /// <summary><b>[entry point: <c>glGetPixelMapuiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glGetPixelMapuiv_fnptr = &glGetPixelMapuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPixelMapuiv_Lazy(uint map, uint* values)
        {
            _glGetPixelMapuiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelMapuiv");
            _glGetPixelMapuiv_fnptr(map, values);
        }
        
        /// <summary><b>[entry point: <c>glGetPixelMapusv</c>]</b></summary>
        public static delegate* unmanaged<uint, ushort*, void> _glGetPixelMapusv_fnptr = &glGetPixelMapusv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPixelMapusv_Lazy(uint map, ushort* values)
        {
            _glGetPixelMapusv_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelMapusv");
            _glGetPixelMapusv_fnptr(map, values);
        }
        
        /// <summary><b>[entry point: <c>glGetPixelMapxv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, void> _glGetPixelMapxv_fnptr = &glGetPixelMapxv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPixelMapxv_Lazy(uint map, int size, int* values)
        {
            _glGetPixelMapxv_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelMapxv");
            _glGetPixelMapxv_fnptr(map, size, values);
        }
        
        /// <summary><b>[entry point: <c>glGetPixelTexGenParameterfvSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glGetPixelTexGenParameterfvSGIS_fnptr = &glGetPixelTexGenParameterfvSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPixelTexGenParameterfvSGIS_Lazy(uint pname, float* parameters)
        {
            _glGetPixelTexGenParameterfvSGIS_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelTexGenParameterfvSGIS");
            _glGetPixelTexGenParameterfvSGIS_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetPixelTexGenParameterivSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glGetPixelTexGenParameterivSGIS_fnptr = &glGetPixelTexGenParameterivSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPixelTexGenParameterivSGIS_Lazy(uint pname, int* parameters)
        {
            _glGetPixelTexGenParameterivSGIS_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelTexGenParameterivSGIS");
            _glGetPixelTexGenParameterivSGIS_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetPixelTransformParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetPixelTransformParameterfvEXT_fnptr = &glGetPixelTransformParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPixelTransformParameterfvEXT_Lazy(uint target, uint pname, float* parameters)
        {
            _glGetPixelTransformParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelTransformParameterfvEXT");
            _glGetPixelTransformParameterfvEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetPixelTransformParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetPixelTransformParameterivEXT_fnptr = &glGetPixelTransformParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPixelTransformParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetPixelTransformParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelTransformParameterivEXT");
            _glGetPixelTransformParameterivEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetPointeri_vEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void**, void> _glGetPointeri_vEXT_fnptr = &glGetPointeri_vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPointeri_vEXT_Lazy(uint pname, uint index, void** parameters)
        {
            _glGetPointeri_vEXT_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetPointeri_vEXT");
            _glGetPointeri_vEXT_fnptr(pname, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetPointerIndexedvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void**, void> _glGetPointerIndexedvEXT_fnptr = &glGetPointerIndexedvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPointerIndexedvEXT_Lazy(uint target, uint index, void** data)
        {
            _glGetPointerIndexedvEXT_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetPointerIndexedvEXT");
            _glGetPointerIndexedvEXT_fnptr(target, index, data);
        }
        
        /// <summary><b>[entry point: <c>glGetPointerv</c>]</b></summary>
        public static delegate* unmanaged<uint, void**, void> _glGetPointerv_fnptr = &glGetPointerv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPointerv_Lazy(uint pname, void** parameters)
        {
            _glGetPointerv_fnptr = (delegate* unmanaged<uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetPointerv");
            _glGetPointerv_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetPointervEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void**, void> _glGetPointervEXT_fnptr = &glGetPointervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPointervEXT_Lazy(uint pname, void** parameters)
        {
            _glGetPointervEXT_fnptr = (delegate* unmanaged<uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetPointervEXT");
            _glGetPointervEXT_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetPointervKHR</c>]</b></summary>
        public static delegate* unmanaged<uint, void**, void> _glGetPointervKHR_fnptr = &glGetPointervKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPointervKHR_Lazy(uint pname, void** parameters)
        {
            _glGetPointervKHR_fnptr = (delegate* unmanaged<uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetPointervKHR");
            _glGetPointervKHR_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetPolygonStipple</c>]</b></summary>
        public static delegate* unmanaged<byte*, void> _glGetPolygonStipple_fnptr = &glGetPolygonStipple_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetPolygonStipple_Lazy(byte* mask)
        {
            _glGetPolygonStipple_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPolygonStipple");
            _glGetPolygonStipple_fnptr(mask);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramBinary</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, uint*, void*, void> _glGetProgramBinary_fnptr = &glGetProgramBinary_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramBinary_Lazy(int program, int bufSize, int* length, uint* binaryFormat, void* binary)
        {
            _glGetProgramBinary_fnptr = (delegate* unmanaged<int, int, int*, uint*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramBinary");
            _glGetProgramBinary_fnptr(program, bufSize, length, binaryFormat, binary);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramBinaryOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, uint*, void*, void> _glGetProgramBinaryOES_fnptr = &glGetProgramBinaryOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramBinaryOES_Lazy(int program, int bufSize, int* length, uint* binaryFormat, void* binary)
        {
            _glGetProgramBinaryOES_fnptr = (delegate* unmanaged<int, int, int*, uint*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramBinaryOES");
            _glGetProgramBinaryOES_fnptr(program, bufSize, length, binaryFormat, binary);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramEnvParameterdvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glGetProgramEnvParameterdvARB_fnptr = &glGetProgramEnvParameterdvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramEnvParameterdvARB_Lazy(uint target, uint index, double* parameters)
        {
            _glGetProgramEnvParameterdvARB_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramEnvParameterdvARB");
            _glGetProgramEnvParameterdvARB_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramEnvParameterfvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetProgramEnvParameterfvARB_fnptr = &glGetProgramEnvParameterfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramEnvParameterfvARB_Lazy(uint target, uint index, float* parameters)
        {
            _glGetProgramEnvParameterfvARB_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramEnvParameterfvARB");
            _glGetProgramEnvParameterfvARB_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramEnvParameterIivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetProgramEnvParameterIivNV_fnptr = &glGetProgramEnvParameterIivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramEnvParameterIivNV_Lazy(uint target, uint index, int* parameters)
        {
            _glGetProgramEnvParameterIivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramEnvParameterIivNV");
            _glGetProgramEnvParameterIivNV_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramEnvParameterIuivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glGetProgramEnvParameterIuivNV_fnptr = &glGetProgramEnvParameterIuivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramEnvParameterIuivNV_Lazy(uint target, uint index, uint* parameters)
        {
            _glGetProgramEnvParameterIuivNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramEnvParameterIuivNV");
            _glGetProgramEnvParameterIuivNV_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramInfoLog</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, byte*, void> _glGetProgramInfoLog_fnptr = &glGetProgramInfoLog_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramInfoLog_Lazy(int program, int bufSize, int* length, byte* infoLog)
        {
            _glGetProgramInfoLog_fnptr = (delegate* unmanaged<int, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramInfoLog");
            _glGetProgramInfoLog_fnptr(program, bufSize, length, infoLog);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramInterfaceiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glGetProgramInterfaceiv_fnptr = &glGetProgramInterfaceiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramInterfaceiv_Lazy(int program, uint programInterface, uint pname, int* parameters)
        {
            _glGetProgramInterfaceiv_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramInterfaceiv");
            _glGetProgramInterfaceiv_fnptr(program, programInterface, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetProgramiv_fnptr = &glGetProgramiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramiv_Lazy(int program, uint pname, int* parameters)
        {
            _glGetProgramiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramiv");
            _glGetProgramiv_fnptr(program, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramivARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetProgramivARB_fnptr = &glGetProgramivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramivARB_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetProgramivARB_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramivARB");
            _glGetProgramivARB_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramivNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetProgramivNV_fnptr = &glGetProgramivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramivNV_Lazy(int id, uint pname, int* parameters)
        {
            _glGetProgramivNV_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramivNV");
            _glGetProgramivNV_fnptr(id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramLocalParameterdvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glGetProgramLocalParameterdvARB_fnptr = &glGetProgramLocalParameterdvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramLocalParameterdvARB_Lazy(uint target, uint index, double* parameters)
        {
            _glGetProgramLocalParameterdvARB_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramLocalParameterdvARB");
            _glGetProgramLocalParameterdvARB_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramLocalParameterfvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetProgramLocalParameterfvARB_fnptr = &glGetProgramLocalParameterfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramLocalParameterfvARB_Lazy(uint target, uint index, float* parameters)
        {
            _glGetProgramLocalParameterfvARB_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramLocalParameterfvARB");
            _glGetProgramLocalParameterfvARB_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramLocalParameterIivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetProgramLocalParameterIivNV_fnptr = &glGetProgramLocalParameterIivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramLocalParameterIivNV_Lazy(uint target, uint index, int* parameters)
        {
            _glGetProgramLocalParameterIivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramLocalParameterIivNV");
            _glGetProgramLocalParameterIivNV_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramLocalParameterIuivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glGetProgramLocalParameterIuivNV_fnptr = &glGetProgramLocalParameterIuivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramLocalParameterIuivNV_Lazy(uint target, uint index, uint* parameters)
        {
            _glGetProgramLocalParameterIuivNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramLocalParameterIuivNV");
            _glGetProgramLocalParameterIuivNV_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramNamedParameterdvNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte*, double*, void> _glGetProgramNamedParameterdvNV_fnptr = &glGetProgramNamedParameterdvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramNamedParameterdvNV_Lazy(int id, int len, byte* name, double* parameters)
        {
            _glGetProgramNamedParameterdvNV_fnptr = (delegate* unmanaged<int, int, byte*, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramNamedParameterdvNV");
            _glGetProgramNamedParameterdvNV_fnptr(id, len, name, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramNamedParameterfvNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte*, float*, void> _glGetProgramNamedParameterfvNV_fnptr = &glGetProgramNamedParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramNamedParameterfvNV_Lazy(int id, int len, byte* name, float* parameters)
        {
            _glGetProgramNamedParameterfvNV_fnptr = (delegate* unmanaged<int, int, byte*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramNamedParameterfvNV");
            _glGetProgramNamedParameterfvNV_fnptr(id, len, name, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramParameterdvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, double*, void> _glGetProgramParameterdvNV_fnptr = &glGetProgramParameterdvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramParameterdvNV_Lazy(uint target, uint index, uint pname, double* parameters)
        {
            _glGetProgramParameterdvNV_fnptr = (delegate* unmanaged<uint, uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramParameterdvNV");
            _glGetProgramParameterdvNV_fnptr(target, index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramParameterfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float*, void> _glGetProgramParameterfvNV_fnptr = &glGetProgramParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramParameterfvNV_Lazy(uint target, uint index, uint pname, float* parameters)
        {
            _glGetProgramParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramParameterfvNV");
            _glGetProgramParameterfvNV_fnptr(target, index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramPipelineInfoLog</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, byte*, void> _glGetProgramPipelineInfoLog_fnptr = &glGetProgramPipelineInfoLog_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramPipelineInfoLog_Lazy(int pipeline, int bufSize, int* length, byte* infoLog)
        {
            _glGetProgramPipelineInfoLog_fnptr = (delegate* unmanaged<int, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramPipelineInfoLog");
            _glGetProgramPipelineInfoLog_fnptr(pipeline, bufSize, length, infoLog);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramPipelineInfoLogEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, byte*, void> _glGetProgramPipelineInfoLogEXT_fnptr = &glGetProgramPipelineInfoLogEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramPipelineInfoLogEXT_Lazy(int pipeline, int bufSize, int* length, byte* infoLog)
        {
            _glGetProgramPipelineInfoLogEXT_fnptr = (delegate* unmanaged<int, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramPipelineInfoLogEXT");
            _glGetProgramPipelineInfoLogEXT_fnptr(pipeline, bufSize, length, infoLog);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramPipelineiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetProgramPipelineiv_fnptr = &glGetProgramPipelineiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramPipelineiv_Lazy(int pipeline, uint pname, int* parameters)
        {
            _glGetProgramPipelineiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramPipelineiv");
            _glGetProgramPipelineiv_fnptr(pipeline, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramPipelineivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetProgramPipelineivEXT_fnptr = &glGetProgramPipelineivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramPipelineivEXT_Lazy(int pipeline, uint pname, int* parameters)
        {
            _glGetProgramPipelineivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramPipelineivEXT");
            _glGetProgramPipelineivEXT_fnptr(pipeline, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramResourcefvNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, uint*, int, int*, float*, void> _glGetProgramResourcefvNV_fnptr = &glGetProgramResourcefvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramResourcefvNV_Lazy(int program, uint programInterface, uint index, int propCount, uint* props, int count, int* length, float* parameters)
        {
            _glGetProgramResourcefvNV_fnptr = (delegate* unmanaged<int, uint, uint, int, uint*, int, int*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramResourcefvNV");
            _glGetProgramResourcefvNV_fnptr(program, programInterface, index, propCount, props, count, length, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramResourceIndex</c>]</b></summary>
        public static delegate* unmanaged<int, uint, byte*, uint> _glGetProgramResourceIndex_fnptr = &glGetProgramResourceIndex_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGetProgramResourceIndex_Lazy(int program, uint programInterface, byte* name)
        {
            _glGetProgramResourceIndex_fnptr = (delegate* unmanaged<int, uint, byte*, uint>)GLLoader.BindingsContext.GetProcAddress("glGetProgramResourceIndex");
            return _glGetProgramResourceIndex_fnptr(program, programInterface, name);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramResourceiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, uint*, int, int*, int*, void> _glGetProgramResourceiv_fnptr = &glGetProgramResourceiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramResourceiv_Lazy(int program, uint programInterface, uint index, int propCount, uint* props, int count, int* length, int* parameters)
        {
            _glGetProgramResourceiv_fnptr = (delegate* unmanaged<int, uint, uint, int, uint*, int, int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramResourceiv");
            _glGetProgramResourceiv_fnptr(program, programInterface, index, propCount, props, count, length, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramResourceLocation</c>]</b></summary>
        public static delegate* unmanaged<int, uint, byte*, int> _glGetProgramResourceLocation_fnptr = &glGetProgramResourceLocation_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetProgramResourceLocation_Lazy(int program, uint programInterface, byte* name)
        {
            _glGetProgramResourceLocation_fnptr = (delegate* unmanaged<int, uint, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetProgramResourceLocation");
            return _glGetProgramResourceLocation_fnptr(program, programInterface, name);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramResourceLocationIndex</c>]</b></summary>
        public static delegate* unmanaged<int, uint, byte*, int> _glGetProgramResourceLocationIndex_fnptr = &glGetProgramResourceLocationIndex_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetProgramResourceLocationIndex_Lazy(int program, uint programInterface, byte* name)
        {
            _glGetProgramResourceLocationIndex_fnptr = (delegate* unmanaged<int, uint, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetProgramResourceLocationIndex");
            return _glGetProgramResourceLocationIndex_fnptr(program, programInterface, name);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramResourceLocationIndexEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, byte*, int> _glGetProgramResourceLocationIndexEXT_fnptr = &glGetProgramResourceLocationIndexEXT_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetProgramResourceLocationIndexEXT_Lazy(int program, uint programInterface, byte* name)
        {
            _glGetProgramResourceLocationIndexEXT_fnptr = (delegate* unmanaged<int, uint, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetProgramResourceLocationIndexEXT");
            return _glGetProgramResourceLocationIndexEXT_fnptr(program, programInterface, name);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramResourceName</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, int*, byte*, void> _glGetProgramResourceName_fnptr = &glGetProgramResourceName_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramResourceName_Lazy(int program, uint programInterface, uint index, int bufSize, int* length, byte* name)
        {
            _glGetProgramResourceName_fnptr = (delegate* unmanaged<int, uint, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramResourceName");
            _glGetProgramResourceName_fnptr(program, programInterface, index, bufSize, length, name);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramStageiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glGetProgramStageiv_fnptr = &glGetProgramStageiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramStageiv_Lazy(int program, uint shadertype, uint pname, int* values)
        {
            _glGetProgramStageiv_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramStageiv");
            _glGetProgramStageiv_fnptr(program, shadertype, pname, values);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramStringARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, void> _glGetProgramStringARB_fnptr = &glGetProgramStringARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramStringARB_Lazy(uint target, uint pname, void* str)
        {
            _glGetProgramStringARB_fnptr = (delegate* unmanaged<uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramStringARB");
            _glGetProgramStringARB_fnptr(target, pname, str);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramStringNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, byte*, void> _glGetProgramStringNV_fnptr = &glGetProgramStringNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramStringNV_Lazy(int id, uint pname, byte* program)
        {
            _glGetProgramStringNV_fnptr = (delegate* unmanaged<int, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramStringNV");
            _glGetProgramStringNV_fnptr(id, pname, program);
        }
        
        /// <summary><b>[entry point: <c>glGetProgramSubroutineParameteruivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glGetProgramSubroutineParameteruivNV_fnptr = &glGetProgramSubroutineParameteruivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetProgramSubroutineParameteruivNV_Lazy(uint target, uint index, uint* param)
        {
            _glGetProgramSubroutineParameteruivNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramSubroutineParameteruivNV");
            _glGetProgramSubroutineParameteruivNV_fnptr(target, index, param);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryBufferObjecti64v</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, IntPtr, void> _glGetQueryBufferObjecti64v_fnptr = &glGetQueryBufferObjecti64v_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryBufferObjecti64v_Lazy(int id, int buffer, uint pname, IntPtr offset)
        {
            _glGetQueryBufferObjecti64v_fnptr = (delegate* unmanaged<int, int, uint, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryBufferObjecti64v");
            _glGetQueryBufferObjecti64v_fnptr(id, buffer, pname, offset);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryBufferObjectiv</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, IntPtr, void> _glGetQueryBufferObjectiv_fnptr = &glGetQueryBufferObjectiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryBufferObjectiv_Lazy(int id, int buffer, uint pname, IntPtr offset)
        {
            _glGetQueryBufferObjectiv_fnptr = (delegate* unmanaged<int, int, uint, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryBufferObjectiv");
            _glGetQueryBufferObjectiv_fnptr(id, buffer, pname, offset);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryBufferObjectui64v</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, IntPtr, void> _glGetQueryBufferObjectui64v_fnptr = &glGetQueryBufferObjectui64v_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryBufferObjectui64v_Lazy(int id, int buffer, uint pname, IntPtr offset)
        {
            _glGetQueryBufferObjectui64v_fnptr = (delegate* unmanaged<int, int, uint, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryBufferObjectui64v");
            _glGetQueryBufferObjectui64v_fnptr(id, buffer, pname, offset);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryBufferObjectuiv</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, IntPtr, void> _glGetQueryBufferObjectuiv_fnptr = &glGetQueryBufferObjectuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryBufferObjectuiv_Lazy(int id, int buffer, uint pname, IntPtr offset)
        {
            _glGetQueryBufferObjectuiv_fnptr = (delegate* unmanaged<int, int, uint, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryBufferObjectuiv");
            _glGetQueryBufferObjectuiv_fnptr(id, buffer, pname, offset);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryIndexediv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glGetQueryIndexediv_fnptr = &glGetQueryIndexediv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryIndexediv_Lazy(uint target, uint index, uint pname, int* parameters)
        {
            _glGetQueryIndexediv_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryIndexediv");
            _glGetQueryIndexediv_fnptr(target, index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetQueryiv_fnptr = &glGetQueryiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryiv_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetQueryiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryiv");
            _glGetQueryiv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryivARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetQueryivARB_fnptr = &glGetQueryivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryivARB_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetQueryivARB_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryivARB");
            _glGetQueryivARB_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetQueryivEXT_fnptr = &glGetQueryivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetQueryivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryivEXT");
            _glGetQueryivEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryObjecti64v</c>]</b></summary>
        public static delegate* unmanaged<int, uint, long*, void> _glGetQueryObjecti64v_fnptr = &glGetQueryObjecti64v_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryObjecti64v_Lazy(int id, uint pname, long* parameters)
        {
            _glGetQueryObjecti64v_fnptr = (delegate* unmanaged<int, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjecti64v");
            _glGetQueryObjecti64v_fnptr(id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryObjecti64vEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, long*, void> _glGetQueryObjecti64vEXT_fnptr = &glGetQueryObjecti64vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryObjecti64vEXT_Lazy(int id, uint pname, long* parameters)
        {
            _glGetQueryObjecti64vEXT_fnptr = (delegate* unmanaged<int, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjecti64vEXT");
            _glGetQueryObjecti64vEXT_fnptr(id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryObjectiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetQueryObjectiv_fnptr = &glGetQueryObjectiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryObjectiv_Lazy(int id, uint pname, int* parameters)
        {
            _glGetQueryObjectiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectiv");
            _glGetQueryObjectiv_fnptr(id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryObjectivARB</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetQueryObjectivARB_fnptr = &glGetQueryObjectivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryObjectivARB_Lazy(int id, uint pname, int* parameters)
        {
            _glGetQueryObjectivARB_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectivARB");
            _glGetQueryObjectivARB_fnptr(id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryObjectivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetQueryObjectivEXT_fnptr = &glGetQueryObjectivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryObjectivEXT_Lazy(int id, uint pname, int* parameters)
        {
            _glGetQueryObjectivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectivEXT");
            _glGetQueryObjectivEXT_fnptr(id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryObjectui64v</c>]</b></summary>
        public static delegate* unmanaged<int, uint, ulong*, void> _glGetQueryObjectui64v_fnptr = &glGetQueryObjectui64v_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryObjectui64v_Lazy(int id, uint pname, ulong* parameters)
        {
            _glGetQueryObjectui64v_fnptr = (delegate* unmanaged<int, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectui64v");
            _glGetQueryObjectui64v_fnptr(id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryObjectui64vEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, ulong*, void> _glGetQueryObjectui64vEXT_fnptr = &glGetQueryObjectui64vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryObjectui64vEXT_Lazy(int id, uint pname, ulong* parameters)
        {
            _glGetQueryObjectui64vEXT_fnptr = (delegate* unmanaged<int, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectui64vEXT");
            _glGetQueryObjectui64vEXT_fnptr(id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryObjectuiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint*, void> _glGetQueryObjectuiv_fnptr = &glGetQueryObjectuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryObjectuiv_Lazy(int id, uint pname, uint* parameters)
        {
            _glGetQueryObjectuiv_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectuiv");
            _glGetQueryObjectuiv_fnptr(id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryObjectuivARB</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint*, void> _glGetQueryObjectuivARB_fnptr = &glGetQueryObjectuivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryObjectuivARB_Lazy(int id, uint pname, uint* parameters)
        {
            _glGetQueryObjectuivARB_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectuivARB");
            _glGetQueryObjectuivARB_fnptr(id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetQueryObjectuivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint*, void> _glGetQueryObjectuivEXT_fnptr = &glGetQueryObjectuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetQueryObjectuivEXT_Lazy(int id, uint pname, uint* parameters)
        {
            _glGetQueryObjectuivEXT_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectuivEXT");
            _glGetQueryObjectuivEXT_fnptr(id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetRenderbufferParameteriv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetRenderbufferParameteriv_fnptr = &glGetRenderbufferParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetRenderbufferParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetRenderbufferParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetRenderbufferParameteriv");
            _glGetRenderbufferParameteriv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetRenderbufferParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetRenderbufferParameterivEXT_fnptr = &glGetRenderbufferParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetRenderbufferParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetRenderbufferParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetRenderbufferParameterivEXT");
            _glGetRenderbufferParameterivEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetRenderbufferParameterivOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetRenderbufferParameterivOES_fnptr = &glGetRenderbufferParameterivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetRenderbufferParameterivOES_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetRenderbufferParameterivOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetRenderbufferParameterivOES");
            _glGetRenderbufferParameterivOES_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetSamplerParameterfv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, float*, void> _glGetSamplerParameterfv_fnptr = &glGetSamplerParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetSamplerParameterfv_Lazy(int sampler, uint pname, float* parameters)
        {
            _glGetSamplerParameterfv_fnptr = (delegate* unmanaged<int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameterfv");
            _glGetSamplerParameterfv_fnptr(sampler, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetSamplerParameterIiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetSamplerParameterIiv_fnptr = &glGetSamplerParameterIiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetSamplerParameterIiv_Lazy(int sampler, uint pname, int* parameters)
        {
            _glGetSamplerParameterIiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameterIiv");
            _glGetSamplerParameterIiv_fnptr(sampler, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetSamplerParameterIivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetSamplerParameterIivEXT_fnptr = &glGetSamplerParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetSamplerParameterIivEXT_Lazy(int sampler, uint pname, int* parameters)
        {
            _glGetSamplerParameterIivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameterIivEXT");
            _glGetSamplerParameterIivEXT_fnptr(sampler, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetSamplerParameterIivOES</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetSamplerParameterIivOES_fnptr = &glGetSamplerParameterIivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetSamplerParameterIivOES_Lazy(int sampler, uint pname, int* parameters)
        {
            _glGetSamplerParameterIivOES_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameterIivOES");
            _glGetSamplerParameterIivOES_fnptr(sampler, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetSamplerParameterIuiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint*, void> _glGetSamplerParameterIuiv_fnptr = &glGetSamplerParameterIuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetSamplerParameterIuiv_Lazy(int sampler, uint pname, uint* parameters)
        {
            _glGetSamplerParameterIuiv_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameterIuiv");
            _glGetSamplerParameterIuiv_fnptr(sampler, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetSamplerParameterIuivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint*, void> _glGetSamplerParameterIuivEXT_fnptr = &glGetSamplerParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetSamplerParameterIuivEXT_Lazy(int sampler, uint pname, uint* parameters)
        {
            _glGetSamplerParameterIuivEXT_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameterIuivEXT");
            _glGetSamplerParameterIuivEXT_fnptr(sampler, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetSamplerParameterIuivOES</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint*, void> _glGetSamplerParameterIuivOES_fnptr = &glGetSamplerParameterIuivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetSamplerParameterIuivOES_Lazy(int sampler, uint pname, uint* parameters)
        {
            _glGetSamplerParameterIuivOES_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameterIuivOES");
            _glGetSamplerParameterIuivOES_fnptr(sampler, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetSamplerParameteriv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetSamplerParameteriv_fnptr = &glGetSamplerParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetSamplerParameteriv_Lazy(int sampler, uint pname, int* parameters)
        {
            _glGetSamplerParameteriv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameteriv");
            _glGetSamplerParameteriv_fnptr(sampler, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetSemaphoreParameterivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetSemaphoreParameterivNV_fnptr = &glGetSemaphoreParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetSemaphoreParameterivNV_Lazy(uint semaphore, uint pname, int* parameters)
        {
            _glGetSemaphoreParameterivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSemaphoreParameterivNV");
            _glGetSemaphoreParameterivNV_fnptr(semaphore, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetSemaphoreParameterui64vEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, ulong*, void> _glGetSemaphoreParameterui64vEXT_fnptr = &glGetSemaphoreParameterui64vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetSemaphoreParameterui64vEXT_Lazy(uint semaphore, uint pname, ulong* parameters)
        {
            _glGetSemaphoreParameterui64vEXT_fnptr = (delegate* unmanaged<uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSemaphoreParameterui64vEXT");
            _glGetSemaphoreParameterui64vEXT_fnptr(semaphore, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetSeparableFilter</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void*, void*, void*, void> _glGetSeparableFilter_fnptr = &glGetSeparableFilter_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetSeparableFilter_Lazy(uint target, uint format, uint type, void* row, void* column, void* span)
        {
            _glGetSeparableFilter_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSeparableFilter");
            _glGetSeparableFilter_fnptr(target, format, type, row, column, span);
        }
        
        /// <summary><b>[entry point: <c>glGetSeparableFilterEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void*, void*, void*, void> _glGetSeparableFilterEXT_fnptr = &glGetSeparableFilterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetSeparableFilterEXT_Lazy(uint target, uint format, uint type, void* row, void* column, void* span)
        {
            _glGetSeparableFilterEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSeparableFilterEXT");
            _glGetSeparableFilterEXT_fnptr(target, format, type, row, column, span);
        }
        
        /// <summary><b>[entry point: <c>glGetShaderInfoLog</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, byte*, void> _glGetShaderInfoLog_fnptr = &glGetShaderInfoLog_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetShaderInfoLog_Lazy(int shader, int bufSize, int* length, byte* infoLog)
        {
            _glGetShaderInfoLog_fnptr = (delegate* unmanaged<int, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetShaderInfoLog");
            _glGetShaderInfoLog_fnptr(shader, bufSize, length, infoLog);
        }
        
        /// <summary><b>[entry point: <c>glGetShaderiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetShaderiv_fnptr = &glGetShaderiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetShaderiv_Lazy(int shader, uint pname, int* parameters)
        {
            _glGetShaderiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetShaderiv");
            _glGetShaderiv_fnptr(shader, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetShaderPrecisionFormat</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, int*, void> _glGetShaderPrecisionFormat_fnptr = &glGetShaderPrecisionFormat_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetShaderPrecisionFormat_Lazy(uint shadertype, uint precisiontype, int* range, int* precision)
        {
            _glGetShaderPrecisionFormat_fnptr = (delegate* unmanaged<uint, uint, int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetShaderPrecisionFormat");
            _glGetShaderPrecisionFormat_fnptr(shadertype, precisiontype, range, precision);
        }
        
        /// <summary><b>[entry point: <c>glGetShaderSource</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, byte*, void> _glGetShaderSource_fnptr = &glGetShaderSource_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetShaderSource_Lazy(int shader, int bufSize, int* length, byte* source)
        {
            _glGetShaderSource_fnptr = (delegate* unmanaged<int, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetShaderSource");
            _glGetShaderSource_fnptr(shader, bufSize, length, source);
        }
        
        /// <summary><b>[entry point: <c>glGetShaderSourceARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, int, int*, byte*, void> _glGetShaderSourceARB_fnptr = &glGetShaderSourceARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetShaderSourceARB_Lazy(IntPtr obj, int maxLength, int* length, byte* source)
        {
            _glGetShaderSourceARB_fnptr = (delegate* unmanaged<IntPtr, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetShaderSourceARB");
            _glGetShaderSourceARB_fnptr(obj, maxLength, length, source);
        }
        
        /// <summary><b>[entry point: <c>glGetShadingRateImagePaletteNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glGetShadingRateImagePaletteNV_fnptr = &glGetShadingRateImagePaletteNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetShadingRateImagePaletteNV_Lazy(uint viewport, uint entry, uint* rate)
        {
            _glGetShadingRateImagePaletteNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetShadingRateImagePaletteNV");
            _glGetShadingRateImagePaletteNV_fnptr(viewport, entry, rate);
        }
        
        /// <summary><b>[entry point: <c>glGetShadingRateSampleLocationivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glGetShadingRateSampleLocationivNV_fnptr = &glGetShadingRateSampleLocationivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetShadingRateSampleLocationivNV_Lazy(uint rate, uint samples, uint index, int* location)
        {
            _glGetShadingRateSampleLocationivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetShadingRateSampleLocationivNV");
            _glGetShadingRateSampleLocationivNV_fnptr(rate, samples, index, location);
        }
        
        /// <summary><b>[entry point: <c>glGetSharpenTexFuncSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glGetSharpenTexFuncSGIS_fnptr = &glGetSharpenTexFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetSharpenTexFuncSGIS_Lazy(uint target, float* points)
        {
            _glGetSharpenTexFuncSGIS_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSharpenTexFuncSGIS");
            _glGetSharpenTexFuncSGIS_fnptr(target, points);
        }
        
        /// <summary><b>[entry point: <c>glGetStageIndexNV</c>]</b></summary>
        public static delegate* unmanaged<uint, ushort> _glGetStageIndexNV_fnptr = &glGetStageIndexNV_Lazy;
        [UnmanagedCallersOnly]
        private static ushort glGetStageIndexNV_Lazy(uint shadertype)
        {
            _glGetStageIndexNV_fnptr = (delegate* unmanaged<uint, ushort>)GLLoader.BindingsContext.GetProcAddress("glGetStageIndexNV");
            return _glGetStageIndexNV_fnptr(shadertype);
        }
        
        /// <summary><b>[entry point: <c>glGetString</c>]</b></summary>
        public static delegate* unmanaged<uint, byte*> _glGetString_fnptr = &glGetString_Lazy;
        [UnmanagedCallersOnly]
        private static byte* glGetString_Lazy(uint name)
        {
            _glGetString_fnptr = (delegate* unmanaged<uint, byte*>)GLLoader.BindingsContext.GetProcAddress("glGetString");
            return _glGetString_fnptr(name);
        }
        
        /// <summary><b>[entry point: <c>glGetStringi</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte*> _glGetStringi_fnptr = &glGetStringi_Lazy;
        [UnmanagedCallersOnly]
        private static byte* glGetStringi_Lazy(uint name, uint index)
        {
            _glGetStringi_fnptr = (delegate* unmanaged<uint, uint, byte*>)GLLoader.BindingsContext.GetProcAddress("glGetStringi");
            return _glGetStringi_fnptr(name, index);
        }
        
        /// <summary><b>[entry point: <c>glGetSubroutineIndex</c>]</b></summary>
        public static delegate* unmanaged<int, uint, byte*, uint> _glGetSubroutineIndex_fnptr = &glGetSubroutineIndex_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGetSubroutineIndex_Lazy(int program, uint shadertype, byte* name)
        {
            _glGetSubroutineIndex_fnptr = (delegate* unmanaged<int, uint, byte*, uint>)GLLoader.BindingsContext.GetProcAddress("glGetSubroutineIndex");
            return _glGetSubroutineIndex_fnptr(program, shadertype, name);
        }
        
        /// <summary><b>[entry point: <c>glGetSubroutineUniformLocation</c>]</b></summary>
        public static delegate* unmanaged<int, uint, byte*, int> _glGetSubroutineUniformLocation_fnptr = &glGetSubroutineUniformLocation_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetSubroutineUniformLocation_Lazy(int program, uint shadertype, byte* name)
        {
            _glGetSubroutineUniformLocation_fnptr = (delegate* unmanaged<int, uint, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetSubroutineUniformLocation");
            return _glGetSubroutineUniformLocation_fnptr(program, shadertype, name);
        }
        
        /// <summary><b>[entry point: <c>glGetSynciv</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, uint, int, int*, int*, void> _glGetSynciv_fnptr = &glGetSynciv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetSynciv_Lazy(IntPtr sync, uint pname, int count, int* length, int* values)
        {
            _glGetSynciv_fnptr = (delegate* unmanaged<IntPtr, uint, int, int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSynciv");
            _glGetSynciv_fnptr(sync, pname, count, length, values);
        }
        
        /// <summary><b>[entry point: <c>glGetSyncivAPPLE</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, uint, int, int*, int*, void> _glGetSyncivAPPLE_fnptr = &glGetSyncivAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetSyncivAPPLE_Lazy(IntPtr sync, uint pname, int count, int* length, int* values)
        {
            _glGetSyncivAPPLE_fnptr = (delegate* unmanaged<IntPtr, uint, int, int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSyncivAPPLE");
            _glGetSyncivAPPLE_fnptr(sync, pname, count, length, values);
        }
        
        /// <summary><b>[entry point: <c>glGetTexBumpParameterfvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glGetTexBumpParameterfvATI_fnptr = &glGetTexBumpParameterfvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexBumpParameterfvATI_Lazy(uint pname, float* param)
        {
            _glGetTexBumpParameterfvATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexBumpParameterfvATI");
            _glGetTexBumpParameterfvATI_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glGetTexBumpParameterivATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glGetTexBumpParameterivATI_fnptr = &glGetTexBumpParameterivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexBumpParameterivATI_Lazy(uint pname, int* param)
        {
            _glGetTexBumpParameterivATI_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexBumpParameterivATI");
            _glGetTexBumpParameterivATI_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glGetTexEnvfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetTexEnvfv_fnptr = &glGetTexEnvfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexEnvfv_Lazy(uint target, uint pname, float* parameters)
        {
            _glGetTexEnvfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexEnvfv");
            _glGetTexEnvfv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexEnviv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetTexEnviv_fnptr = &glGetTexEnviv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexEnviv_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetTexEnviv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexEnviv");
            _glGetTexEnviv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexEnvxv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetTexEnvxv_fnptr = &glGetTexEnvxv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexEnvxv_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetTexEnvxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexEnvxv");
            _glGetTexEnvxv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexEnvxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetTexEnvxvOES_fnptr = &glGetTexEnvxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexEnvxvOES_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetTexEnvxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexEnvxvOES");
            _glGetTexEnvxvOES_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexFilterFuncSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetTexFilterFuncSGIS_fnptr = &glGetTexFilterFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexFilterFuncSGIS_Lazy(uint target, uint filter, float* weights)
        {
            _glGetTexFilterFuncSGIS_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexFilterFuncSGIS");
            _glGetTexFilterFuncSGIS_fnptr(target, filter, weights);
        }
        
        /// <summary><b>[entry point: <c>glGetTexGendv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glGetTexGendv_fnptr = &glGetTexGendv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexGendv_Lazy(uint coord, uint pname, double* parameters)
        {
            _glGetTexGendv_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexGendv");
            _glGetTexGendv_fnptr(coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexGenfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetTexGenfv_fnptr = &glGetTexGenfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexGenfv_Lazy(uint coord, uint pname, float* parameters)
        {
            _glGetTexGenfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexGenfv");
            _glGetTexGenfv_fnptr(coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexGenfvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetTexGenfvOES_fnptr = &glGetTexGenfvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexGenfvOES_Lazy(uint coord, uint pname, float* parameters)
        {
            _glGetTexGenfvOES_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexGenfvOES");
            _glGetTexGenfvOES_fnptr(coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexGeniv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetTexGeniv_fnptr = &glGetTexGeniv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexGeniv_Lazy(uint coord, uint pname, int* parameters)
        {
            _glGetTexGeniv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexGeniv");
            _glGetTexGeniv_fnptr(coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexGenivOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetTexGenivOES_fnptr = &glGetTexGenivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexGenivOES_Lazy(uint coord, uint pname, int* parameters)
        {
            _glGetTexGenivOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexGenivOES");
            _glGetTexGenivOES_fnptr(coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexGenxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetTexGenxvOES_fnptr = &glGetTexGenxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexGenxvOES_Lazy(uint coord, uint pname, int* parameters)
        {
            _glGetTexGenxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexGenxvOES");
            _glGetTexGenxvOES_fnptr(coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexImage</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, uint, void*, void> _glGetTexImage_fnptr = &glGetTexImage_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexImage_Lazy(uint target, int level, uint format, uint type, void* pixels)
        {
            _glGetTexImage_fnptr = (delegate* unmanaged<uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexImage");
            _glGetTexImage_fnptr(target, level, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glGetTexLevelParameterfv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, float*, void> _glGetTexLevelParameterfv_fnptr = &glGetTexLevelParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexLevelParameterfv_Lazy(uint target, int level, uint pname, float* parameters)
        {
            _glGetTexLevelParameterfv_fnptr = (delegate* unmanaged<uint, int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexLevelParameterfv");
            _glGetTexLevelParameterfv_fnptr(target, level, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexLevelParameteriv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int*, void> _glGetTexLevelParameteriv_fnptr = &glGetTexLevelParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexLevelParameteriv_Lazy(uint target, int level, uint pname, int* parameters)
        {
            _glGetTexLevelParameteriv_fnptr = (delegate* unmanaged<uint, int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexLevelParameteriv");
            _glGetTexLevelParameteriv_fnptr(target, level, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexLevelParameterxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int*, void> _glGetTexLevelParameterxvOES_fnptr = &glGetTexLevelParameterxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexLevelParameterxvOES_Lazy(uint target, int level, uint pname, int* parameters)
        {
            _glGetTexLevelParameterxvOES_fnptr = (delegate* unmanaged<uint, int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexLevelParameterxvOES");
            _glGetTexLevelParameterxvOES_fnptr(target, level, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexParameterfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetTexParameterfv_fnptr = &glGetTexParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _glGetTexParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterfv");
            _glGetTexParameterfv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexParameterIiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetTexParameterIiv_fnptr = &glGetTexParameterIiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexParameterIiv_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetTexParameterIiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterIiv");
            _glGetTexParameterIiv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexParameterIivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetTexParameterIivEXT_fnptr = &glGetTexParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexParameterIivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetTexParameterIivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterIivEXT");
            _glGetTexParameterIivEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexParameterIivOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetTexParameterIivOES_fnptr = &glGetTexParameterIivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexParameterIivOES_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetTexParameterIivOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterIivOES");
            _glGetTexParameterIivOES_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexParameterIuiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glGetTexParameterIuiv_fnptr = &glGetTexParameterIuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexParameterIuiv_Lazy(uint target, uint pname, uint* parameters)
        {
            _glGetTexParameterIuiv_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterIuiv");
            _glGetTexParameterIuiv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexParameterIuivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glGetTexParameterIuivEXT_fnptr = &glGetTexParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexParameterIuivEXT_Lazy(uint target, uint pname, uint* parameters)
        {
            _glGetTexParameterIuivEXT_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterIuivEXT");
            _glGetTexParameterIuivEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexParameterIuivOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glGetTexParameterIuivOES_fnptr = &glGetTexParameterIuivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexParameterIuivOES_Lazy(uint target, uint pname, uint* parameters)
        {
            _glGetTexParameterIuivOES_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterIuivOES");
            _glGetTexParameterIuivOES_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexParameteriv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetTexParameteriv_fnptr = &glGetTexParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetTexParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameteriv");
            _glGetTexParameteriv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexParameterPointervAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void**, void> _glGetTexParameterPointervAPPLE_fnptr = &glGetTexParameterPointervAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexParameterPointervAPPLE_Lazy(uint target, uint pname, void** parameters)
        {
            _glGetTexParameterPointervAPPLE_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterPointervAPPLE");
            _glGetTexParameterPointervAPPLE_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexParameterxv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetTexParameterxv_fnptr = &glGetTexParameterxv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexParameterxv_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetTexParameterxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterxv");
            _glGetTexParameterxv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTexParameterxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetTexParameterxvOES_fnptr = &glGetTexParameterxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTexParameterxvOES_Lazy(uint target, uint pname, int* parameters)
        {
            _glGetTexParameterxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterxvOES");
            _glGetTexParameterxvOES_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureHandleARB</c>]</b></summary>
        public static delegate* unmanaged<int, ulong> _glGetTextureHandleARB_fnptr = &glGetTextureHandleARB_Lazy;
        [UnmanagedCallersOnly]
        private static ulong glGetTextureHandleARB_Lazy(int texture)
        {
            _glGetTextureHandleARB_fnptr = (delegate* unmanaged<int, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetTextureHandleARB");
            return _glGetTextureHandleARB_fnptr(texture);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureHandleIMG</c>]</b></summary>
        public static delegate* unmanaged<int, ulong> _glGetTextureHandleIMG_fnptr = &glGetTextureHandleIMG_Lazy;
        [UnmanagedCallersOnly]
        private static ulong glGetTextureHandleIMG_Lazy(int texture)
        {
            _glGetTextureHandleIMG_fnptr = (delegate* unmanaged<int, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetTextureHandleIMG");
            return _glGetTextureHandleIMG_fnptr(texture);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureHandleNV</c>]</b></summary>
        public static delegate* unmanaged<int, ulong> _glGetTextureHandleNV_fnptr = &glGetTextureHandleNV_Lazy;
        [UnmanagedCallersOnly]
        private static ulong glGetTextureHandleNV_Lazy(int texture)
        {
            _glGetTextureHandleNV_fnptr = (delegate* unmanaged<int, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetTextureHandleNV");
            return _glGetTextureHandleNV_fnptr(texture);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureImage</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, uint, int, void*, void> _glGetTextureImage_fnptr = &glGetTextureImage_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTextureImage_Lazy(int texture, int level, uint format, uint type, int bufSize, void* pixels)
        {
            _glGetTextureImage_fnptr = (delegate* unmanaged<int, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureImage");
            _glGetTextureImage_fnptr(texture, level, format, type, bufSize, pixels);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureImageEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, uint, void*, void> _glGetTextureImageEXT_fnptr = &glGetTextureImageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTextureImageEXT_Lazy(int texture, uint target, int level, uint format, uint type, void* pixels)
        {
            _glGetTextureImageEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureImageEXT");
            _glGetTextureImageEXT_fnptr(texture, target, level, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureLevelParameterfv</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, float*, void> _glGetTextureLevelParameterfv_fnptr = &glGetTextureLevelParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTextureLevelParameterfv_Lazy(int texture, int level, uint pname, float* parameters)
        {
            _glGetTextureLevelParameterfv_fnptr = (delegate* unmanaged<int, int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureLevelParameterfv");
            _glGetTextureLevelParameterfv_fnptr(texture, level, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureLevelParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, float*, void> _glGetTextureLevelParameterfvEXT_fnptr = &glGetTextureLevelParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTextureLevelParameterfvEXT_Lazy(int texture, uint target, int level, uint pname, float* parameters)
        {
            _glGetTextureLevelParameterfvEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureLevelParameterfvEXT");
            _glGetTextureLevelParameterfvEXT_fnptr(texture, target, level, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureLevelParameteriv</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int*, void> _glGetTextureLevelParameteriv_fnptr = &glGetTextureLevelParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTextureLevelParameteriv_Lazy(int texture, int level, uint pname, int* parameters)
        {
            _glGetTextureLevelParameteriv_fnptr = (delegate* unmanaged<int, int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureLevelParameteriv");
            _glGetTextureLevelParameteriv_fnptr(texture, level, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureLevelParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, int*, void> _glGetTextureLevelParameterivEXT_fnptr = &glGetTextureLevelParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTextureLevelParameterivEXT_Lazy(int texture, uint target, int level, uint pname, int* parameters)
        {
            _glGetTextureLevelParameterivEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureLevelParameterivEXT");
            _glGetTextureLevelParameterivEXT_fnptr(texture, target, level, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureParameterfv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, float*, void> _glGetTextureParameterfv_fnptr = &glGetTextureParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTextureParameterfv_Lazy(int texture, uint pname, float* parameters)
        {
            _glGetTextureParameterfv_fnptr = (delegate* unmanaged<int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameterfv");
            _glGetTextureParameterfv_fnptr(texture, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, float*, void> _glGetTextureParameterfvEXT_fnptr = &glGetTextureParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTextureParameterfvEXT_Lazy(int texture, uint target, uint pname, float* parameters)
        {
            _glGetTextureParameterfvEXT_fnptr = (delegate* unmanaged<int, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameterfvEXT");
            _glGetTextureParameterfvEXT_fnptr(texture, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureParameterIiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetTextureParameterIiv_fnptr = &glGetTextureParameterIiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTextureParameterIiv_Lazy(int texture, uint pname, int* parameters)
        {
            _glGetTextureParameterIiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameterIiv");
            _glGetTextureParameterIiv_fnptr(texture, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureParameterIivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glGetTextureParameterIivEXT_fnptr = &glGetTextureParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTextureParameterIivEXT_Lazy(int texture, uint target, uint pname, int* parameters)
        {
            _glGetTextureParameterIivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameterIivEXT");
            _glGetTextureParameterIivEXT_fnptr(texture, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureParameterIuiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint*, void> _glGetTextureParameterIuiv_fnptr = &glGetTextureParameterIuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTextureParameterIuiv_Lazy(int texture, uint pname, uint* parameters)
        {
            _glGetTextureParameterIuiv_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameterIuiv");
            _glGetTextureParameterIuiv_fnptr(texture, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureParameterIuivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, uint*, void> _glGetTextureParameterIuivEXT_fnptr = &glGetTextureParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTextureParameterIuivEXT_Lazy(int texture, uint target, uint pname, uint* parameters)
        {
            _glGetTextureParameterIuivEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameterIuivEXT");
            _glGetTextureParameterIuivEXT_fnptr(texture, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureParameteriv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetTextureParameteriv_fnptr = &glGetTextureParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTextureParameteriv_Lazy(int texture, uint pname, int* parameters)
        {
            _glGetTextureParameteriv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameteriv");
            _glGetTextureParameteriv_fnptr(texture, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glGetTextureParameterivEXT_fnptr = &glGetTextureParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTextureParameterivEXT_Lazy(int texture, uint target, uint pname, int* parameters)
        {
            _glGetTextureParameterivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameterivEXT");
            _glGetTextureParameterivEXT_fnptr(texture, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureSamplerHandleARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong> _glGetTextureSamplerHandleARB_fnptr = &glGetTextureSamplerHandleARB_Lazy;
        [UnmanagedCallersOnly]
        private static ulong glGetTextureSamplerHandleARB_Lazy(int texture, int sampler)
        {
            _glGetTextureSamplerHandleARB_fnptr = (delegate* unmanaged<int, int, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetTextureSamplerHandleARB");
            return _glGetTextureSamplerHandleARB_fnptr(texture, sampler);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureSamplerHandleIMG</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong> _glGetTextureSamplerHandleIMG_fnptr = &glGetTextureSamplerHandleIMG_Lazy;
        [UnmanagedCallersOnly]
        private static ulong glGetTextureSamplerHandleIMG_Lazy(int texture, int sampler)
        {
            _glGetTextureSamplerHandleIMG_fnptr = (delegate* unmanaged<int, int, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetTextureSamplerHandleIMG");
            return _glGetTextureSamplerHandleIMG_fnptr(texture, sampler);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureSamplerHandleNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong> _glGetTextureSamplerHandleNV_fnptr = &glGetTextureSamplerHandleNV_Lazy;
        [UnmanagedCallersOnly]
        private static ulong glGetTextureSamplerHandleNV_Lazy(int texture, int sampler)
        {
            _glGetTextureSamplerHandleNV_fnptr = (delegate* unmanaged<int, int, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetTextureSamplerHandleNV");
            return _glGetTextureSamplerHandleNV_fnptr(texture, sampler);
        }
        
        /// <summary><b>[entry point: <c>glGetTextureSubImage</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, int, void*, void> _glGetTextureSubImage_fnptr = &glGetTextureSubImage_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTextureSubImage_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, int bufSize, void* pixels)
        {
            _glGetTextureSubImage_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureSubImage");
            _glGetTextureSubImage_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
        }
        
        /// <summary><b>[entry point: <c>glGetTrackMatrixivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glGetTrackMatrixivNV_fnptr = &glGetTrackMatrixivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTrackMatrixivNV_Lazy(uint target, uint address, uint pname, int* parameters)
        {
            _glGetTrackMatrixivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTrackMatrixivNV");
            _glGetTrackMatrixivNV_fnptr(target, address, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetTransformFeedbacki_v</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glGetTransformFeedbacki_v_fnptr = &glGetTransformFeedbacki_v_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTransformFeedbacki_v_Lazy(int xfb, uint pname, uint index, int* param)
        {
            _glGetTransformFeedbacki_v_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTransformFeedbacki_v");
            _glGetTransformFeedbacki_v_fnptr(xfb, pname, index, param);
        }
        
        /// <summary><b>[entry point: <c>glGetTransformFeedbacki64_v</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, long*, void> _glGetTransformFeedbacki64_v_fnptr = &glGetTransformFeedbacki64_v_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTransformFeedbacki64_v_Lazy(int xfb, uint pname, uint index, long* param)
        {
            _glGetTransformFeedbacki64_v_fnptr = (delegate* unmanaged<int, uint, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTransformFeedbacki64_v");
            _glGetTransformFeedbacki64_v_fnptr(xfb, pname, index, param);
        }
        
        /// <summary><b>[entry point: <c>glGetTransformFeedbackiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetTransformFeedbackiv_fnptr = &glGetTransformFeedbackiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTransformFeedbackiv_Lazy(int xfb, uint pname, int* param)
        {
            _glGetTransformFeedbackiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTransformFeedbackiv");
            _glGetTransformFeedbackiv_fnptr(xfb, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glGetTransformFeedbackVarying</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void> _glGetTransformFeedbackVarying_fnptr = &glGetTransformFeedbackVarying_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTransformFeedbackVarying_Lazy(int program, uint index, int bufSize, int* length, int* size, uint* type, byte* name)
        {
            _glGetTransformFeedbackVarying_fnptr = (delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTransformFeedbackVarying");
            _glGetTransformFeedbackVarying_fnptr(program, index, bufSize, length, size, type, name);
        }
        
        /// <summary><b>[entry point: <c>glGetTransformFeedbackVaryingEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void> _glGetTransformFeedbackVaryingEXT_fnptr = &glGetTransformFeedbackVaryingEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTransformFeedbackVaryingEXT_Lazy(int program, uint index, int bufSize, int* length, int* size, uint* type, byte* name)
        {
            _glGetTransformFeedbackVaryingEXT_fnptr = (delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTransformFeedbackVaryingEXT");
            _glGetTransformFeedbackVaryingEXT_fnptr(program, index, bufSize, length, size, type, name);
        }
        
        /// <summary><b>[entry point: <c>glGetTransformFeedbackVaryingNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetTransformFeedbackVaryingNV_fnptr = &glGetTransformFeedbackVaryingNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTransformFeedbackVaryingNV_Lazy(int program, uint index, int* location)
        {
            _glGetTransformFeedbackVaryingNV_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTransformFeedbackVaryingNV");
            _glGetTransformFeedbackVaryingNV_fnptr(program, index, location);
        }
        
        /// <summary><b>[entry point: <c>glGetTranslatedShaderSourceANGLE</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, byte*, void> _glGetTranslatedShaderSourceANGLE_fnptr = &glGetTranslatedShaderSourceANGLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetTranslatedShaderSourceANGLE_Lazy(int shader, int bufSize, int* length, byte* source)
        {
            _glGetTranslatedShaderSourceANGLE_fnptr = (delegate* unmanaged<int, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTranslatedShaderSourceANGLE");
            _glGetTranslatedShaderSourceANGLE_fnptr(shader, bufSize, length, source);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformBlockIndex</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, uint> _glGetUniformBlockIndex_fnptr = &glGetUniformBlockIndex_Lazy;
        [UnmanagedCallersOnly]
        private static uint glGetUniformBlockIndex_Lazy(int program, byte* uniformBlockName)
        {
            _glGetUniformBlockIndex_fnptr = (delegate* unmanaged<int, byte*, uint>)GLLoader.BindingsContext.GetProcAddress("glGetUniformBlockIndex");
            return _glGetUniformBlockIndex_fnptr(program, uniformBlockName);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformBufferSizeEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int> _glGetUniformBufferSizeEXT_fnptr = &glGetUniformBufferSizeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetUniformBufferSizeEXT_Lazy(int program, int location)
        {
            _glGetUniformBufferSizeEXT_fnptr = (delegate* unmanaged<int, int, int>)GLLoader.BindingsContext.GetProcAddress("glGetUniformBufferSizeEXT");
            return _glGetUniformBufferSizeEXT_fnptr(program, location);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformdv</c>]</b></summary>
        public static delegate* unmanaged<int, int, double*, void> _glGetUniformdv_fnptr = &glGetUniformdv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetUniformdv_Lazy(int program, int location, double* parameters)
        {
            _glGetUniformdv_fnptr = (delegate* unmanaged<int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformdv");
            _glGetUniformdv_fnptr(program, location, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformfv</c>]</b></summary>
        public static delegate* unmanaged<int, int, float*, void> _glGetUniformfv_fnptr = &glGetUniformfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetUniformfv_Lazy(int program, int location, float* parameters)
        {
            _glGetUniformfv_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformfv");
            _glGetUniformfv_fnptr(program, location, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformfvARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, int, float*, void> _glGetUniformfvARB_fnptr = &glGetUniformfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetUniformfvARB_Lazy(IntPtr programObj, int location, float* parameters)
        {
            _glGetUniformfvARB_fnptr = (delegate* unmanaged<IntPtr, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformfvARB");
            _glGetUniformfvARB_fnptr(programObj, location, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformi64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, long*, void> _glGetUniformi64vARB_fnptr = &glGetUniformi64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetUniformi64vARB_Lazy(int program, int location, long* parameters)
        {
            _glGetUniformi64vARB_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformi64vARB");
            _glGetUniformi64vARB_fnptr(program, location, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformi64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, long*, void> _glGetUniformi64vNV_fnptr = &glGetUniformi64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetUniformi64vNV_Lazy(int program, int location, long* parameters)
        {
            _glGetUniformi64vNV_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformi64vNV");
            _glGetUniformi64vNV_fnptr(program, location, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformIndices</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte**, uint*, void> _glGetUniformIndices_fnptr = &glGetUniformIndices_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetUniformIndices_Lazy(int program, int uniformCount, byte** uniformNames, uint* uniformIndices)
        {
            _glGetUniformIndices_fnptr = (delegate* unmanaged<int, int, byte**, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformIndices");
            _glGetUniformIndices_fnptr(program, uniformCount, uniformNames, uniformIndices);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformiv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, void> _glGetUniformiv_fnptr = &glGetUniformiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetUniformiv_Lazy(int program, int location, int* parameters)
        {
            _glGetUniformiv_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformiv");
            _glGetUniformiv_fnptr(program, location, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformivARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, int, int*, void> _glGetUniformivARB_fnptr = &glGetUniformivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetUniformivARB_Lazy(IntPtr programObj, int location, int* parameters)
        {
            _glGetUniformivARB_fnptr = (delegate* unmanaged<IntPtr, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformivARB");
            _glGetUniformivARB_fnptr(programObj, location, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformLocation</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, int> _glGetUniformLocation_fnptr = &glGetUniformLocation_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetUniformLocation_Lazy(int program, byte* name)
        {
            _glGetUniformLocation_fnptr = (delegate* unmanaged<int, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetUniformLocation");
            return _glGetUniformLocation_fnptr(program, name);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformLocationARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, byte*, int> _glGetUniformLocationARB_fnptr = &glGetUniformLocationARB_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetUniformLocationARB_Lazy(IntPtr programObj, byte* name)
        {
            _glGetUniformLocationARB_fnptr = (delegate* unmanaged<IntPtr, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetUniformLocationARB");
            return _glGetUniformLocationARB_fnptr(programObj, name);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformOffsetEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, IntPtr> _glGetUniformOffsetEXT_fnptr = &glGetUniformOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr glGetUniformOffsetEXT_Lazy(int program, int location)
        {
            _glGetUniformOffsetEXT_fnptr = (delegate* unmanaged<int, int, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glGetUniformOffsetEXT");
            return _glGetUniformOffsetEXT_fnptr(program, location);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformSubroutineuiv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, void> _glGetUniformSubroutineuiv_fnptr = &glGetUniformSubroutineuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetUniformSubroutineuiv_Lazy(uint shadertype, int location, uint* parameters)
        {
            _glGetUniformSubroutineuiv_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformSubroutineuiv");
            _glGetUniformSubroutineuiv_fnptr(shadertype, location, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformui64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong*, void> _glGetUniformui64vARB_fnptr = &glGetUniformui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetUniformui64vARB_Lazy(int program, int location, ulong* parameters)
        {
            _glGetUniformui64vARB_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformui64vARB");
            _glGetUniformui64vARB_fnptr(program, location, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformui64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong*, void> _glGetUniformui64vNV_fnptr = &glGetUniformui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetUniformui64vNV_Lazy(int program, int location, ulong* parameters)
        {
            _glGetUniformui64vNV_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformui64vNV");
            _glGetUniformui64vNV_fnptr(program, location, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformuiv</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, void> _glGetUniformuiv_fnptr = &glGetUniformuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetUniformuiv_Lazy(int program, int location, uint* parameters)
        {
            _glGetUniformuiv_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformuiv");
            _glGetUniformuiv_fnptr(program, location, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetUniformuivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, void> _glGetUniformuivEXT_fnptr = &glGetUniformuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetUniformuivEXT_Lazy(int program, int location, uint* parameters)
        {
            _glGetUniformuivEXT_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformuivEXT");
            _glGetUniformuivEXT_fnptr(program, location, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetUnsignedBytei_vEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte*, void> _glGetUnsignedBytei_vEXT_fnptr = &glGetUnsignedBytei_vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetUnsignedBytei_vEXT_Lazy(uint target, uint index, byte* data)
        {
            _glGetUnsignedBytei_vEXT_fnptr = (delegate* unmanaged<uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUnsignedBytei_vEXT");
            _glGetUnsignedBytei_vEXT_fnptr(target, index, data);
        }
        
        /// <summary><b>[entry point: <c>glGetUnsignedBytevEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, byte*, void> _glGetUnsignedBytevEXT_fnptr = &glGetUnsignedBytevEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetUnsignedBytevEXT_Lazy(uint pname, byte* data)
        {
            _glGetUnsignedBytevEXT_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUnsignedBytevEXT");
            _glGetUnsignedBytevEXT_fnptr(pname, data);
        }
        
        /// <summary><b>[entry point: <c>glGetVariantArrayObjectfvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetVariantArrayObjectfvATI_fnptr = &glGetVariantArrayObjectfvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVariantArrayObjectfvATI_Lazy(uint id, uint pname, float* parameters)
        {
            _glGetVariantArrayObjectfvATI_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVariantArrayObjectfvATI");
            _glGetVariantArrayObjectfvATI_fnptr(id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVariantArrayObjectivATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetVariantArrayObjectivATI_fnptr = &glGetVariantArrayObjectivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVariantArrayObjectivATI_Lazy(uint id, uint pname, int* parameters)
        {
            _glGetVariantArrayObjectivATI_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVariantArrayObjectivATI");
            _glGetVariantArrayObjectivATI_fnptr(id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVariantBooleanvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte*, void> _glGetVariantBooleanvEXT_fnptr = &glGetVariantBooleanvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVariantBooleanvEXT_Lazy(uint id, uint value, byte* data)
        {
            _glGetVariantBooleanvEXT_fnptr = (delegate* unmanaged<uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVariantBooleanvEXT");
            _glGetVariantBooleanvEXT_fnptr(id, value, data);
        }
        
        /// <summary><b>[entry point: <c>glGetVariantFloatvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetVariantFloatvEXT_fnptr = &glGetVariantFloatvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVariantFloatvEXT_Lazy(uint id, uint value, float* data)
        {
            _glGetVariantFloatvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVariantFloatvEXT");
            _glGetVariantFloatvEXT_fnptr(id, value, data);
        }
        
        /// <summary><b>[entry point: <c>glGetVariantIntegervEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetVariantIntegervEXT_fnptr = &glGetVariantIntegervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVariantIntegervEXT_Lazy(uint id, uint value, int* data)
        {
            _glGetVariantIntegervEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVariantIntegervEXT");
            _glGetVariantIntegervEXT_fnptr(id, value, data);
        }
        
        /// <summary><b>[entry point: <c>glGetVariantPointervEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void**, void> _glGetVariantPointervEXT_fnptr = &glGetVariantPointervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVariantPointervEXT_Lazy(uint id, uint value, void** data)
        {
            _glGetVariantPointervEXT_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetVariantPointervEXT");
            _glGetVariantPointervEXT_fnptr(id, value, data);
        }
        
        /// <summary><b>[entry point: <c>glGetVaryingLocationNV</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, int> _glGetVaryingLocationNV_fnptr = &glGetVaryingLocationNV_Lazy;
        [UnmanagedCallersOnly]
        private static int glGetVaryingLocationNV_Lazy(int program, byte* name)
        {
            _glGetVaryingLocationNV_fnptr = (delegate* unmanaged<int, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetVaryingLocationNV");
            return _glGetVaryingLocationNV_fnptr(program, name);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexArrayIndexed64iv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, long*, void> _glGetVertexArrayIndexed64iv_fnptr = &glGetVertexArrayIndexed64iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexArrayIndexed64iv_Lazy(int vaobj, uint index, uint pname, long* param)
        {
            _glGetVertexArrayIndexed64iv_fnptr = (delegate* unmanaged<int, uint, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexArrayIndexed64iv");
            _glGetVertexArrayIndexed64iv_fnptr(vaobj, index, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexArrayIndexediv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glGetVertexArrayIndexediv_fnptr = &glGetVertexArrayIndexediv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexArrayIndexediv_Lazy(int vaobj, uint index, uint pname, int* param)
        {
            _glGetVertexArrayIndexediv_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexArrayIndexediv");
            _glGetVertexArrayIndexediv_fnptr(vaobj, index, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexArrayIntegeri_vEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glGetVertexArrayIntegeri_vEXT_fnptr = &glGetVertexArrayIntegeri_vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexArrayIntegeri_vEXT_Lazy(int vaobj, uint index, uint pname, int* param)
        {
            _glGetVertexArrayIntegeri_vEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexArrayIntegeri_vEXT");
            _glGetVertexArrayIntegeri_vEXT_fnptr(vaobj, index, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexArrayIntegervEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetVertexArrayIntegervEXT_fnptr = &glGetVertexArrayIntegervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexArrayIntegervEXT_Lazy(int vaobj, uint pname, int* param)
        {
            _glGetVertexArrayIntegervEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexArrayIntegervEXT");
            _glGetVertexArrayIntegervEXT_fnptr(vaobj, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexArrayiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glGetVertexArrayiv_fnptr = &glGetVertexArrayiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexArrayiv_Lazy(int vaobj, uint pname, int* param)
        {
            _glGetVertexArrayiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexArrayiv");
            _glGetVertexArrayiv_fnptr(vaobj, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexArrayPointeri_vEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, void**, void> _glGetVertexArrayPointeri_vEXT_fnptr = &glGetVertexArrayPointeri_vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexArrayPointeri_vEXT_Lazy(int vaobj, uint index, uint pname, void** param)
        {
            _glGetVertexArrayPointeri_vEXT_fnptr = (delegate* unmanaged<int, uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexArrayPointeri_vEXT");
            _glGetVertexArrayPointeri_vEXT_fnptr(vaobj, index, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexArrayPointervEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void**, void> _glGetVertexArrayPointervEXT_fnptr = &glGetVertexArrayPointervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexArrayPointervEXT_Lazy(int vaobj, uint pname, void** param)
        {
            _glGetVertexArrayPointervEXT_fnptr = (delegate* unmanaged<int, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexArrayPointervEXT");
            _glGetVertexArrayPointervEXT_fnptr(vaobj, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribArrayObjectfvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetVertexAttribArrayObjectfvATI_fnptr = &glGetVertexAttribArrayObjectfvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribArrayObjectfvATI_Lazy(uint index, uint pname, float* parameters)
        {
            _glGetVertexAttribArrayObjectfvATI_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribArrayObjectfvATI");
            _glGetVertexAttribArrayObjectfvATI_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribArrayObjectivATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetVertexAttribArrayObjectivATI_fnptr = &glGetVertexAttribArrayObjectivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribArrayObjectivATI_Lazy(uint index, uint pname, int* parameters)
        {
            _glGetVertexAttribArrayObjectivATI_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribArrayObjectivATI");
            _glGetVertexAttribArrayObjectivATI_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribdv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glGetVertexAttribdv_fnptr = &glGetVertexAttribdv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribdv_Lazy(uint index, uint pname, double* parameters)
        {
            _glGetVertexAttribdv_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribdv");
            _glGetVertexAttribdv_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribdvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glGetVertexAttribdvARB_fnptr = &glGetVertexAttribdvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribdvARB_Lazy(uint index, uint pname, double* parameters)
        {
            _glGetVertexAttribdvARB_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribdvARB");
            _glGetVertexAttribdvARB_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribdvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glGetVertexAttribdvNV_fnptr = &glGetVertexAttribdvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribdvNV_Lazy(uint index, uint pname, double* parameters)
        {
            _glGetVertexAttribdvNV_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribdvNV");
            _glGetVertexAttribdvNV_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetVertexAttribfv_fnptr = &glGetVertexAttribfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribfv_Lazy(uint index, uint pname, float* parameters)
        {
            _glGetVertexAttribfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribfv");
            _glGetVertexAttribfv_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribfvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetVertexAttribfvARB_fnptr = &glGetVertexAttribfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribfvARB_Lazy(uint index, uint pname, float* parameters)
        {
            _glGetVertexAttribfvARB_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribfvARB");
            _glGetVertexAttribfvARB_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glGetVertexAttribfvNV_fnptr = &glGetVertexAttribfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribfvNV_Lazy(uint index, uint pname, float* parameters)
        {
            _glGetVertexAttribfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribfvNV");
            _glGetVertexAttribfvNV_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribIiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetVertexAttribIiv_fnptr = &glGetVertexAttribIiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribIiv_Lazy(uint index, uint pname, int* parameters)
        {
            _glGetVertexAttribIiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribIiv");
            _glGetVertexAttribIiv_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribIivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetVertexAttribIivEXT_fnptr = &glGetVertexAttribIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribIivEXT_Lazy(uint index, uint pname, int* parameters)
        {
            _glGetVertexAttribIivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribIivEXT");
            _glGetVertexAttribIivEXT_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribIuiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glGetVertexAttribIuiv_fnptr = &glGetVertexAttribIuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribIuiv_Lazy(uint index, uint pname, uint* parameters)
        {
            _glGetVertexAttribIuiv_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribIuiv");
            _glGetVertexAttribIuiv_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribIuivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glGetVertexAttribIuivEXT_fnptr = &glGetVertexAttribIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribIuivEXT_Lazy(uint index, uint pname, uint* parameters)
        {
            _glGetVertexAttribIuivEXT_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribIuivEXT");
            _glGetVertexAttribIuivEXT_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetVertexAttribiv_fnptr = &glGetVertexAttribiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribiv_Lazy(uint index, uint pname, int* parameters)
        {
            _glGetVertexAttribiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribiv");
            _glGetVertexAttribiv_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribivARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetVertexAttribivARB_fnptr = &glGetVertexAttribivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribivARB_Lazy(uint index, uint pname, int* parameters)
        {
            _glGetVertexAttribivARB_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribivARB");
            _glGetVertexAttribivARB_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetVertexAttribivNV_fnptr = &glGetVertexAttribivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribivNV_Lazy(uint index, uint pname, int* parameters)
        {
            _glGetVertexAttribivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribivNV");
            _glGetVertexAttribivNV_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribLdv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glGetVertexAttribLdv_fnptr = &glGetVertexAttribLdv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribLdv_Lazy(uint index, uint pname, double* parameters)
        {
            _glGetVertexAttribLdv_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribLdv");
            _glGetVertexAttribLdv_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribLdvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glGetVertexAttribLdvEXT_fnptr = &glGetVertexAttribLdvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribLdvEXT_Lazy(uint index, uint pname, double* parameters)
        {
            _glGetVertexAttribLdvEXT_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribLdvEXT");
            _glGetVertexAttribLdvEXT_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribLi64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, long*, void> _glGetVertexAttribLi64vNV_fnptr = &glGetVertexAttribLi64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribLi64vNV_Lazy(uint index, uint pname, long* parameters)
        {
            _glGetVertexAttribLi64vNV_fnptr = (delegate* unmanaged<uint, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribLi64vNV");
            _glGetVertexAttribLi64vNV_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribLui64vARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, ulong*, void> _glGetVertexAttribLui64vARB_fnptr = &glGetVertexAttribLui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribLui64vARB_Lazy(uint index, uint pname, ulong* parameters)
        {
            _glGetVertexAttribLui64vARB_fnptr = (delegate* unmanaged<uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribLui64vARB");
            _glGetVertexAttribLui64vARB_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribLui64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, ulong*, void> _glGetVertexAttribLui64vNV_fnptr = &glGetVertexAttribLui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribLui64vNV_Lazy(uint index, uint pname, ulong* parameters)
        {
            _glGetVertexAttribLui64vNV_fnptr = (delegate* unmanaged<uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribLui64vNV");
            _glGetVertexAttribLui64vNV_fnptr(index, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribPointerv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void**, void> _glGetVertexAttribPointerv_fnptr = &glGetVertexAttribPointerv_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribPointerv_Lazy(uint index, uint pname, void** pointer)
        {
            _glGetVertexAttribPointerv_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribPointerv");
            _glGetVertexAttribPointerv_fnptr(index, pname, pointer);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribPointervARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void**, void> _glGetVertexAttribPointervARB_fnptr = &glGetVertexAttribPointervARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribPointervARB_Lazy(uint index, uint pname, void** pointer)
        {
            _glGetVertexAttribPointervARB_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribPointervARB");
            _glGetVertexAttribPointervARB_fnptr(index, pname, pointer);
        }
        
        /// <summary><b>[entry point: <c>glGetVertexAttribPointervNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void**, void> _glGetVertexAttribPointervNV_fnptr = &glGetVertexAttribPointervNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVertexAttribPointervNV_Lazy(uint index, uint pname, void** pointer)
        {
            _glGetVertexAttribPointervNV_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribPointervNV");
            _glGetVertexAttribPointervNV_fnptr(index, pname, pointer);
        }
        
        /// <summary><b>[entry point: <c>glGetVideoCaptureivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetVideoCaptureivNV_fnptr = &glGetVideoCaptureivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVideoCaptureivNV_Lazy(uint video_capture_slot, uint pname, int* parameters)
        {
            _glGetVideoCaptureivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideoCaptureivNV");
            _glGetVideoCaptureivNV_fnptr(video_capture_slot, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVideoCaptureStreamdvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, double*, void> _glGetVideoCaptureStreamdvNV_fnptr = &glGetVideoCaptureStreamdvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVideoCaptureStreamdvNV_Lazy(uint video_capture_slot, uint stream, uint pname, double* parameters)
        {
            _glGetVideoCaptureStreamdvNV_fnptr = (delegate* unmanaged<uint, uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideoCaptureStreamdvNV");
            _glGetVideoCaptureStreamdvNV_fnptr(video_capture_slot, stream, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVideoCaptureStreamfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float*, void> _glGetVideoCaptureStreamfvNV_fnptr = &glGetVideoCaptureStreamfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVideoCaptureStreamfvNV_Lazy(uint video_capture_slot, uint stream, uint pname, float* parameters)
        {
            _glGetVideoCaptureStreamfvNV_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideoCaptureStreamfvNV");
            _glGetVideoCaptureStreamfvNV_fnptr(video_capture_slot, stream, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVideoCaptureStreamivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glGetVideoCaptureStreamivNV_fnptr = &glGetVideoCaptureStreamivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVideoCaptureStreamivNV_Lazy(uint video_capture_slot, uint stream, uint pname, int* parameters)
        {
            _glGetVideoCaptureStreamivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideoCaptureStreamivNV");
            _glGetVideoCaptureStreamivNV_fnptr(video_capture_slot, stream, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVideoi64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, long*, void> _glGetVideoi64vNV_fnptr = &glGetVideoi64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVideoi64vNV_Lazy(uint video_slot, uint pname, long* parameters)
        {
            _glGetVideoi64vNV_fnptr = (delegate* unmanaged<uint, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideoi64vNV");
            _glGetVideoi64vNV_fnptr(video_slot, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVideoivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glGetVideoivNV_fnptr = &glGetVideoivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVideoivNV_Lazy(uint video_slot, uint pname, int* parameters)
        {
            _glGetVideoivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideoivNV");
            _glGetVideoivNV_fnptr(video_slot, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVideoui64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, ulong*, void> _glGetVideoui64vNV_fnptr = &glGetVideoui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVideoui64vNV_Lazy(uint video_slot, uint pname, ulong* parameters)
        {
            _glGetVideoui64vNV_fnptr = (delegate* unmanaged<uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideoui64vNV");
            _glGetVideoui64vNV_fnptr(video_slot, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVideouivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glGetVideouivNV_fnptr = &glGetVideouivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glGetVideouivNV_Lazy(uint video_slot, uint pname, uint* parameters)
        {
            _glGetVideouivNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideouivNV");
            _glGetVideouivNV_fnptr(video_slot, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glGetVkProcAddrNV</c>]</b></summary>
        public static delegate* unmanaged<byte*, IntPtr> _glGetVkProcAddrNV_fnptr = &glGetVkProcAddrNV_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr glGetVkProcAddrNV_Lazy(byte* name)
        {
            _glGetVkProcAddrNV_fnptr = (delegate* unmanaged<byte*, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glGetVkProcAddrNV");
            return _glGetVkProcAddrNV_fnptr(name);
        }
        
        /// <summary><b>[entry point: <c>glGlobalAlphaFactorbSUN</c>]</b></summary>
        public static delegate* unmanaged<sbyte, void> _glGlobalAlphaFactorbSUN_fnptr = &glGlobalAlphaFactorbSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glGlobalAlphaFactorbSUN_Lazy(sbyte factor)
        {
            _glGlobalAlphaFactorbSUN_fnptr = (delegate* unmanaged<sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactorbSUN");
            _glGlobalAlphaFactorbSUN_fnptr(factor);
        }
        
        /// <summary><b>[entry point: <c>glGlobalAlphaFactordSUN</c>]</b></summary>
        public static delegate* unmanaged<double, void> _glGlobalAlphaFactordSUN_fnptr = &glGlobalAlphaFactordSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glGlobalAlphaFactordSUN_Lazy(double factor)
        {
            _glGlobalAlphaFactordSUN_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactordSUN");
            _glGlobalAlphaFactordSUN_fnptr(factor);
        }
        
        /// <summary><b>[entry point: <c>glGlobalAlphaFactorfSUN</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glGlobalAlphaFactorfSUN_fnptr = &glGlobalAlphaFactorfSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glGlobalAlphaFactorfSUN_Lazy(float factor)
        {
            _glGlobalAlphaFactorfSUN_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactorfSUN");
            _glGlobalAlphaFactorfSUN_fnptr(factor);
        }
        
        /// <summary><b>[entry point: <c>glGlobalAlphaFactoriSUN</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glGlobalAlphaFactoriSUN_fnptr = &glGlobalAlphaFactoriSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glGlobalAlphaFactoriSUN_Lazy(int factor)
        {
            _glGlobalAlphaFactoriSUN_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactoriSUN");
            _glGlobalAlphaFactoriSUN_fnptr(factor);
        }
        
        /// <summary><b>[entry point: <c>glGlobalAlphaFactorsSUN</c>]</b></summary>
        public static delegate* unmanaged<short, void> _glGlobalAlphaFactorsSUN_fnptr = &glGlobalAlphaFactorsSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glGlobalAlphaFactorsSUN_Lazy(short factor)
        {
            _glGlobalAlphaFactorsSUN_fnptr = (delegate* unmanaged<short, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactorsSUN");
            _glGlobalAlphaFactorsSUN_fnptr(factor);
        }
        
        /// <summary><b>[entry point: <c>glGlobalAlphaFactorubSUN</c>]</b></summary>
        public static delegate* unmanaged<byte, void> _glGlobalAlphaFactorubSUN_fnptr = &glGlobalAlphaFactorubSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glGlobalAlphaFactorubSUN_Lazy(byte factor)
        {
            _glGlobalAlphaFactorubSUN_fnptr = (delegate* unmanaged<byte, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactorubSUN");
            _glGlobalAlphaFactorubSUN_fnptr(factor);
        }
        
        /// <summary><b>[entry point: <c>glGlobalAlphaFactoruiSUN</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glGlobalAlphaFactoruiSUN_fnptr = &glGlobalAlphaFactoruiSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glGlobalAlphaFactoruiSUN_Lazy(uint factor)
        {
            _glGlobalAlphaFactoruiSUN_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactoruiSUN");
            _glGlobalAlphaFactoruiSUN_fnptr(factor);
        }
        
        /// <summary><b>[entry point: <c>glGlobalAlphaFactorusSUN</c>]</b></summary>
        public static delegate* unmanaged<ushort, void> _glGlobalAlphaFactorusSUN_fnptr = &glGlobalAlphaFactorusSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glGlobalAlphaFactorusSUN_Lazy(ushort factor)
        {
            _glGlobalAlphaFactorusSUN_fnptr = (delegate* unmanaged<ushort, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactorusSUN");
            _glGlobalAlphaFactorusSUN_fnptr(factor);
        }
        
        /// <summary><b>[entry point: <c>glHint</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glHint_fnptr = &glHint_Lazy;
        [UnmanagedCallersOnly]
        private static void glHint_Lazy(uint target, uint mode)
        {
            _glHint_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glHint");
            _glHint_fnptr(target, mode);
        }
        
        /// <summary><b>[entry point: <c>glHintPGI</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glHintPGI_fnptr = &glHintPGI_Lazy;
        [UnmanagedCallersOnly]
        private static void glHintPGI_Lazy(uint target, int mode)
        {
            _glHintPGI_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glHintPGI");
            _glHintPGI_fnptr(target, mode);
        }
        
        /// <summary><b>[entry point: <c>glHistogram</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, byte, void> _glHistogram_fnptr = &glHistogram_Lazy;
        [UnmanagedCallersOnly]
        private static void glHistogram_Lazy(uint target, int width, uint internalformat, byte sink)
        {
            _glHistogram_fnptr = (delegate* unmanaged<uint, int, uint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glHistogram");
            _glHistogram_fnptr(target, width, internalformat, sink);
        }
        
        /// <summary><b>[entry point: <c>glHistogramEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, byte, void> _glHistogramEXT_fnptr = &glHistogramEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glHistogramEXT_Lazy(uint target, int width, uint internalformat, byte sink)
        {
            _glHistogramEXT_fnptr = (delegate* unmanaged<uint, int, uint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glHistogramEXT");
            _glHistogramEXT_fnptr(target, width, internalformat, sink);
        }
        
        /// <summary><b>[entry point: <c>glIglooInterfaceSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, void*, void> _glIglooInterfaceSGIX_fnptr = &glIglooInterfaceSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glIglooInterfaceSGIX_Lazy(uint pname, void* parameters)
        {
            _glIglooInterfaceSGIX_fnptr = (delegate* unmanaged<uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glIglooInterfaceSGIX");
            _glIglooInterfaceSGIX_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glImageTransformParameterfHP</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, void> _glImageTransformParameterfHP_fnptr = &glImageTransformParameterfHP_Lazy;
        [UnmanagedCallersOnly]
        private static void glImageTransformParameterfHP_Lazy(uint target, uint pname, float param)
        {
            _glImageTransformParameterfHP_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glImageTransformParameterfHP");
            _glImageTransformParameterfHP_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glImageTransformParameterfvHP</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glImageTransformParameterfvHP_fnptr = &glImageTransformParameterfvHP_Lazy;
        [UnmanagedCallersOnly]
        private static void glImageTransformParameterfvHP_Lazy(uint target, uint pname, float* parameters)
        {
            _glImageTransformParameterfvHP_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glImageTransformParameterfvHP");
            _glImageTransformParameterfvHP_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glImageTransformParameteriHP</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glImageTransformParameteriHP_fnptr = &glImageTransformParameteriHP_Lazy;
        [UnmanagedCallersOnly]
        private static void glImageTransformParameteriHP_Lazy(uint target, uint pname, int param)
        {
            _glImageTransformParameteriHP_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glImageTransformParameteriHP");
            _glImageTransformParameteriHP_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glImageTransformParameterivHP</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glImageTransformParameterivHP_fnptr = &glImageTransformParameterivHP_Lazy;
        [UnmanagedCallersOnly]
        private static void glImageTransformParameterivHP_Lazy(uint target, uint pname, int* parameters)
        {
            _glImageTransformParameterivHP_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glImageTransformParameterivHP");
            _glImageTransformParameterivHP_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glImportMemoryFdEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong, uint, int, void> _glImportMemoryFdEXT_fnptr = &glImportMemoryFdEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glImportMemoryFdEXT_Lazy(uint memory, ulong size, uint handleType, int fd)
        {
            _glImportMemoryFdEXT_fnptr = (delegate* unmanaged<uint, ulong, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glImportMemoryFdEXT");
            _glImportMemoryFdEXT_fnptr(memory, size, handleType, fd);
        }
        
        /// <summary><b>[entry point: <c>glImportMemoryWin32HandleEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong, uint, void*, void> _glImportMemoryWin32HandleEXT_fnptr = &glImportMemoryWin32HandleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glImportMemoryWin32HandleEXT_Lazy(uint memory, ulong size, uint handleType, void* handle)
        {
            _glImportMemoryWin32HandleEXT_fnptr = (delegate* unmanaged<uint, ulong, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glImportMemoryWin32HandleEXT");
            _glImportMemoryWin32HandleEXT_fnptr(memory, size, handleType, handle);
        }
        
        /// <summary><b>[entry point: <c>glImportMemoryWin32NameEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong, uint, void*, void> _glImportMemoryWin32NameEXT_fnptr = &glImportMemoryWin32NameEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glImportMemoryWin32NameEXT_Lazy(uint memory, ulong size, uint handleType, void* name)
        {
            _glImportMemoryWin32NameEXT_fnptr = (delegate* unmanaged<uint, ulong, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glImportMemoryWin32NameEXT");
            _glImportMemoryWin32NameEXT_fnptr(memory, size, handleType, name);
        }
        
        /// <summary><b>[entry point: <c>glImportSemaphoreFdEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glImportSemaphoreFdEXT_fnptr = &glImportSemaphoreFdEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glImportSemaphoreFdEXT_Lazy(uint semaphore, uint handleType, int fd)
        {
            _glImportSemaphoreFdEXT_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glImportSemaphoreFdEXT");
            _glImportSemaphoreFdEXT_fnptr(semaphore, handleType, fd);
        }
        
        /// <summary><b>[entry point: <c>glImportSemaphoreWin32HandleEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, void> _glImportSemaphoreWin32HandleEXT_fnptr = &glImportSemaphoreWin32HandleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glImportSemaphoreWin32HandleEXT_Lazy(uint semaphore, uint handleType, void* handle)
        {
            _glImportSemaphoreWin32HandleEXT_fnptr = (delegate* unmanaged<uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glImportSemaphoreWin32HandleEXT");
            _glImportSemaphoreWin32HandleEXT_fnptr(semaphore, handleType, handle);
        }
        
        /// <summary><b>[entry point: <c>glImportSemaphoreWin32NameEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, void> _glImportSemaphoreWin32NameEXT_fnptr = &glImportSemaphoreWin32NameEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glImportSemaphoreWin32NameEXT_Lazy(uint semaphore, uint handleType, void* name)
        {
            _glImportSemaphoreWin32NameEXT_fnptr = (delegate* unmanaged<uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glImportSemaphoreWin32NameEXT");
            _glImportSemaphoreWin32NameEXT_fnptr(semaphore, handleType, name);
        }
        
        /// <summary><b>[entry point: <c>glImportSyncEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, IntPtr, uint, IntPtr> _glImportSyncEXT_fnptr = &glImportSyncEXT_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr glImportSyncEXT_Lazy(uint external_sync_type, IntPtr external_sync, uint flags)
        {
            _glImportSyncEXT_fnptr = (delegate* unmanaged<uint, IntPtr, uint, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glImportSyncEXT");
            return _glImportSyncEXT_fnptr(external_sync_type, external_sync, flags);
        }
        
        /// <summary><b>[entry point: <c>glIndexd</c>]</b></summary>
        public static delegate* unmanaged<double, void> _glIndexd_fnptr = &glIndexd_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexd_Lazy(double c)
        {
            _glIndexd_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glIndexd");
            _glIndexd_fnptr(c);
        }
        
        /// <summary><b>[entry point: <c>glIndexdv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glIndexdv_fnptr = &glIndexdv_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexdv_Lazy(double* c)
        {
            _glIndexdv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexdv");
            _glIndexdv_fnptr(c);
        }
        
        /// <summary><b>[entry point: <c>glIndexf</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glIndexf_fnptr = &glIndexf_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexf_Lazy(float c)
        {
            _glIndexf_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glIndexf");
            _glIndexf_fnptr(c);
        }
        
        /// <summary><b>[entry point: <c>glIndexFormatNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glIndexFormatNV_fnptr = &glIndexFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexFormatNV_Lazy(uint type, int stride)
        {
            _glIndexFormatNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glIndexFormatNV");
            _glIndexFormatNV_fnptr(type, stride);
        }
        
        /// <summary><b>[entry point: <c>glIndexFuncEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glIndexFuncEXT_fnptr = &glIndexFuncEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexFuncEXT_Lazy(uint func, float reference)
        {
            _glIndexFuncEXT_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glIndexFuncEXT");
            _glIndexFuncEXT_fnptr(func, reference);
        }
        
        /// <summary><b>[entry point: <c>glIndexfv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glIndexfv_fnptr = &glIndexfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexfv_Lazy(float* c)
        {
            _glIndexfv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexfv");
            _glIndexfv_fnptr(c);
        }
        
        /// <summary><b>[entry point: <c>glIndexi</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glIndexi_fnptr = &glIndexi_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexi_Lazy(int c)
        {
            _glIndexi_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glIndexi");
            _glIndexi_fnptr(c);
        }
        
        /// <summary><b>[entry point: <c>glIndexiv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glIndexiv_fnptr = &glIndexiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexiv_Lazy(int* c)
        {
            _glIndexiv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexiv");
            _glIndexiv_fnptr(c);
        }
        
        /// <summary><b>[entry point: <c>glIndexMask</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glIndexMask_fnptr = &glIndexMask_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexMask_Lazy(uint mask)
        {
            _glIndexMask_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glIndexMask");
            _glIndexMask_fnptr(mask);
        }
        
        /// <summary><b>[entry point: <c>glIndexMaterialEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glIndexMaterialEXT_fnptr = &glIndexMaterialEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexMaterialEXT_Lazy(uint face, uint mode)
        {
            _glIndexMaterialEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glIndexMaterialEXT");
            _glIndexMaterialEXT_fnptr(face, mode);
        }
        
        /// <summary><b>[entry point: <c>glIndexPointer</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void*, void> _glIndexPointer_fnptr = &glIndexPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexPointer_Lazy(uint type, int stride, void* pointer)
        {
            _glIndexPointer_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexPointer");
            _glIndexPointer_fnptr(type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glIndexPointerEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void*, void> _glIndexPointerEXT_fnptr = &glIndexPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexPointerEXT_Lazy(uint type, int stride, int count, void* pointer)
        {
            _glIndexPointerEXT_fnptr = (delegate* unmanaged<uint, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexPointerEXT");
            _glIndexPointerEXT_fnptr(type, stride, count, pointer);
        }
        
        /// <summary><b>[entry point: <c>glIndexPointerListIBM</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void**, int, void> _glIndexPointerListIBM_fnptr = &glIndexPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexPointerListIBM_Lazy(uint type, int stride, void** pointer, int ptrstride)
        {
            _glIndexPointerListIBM_fnptr = (delegate* unmanaged<uint, int, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glIndexPointerListIBM");
            _glIndexPointerListIBM_fnptr(type, stride, pointer, ptrstride);
        }
        
        /// <summary><b>[entry point: <c>glIndexs</c>]</b></summary>
        public static delegate* unmanaged<short, void> _glIndexs_fnptr = &glIndexs_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexs_Lazy(short c)
        {
            _glIndexs_fnptr = (delegate* unmanaged<short, void>)GLLoader.BindingsContext.GetProcAddress("glIndexs");
            _glIndexs_fnptr(c);
        }
        
        /// <summary><b>[entry point: <c>glIndexsv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glIndexsv_fnptr = &glIndexsv_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexsv_Lazy(short* c)
        {
            _glIndexsv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexsv");
            _glIndexsv_fnptr(c);
        }
        
        /// <summary><b>[entry point: <c>glIndexub</c>]</b></summary>
        public static delegate* unmanaged<byte, void> _glIndexub_fnptr = &glIndexub_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexub_Lazy(byte c)
        {
            _glIndexub_fnptr = (delegate* unmanaged<byte, void>)GLLoader.BindingsContext.GetProcAddress("glIndexub");
            _glIndexub_fnptr(c);
        }
        
        /// <summary><b>[entry point: <c>glIndexubv</c>]</b></summary>
        public static delegate* unmanaged<byte*, void> _glIndexubv_fnptr = &glIndexubv_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexubv_Lazy(byte* c)
        {
            _glIndexubv_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexubv");
            _glIndexubv_fnptr(c);
        }
        
        /// <summary><b>[entry point: <c>glIndexxOES</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glIndexxOES_fnptr = &glIndexxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexxOES_Lazy(int component)
        {
            _glIndexxOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glIndexxOES");
            _glIndexxOES_fnptr(component);
        }
        
        /// <summary><b>[entry point: <c>glIndexxvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glIndexxvOES_fnptr = &glIndexxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glIndexxvOES_Lazy(int* component)
        {
            _glIndexxvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexxvOES");
            _glIndexxvOES_fnptr(component);
        }
        
        /// <summary><b>[entry point: <c>glInitNames</c>]</b></summary>
        public static delegate* unmanaged<void> _glInitNames_fnptr = &glInitNames_Lazy;
        [UnmanagedCallersOnly]
        private static void glInitNames_Lazy()
        {
            _glInitNames_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glInitNames");
            _glInitNames_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glInsertComponentEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glInsertComponentEXT_fnptr = &glInsertComponentEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glInsertComponentEXT_Lazy(uint res, uint src, uint num)
        {
            _glInsertComponentEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glInsertComponentEXT");
            _glInsertComponentEXT_fnptr(res, src, num);
        }
        
        /// <summary><b>[entry point: <c>glInsertEventMarkerEXT</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, void> _glInsertEventMarkerEXT_fnptr = &glInsertEventMarkerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glInsertEventMarkerEXT_Lazy(int length, byte* marker)
        {
            _glInsertEventMarkerEXT_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glInsertEventMarkerEXT");
            _glInsertEventMarkerEXT_fnptr(length, marker);
        }
        
        /// <summary><b>[entry point: <c>glInstrumentsBufferSGIX</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glInstrumentsBufferSGIX_fnptr = &glInstrumentsBufferSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glInstrumentsBufferSGIX_Lazy(int size, int* buffer)
        {
            _glInstrumentsBufferSGIX_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glInstrumentsBufferSGIX");
            _glInstrumentsBufferSGIX_fnptr(size, buffer);
        }
        
        /// <summary><b>[entry point: <c>glInterleavedArrays</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void*, void> _glInterleavedArrays_fnptr = &glInterleavedArrays_Lazy;
        [UnmanagedCallersOnly]
        private static void glInterleavedArrays_Lazy(uint format, int stride, void* pointer)
        {
            _glInterleavedArrays_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glInterleavedArrays");
            _glInterleavedArrays_fnptr(format, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glInterpolatePathsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float, void> _glInterpolatePathsNV_fnptr = &glInterpolatePathsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glInterpolatePathsNV_Lazy(uint resultPath, uint pathA, uint pathB, float weight)
        {
            _glInterpolatePathsNV_fnptr = (delegate* unmanaged<uint, uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glInterpolatePathsNV");
            _glInterpolatePathsNV_fnptr(resultPath, pathA, pathB, weight);
        }
        
        /// <summary><b>[entry point: <c>glInvalidateBufferData</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glInvalidateBufferData_fnptr = &glInvalidateBufferData_Lazy;
        [UnmanagedCallersOnly]
        private static void glInvalidateBufferData_Lazy(int buffer)
        {
            _glInvalidateBufferData_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateBufferData");
            _glInvalidateBufferData_fnptr(buffer);
        }
        
        /// <summary><b>[entry point: <c>glInvalidateBufferSubData</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr, nint, void> _glInvalidateBufferSubData_fnptr = &glInvalidateBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void glInvalidateBufferSubData_Lazy(int buffer, IntPtr offset, nint length)
        {
            _glInvalidateBufferSubData_fnptr = (delegate* unmanaged<int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateBufferSubData");
            _glInvalidateBufferSubData_fnptr(buffer, offset, length);
        }
        
        /// <summary><b>[entry point: <c>glInvalidateFramebuffer</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, void> _glInvalidateFramebuffer_fnptr = &glInvalidateFramebuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glInvalidateFramebuffer_Lazy(uint target, int numAttachments, uint* attachments)
        {
            _glInvalidateFramebuffer_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateFramebuffer");
            _glInvalidateFramebuffer_fnptr(target, numAttachments, attachments);
        }
        
        /// <summary><b>[entry point: <c>glInvalidateNamedFramebufferData</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, void> _glInvalidateNamedFramebufferData_fnptr = &glInvalidateNamedFramebufferData_Lazy;
        [UnmanagedCallersOnly]
        private static void glInvalidateNamedFramebufferData_Lazy(int framebuffer, int numAttachments, uint* attachments)
        {
            _glInvalidateNamedFramebufferData_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateNamedFramebufferData");
            _glInvalidateNamedFramebufferData_fnptr(framebuffer, numAttachments, attachments);
        }
        
        /// <summary><b>[entry point: <c>glInvalidateNamedFramebufferSubData</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, int, int, int, int, void> _glInvalidateNamedFramebufferSubData_fnptr = &glInvalidateNamedFramebufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void glInvalidateNamedFramebufferSubData_Lazy(int framebuffer, int numAttachments, uint* attachments, int x, int y, int width, int height)
        {
            _glInvalidateNamedFramebufferSubData_fnptr = (delegate* unmanaged<int, int, uint*, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateNamedFramebufferSubData");
            _glInvalidateNamedFramebufferSubData_fnptr(framebuffer, numAttachments, attachments, x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glInvalidateSubFramebuffer</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, int, int, int, int, void> _glInvalidateSubFramebuffer_fnptr = &glInvalidateSubFramebuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glInvalidateSubFramebuffer_Lazy(uint target, int numAttachments, uint* attachments, int x, int y, int width, int height)
        {
            _glInvalidateSubFramebuffer_fnptr = (delegate* unmanaged<uint, int, uint*, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateSubFramebuffer");
            _glInvalidateSubFramebuffer_fnptr(target, numAttachments, attachments, x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glInvalidateTexImage</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glInvalidateTexImage_fnptr = &glInvalidateTexImage_Lazy;
        [UnmanagedCallersOnly]
        private static void glInvalidateTexImage_Lazy(int texture, int level)
        {
            _glInvalidateTexImage_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateTexImage");
            _glInvalidateTexImage_fnptr(texture, level);
        }
        
        /// <summary><b>[entry point: <c>glInvalidateTexSubImage</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, void> _glInvalidateTexSubImage_fnptr = &glInvalidateTexSubImage_Lazy;
        [UnmanagedCallersOnly]
        private static void glInvalidateTexSubImage_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
        {
            _glInvalidateTexSubImage_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateTexSubImage");
            _glInvalidateTexSubImage_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth);
        }
        
        /// <summary><b>[entry point: <c>glIsAsyncMarkerSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glIsAsyncMarkerSGIX_fnptr = &glIsAsyncMarkerSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsAsyncMarkerSGIX_Lazy(uint marker)
        {
            _glIsAsyncMarkerSGIX_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsAsyncMarkerSGIX");
            return _glIsAsyncMarkerSGIX_fnptr(marker);
        }
        
        /// <summary><b>[entry point: <c>glIsBuffer</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsBuffer_fnptr = &glIsBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsBuffer_Lazy(int buffer)
        {
            _glIsBuffer_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsBuffer");
            return _glIsBuffer_fnptr(buffer);
        }
        
        /// <summary><b>[entry point: <c>glIsBufferARB</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsBufferARB_fnptr = &glIsBufferARB_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsBufferARB_Lazy(int buffer)
        {
            _glIsBufferARB_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsBufferARB");
            return _glIsBufferARB_fnptr(buffer);
        }
        
        /// <summary><b>[entry point: <c>glIsBufferResidentNV</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glIsBufferResidentNV_fnptr = &glIsBufferResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsBufferResidentNV_Lazy(uint target)
        {
            _glIsBufferResidentNV_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsBufferResidentNV");
            return _glIsBufferResidentNV_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glIsCommandListNV</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glIsCommandListNV_fnptr = &glIsCommandListNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsCommandListNV_Lazy(uint list)
        {
            _glIsCommandListNV_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsCommandListNV");
            return _glIsCommandListNV_fnptr(list);
        }
        
        /// <summary><b>[entry point: <c>glIsEnabled</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glIsEnabled_fnptr = &glIsEnabled_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsEnabled_Lazy(uint cap)
        {
            _glIsEnabled_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsEnabled");
            return _glIsEnabled_fnptr(cap);
        }
        
        /// <summary><b>[entry point: <c>glIsEnabledi</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte> _glIsEnabledi_fnptr = &glIsEnabledi_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsEnabledi_Lazy(uint target, uint index)
        {
            _glIsEnabledi_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsEnabledi");
            return _glIsEnabledi_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glIsEnablediEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte> _glIsEnablediEXT_fnptr = &glIsEnablediEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsEnablediEXT_Lazy(uint target, uint index)
        {
            _glIsEnablediEXT_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsEnablediEXT");
            return _glIsEnablediEXT_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glIsEnabledIndexedEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte> _glIsEnabledIndexedEXT_fnptr = &glIsEnabledIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsEnabledIndexedEXT_Lazy(uint target, uint index)
        {
            _glIsEnabledIndexedEXT_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsEnabledIndexedEXT");
            return _glIsEnabledIndexedEXT_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glIsEnablediNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte> _glIsEnablediNV_fnptr = &glIsEnablediNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsEnablediNV_Lazy(uint target, uint index)
        {
            _glIsEnablediNV_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsEnablediNV");
            return _glIsEnablediNV_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glIsEnablediOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte> _glIsEnablediOES_fnptr = &glIsEnablediOES_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsEnablediOES_Lazy(uint target, uint index)
        {
            _glIsEnablediOES_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsEnablediOES");
            return _glIsEnablediOES_fnptr(target, index);
        }
        
        /// <summary><b>[entry point: <c>glIsFenceAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glIsFenceAPPLE_fnptr = &glIsFenceAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsFenceAPPLE_Lazy(uint fence)
        {
            _glIsFenceAPPLE_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsFenceAPPLE");
            return _glIsFenceAPPLE_fnptr(fence);
        }
        
        /// <summary><b>[entry point: <c>glIsFenceNV</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glIsFenceNV_fnptr = &glIsFenceNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsFenceNV_Lazy(uint fence)
        {
            _glIsFenceNV_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsFenceNV");
            return _glIsFenceNV_fnptr(fence);
        }
        
        /// <summary><b>[entry point: <c>glIsFramebuffer</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsFramebuffer_fnptr = &glIsFramebuffer_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsFramebuffer_Lazy(int framebuffer)
        {
            _glIsFramebuffer_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsFramebuffer");
            return _glIsFramebuffer_fnptr(framebuffer);
        }
        
        /// <summary><b>[entry point: <c>glIsFramebufferEXT</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsFramebufferEXT_fnptr = &glIsFramebufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsFramebufferEXT_Lazy(int framebuffer)
        {
            _glIsFramebufferEXT_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsFramebufferEXT");
            return _glIsFramebufferEXT_fnptr(framebuffer);
        }
        
        /// <summary><b>[entry point: <c>glIsFramebufferOES</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsFramebufferOES_fnptr = &glIsFramebufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsFramebufferOES_Lazy(int framebuffer)
        {
            _glIsFramebufferOES_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsFramebufferOES");
            return _glIsFramebufferOES_fnptr(framebuffer);
        }
        
        /// <summary><b>[entry point: <c>glIsImageHandleResidentARB</c>]</b></summary>
        public static delegate* unmanaged<ulong, byte> _glIsImageHandleResidentARB_fnptr = &glIsImageHandleResidentARB_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsImageHandleResidentARB_Lazy(ulong handle)
        {
            _glIsImageHandleResidentARB_fnptr = (delegate* unmanaged<ulong, byte>)GLLoader.BindingsContext.GetProcAddress("glIsImageHandleResidentARB");
            return _glIsImageHandleResidentARB_fnptr(handle);
        }
        
        /// <summary><b>[entry point: <c>glIsImageHandleResidentNV</c>]</b></summary>
        public static delegate* unmanaged<ulong, byte> _glIsImageHandleResidentNV_fnptr = &glIsImageHandleResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsImageHandleResidentNV_Lazy(ulong handle)
        {
            _glIsImageHandleResidentNV_fnptr = (delegate* unmanaged<ulong, byte>)GLLoader.BindingsContext.GetProcAddress("glIsImageHandleResidentNV");
            return _glIsImageHandleResidentNV_fnptr(handle);
        }
        
        /// <summary><b>[entry point: <c>glIsList</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsList_fnptr = &glIsList_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsList_Lazy(int list)
        {
            _glIsList_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsList");
            return _glIsList_fnptr(list);
        }
        
        /// <summary><b>[entry point: <c>glIsMemoryObjectEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glIsMemoryObjectEXT_fnptr = &glIsMemoryObjectEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsMemoryObjectEXT_Lazy(uint memoryObject)
        {
            _glIsMemoryObjectEXT_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsMemoryObjectEXT");
            return _glIsMemoryObjectEXT_fnptr(memoryObject);
        }
        
        /// <summary><b>[entry point: <c>glIsNameAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte> _glIsNameAMD_fnptr = &glIsNameAMD_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsNameAMD_Lazy(uint identifier, uint name)
        {
            _glIsNameAMD_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsNameAMD");
            return _glIsNameAMD_fnptr(identifier, name);
        }
        
        /// <summary><b>[entry point: <c>glIsNamedBufferResidentNV</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsNamedBufferResidentNV_fnptr = &glIsNamedBufferResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsNamedBufferResidentNV_Lazy(int buffer)
        {
            _glIsNamedBufferResidentNV_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsNamedBufferResidentNV");
            return _glIsNamedBufferResidentNV_fnptr(buffer);
        }
        
        /// <summary><b>[entry point: <c>glIsNamedStringARB</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, byte> _glIsNamedStringARB_fnptr = &glIsNamedStringARB_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsNamedStringARB_Lazy(int namelen, byte* name)
        {
            _glIsNamedStringARB_fnptr = (delegate* unmanaged<int, byte*, byte>)GLLoader.BindingsContext.GetProcAddress("glIsNamedStringARB");
            return _glIsNamedStringARB_fnptr(namelen, name);
        }
        
        /// <summary><b>[entry point: <c>glIsObjectBufferATI</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsObjectBufferATI_fnptr = &glIsObjectBufferATI_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsObjectBufferATI_Lazy(int buffer)
        {
            _glIsObjectBufferATI_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsObjectBufferATI");
            return _glIsObjectBufferATI_fnptr(buffer);
        }
        
        /// <summary><b>[entry point: <c>glIsOcclusionQueryNV</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glIsOcclusionQueryNV_fnptr = &glIsOcclusionQueryNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsOcclusionQueryNV_Lazy(uint id)
        {
            _glIsOcclusionQueryNV_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsOcclusionQueryNV");
            return _glIsOcclusionQueryNV_fnptr(id);
        }
        
        /// <summary><b>[entry point: <c>glIsPathNV</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glIsPathNV_fnptr = &glIsPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsPathNV_Lazy(uint path)
        {
            _glIsPathNV_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsPathNV");
            return _glIsPathNV_fnptr(path);
        }
        
        /// <summary><b>[entry point: <c>glIsPointInFillPathNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, float, byte> _glIsPointInFillPathNV_fnptr = &glIsPointInFillPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsPointInFillPathNV_Lazy(uint path, uint mask, float x, float y)
        {
            _glIsPointInFillPathNV_fnptr = (delegate* unmanaged<uint, uint, float, float, byte>)GLLoader.BindingsContext.GetProcAddress("glIsPointInFillPathNV");
            return _glIsPointInFillPathNV_fnptr(path, mask, x, y);
        }
        
        /// <summary><b>[entry point: <c>glIsPointInStrokePathNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, byte> _glIsPointInStrokePathNV_fnptr = &glIsPointInStrokePathNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsPointInStrokePathNV_Lazy(uint path, float x, float y)
        {
            _glIsPointInStrokePathNV_fnptr = (delegate* unmanaged<uint, float, float, byte>)GLLoader.BindingsContext.GetProcAddress("glIsPointInStrokePathNV");
            return _glIsPointInStrokePathNV_fnptr(path, x, y);
        }
        
        /// <summary><b>[entry point: <c>glIsProgram</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsProgram_fnptr = &glIsProgram_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsProgram_Lazy(int program)
        {
            _glIsProgram_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsProgram");
            return _glIsProgram_fnptr(program);
        }
        
        /// <summary><b>[entry point: <c>glIsProgramARB</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsProgramARB_fnptr = &glIsProgramARB_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsProgramARB_Lazy(int program)
        {
            _glIsProgramARB_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsProgramARB");
            return _glIsProgramARB_fnptr(program);
        }
        
        /// <summary><b>[entry point: <c>glIsProgramNV</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsProgramNV_fnptr = &glIsProgramNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsProgramNV_Lazy(int id)
        {
            _glIsProgramNV_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsProgramNV");
            return _glIsProgramNV_fnptr(id);
        }
        
        /// <summary><b>[entry point: <c>glIsProgramPipeline</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsProgramPipeline_fnptr = &glIsProgramPipeline_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsProgramPipeline_Lazy(int pipeline)
        {
            _glIsProgramPipeline_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsProgramPipeline");
            return _glIsProgramPipeline_fnptr(pipeline);
        }
        
        /// <summary><b>[entry point: <c>glIsProgramPipelineEXT</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsProgramPipelineEXT_fnptr = &glIsProgramPipelineEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsProgramPipelineEXT_Lazy(int pipeline)
        {
            _glIsProgramPipelineEXT_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsProgramPipelineEXT");
            return _glIsProgramPipelineEXT_fnptr(pipeline);
        }
        
        /// <summary><b>[entry point: <c>glIsQuery</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsQuery_fnptr = &glIsQuery_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsQuery_Lazy(int id)
        {
            _glIsQuery_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsQuery");
            return _glIsQuery_fnptr(id);
        }
        
        /// <summary><b>[entry point: <c>glIsQueryARB</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsQueryARB_fnptr = &glIsQueryARB_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsQueryARB_Lazy(int id)
        {
            _glIsQueryARB_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsQueryARB");
            return _glIsQueryARB_fnptr(id);
        }
        
        /// <summary><b>[entry point: <c>glIsQueryEXT</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsQueryEXT_fnptr = &glIsQueryEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsQueryEXT_Lazy(int id)
        {
            _glIsQueryEXT_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsQueryEXT");
            return _glIsQueryEXT_fnptr(id);
        }
        
        /// <summary><b>[entry point: <c>glIsRenderbuffer</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsRenderbuffer_fnptr = &glIsRenderbuffer_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsRenderbuffer_Lazy(int renderbuffer)
        {
            _glIsRenderbuffer_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsRenderbuffer");
            return _glIsRenderbuffer_fnptr(renderbuffer);
        }
        
        /// <summary><b>[entry point: <c>glIsRenderbufferEXT</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsRenderbufferEXT_fnptr = &glIsRenderbufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsRenderbufferEXT_Lazy(int renderbuffer)
        {
            _glIsRenderbufferEXT_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsRenderbufferEXT");
            return _glIsRenderbufferEXT_fnptr(renderbuffer);
        }
        
        /// <summary><b>[entry point: <c>glIsRenderbufferOES</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsRenderbufferOES_fnptr = &glIsRenderbufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsRenderbufferOES_Lazy(int renderbuffer)
        {
            _glIsRenderbufferOES_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsRenderbufferOES");
            return _glIsRenderbufferOES_fnptr(renderbuffer);
        }
        
        /// <summary><b>[entry point: <c>glIsSampler</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsSampler_fnptr = &glIsSampler_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsSampler_Lazy(int sampler)
        {
            _glIsSampler_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsSampler");
            return _glIsSampler_fnptr(sampler);
        }
        
        /// <summary><b>[entry point: <c>glIsSemaphoreEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glIsSemaphoreEXT_fnptr = &glIsSemaphoreEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsSemaphoreEXT_Lazy(uint semaphore)
        {
            _glIsSemaphoreEXT_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsSemaphoreEXT");
            return _glIsSemaphoreEXT_fnptr(semaphore);
        }
        
        /// <summary><b>[entry point: <c>glIsShader</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsShader_fnptr = &glIsShader_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsShader_Lazy(int shader)
        {
            _glIsShader_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsShader");
            return _glIsShader_fnptr(shader);
        }
        
        /// <summary><b>[entry point: <c>glIsStateNV</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glIsStateNV_fnptr = &glIsStateNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsStateNV_Lazy(uint state)
        {
            _glIsStateNV_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsStateNV");
            return _glIsStateNV_fnptr(state);
        }
        
        /// <summary><b>[entry point: <c>glIsSync</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, byte> _glIsSync_fnptr = &glIsSync_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsSync_Lazy(IntPtr sync)
        {
            _glIsSync_fnptr = (delegate* unmanaged<IntPtr, byte>)GLLoader.BindingsContext.GetProcAddress("glIsSync");
            return _glIsSync_fnptr(sync);
        }
        
        /// <summary><b>[entry point: <c>glIsSyncAPPLE</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, byte> _glIsSyncAPPLE_fnptr = &glIsSyncAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsSyncAPPLE_Lazy(IntPtr sync)
        {
            _glIsSyncAPPLE_fnptr = (delegate* unmanaged<IntPtr, byte>)GLLoader.BindingsContext.GetProcAddress("glIsSyncAPPLE");
            return _glIsSyncAPPLE_fnptr(sync);
        }
        
        /// <summary><b>[entry point: <c>glIsTexture</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsTexture_fnptr = &glIsTexture_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsTexture_Lazy(int texture)
        {
            _glIsTexture_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsTexture");
            return _glIsTexture_fnptr(texture);
        }
        
        /// <summary><b>[entry point: <c>glIsTextureEXT</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsTextureEXT_fnptr = &glIsTextureEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsTextureEXT_Lazy(int texture)
        {
            _glIsTextureEXT_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsTextureEXT");
            return _glIsTextureEXT_fnptr(texture);
        }
        
        /// <summary><b>[entry point: <c>glIsTextureHandleResidentARB</c>]</b></summary>
        public static delegate* unmanaged<ulong, byte> _glIsTextureHandleResidentARB_fnptr = &glIsTextureHandleResidentARB_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsTextureHandleResidentARB_Lazy(ulong handle)
        {
            _glIsTextureHandleResidentARB_fnptr = (delegate* unmanaged<ulong, byte>)GLLoader.BindingsContext.GetProcAddress("glIsTextureHandleResidentARB");
            return _glIsTextureHandleResidentARB_fnptr(handle);
        }
        
        /// <summary><b>[entry point: <c>glIsTextureHandleResidentNV</c>]</b></summary>
        public static delegate* unmanaged<ulong, byte> _glIsTextureHandleResidentNV_fnptr = &glIsTextureHandleResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsTextureHandleResidentNV_Lazy(ulong handle)
        {
            _glIsTextureHandleResidentNV_fnptr = (delegate* unmanaged<ulong, byte>)GLLoader.BindingsContext.GetProcAddress("glIsTextureHandleResidentNV");
            return _glIsTextureHandleResidentNV_fnptr(handle);
        }
        
        /// <summary><b>[entry point: <c>glIsTransformFeedback</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsTransformFeedback_fnptr = &glIsTransformFeedback_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsTransformFeedback_Lazy(int id)
        {
            _glIsTransformFeedback_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsTransformFeedback");
            return _glIsTransformFeedback_fnptr(id);
        }
        
        /// <summary><b>[entry point: <c>glIsTransformFeedbackNV</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsTransformFeedbackNV_fnptr = &glIsTransformFeedbackNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsTransformFeedbackNV_Lazy(int id)
        {
            _glIsTransformFeedbackNV_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsTransformFeedbackNV");
            return _glIsTransformFeedbackNV_fnptr(id);
        }
        
        /// <summary><b>[entry point: <c>glIsVariantEnabledEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte> _glIsVariantEnabledEXT_fnptr = &glIsVariantEnabledEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsVariantEnabledEXT_Lazy(uint id, uint cap)
        {
            _glIsVariantEnabledEXT_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsVariantEnabledEXT");
            return _glIsVariantEnabledEXT_fnptr(id, cap);
        }
        
        /// <summary><b>[entry point: <c>glIsVertexArray</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsVertexArray_fnptr = &glIsVertexArray_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsVertexArray_Lazy(int array)
        {
            _glIsVertexArray_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsVertexArray");
            return _glIsVertexArray_fnptr(array);
        }
        
        /// <summary><b>[entry point: <c>glIsVertexArrayAPPLE</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsVertexArrayAPPLE_fnptr = &glIsVertexArrayAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsVertexArrayAPPLE_Lazy(int array)
        {
            _glIsVertexArrayAPPLE_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsVertexArrayAPPLE");
            return _glIsVertexArrayAPPLE_fnptr(array);
        }
        
        /// <summary><b>[entry point: <c>glIsVertexArrayOES</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glIsVertexArrayOES_fnptr = &glIsVertexArrayOES_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsVertexArrayOES_Lazy(int array)
        {
            _glIsVertexArrayOES_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsVertexArrayOES");
            return _glIsVertexArrayOES_fnptr(array);
        }
        
        /// <summary><b>[entry point: <c>glIsVertexAttribEnabledAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte> _glIsVertexAttribEnabledAPPLE_fnptr = &glIsVertexAttribEnabledAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static byte glIsVertexAttribEnabledAPPLE_Lazy(uint index, uint pname)
        {
            _glIsVertexAttribEnabledAPPLE_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsVertexAttribEnabledAPPLE");
            return _glIsVertexAttribEnabledAPPLE_fnptr(index, pname);
        }
        
        /// <summary><b>[entry point: <c>glLabelObjectEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, byte*, void> _glLabelObjectEXT_fnptr = &glLabelObjectEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glLabelObjectEXT_Lazy(uint type, uint obj, int length, byte* label)
        {
            _glLabelObjectEXT_fnptr = (delegate* unmanaged<uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glLabelObjectEXT");
            _glLabelObjectEXT_fnptr(type, obj, length, label);
        }
        
        /// <summary><b>[entry point: <c>glLGPUCopyImageSubDataNVX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void> _glLGPUCopyImageSubDataNVX_fnptr = &glLGPUCopyImageSubDataNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void glLGPUCopyImageSubDataNVX_Lazy(uint sourceGpu, uint destinationGpuMask, uint srcName, uint srcTarget, int srcLevel, int srcX, int srxY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)
        {
            _glLGPUCopyImageSubDataNVX_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glLGPUCopyImageSubDataNVX");
            _glLGPUCopyImageSubDataNVX_fnptr(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        }
        
        /// <summary><b>[entry point: <c>glLGPUInterlockNVX</c>]</b></summary>
        public static delegate* unmanaged<void> _glLGPUInterlockNVX_fnptr = &glLGPUInterlockNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void glLGPUInterlockNVX_Lazy()
        {
            _glLGPUInterlockNVX_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glLGPUInterlockNVX");
            _glLGPUInterlockNVX_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glLGPUNamedBufferSubDataNVX</c>]</b></summary>
        public static delegate* unmanaged<uint, int, IntPtr, nint, void*, void> _glLGPUNamedBufferSubDataNVX_fnptr = &glLGPUNamedBufferSubDataNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void glLGPUNamedBufferSubDataNVX_Lazy(uint gpuMask, int buffer, IntPtr offset, nint size, void* data)
        {
            _glLGPUNamedBufferSubDataNVX_fnptr = (delegate* unmanaged<uint, int, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glLGPUNamedBufferSubDataNVX");
            _glLGPUNamedBufferSubDataNVX_fnptr(gpuMask, buffer, offset, size, data);
        }
        
        /// <summary><b>[entry point: <c>glLightEnviSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glLightEnviSGIX_fnptr = &glLightEnviSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightEnviSGIX_Lazy(uint pname, int param)
        {
            _glLightEnviSGIX_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glLightEnviSGIX");
            _glLightEnviSGIX_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glLightf</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, void> _glLightf_fnptr = &glLightf_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightf_Lazy(uint light, uint pname, float param)
        {
            _glLightf_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glLightf");
            _glLightf_fnptr(light, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glLightfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glLightfv_fnptr = &glLightfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightfv_Lazy(uint light, uint pname, float* parameters)
        {
            _glLightfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glLightfv");
            _glLightfv_fnptr(light, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glLighti</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glLighti_fnptr = &glLighti_Lazy;
        [UnmanagedCallersOnly]
        private static void glLighti_Lazy(uint light, uint pname, int param)
        {
            _glLighti_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glLighti");
            _glLighti_fnptr(light, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glLightiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glLightiv_fnptr = &glLightiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightiv_Lazy(uint light, uint pname, int* parameters)
        {
            _glLightiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glLightiv");
            _glLightiv_fnptr(light, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glLightModelf</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glLightModelf_fnptr = &glLightModelf_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightModelf_Lazy(uint pname, float param)
        {
            _glLightModelf_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glLightModelf");
            _glLightModelf_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glLightModelfv</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glLightModelfv_fnptr = &glLightModelfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightModelfv_Lazy(uint pname, float* parameters)
        {
            _glLightModelfv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glLightModelfv");
            _glLightModelfv_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glLightModeli</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glLightModeli_fnptr = &glLightModeli_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightModeli_Lazy(uint pname, int param)
        {
            _glLightModeli_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glLightModeli");
            _glLightModeli_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glLightModeliv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glLightModeliv_fnptr = &glLightModeliv_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightModeliv_Lazy(uint pname, int* parameters)
        {
            _glLightModeliv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glLightModeliv");
            _glLightModeliv_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glLightModelx</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glLightModelx_fnptr = &glLightModelx_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightModelx_Lazy(uint pname, int param)
        {
            _glLightModelx_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glLightModelx");
            _glLightModelx_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glLightModelxOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glLightModelxOES_fnptr = &glLightModelxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightModelxOES_Lazy(uint pname, int param)
        {
            _glLightModelxOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glLightModelxOES");
            _glLightModelxOES_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glLightModelxv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glLightModelxv_fnptr = &glLightModelxv_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightModelxv_Lazy(uint pname, int* param)
        {
            _glLightModelxv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glLightModelxv");
            _glLightModelxv_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glLightModelxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glLightModelxvOES_fnptr = &glLightModelxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightModelxvOES_Lazy(uint pname, int* param)
        {
            _glLightModelxvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glLightModelxvOES");
            _glLightModelxvOES_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glLightx</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glLightx_fnptr = &glLightx_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightx_Lazy(uint light, uint pname, int param)
        {
            _glLightx_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glLightx");
            _glLightx_fnptr(light, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glLightxOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glLightxOES_fnptr = &glLightxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightxOES_Lazy(uint light, uint pname, int param)
        {
            _glLightxOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glLightxOES");
            _glLightxOES_fnptr(light, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glLightxv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glLightxv_fnptr = &glLightxv_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightxv_Lazy(uint light, uint pname, int* parameters)
        {
            _glLightxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glLightxv");
            _glLightxv_fnptr(light, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glLightxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glLightxvOES_fnptr = &glLightxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glLightxvOES_Lazy(uint light, uint pname, int* parameters)
        {
            _glLightxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glLightxvOES");
            _glLightxvOES_fnptr(light, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glLineStipple</c>]</b></summary>
        public static delegate* unmanaged<int, ushort, void> _glLineStipple_fnptr = &glLineStipple_Lazy;
        [UnmanagedCallersOnly]
        private static void glLineStipple_Lazy(int factor, ushort pattern)
        {
            _glLineStipple_fnptr = (delegate* unmanaged<int, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glLineStipple");
            _glLineStipple_fnptr(factor, pattern);
        }
        
        /// <summary><b>[entry point: <c>glLineWidth</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glLineWidth_fnptr = &glLineWidth_Lazy;
        [UnmanagedCallersOnly]
        private static void glLineWidth_Lazy(float width)
        {
            _glLineWidth_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glLineWidth");
            _glLineWidth_fnptr(width);
        }
        
        /// <summary><b>[entry point: <c>glLineWidthx</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glLineWidthx_fnptr = &glLineWidthx_Lazy;
        [UnmanagedCallersOnly]
        private static void glLineWidthx_Lazy(int width)
        {
            _glLineWidthx_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glLineWidthx");
            _glLineWidthx_fnptr(width);
        }
        
        /// <summary><b>[entry point: <c>glLineWidthxOES</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glLineWidthxOES_fnptr = &glLineWidthxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glLineWidthxOES_Lazy(int width)
        {
            _glLineWidthxOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glLineWidthxOES");
            _glLineWidthxOES_fnptr(width);
        }
        
        /// <summary><b>[entry point: <c>glLinkProgram</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glLinkProgram_fnptr = &glLinkProgram_Lazy;
        [UnmanagedCallersOnly]
        private static void glLinkProgram_Lazy(int program)
        {
            _glLinkProgram_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glLinkProgram");
            _glLinkProgram_fnptr(program);
        }
        
        /// <summary><b>[entry point: <c>glLinkProgramARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, void> _glLinkProgramARB_fnptr = &glLinkProgramARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glLinkProgramARB_Lazy(IntPtr programObj)
        {
            _glLinkProgramARB_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glLinkProgramARB");
            _glLinkProgramARB_fnptr(programObj);
        }
        
        /// <summary><b>[entry point: <c>glListBase</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glListBase_fnptr = &glListBase_Lazy;
        [UnmanagedCallersOnly]
        private static void glListBase_Lazy(int @base)
        {
            _glListBase_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glListBase");
            _glListBase_fnptr(@base);
        }
        
        /// <summary><b>[entry point: <c>glListDrawCommandsStatesClientNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void**, int*, uint*, uint*, uint, void> _glListDrawCommandsStatesClientNV_fnptr = &glListDrawCommandsStatesClientNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glListDrawCommandsStatesClientNV_Lazy(uint list, uint segment, void** indirects, int* sizes, uint* states, uint* fbos, uint count)
        {
            _glListDrawCommandsStatesClientNV_fnptr = (delegate* unmanaged<uint, uint, void**, int*, uint*, uint*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glListDrawCommandsStatesClientNV");
            _glListDrawCommandsStatesClientNV_fnptr(list, segment, indirects, sizes, states, fbos, count);
        }
        
        /// <summary><b>[entry point: <c>glListParameterfSGIX</c>]</b></summary>
        public static delegate* unmanaged<int, uint, float, void> _glListParameterfSGIX_fnptr = &glListParameterfSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glListParameterfSGIX_Lazy(int list, uint pname, float param)
        {
            _glListParameterfSGIX_fnptr = (delegate* unmanaged<int, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glListParameterfSGIX");
            _glListParameterfSGIX_fnptr(list, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glListParameterfvSGIX</c>]</b></summary>
        public static delegate* unmanaged<int, uint, float*, void> _glListParameterfvSGIX_fnptr = &glListParameterfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glListParameterfvSGIX_Lazy(int list, uint pname, float* parameters)
        {
            _glListParameterfvSGIX_fnptr = (delegate* unmanaged<int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glListParameterfvSGIX");
            _glListParameterfvSGIX_fnptr(list, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glListParameteriSGIX</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glListParameteriSGIX_fnptr = &glListParameteriSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glListParameteriSGIX_Lazy(int list, uint pname, int param)
        {
            _glListParameteriSGIX_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glListParameteriSGIX");
            _glListParameteriSGIX_fnptr(list, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glListParameterivSGIX</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glListParameterivSGIX_fnptr = &glListParameterivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glListParameterivSGIX_Lazy(int list, uint pname, int* parameters)
        {
            _glListParameterivSGIX_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glListParameterivSGIX");
            _glListParameterivSGIX_fnptr(list, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glLoadIdentity</c>]</b></summary>
        public static delegate* unmanaged<void> _glLoadIdentity_fnptr = &glLoadIdentity_Lazy;
        [UnmanagedCallersOnly]
        private static void glLoadIdentity_Lazy()
        {
            _glLoadIdentity_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glLoadIdentity");
            _glLoadIdentity_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glLoadIdentityDeformationMapSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glLoadIdentityDeformationMapSGIX_fnptr = &glLoadIdentityDeformationMapSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glLoadIdentityDeformationMapSGIX_Lazy(uint mask)
        {
            _glLoadIdentityDeformationMapSGIX_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glLoadIdentityDeformationMapSGIX");
            _glLoadIdentityDeformationMapSGIX_fnptr(mask);
        }
        
        /// <summary><b>[entry point: <c>glLoadMatrixd</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glLoadMatrixd_fnptr = &glLoadMatrixd_Lazy;
        [UnmanagedCallersOnly]
        private static void glLoadMatrixd_Lazy(double* m)
        {
            _glLoadMatrixd_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadMatrixd");
            _glLoadMatrixd_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glLoadMatrixf</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glLoadMatrixf_fnptr = &glLoadMatrixf_Lazy;
        [UnmanagedCallersOnly]
        private static void glLoadMatrixf_Lazy(float* m)
        {
            _glLoadMatrixf_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadMatrixf");
            _glLoadMatrixf_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glLoadMatrixx</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glLoadMatrixx_fnptr = &glLoadMatrixx_Lazy;
        [UnmanagedCallersOnly]
        private static void glLoadMatrixx_Lazy(int* m)
        {
            _glLoadMatrixx_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadMatrixx");
            _glLoadMatrixx_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glLoadMatrixxOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glLoadMatrixxOES_fnptr = &glLoadMatrixxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glLoadMatrixxOES_Lazy(int* m)
        {
            _glLoadMatrixxOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadMatrixxOES");
            _glLoadMatrixxOES_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glLoadName</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glLoadName_fnptr = &glLoadName_Lazy;
        [UnmanagedCallersOnly]
        private static void glLoadName_Lazy(uint name)
        {
            _glLoadName_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glLoadName");
            _glLoadName_fnptr(name);
        }
        
        /// <summary><b>[entry point: <c>glLoadPaletteFromModelViewMatrixOES</c>]</b></summary>
        public static delegate* unmanaged<void> _glLoadPaletteFromModelViewMatrixOES_fnptr = &glLoadPaletteFromModelViewMatrixOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glLoadPaletteFromModelViewMatrixOES_Lazy()
        {
            _glLoadPaletteFromModelViewMatrixOES_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glLoadPaletteFromModelViewMatrixOES");
            _glLoadPaletteFromModelViewMatrixOES_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glLoadProgramNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, byte*, void> _glLoadProgramNV_fnptr = &glLoadProgramNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glLoadProgramNV_Lazy(uint target, uint id, int len, byte* program)
        {
            _glLoadProgramNV_fnptr = (delegate* unmanaged<uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadProgramNV");
            _glLoadProgramNV_fnptr(target, id, len, program);
        }
        
        /// <summary><b>[entry point: <c>glLoadTransposeMatrixd</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glLoadTransposeMatrixd_fnptr = &glLoadTransposeMatrixd_Lazy;
        [UnmanagedCallersOnly]
        private static void glLoadTransposeMatrixd_Lazy(double* m)
        {
            _glLoadTransposeMatrixd_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadTransposeMatrixd");
            _glLoadTransposeMatrixd_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glLoadTransposeMatrixdARB</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glLoadTransposeMatrixdARB_fnptr = &glLoadTransposeMatrixdARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glLoadTransposeMatrixdARB_Lazy(double* m)
        {
            _glLoadTransposeMatrixdARB_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadTransposeMatrixdARB");
            _glLoadTransposeMatrixdARB_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glLoadTransposeMatrixf</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glLoadTransposeMatrixf_fnptr = &glLoadTransposeMatrixf_Lazy;
        [UnmanagedCallersOnly]
        private static void glLoadTransposeMatrixf_Lazy(float* m)
        {
            _glLoadTransposeMatrixf_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadTransposeMatrixf");
            _glLoadTransposeMatrixf_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glLoadTransposeMatrixfARB</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glLoadTransposeMatrixfARB_fnptr = &glLoadTransposeMatrixfARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glLoadTransposeMatrixfARB_Lazy(float* m)
        {
            _glLoadTransposeMatrixfARB_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadTransposeMatrixfARB");
            _glLoadTransposeMatrixfARB_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glLoadTransposeMatrixxOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glLoadTransposeMatrixxOES_fnptr = &glLoadTransposeMatrixxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glLoadTransposeMatrixxOES_Lazy(int* m)
        {
            _glLoadTransposeMatrixxOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadTransposeMatrixxOES");
            _glLoadTransposeMatrixxOES_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glLockArraysEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glLockArraysEXT_fnptr = &glLockArraysEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glLockArraysEXT_Lazy(int first, int count)
        {
            _glLockArraysEXT_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glLockArraysEXT");
            _glLockArraysEXT_fnptr(first, count);
        }
        
        /// <summary><b>[entry point: <c>glLogicOp</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glLogicOp_fnptr = &glLogicOp_Lazy;
        [UnmanagedCallersOnly]
        private static void glLogicOp_Lazy(uint opcode)
        {
            _glLogicOp_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glLogicOp");
            _glLogicOp_fnptr(opcode);
        }
        
        /// <summary><b>[entry point: <c>glMakeBufferNonResidentNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glMakeBufferNonResidentNV_fnptr = &glMakeBufferNonResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMakeBufferNonResidentNV_Lazy(uint target)
        {
            _glMakeBufferNonResidentNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMakeBufferNonResidentNV");
            _glMakeBufferNonResidentNV_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glMakeBufferResidentNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glMakeBufferResidentNV_fnptr = &glMakeBufferResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMakeBufferResidentNV_Lazy(uint target, uint access)
        {
            _glMakeBufferResidentNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMakeBufferResidentNV");
            _glMakeBufferResidentNV_fnptr(target, access);
        }
        
        /// <summary><b>[entry point: <c>glMakeImageHandleNonResidentARB</c>]</b></summary>
        public static delegate* unmanaged<ulong, void> _glMakeImageHandleNonResidentARB_fnptr = &glMakeImageHandleNonResidentARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMakeImageHandleNonResidentARB_Lazy(ulong handle)
        {
            _glMakeImageHandleNonResidentARB_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glMakeImageHandleNonResidentARB");
            _glMakeImageHandleNonResidentARB_fnptr(handle);
        }
        
        /// <summary><b>[entry point: <c>glMakeImageHandleNonResidentNV</c>]</b></summary>
        public static delegate* unmanaged<ulong, void> _glMakeImageHandleNonResidentNV_fnptr = &glMakeImageHandleNonResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMakeImageHandleNonResidentNV_Lazy(ulong handle)
        {
            _glMakeImageHandleNonResidentNV_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glMakeImageHandleNonResidentNV");
            _glMakeImageHandleNonResidentNV_fnptr(handle);
        }
        
        /// <summary><b>[entry point: <c>glMakeImageHandleResidentARB</c>]</b></summary>
        public static delegate* unmanaged<ulong, uint, void> _glMakeImageHandleResidentARB_fnptr = &glMakeImageHandleResidentARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMakeImageHandleResidentARB_Lazy(ulong handle, uint access)
        {
            _glMakeImageHandleResidentARB_fnptr = (delegate* unmanaged<ulong, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMakeImageHandleResidentARB");
            _glMakeImageHandleResidentARB_fnptr(handle, access);
        }
        
        /// <summary><b>[entry point: <c>glMakeImageHandleResidentNV</c>]</b></summary>
        public static delegate* unmanaged<ulong, uint, void> _glMakeImageHandleResidentNV_fnptr = &glMakeImageHandleResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMakeImageHandleResidentNV_Lazy(ulong handle, uint access)
        {
            _glMakeImageHandleResidentNV_fnptr = (delegate* unmanaged<ulong, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMakeImageHandleResidentNV");
            _glMakeImageHandleResidentNV_fnptr(handle, access);
        }
        
        /// <summary><b>[entry point: <c>glMakeNamedBufferNonResidentNV</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glMakeNamedBufferNonResidentNV_fnptr = &glMakeNamedBufferNonResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMakeNamedBufferNonResidentNV_Lazy(int buffer)
        {
            _glMakeNamedBufferNonResidentNV_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glMakeNamedBufferNonResidentNV");
            _glMakeNamedBufferNonResidentNV_fnptr(buffer);
        }
        
        /// <summary><b>[entry point: <c>glMakeNamedBufferResidentNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glMakeNamedBufferResidentNV_fnptr = &glMakeNamedBufferResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMakeNamedBufferResidentNV_Lazy(int buffer, uint access)
        {
            _glMakeNamedBufferResidentNV_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMakeNamedBufferResidentNV");
            _glMakeNamedBufferResidentNV_fnptr(buffer, access);
        }
        
        /// <summary><b>[entry point: <c>glMakeTextureHandleNonResidentARB</c>]</b></summary>
        public static delegate* unmanaged<ulong, void> _glMakeTextureHandleNonResidentARB_fnptr = &glMakeTextureHandleNonResidentARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMakeTextureHandleNonResidentARB_Lazy(ulong handle)
        {
            _glMakeTextureHandleNonResidentARB_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glMakeTextureHandleNonResidentARB");
            _glMakeTextureHandleNonResidentARB_fnptr(handle);
        }
        
        /// <summary><b>[entry point: <c>glMakeTextureHandleNonResidentNV</c>]</b></summary>
        public static delegate* unmanaged<ulong, void> _glMakeTextureHandleNonResidentNV_fnptr = &glMakeTextureHandleNonResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMakeTextureHandleNonResidentNV_Lazy(ulong handle)
        {
            _glMakeTextureHandleNonResidentNV_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glMakeTextureHandleNonResidentNV");
            _glMakeTextureHandleNonResidentNV_fnptr(handle);
        }
        
        /// <summary><b>[entry point: <c>glMakeTextureHandleResidentARB</c>]</b></summary>
        public static delegate* unmanaged<ulong, void> _glMakeTextureHandleResidentARB_fnptr = &glMakeTextureHandleResidentARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMakeTextureHandleResidentARB_Lazy(ulong handle)
        {
            _glMakeTextureHandleResidentARB_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glMakeTextureHandleResidentARB");
            _glMakeTextureHandleResidentARB_fnptr(handle);
        }
        
        /// <summary><b>[entry point: <c>glMakeTextureHandleResidentNV</c>]</b></summary>
        public static delegate* unmanaged<ulong, void> _glMakeTextureHandleResidentNV_fnptr = &glMakeTextureHandleResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMakeTextureHandleResidentNV_Lazy(ulong handle)
        {
            _glMakeTextureHandleResidentNV_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glMakeTextureHandleResidentNV");
            _glMakeTextureHandleResidentNV_fnptr(handle);
        }
        
        /// <summary><b>[entry point: <c>glMap1d</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, int, int, double*, void> _glMap1d_fnptr = &glMap1d_Lazy;
        [UnmanagedCallersOnly]
        private static void glMap1d_Lazy(uint target, double u1, double u2, int stride, int order, double* points)
        {
            _glMap1d_fnptr = (delegate* unmanaged<uint, double, double, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMap1d");
            _glMap1d_fnptr(target, u1, u2, stride, order, points);
        }
        
        /// <summary><b>[entry point: <c>glMap1f</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, int, int, float*, void> _glMap1f_fnptr = &glMap1f_Lazy;
        [UnmanagedCallersOnly]
        private static void glMap1f_Lazy(uint target, float u1, float u2, int stride, int order, float* points)
        {
            _glMap1f_fnptr = (delegate* unmanaged<uint, float, float, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMap1f");
            _glMap1f_fnptr(target, u1, u2, stride, order, points);
        }
        
        /// <summary><b>[entry point: <c>glMap1xOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, void> _glMap1xOES_fnptr = &glMap1xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMap1xOES_Lazy(uint target, int u1, int u2, int stride, int order, int points)
        {
            _glMap1xOES_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMap1xOES");
            _glMap1xOES_fnptr(target, u1, u2, stride, order, points);
        }
        
        /// <summary><b>[entry point: <c>glMap2d</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, int, int, double, double, int, int, double*, void> _glMap2d_fnptr = &glMap2d_Lazy;
        [UnmanagedCallersOnly]
        private static void glMap2d_Lazy(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
        {
            _glMap2d_fnptr = (delegate* unmanaged<uint, double, double, int, int, double, double, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMap2d");
            _glMap2d_fnptr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        /// <summary><b>[entry point: <c>glMap2f</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, int, int, float, float, int, int, float*, void> _glMap2f_fnptr = &glMap2f_Lazy;
        [UnmanagedCallersOnly]
        private static void glMap2f_Lazy(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
        {
            _glMap2f_fnptr = (delegate* unmanaged<uint, float, float, int, int, float, float, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMap2f");
            _glMap2f_fnptr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        /// <summary><b>[entry point: <c>glMap2xOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, void> _glMap2xOES_fnptr = &glMap2xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMap2xOES_Lazy(uint target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points)
        {
            _glMap2xOES_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMap2xOES");
            _glMap2xOES_fnptr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        /// <summary><b>[entry point: <c>glMapBuffer</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*> _glMapBuffer_fnptr = &glMapBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void* glMapBuffer_Lazy(uint target, uint access)
        {
            _glMapBuffer_fnptr = (delegate* unmanaged<uint, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapBuffer");
            return _glMapBuffer_fnptr(target, access);
        }
        
        /// <summary><b>[entry point: <c>glMapBufferARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*> _glMapBufferARB_fnptr = &glMapBufferARB_Lazy;
        [UnmanagedCallersOnly]
        private static void* glMapBufferARB_Lazy(uint target, uint access)
        {
            _glMapBufferARB_fnptr = (delegate* unmanaged<uint, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapBufferARB");
            return _glMapBufferARB_fnptr(target, access);
        }
        
        /// <summary><b>[entry point: <c>glMapBufferOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*> _glMapBufferOES_fnptr = &glMapBufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static void* glMapBufferOES_Lazy(uint target, uint access)
        {
            _glMapBufferOES_fnptr = (delegate* unmanaged<uint, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapBufferOES");
            return _glMapBufferOES_fnptr(target, access);
        }
        
        /// <summary><b>[entry point: <c>glMapBufferRange</c>]</b></summary>
        public static delegate* unmanaged<uint, IntPtr, nint, uint, void*> _glMapBufferRange_fnptr = &glMapBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void* glMapBufferRange_Lazy(uint target, IntPtr offset, nint length, uint access)
        {
            _glMapBufferRange_fnptr = (delegate* unmanaged<uint, IntPtr, nint, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapBufferRange");
            return _glMapBufferRange_fnptr(target, offset, length, access);
        }
        
        /// <summary><b>[entry point: <c>glMapBufferRangeEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, IntPtr, nint, uint, void*> _glMapBufferRangeEXT_fnptr = &glMapBufferRangeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void* glMapBufferRangeEXT_Lazy(uint target, IntPtr offset, nint length, uint access)
        {
            _glMapBufferRangeEXT_fnptr = (delegate* unmanaged<uint, IntPtr, nint, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapBufferRangeEXT");
            return _glMapBufferRangeEXT_fnptr(target, offset, length, access);
        }
        
        /// <summary><b>[entry point: <c>glMapControlPointsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int, int, int, byte, void*, void> _glMapControlPointsNV_fnptr = &glMapControlPointsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMapControlPointsNV_Lazy(uint target, uint index, uint type, int ustride, int vstride, int uorder, int vorder, byte packed, void* points)
        {
            _glMapControlPointsNV_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, int, int, byte, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMapControlPointsNV");
            _glMapControlPointsNV_fnptr(target, index, type, ustride, vstride, uorder, vorder, packed, points);
        }
        
        /// <summary><b>[entry point: <c>glMapGrid1d</c>]</b></summary>
        public static delegate* unmanaged<int, double, double, void> _glMapGrid1d_fnptr = &glMapGrid1d_Lazy;
        [UnmanagedCallersOnly]
        private static void glMapGrid1d_Lazy(int un, double u1, double u2)
        {
            _glMapGrid1d_fnptr = (delegate* unmanaged<int, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMapGrid1d");
            _glMapGrid1d_fnptr(un, u1, u2);
        }
        
        /// <summary><b>[entry point: <c>glMapGrid1f</c>]</b></summary>
        public static delegate* unmanaged<int, float, float, void> _glMapGrid1f_fnptr = &glMapGrid1f_Lazy;
        [UnmanagedCallersOnly]
        private static void glMapGrid1f_Lazy(int un, float u1, float u2)
        {
            _glMapGrid1f_fnptr = (delegate* unmanaged<int, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMapGrid1f");
            _glMapGrid1f_fnptr(un, u1, u2);
        }
        
        /// <summary><b>[entry point: <c>glMapGrid1xOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glMapGrid1xOES_fnptr = &glMapGrid1xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMapGrid1xOES_Lazy(int n, int u1, int u2)
        {
            _glMapGrid1xOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMapGrid1xOES");
            _glMapGrid1xOES_fnptr(n, u1, u2);
        }
        
        /// <summary><b>[entry point: <c>glMapGrid2d</c>]</b></summary>
        public static delegate* unmanaged<int, double, double, int, double, double, void> _glMapGrid2d_fnptr = &glMapGrid2d_Lazy;
        [UnmanagedCallersOnly]
        private static void glMapGrid2d_Lazy(int un, double u1, double u2, int vn, double v1, double v2)
        {
            _glMapGrid2d_fnptr = (delegate* unmanaged<int, double, double, int, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMapGrid2d");
            _glMapGrid2d_fnptr(un, u1, u2, vn, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glMapGrid2f</c>]</b></summary>
        public static delegate* unmanaged<int, float, float, int, float, float, void> _glMapGrid2f_fnptr = &glMapGrid2f_Lazy;
        [UnmanagedCallersOnly]
        private static void glMapGrid2f_Lazy(int un, float u1, float u2, int vn, float v1, float v2)
        {
            _glMapGrid2f_fnptr = (delegate* unmanaged<int, float, float, int, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMapGrid2f");
            _glMapGrid2f_fnptr(un, u1, u2, vn, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glMapGrid2xOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, void> _glMapGrid2xOES_fnptr = &glMapGrid2xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMapGrid2xOES_Lazy(int n, int u1, int u2, int v1, int v2)
        {
            _glMapGrid2xOES_fnptr = (delegate* unmanaged<int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMapGrid2xOES");
            _glMapGrid2xOES_fnptr(n, u1, u2, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glMapNamedBuffer</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void*> _glMapNamedBuffer_fnptr = &glMapNamedBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void* glMapNamedBuffer_Lazy(int buffer, uint access)
        {
            _glMapNamedBuffer_fnptr = (delegate* unmanaged<int, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapNamedBuffer");
            return _glMapNamedBuffer_fnptr(buffer, access);
        }
        
        /// <summary><b>[entry point: <c>glMapNamedBufferEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void*> _glMapNamedBufferEXT_fnptr = &glMapNamedBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void* glMapNamedBufferEXT_Lazy(int buffer, uint access)
        {
            _glMapNamedBufferEXT_fnptr = (delegate* unmanaged<int, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapNamedBufferEXT");
            return _glMapNamedBufferEXT_fnptr(buffer, access);
        }
        
        /// <summary><b>[entry point: <c>glMapNamedBufferRange</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr, nint, uint, void*> _glMapNamedBufferRange_fnptr = &glMapNamedBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void* glMapNamedBufferRange_Lazy(int buffer, IntPtr offset, nint length, uint access)
        {
            _glMapNamedBufferRange_fnptr = (delegate* unmanaged<int, IntPtr, nint, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapNamedBufferRange");
            return _glMapNamedBufferRange_fnptr(buffer, offset, length, access);
        }
        
        /// <summary><b>[entry point: <c>glMapNamedBufferRangeEXT</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr, nint, uint, void*> _glMapNamedBufferRangeEXT_fnptr = &glMapNamedBufferRangeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void* glMapNamedBufferRangeEXT_Lazy(int buffer, IntPtr offset, nint length, uint access)
        {
            _glMapNamedBufferRangeEXT_fnptr = (delegate* unmanaged<int, IntPtr, nint, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapNamedBufferRangeEXT");
            return _glMapNamedBufferRangeEXT_fnptr(buffer, offset, length, access);
        }
        
        /// <summary><b>[entry point: <c>glMapObjectBufferATI</c>]</b></summary>
        public static delegate* unmanaged<int, void*> _glMapObjectBufferATI_fnptr = &glMapObjectBufferATI_Lazy;
        [UnmanagedCallersOnly]
        private static void* glMapObjectBufferATI_Lazy(int buffer)
        {
            _glMapObjectBufferATI_fnptr = (delegate* unmanaged<int, void*>)GLLoader.BindingsContext.GetProcAddress("glMapObjectBufferATI");
            return _glMapObjectBufferATI_fnptr(buffer);
        }
        
        /// <summary><b>[entry point: <c>glMapParameterfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glMapParameterfvNV_fnptr = &glMapParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMapParameterfvNV_Lazy(uint target, uint pname, float* parameters)
        {
            _glMapParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMapParameterfvNV");
            _glMapParameterfvNV_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMapParameterivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glMapParameterivNV_fnptr = &glMapParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMapParameterivNV_Lazy(uint target, uint pname, int* parameters)
        {
            _glMapParameterivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMapParameterivNV");
            _glMapParameterivNV_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMapTexture2DINTEL</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int*, uint*, void*> _glMapTexture2DINTEL_fnptr = &glMapTexture2DINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void* glMapTexture2DINTEL_Lazy(int texture, int level, uint access, int* stride, uint* layout)
        {
            _glMapTexture2DINTEL_fnptr = (delegate* unmanaged<int, int, uint, int*, uint*, void*>)GLLoader.BindingsContext.GetProcAddress("glMapTexture2DINTEL");
            return _glMapTexture2DINTEL_fnptr(texture, level, access, stride, layout);
        }
        
        /// <summary><b>[entry point: <c>glMapVertexAttrib1dAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double, double, int, int, double*, void> _glMapVertexAttrib1dAPPLE_fnptr = &glMapVertexAttrib1dAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glMapVertexAttrib1dAPPLE_Lazy(uint index, uint size, double u1, double u2, int stride, int order, double* points)
        {
            _glMapVertexAttrib1dAPPLE_fnptr = (delegate* unmanaged<uint, uint, double, double, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMapVertexAttrib1dAPPLE");
            _glMapVertexAttrib1dAPPLE_fnptr(index, size, u1, u2, stride, order, points);
        }
        
        /// <summary><b>[entry point: <c>glMapVertexAttrib1fAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, float, int, int, float*, void> _glMapVertexAttrib1fAPPLE_fnptr = &glMapVertexAttrib1fAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glMapVertexAttrib1fAPPLE_Lazy(uint index, uint size, float u1, float u2, int stride, int order, float* points)
        {
            _glMapVertexAttrib1fAPPLE_fnptr = (delegate* unmanaged<uint, uint, float, float, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMapVertexAttrib1fAPPLE");
            _glMapVertexAttrib1fAPPLE_fnptr(index, size, u1, u2, stride, order, points);
        }
        
        /// <summary><b>[entry point: <c>glMapVertexAttrib2dAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double, double, int, int, double, double, int, int, double*, void> _glMapVertexAttrib2dAPPLE_fnptr = &glMapVertexAttrib2dAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glMapVertexAttrib2dAPPLE_Lazy(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
        {
            _glMapVertexAttrib2dAPPLE_fnptr = (delegate* unmanaged<uint, uint, double, double, int, int, double, double, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMapVertexAttrib2dAPPLE");
            _glMapVertexAttrib2dAPPLE_fnptr(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        /// <summary><b>[entry point: <c>glMapVertexAttrib2fAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, float, int, int, float, float, int, int, float*, void> _glMapVertexAttrib2fAPPLE_fnptr = &glMapVertexAttrib2fAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glMapVertexAttrib2fAPPLE_Lazy(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
        {
            _glMapVertexAttrib2fAPPLE_fnptr = (delegate* unmanaged<uint, uint, float, float, int, int, float, float, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMapVertexAttrib2fAPPLE");
            _glMapVertexAttrib2fAPPLE_fnptr(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        /// <summary><b>[entry point: <c>glMaterialf</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, void> _glMaterialf_fnptr = &glMaterialf_Lazy;
        [UnmanagedCallersOnly]
        private static void glMaterialf_Lazy(uint face, uint pname, float param)
        {
            _glMaterialf_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glMaterialf");
            _glMaterialf_fnptr(face, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glMaterialfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glMaterialfv_fnptr = &glMaterialfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMaterialfv_Lazy(uint face, uint pname, float* parameters)
        {
            _glMaterialfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMaterialfv");
            _glMaterialfv_fnptr(face, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMateriali</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glMateriali_fnptr = &glMateriali_Lazy;
        [UnmanagedCallersOnly]
        private static void glMateriali_Lazy(uint face, uint pname, int param)
        {
            _glMateriali_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMateriali");
            _glMateriali_fnptr(face, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glMaterialiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glMaterialiv_fnptr = &glMaterialiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMaterialiv_Lazy(uint face, uint pname, int* parameters)
        {
            _glMaterialiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMaterialiv");
            _glMaterialiv_fnptr(face, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMaterialx</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glMaterialx_fnptr = &glMaterialx_Lazy;
        [UnmanagedCallersOnly]
        private static void glMaterialx_Lazy(uint face, uint pname, int param)
        {
            _glMaterialx_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMaterialx");
            _glMaterialx_fnptr(face, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glMaterialxOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glMaterialxOES_fnptr = &glMaterialxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMaterialxOES_Lazy(uint face, uint pname, int param)
        {
            _glMaterialxOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMaterialxOES");
            _glMaterialxOES_fnptr(face, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glMaterialxv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glMaterialxv_fnptr = &glMaterialxv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMaterialxv_Lazy(uint face, uint pname, int* param)
        {
            _glMaterialxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMaterialxv");
            _glMaterialxv_fnptr(face, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glMaterialxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glMaterialxvOES_fnptr = &glMaterialxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMaterialxvOES_Lazy(uint face, uint pname, int* param)
        {
            _glMaterialxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMaterialxvOES");
            _glMaterialxvOES_fnptr(face, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glMatrixFrustumEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, double, double, double, void> _glMatrixFrustumEXT_fnptr = &glMatrixFrustumEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixFrustumEXT_Lazy(uint mode, double left, double right, double bottom, double top, double zNear, double zFar)
        {
            _glMatrixFrustumEXT_fnptr = (delegate* unmanaged<uint, double, double, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixFrustumEXT");
            _glMatrixFrustumEXT_fnptr(mode, left, right, bottom, top, zNear, zFar);
        }
        
        /// <summary><b>[entry point: <c>glMatrixIndexPointerARB</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void*, void> _glMatrixIndexPointerARB_fnptr = &glMatrixIndexPointerARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixIndexPointerARB_Lazy(int size, uint type, int stride, void* pointer)
        {
            _glMatrixIndexPointerARB_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixIndexPointerARB");
            _glMatrixIndexPointerARB_fnptr(size, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glMatrixIndexPointerOES</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void*, void> _glMatrixIndexPointerOES_fnptr = &glMatrixIndexPointerOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixIndexPointerOES_Lazy(int size, uint type, int stride, void* pointer)
        {
            _glMatrixIndexPointerOES_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixIndexPointerOES");
            _glMatrixIndexPointerOES_fnptr(size, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glMatrixIndexubvARB</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, void> _glMatrixIndexubvARB_fnptr = &glMatrixIndexubvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixIndexubvARB_Lazy(int size, byte* indices)
        {
            _glMatrixIndexubvARB_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixIndexubvARB");
            _glMatrixIndexubvARB_fnptr(size, indices);
        }
        
        /// <summary><b>[entry point: <c>glMatrixIndexuivARB</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glMatrixIndexuivARB_fnptr = &glMatrixIndexuivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixIndexuivARB_Lazy(int size, uint* indices)
        {
            _glMatrixIndexuivARB_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixIndexuivARB");
            _glMatrixIndexuivARB_fnptr(size, indices);
        }
        
        /// <summary><b>[entry point: <c>glMatrixIndexusvARB</c>]</b></summary>
        public static delegate* unmanaged<int, ushort*, void> _glMatrixIndexusvARB_fnptr = &glMatrixIndexusvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixIndexusvARB_Lazy(int size, ushort* indices)
        {
            _glMatrixIndexusvARB_fnptr = (delegate* unmanaged<int, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixIndexusvARB");
            _glMatrixIndexusvARB_fnptr(size, indices);
        }
        
        /// <summary><b>[entry point: <c>glMatrixLoad3x2fNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMatrixLoad3x2fNV_fnptr = &glMatrixLoad3x2fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixLoad3x2fNV_Lazy(uint matrixMode, float* m)
        {
            _glMatrixLoad3x2fNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoad3x2fNV");
            _glMatrixLoad3x2fNV_fnptr(matrixMode, m);
        }
        
        /// <summary><b>[entry point: <c>glMatrixLoad3x3fNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMatrixLoad3x3fNV_fnptr = &glMatrixLoad3x3fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixLoad3x3fNV_Lazy(uint matrixMode, float* m)
        {
            _glMatrixLoad3x3fNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoad3x3fNV");
            _glMatrixLoad3x3fNV_fnptr(matrixMode, m);
        }
        
        /// <summary><b>[entry point: <c>glMatrixLoaddEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glMatrixLoaddEXT_fnptr = &glMatrixLoaddEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixLoaddEXT_Lazy(uint mode, double* m)
        {
            _glMatrixLoaddEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoaddEXT");
            _glMatrixLoaddEXT_fnptr(mode, m);
        }
        
        /// <summary><b>[entry point: <c>glMatrixLoadfEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMatrixLoadfEXT_fnptr = &glMatrixLoadfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixLoadfEXT_Lazy(uint mode, float* m)
        {
            _glMatrixLoadfEXT_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoadfEXT");
            _glMatrixLoadfEXT_fnptr(mode, m);
        }
        
        /// <summary><b>[entry point: <c>glMatrixLoadIdentityEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glMatrixLoadIdentityEXT_fnptr = &glMatrixLoadIdentityEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixLoadIdentityEXT_Lazy(uint mode)
        {
            _glMatrixLoadIdentityEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoadIdentityEXT");
            _glMatrixLoadIdentityEXT_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glMatrixLoadTranspose3x3fNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMatrixLoadTranspose3x3fNV_fnptr = &glMatrixLoadTranspose3x3fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixLoadTranspose3x3fNV_Lazy(uint matrixMode, float* m)
        {
            _glMatrixLoadTranspose3x3fNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoadTranspose3x3fNV");
            _glMatrixLoadTranspose3x3fNV_fnptr(matrixMode, m);
        }
        
        /// <summary><b>[entry point: <c>glMatrixLoadTransposedEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glMatrixLoadTransposedEXT_fnptr = &glMatrixLoadTransposedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixLoadTransposedEXT_Lazy(uint mode, double* m)
        {
            _glMatrixLoadTransposedEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoadTransposedEXT");
            _glMatrixLoadTransposedEXT_fnptr(mode, m);
        }
        
        /// <summary><b>[entry point: <c>glMatrixLoadTransposefEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMatrixLoadTransposefEXT_fnptr = &glMatrixLoadTransposefEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixLoadTransposefEXT_Lazy(uint mode, float* m)
        {
            _glMatrixLoadTransposefEXT_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoadTransposefEXT");
            _glMatrixLoadTransposefEXT_fnptr(mode, m);
        }
        
        /// <summary><b>[entry point: <c>glMatrixMode</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glMatrixMode_fnptr = &glMatrixMode_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixMode_Lazy(uint mode)
        {
            _glMatrixMode_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMode");
            _glMatrixMode_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glMatrixMult3x2fNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMatrixMult3x2fNV_fnptr = &glMatrixMult3x2fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixMult3x2fNV_Lazy(uint matrixMode, float* m)
        {
            _glMatrixMult3x2fNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMult3x2fNV");
            _glMatrixMult3x2fNV_fnptr(matrixMode, m);
        }
        
        /// <summary><b>[entry point: <c>glMatrixMult3x3fNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMatrixMult3x3fNV_fnptr = &glMatrixMult3x3fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixMult3x3fNV_Lazy(uint matrixMode, float* m)
        {
            _glMatrixMult3x3fNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMult3x3fNV");
            _glMatrixMult3x3fNV_fnptr(matrixMode, m);
        }
        
        /// <summary><b>[entry point: <c>glMatrixMultdEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glMatrixMultdEXT_fnptr = &glMatrixMultdEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixMultdEXT_Lazy(uint mode, double* m)
        {
            _glMatrixMultdEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMultdEXT");
            _glMatrixMultdEXT_fnptr(mode, m);
        }
        
        /// <summary><b>[entry point: <c>glMatrixMultfEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMatrixMultfEXT_fnptr = &glMatrixMultfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixMultfEXT_Lazy(uint mode, float* m)
        {
            _glMatrixMultfEXT_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMultfEXT");
            _glMatrixMultfEXT_fnptr(mode, m);
        }
        
        /// <summary><b>[entry point: <c>glMatrixMultTranspose3x3fNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMatrixMultTranspose3x3fNV_fnptr = &glMatrixMultTranspose3x3fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixMultTranspose3x3fNV_Lazy(uint matrixMode, float* m)
        {
            _glMatrixMultTranspose3x3fNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMultTranspose3x3fNV");
            _glMatrixMultTranspose3x3fNV_fnptr(matrixMode, m);
        }
        
        /// <summary><b>[entry point: <c>glMatrixMultTransposedEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glMatrixMultTransposedEXT_fnptr = &glMatrixMultTransposedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixMultTransposedEXT_Lazy(uint mode, double* m)
        {
            _glMatrixMultTransposedEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMultTransposedEXT");
            _glMatrixMultTransposedEXT_fnptr(mode, m);
        }
        
        /// <summary><b>[entry point: <c>glMatrixMultTransposefEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMatrixMultTransposefEXT_fnptr = &glMatrixMultTransposefEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixMultTransposefEXT_Lazy(uint mode, float* m)
        {
            _glMatrixMultTransposefEXT_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMultTransposefEXT");
            _glMatrixMultTransposefEXT_fnptr(mode, m);
        }
        
        /// <summary><b>[entry point: <c>glMatrixOrthoEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, double, double, double, void> _glMatrixOrthoEXT_fnptr = &glMatrixOrthoEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixOrthoEXT_Lazy(uint mode, double left, double right, double bottom, double top, double zNear, double zFar)
        {
            _glMatrixOrthoEXT_fnptr = (delegate* unmanaged<uint, double, double, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixOrthoEXT");
            _glMatrixOrthoEXT_fnptr(mode, left, right, bottom, top, zNear, zFar);
        }
        
        /// <summary><b>[entry point: <c>glMatrixPopEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glMatrixPopEXT_fnptr = &glMatrixPopEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixPopEXT_Lazy(uint mode)
        {
            _glMatrixPopEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixPopEXT");
            _glMatrixPopEXT_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glMatrixPushEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glMatrixPushEXT_fnptr = &glMatrixPushEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixPushEXT_Lazy(uint mode)
        {
            _glMatrixPushEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixPushEXT");
            _glMatrixPushEXT_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glMatrixRotatedEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, double, void> _glMatrixRotatedEXT_fnptr = &glMatrixRotatedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixRotatedEXT_Lazy(uint mode, double angle, double x, double y, double z)
        {
            _glMatrixRotatedEXT_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixRotatedEXT");
            _glMatrixRotatedEXT_fnptr(mode, angle, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glMatrixRotatefEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, void> _glMatrixRotatefEXT_fnptr = &glMatrixRotatefEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixRotatefEXT_Lazy(uint mode, float angle, float x, float y, float z)
        {
            _glMatrixRotatefEXT_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixRotatefEXT");
            _glMatrixRotatefEXT_fnptr(mode, angle, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glMatrixScaledEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, void> _glMatrixScaledEXT_fnptr = &glMatrixScaledEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixScaledEXT_Lazy(uint mode, double x, double y, double z)
        {
            _glMatrixScaledEXT_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixScaledEXT");
            _glMatrixScaledEXT_fnptr(mode, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glMatrixScalefEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, void> _glMatrixScalefEXT_fnptr = &glMatrixScalefEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixScalefEXT_Lazy(uint mode, float x, float y, float z)
        {
            _glMatrixScalefEXT_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixScalefEXT");
            _glMatrixScalefEXT_fnptr(mode, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glMatrixTranslatedEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, void> _glMatrixTranslatedEXT_fnptr = &glMatrixTranslatedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixTranslatedEXT_Lazy(uint mode, double x, double y, double z)
        {
            _glMatrixTranslatedEXT_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixTranslatedEXT");
            _glMatrixTranslatedEXT_fnptr(mode, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glMatrixTranslatefEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, void> _glMatrixTranslatefEXT_fnptr = &glMatrixTranslatefEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMatrixTranslatefEXT_Lazy(uint mode, float x, float y, float z)
        {
            _glMatrixTranslatefEXT_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixTranslatefEXT");
            _glMatrixTranslatefEXT_fnptr(mode, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glMaxShaderCompilerThreadsARB</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glMaxShaderCompilerThreadsARB_fnptr = &glMaxShaderCompilerThreadsARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMaxShaderCompilerThreadsARB_Lazy(uint count)
        {
            _glMaxShaderCompilerThreadsARB_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMaxShaderCompilerThreadsARB");
            _glMaxShaderCompilerThreadsARB_fnptr(count);
        }
        
        /// <summary><b>[entry point: <c>glMaxShaderCompilerThreadsKHR</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glMaxShaderCompilerThreadsKHR_fnptr = &glMaxShaderCompilerThreadsKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glMaxShaderCompilerThreadsKHR_Lazy(uint count)
        {
            _glMaxShaderCompilerThreadsKHR_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMaxShaderCompilerThreadsKHR");
            _glMaxShaderCompilerThreadsKHR_fnptr(count);
        }
        
        /// <summary><b>[entry point: <c>glMemoryBarrier</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glMemoryBarrier_fnptr = &glMemoryBarrier_Lazy;
        [UnmanagedCallersOnly]
        private static void glMemoryBarrier_Lazy(uint barriers)
        {
            _glMemoryBarrier_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMemoryBarrier");
            _glMemoryBarrier_fnptr(barriers);
        }
        
        /// <summary><b>[entry point: <c>glMemoryBarrierByRegion</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glMemoryBarrierByRegion_fnptr = &glMemoryBarrierByRegion_Lazy;
        [UnmanagedCallersOnly]
        private static void glMemoryBarrierByRegion_Lazy(uint barriers)
        {
            _glMemoryBarrierByRegion_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMemoryBarrierByRegion");
            _glMemoryBarrierByRegion_fnptr(barriers);
        }
        
        /// <summary><b>[entry point: <c>glMemoryBarrierEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glMemoryBarrierEXT_fnptr = &glMemoryBarrierEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMemoryBarrierEXT_Lazy(uint barriers)
        {
            _glMemoryBarrierEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMemoryBarrierEXT");
            _glMemoryBarrierEXT_fnptr(barriers);
        }
        
        /// <summary><b>[entry point: <c>glMemoryObjectParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glMemoryObjectParameterivEXT_fnptr = &glMemoryObjectParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMemoryObjectParameterivEXT_Lazy(uint memoryObject, uint pname, int* parameters)
        {
            _glMemoryObjectParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMemoryObjectParameterivEXT");
            _glMemoryObjectParameterivEXT_fnptr(memoryObject, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMinmax</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte, void> _glMinmax_fnptr = &glMinmax_Lazy;
        [UnmanagedCallersOnly]
        private static void glMinmax_Lazy(uint target, uint internalformat, byte sink)
        {
            _glMinmax_fnptr = (delegate* unmanaged<uint, uint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glMinmax");
            _glMinmax_fnptr(target, internalformat, sink);
        }
        
        /// <summary><b>[entry point: <c>glMinmaxEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte, void> _glMinmaxEXT_fnptr = &glMinmaxEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMinmaxEXT_Lazy(uint target, uint internalformat, byte sink)
        {
            _glMinmaxEXT_fnptr = (delegate* unmanaged<uint, uint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glMinmaxEXT");
            _glMinmaxEXT_fnptr(target, internalformat, sink);
        }
        
        /// <summary><b>[entry point: <c>glMinSampleShading</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glMinSampleShading_fnptr = &glMinSampleShading_Lazy;
        [UnmanagedCallersOnly]
        private static void glMinSampleShading_Lazy(float value)
        {
            _glMinSampleShading_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glMinSampleShading");
            _glMinSampleShading_fnptr(value);
        }
        
        /// <summary><b>[entry point: <c>glMinSampleShadingARB</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glMinSampleShadingARB_fnptr = &glMinSampleShadingARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMinSampleShadingARB_Lazy(float value)
        {
            _glMinSampleShadingARB_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glMinSampleShadingARB");
            _glMinSampleShadingARB_fnptr(value);
        }
        
        /// <summary><b>[entry point: <c>glMinSampleShadingOES</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glMinSampleShadingOES_fnptr = &glMinSampleShadingOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMinSampleShadingOES_Lazy(float value)
        {
            _glMinSampleShadingOES_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glMinSampleShadingOES");
            _glMinSampleShadingOES_fnptr(value);
        }
        
        /// <summary><b>[entry point: <c>glMulticastBarrierNV</c>]</b></summary>
        public static delegate* unmanaged<void> _glMulticastBarrierNV_fnptr = &glMulticastBarrierNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMulticastBarrierNV_Lazy()
        {
            _glMulticastBarrierNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glMulticastBarrierNV");
            _glMulticastBarrierNV_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glMulticastBlitFramebufferNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, uint, uint, void> _glMulticastBlitFramebufferNV_fnptr = &glMulticastBlitFramebufferNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMulticastBlitFramebufferNV_Lazy(uint srcGpu, uint dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            _glMulticastBlitFramebufferNV_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastBlitFramebufferNV");
            _glMulticastBlitFramebufferNV_fnptr(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        /// <summary><b>[entry point: <c>glMulticastBufferSubDataNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, IntPtr, nint, void*, void> _glMulticastBufferSubDataNV_fnptr = &glMulticastBufferSubDataNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMulticastBufferSubDataNV_Lazy(uint gpuMask, int buffer, IntPtr offset, nint size, void* data)
        {
            _glMulticastBufferSubDataNV_fnptr = (delegate* unmanaged<uint, int, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastBufferSubDataNV");
            _glMulticastBufferSubDataNV_fnptr(gpuMask, buffer, offset, size, data);
        }
        
        /// <summary><b>[entry point: <c>glMulticastCopyBufferSubDataNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, IntPtr, IntPtr, nint, void> _glMulticastCopyBufferSubDataNV_fnptr = &glMulticastCopyBufferSubDataNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMulticastCopyBufferSubDataNV_Lazy(uint readGpu, uint writeGpuMask, int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size)
        {
            _glMulticastCopyBufferSubDataNV_fnptr = (delegate* unmanaged<uint, uint, int, int, IntPtr, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastCopyBufferSubDataNV");
            _glMulticastCopyBufferSubDataNV_fnptr(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
        }
        
        /// <summary><b>[entry point: <c>glMulticastCopyImageSubDataNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void> _glMulticastCopyImageSubDataNV_fnptr = &glMulticastCopyImageSubDataNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMulticastCopyImageSubDataNV_Lazy(uint srcGpu, uint dstGpuMask, uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            _glMulticastCopyImageSubDataNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastCopyImageSubDataNV");
            _glMulticastCopyImageSubDataNV_fnptr(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        /// <summary><b>[entry point: <c>glMulticastFramebufferSampleLocationsfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, float*, void> _glMulticastFramebufferSampleLocationsfvNV_fnptr = &glMulticastFramebufferSampleLocationsfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMulticastFramebufferSampleLocationsfvNV_Lazy(uint gpu, int framebuffer, uint start, int count, float* v)
        {
            _glMulticastFramebufferSampleLocationsfvNV_fnptr = (delegate* unmanaged<uint, int, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastFramebufferSampleLocationsfvNV");
            _glMulticastFramebufferSampleLocationsfvNV_fnptr(gpu, framebuffer, start, count, v);
        }
        
        /// <summary><b>[entry point: <c>glMulticastGetQueryObjecti64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, long*, void> _glMulticastGetQueryObjecti64vNV_fnptr = &glMulticastGetQueryObjecti64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMulticastGetQueryObjecti64vNV_Lazy(uint gpu, uint id, uint pname, long* parameters)
        {
            _glMulticastGetQueryObjecti64vNV_fnptr = (delegate* unmanaged<uint, uint, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastGetQueryObjecti64vNV");
            _glMulticastGetQueryObjecti64vNV_fnptr(gpu, id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMulticastGetQueryObjectivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glMulticastGetQueryObjectivNV_fnptr = &glMulticastGetQueryObjectivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMulticastGetQueryObjectivNV_Lazy(uint gpu, uint id, uint pname, int* parameters)
        {
            _glMulticastGetQueryObjectivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastGetQueryObjectivNV");
            _glMulticastGetQueryObjectivNV_fnptr(gpu, id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMulticastGetQueryObjectui64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, ulong*, void> _glMulticastGetQueryObjectui64vNV_fnptr = &glMulticastGetQueryObjectui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMulticastGetQueryObjectui64vNV_Lazy(uint gpu, uint id, uint pname, ulong* parameters)
        {
            _glMulticastGetQueryObjectui64vNV_fnptr = (delegate* unmanaged<uint, uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastGetQueryObjectui64vNV");
            _glMulticastGetQueryObjectui64vNV_fnptr(gpu, id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMulticastGetQueryObjectuivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint*, void> _glMulticastGetQueryObjectuivNV_fnptr = &glMulticastGetQueryObjectuivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMulticastGetQueryObjectuivNV_Lazy(uint gpu, uint id, uint pname, uint* parameters)
        {
            _glMulticastGetQueryObjectuivNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastGetQueryObjectuivNV");
            _glMulticastGetQueryObjectuivNV_fnptr(gpu, id, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMulticastScissorArrayvNVX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int*, void> _glMulticastScissorArrayvNVX_fnptr = &glMulticastScissorArrayvNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void glMulticastScissorArrayvNVX_Lazy(uint gpu, uint first, int count, int* v)
        {
            _glMulticastScissorArrayvNVX_fnptr = (delegate* unmanaged<uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastScissorArrayvNVX");
            _glMulticastScissorArrayvNVX_fnptr(gpu, first, count, v);
        }
        
        /// <summary><b>[entry point: <c>glMulticastViewportArrayvNVX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, float*, void> _glMulticastViewportArrayvNVX_fnptr = &glMulticastViewportArrayvNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void glMulticastViewportArrayvNVX_Lazy(uint gpu, uint first, int count, float* v)
        {
            _glMulticastViewportArrayvNVX_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastViewportArrayvNVX");
            _glMulticastViewportArrayvNVX_fnptr(gpu, first, count, v);
        }
        
        /// <summary><b>[entry point: <c>glMulticastViewportPositionWScaleNVX</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, float, void> _glMulticastViewportPositionWScaleNVX_fnptr = &glMulticastViewportPositionWScaleNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void glMulticastViewportPositionWScaleNVX_Lazy(uint gpu, uint index, float xcoeff, float ycoeff)
        {
            _glMulticastViewportPositionWScaleNVX_fnptr = (delegate* unmanaged<uint, uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastViewportPositionWScaleNVX");
            _glMulticastViewportPositionWScaleNVX_fnptr(gpu, index, xcoeff, ycoeff);
        }
        
        /// <summary><b>[entry point: <c>glMulticastWaitSyncNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glMulticastWaitSyncNV_fnptr = &glMulticastWaitSyncNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMulticastWaitSyncNV_Lazy(uint signalGpu, uint waitGpuMask)
        {
            _glMulticastWaitSyncNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastWaitSyncNV");
            _glMulticastWaitSyncNV_fnptr(signalGpu, waitGpuMask);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawArrays</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, int*, int, void> _glMultiDrawArrays_fnptr = &glMultiDrawArrays_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawArrays_Lazy(uint mode, int* first, int* count, int drawcount)
        {
            _glMultiDrawArrays_fnptr = (delegate* unmanaged<uint, int*, int*, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArrays");
            _glMultiDrawArrays_fnptr(mode, first, count, drawcount);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawArraysEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, int*, int, void> _glMultiDrawArraysEXT_fnptr = &glMultiDrawArraysEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawArraysEXT_Lazy(uint mode, int* first, int* count, int primcount)
        {
            _glMultiDrawArraysEXT_fnptr = (delegate* unmanaged<uint, int*, int*, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysEXT");
            _glMultiDrawArraysEXT_fnptr(mode, first, count, primcount);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawArraysIndirect</c>]</b></summary>
        public static delegate* unmanaged<uint, void*, int, int, void> _glMultiDrawArraysIndirect_fnptr = &glMultiDrawArraysIndirect_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawArraysIndirect_Lazy(uint mode, void* indirect, int drawcount, int stride)
        {
            _glMultiDrawArraysIndirect_fnptr = (delegate* unmanaged<uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysIndirect");
            _glMultiDrawArraysIndirect_fnptr(mode, indirect, drawcount, stride);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawArraysIndirectAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, void*, int, int, void> _glMultiDrawArraysIndirectAMD_fnptr = &glMultiDrawArraysIndirectAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawArraysIndirectAMD_Lazy(uint mode, void* indirect, int primcount, int stride)
        {
            _glMultiDrawArraysIndirectAMD_fnptr = (delegate* unmanaged<uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysIndirectAMD");
            _glMultiDrawArraysIndirectAMD_fnptr(mode, indirect, primcount, stride);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawArraysIndirectBindlessCountNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void*, int, int, int, int, void> _glMultiDrawArraysIndirectBindlessCountNV_fnptr = &glMultiDrawArraysIndirectBindlessCountNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawArraysIndirectBindlessCountNV_Lazy(uint mode, void* indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
        {
            _glMultiDrawArraysIndirectBindlessCountNV_fnptr = (delegate* unmanaged<uint, void*, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysIndirectBindlessCountNV");
            _glMultiDrawArraysIndirectBindlessCountNV_fnptr(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawArraysIndirectBindlessNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void*, int, int, int, void> _glMultiDrawArraysIndirectBindlessNV_fnptr = &glMultiDrawArraysIndirectBindlessNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawArraysIndirectBindlessNV_Lazy(uint mode, void* indirect, int drawCount, int stride, int vertexBufferCount)
        {
            _glMultiDrawArraysIndirectBindlessNV_fnptr = (delegate* unmanaged<uint, void*, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysIndirectBindlessNV");
            _glMultiDrawArraysIndirectBindlessNV_fnptr(mode, indirect, drawCount, stride, vertexBufferCount);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawArraysIndirectCount</c>]</b></summary>
        public static delegate* unmanaged<uint, void*, IntPtr, int, int, void> _glMultiDrawArraysIndirectCount_fnptr = &glMultiDrawArraysIndirectCount_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawArraysIndirectCount_Lazy(uint mode, void* indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            _glMultiDrawArraysIndirectCount_fnptr = (delegate* unmanaged<uint, void*, IntPtr, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysIndirectCount");
            _glMultiDrawArraysIndirectCount_fnptr(mode, indirect, drawcount, maxdrawcount, stride);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawArraysIndirectCountARB</c>]</b></summary>
        public static delegate* unmanaged<uint, void*, IntPtr, int, int, void> _glMultiDrawArraysIndirectCountARB_fnptr = &glMultiDrawArraysIndirectCountARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawArraysIndirectCountARB_Lazy(uint mode, void* indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            _glMultiDrawArraysIndirectCountARB_fnptr = (delegate* unmanaged<uint, void*, IntPtr, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysIndirectCountARB");
            _glMultiDrawArraysIndirectCountARB_fnptr(mode, indirect, drawcount, maxdrawcount, stride);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawArraysIndirectEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void*, int, int, void> _glMultiDrawArraysIndirectEXT_fnptr = &glMultiDrawArraysIndirectEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawArraysIndirectEXT_Lazy(uint mode, void* indirect, int drawcount, int stride)
        {
            _glMultiDrawArraysIndirectEXT_fnptr = (delegate* unmanaged<uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysIndirectEXT");
            _glMultiDrawArraysIndirectEXT_fnptr(mode, indirect, drawcount, stride);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawElementArrayAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, int*, int, void> _glMultiDrawElementArrayAPPLE_fnptr = &glMultiDrawElementArrayAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawElementArrayAPPLE_Lazy(uint mode, int* first, int* count, int primcount)
        {
            _glMultiDrawElementArrayAPPLE_fnptr = (delegate* unmanaged<uint, int*, int*, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementArrayAPPLE");
            _glMultiDrawElementArrayAPPLE_fnptr(mode, first, count, primcount);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawElements</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, uint, void**, int, void> _glMultiDrawElements_fnptr = &glMultiDrawElements_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawElements_Lazy(uint mode, int* count, uint type, void** indices, int drawcount)
        {
            _glMultiDrawElements_fnptr = (delegate* unmanaged<uint, int*, uint, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElements");
            _glMultiDrawElements_fnptr(mode, count, type, indices, drawcount);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawElementsBaseVertex</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, uint, void**, int, int*, void> _glMultiDrawElementsBaseVertex_fnptr = &glMultiDrawElementsBaseVertex_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawElementsBaseVertex_Lazy(uint mode, int* count, uint type, void** indices, int drawcount, int* basevertex)
        {
            _glMultiDrawElementsBaseVertex_fnptr = (delegate* unmanaged<uint, int*, uint, void**, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsBaseVertex");
            _glMultiDrawElementsBaseVertex_fnptr(mode, count, type, indices, drawcount, basevertex);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawElementsBaseVertexEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, uint, void**, int, int*, void> _glMultiDrawElementsBaseVertexEXT_fnptr = &glMultiDrawElementsBaseVertexEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawElementsBaseVertexEXT_Lazy(uint mode, int* count, uint type, void** indices, int drawcount, int* basevertex)
        {
            _glMultiDrawElementsBaseVertexEXT_fnptr = (delegate* unmanaged<uint, int*, uint, void**, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsBaseVertexEXT");
            _glMultiDrawElementsBaseVertexEXT_fnptr(mode, count, type, indices, drawcount, basevertex);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawElementsEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, uint, void**, int, void> _glMultiDrawElementsEXT_fnptr = &glMultiDrawElementsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawElementsEXT_Lazy(uint mode, int* count, uint type, void** indices, int primcount)
        {
            _glMultiDrawElementsEXT_fnptr = (delegate* unmanaged<uint, int*, uint, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsEXT");
            _glMultiDrawElementsEXT_fnptr(mode, count, type, indices, primcount);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawElementsIndirect</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, int, int, void> _glMultiDrawElementsIndirect_fnptr = &glMultiDrawElementsIndirect_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawElementsIndirect_Lazy(uint mode, uint type, void* indirect, int drawcount, int stride)
        {
            _glMultiDrawElementsIndirect_fnptr = (delegate* unmanaged<uint, uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsIndirect");
            _glMultiDrawElementsIndirect_fnptr(mode, type, indirect, drawcount, stride);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawElementsIndirectAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, int, int, void> _glMultiDrawElementsIndirectAMD_fnptr = &glMultiDrawElementsIndirectAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawElementsIndirectAMD_Lazy(uint mode, uint type, void* indirect, int primcount, int stride)
        {
            _glMultiDrawElementsIndirectAMD_fnptr = (delegate* unmanaged<uint, uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsIndirectAMD");
            _glMultiDrawElementsIndirectAMD_fnptr(mode, type, indirect, primcount, stride);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawElementsIndirectBindlessCountNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, int, int, int, int, void> _glMultiDrawElementsIndirectBindlessCountNV_fnptr = &glMultiDrawElementsIndirectBindlessCountNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawElementsIndirectBindlessCountNV_Lazy(uint mode, uint type, void* indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
        {
            _glMultiDrawElementsIndirectBindlessCountNV_fnptr = (delegate* unmanaged<uint, uint, void*, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsIndirectBindlessCountNV");
            _glMultiDrawElementsIndirectBindlessCountNV_fnptr(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawElementsIndirectBindlessNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, int, int, int, void> _glMultiDrawElementsIndirectBindlessNV_fnptr = &glMultiDrawElementsIndirectBindlessNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawElementsIndirectBindlessNV_Lazy(uint mode, uint type, void* indirect, int drawCount, int stride, int vertexBufferCount)
        {
            _glMultiDrawElementsIndirectBindlessNV_fnptr = (delegate* unmanaged<uint, uint, void*, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsIndirectBindlessNV");
            _glMultiDrawElementsIndirectBindlessNV_fnptr(mode, type, indirect, drawCount, stride, vertexBufferCount);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawElementsIndirectCount</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, IntPtr, int, int, void> _glMultiDrawElementsIndirectCount_fnptr = &glMultiDrawElementsIndirectCount_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawElementsIndirectCount_Lazy(uint mode, uint type, void* indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            _glMultiDrawElementsIndirectCount_fnptr = (delegate* unmanaged<uint, uint, void*, IntPtr, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsIndirectCount");
            _glMultiDrawElementsIndirectCount_fnptr(mode, type, indirect, drawcount, maxdrawcount, stride);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawElementsIndirectCountARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, IntPtr, int, int, void> _glMultiDrawElementsIndirectCountARB_fnptr = &glMultiDrawElementsIndirectCountARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawElementsIndirectCountARB_Lazy(uint mode, uint type, void* indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            _glMultiDrawElementsIndirectCountARB_fnptr = (delegate* unmanaged<uint, uint, void*, IntPtr, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsIndirectCountARB");
            _glMultiDrawElementsIndirectCountARB_fnptr(mode, type, indirect, drawcount, maxdrawcount, stride);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawElementsIndirectEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, int, int, void> _glMultiDrawElementsIndirectEXT_fnptr = &glMultiDrawElementsIndirectEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawElementsIndirectEXT_Lazy(uint mode, uint type, void* indirect, int drawcount, int stride)
        {
            _glMultiDrawElementsIndirectEXT_fnptr = (delegate* unmanaged<uint, uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsIndirectEXT");
            _glMultiDrawElementsIndirectEXT_fnptr(mode, type, indirect, drawcount, stride);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawMeshTasksIndirectCountNV</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, IntPtr, int, int, void> _glMultiDrawMeshTasksIndirectCountNV_fnptr = &glMultiDrawMeshTasksIndirectCountNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawMeshTasksIndirectCountNV_Lazy(IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            _glMultiDrawMeshTasksIndirectCountNV_fnptr = (delegate* unmanaged<IntPtr, IntPtr, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawMeshTasksIndirectCountNV");
            _glMultiDrawMeshTasksIndirectCountNV_fnptr(indirect, drawcount, maxdrawcount, stride);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawMeshTasksIndirectNV</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, int, int, void> _glMultiDrawMeshTasksIndirectNV_fnptr = &glMultiDrawMeshTasksIndirectNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawMeshTasksIndirectNV_Lazy(IntPtr indirect, int drawcount, int stride)
        {
            _glMultiDrawMeshTasksIndirectNV_fnptr = (delegate* unmanaged<IntPtr, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawMeshTasksIndirectNV");
            _glMultiDrawMeshTasksIndirectNV_fnptr(indirect, drawcount, stride);
        }
        
        /// <summary><b>[entry point: <c>glMultiDrawRangeElementArrayAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, int*, int, void> _glMultiDrawRangeElementArrayAPPLE_fnptr = &glMultiDrawRangeElementArrayAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiDrawRangeElementArrayAPPLE_Lazy(uint mode, uint start, uint end, int* first, int* count, int primcount)
        {
            _glMultiDrawRangeElementArrayAPPLE_fnptr = (delegate* unmanaged<uint, uint, uint, int*, int*, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawRangeElementArrayAPPLE");
            _glMultiDrawRangeElementArrayAPPLE_fnptr(mode, start, end, first, count, primcount);
        }
        
        /// <summary><b>[entry point: <c>glMultiModeDrawArraysIBM</c>]</b></summary>
        public static delegate* unmanaged<uint*, int*, int*, int, int, void> _glMultiModeDrawArraysIBM_fnptr = &glMultiModeDrawArraysIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiModeDrawArraysIBM_Lazy(uint* mode, int* first, int* count, int primcount, int modestride)
        {
            _glMultiModeDrawArraysIBM_fnptr = (delegate* unmanaged<uint*, int*, int*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiModeDrawArraysIBM");
            _glMultiModeDrawArraysIBM_fnptr(mode, first, count, primcount, modestride);
        }
        
        /// <summary><b>[entry point: <c>glMultiModeDrawElementsIBM</c>]</b></summary>
        public static delegate* unmanaged<uint*, int*, uint, void**, int, int, void> _glMultiModeDrawElementsIBM_fnptr = &glMultiModeDrawElementsIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiModeDrawElementsIBM_Lazy(uint* mode, int* count, uint type, void** indices, int primcount, int modestride)
        {
            _glMultiModeDrawElementsIBM_fnptr = (delegate* unmanaged<uint*, int*, uint, void**, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiModeDrawElementsIBM");
            _glMultiModeDrawElementsIBM_fnptr(mode, count, type, indices, primcount, modestride);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexBufferEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, void> _glMultiTexBufferEXT_fnptr = &glMultiTexBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexBufferEXT_Lazy(uint texunit, uint target, uint internalformat, int buffer)
        {
            _glMultiTexBufferEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexBufferEXT");
            _glMultiTexBufferEXT_fnptr(texunit, target, internalformat, buffer);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1bOES</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte, void> _glMultiTexCoord1bOES_fnptr = &glMultiTexCoord1bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1bOES_Lazy(uint texture, sbyte s)
        {
            _glMultiTexCoord1bOES_fnptr = (delegate* unmanaged<uint, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1bOES");
            _glMultiTexCoord1bOES_fnptr(texture, s);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1bvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte*, void> _glMultiTexCoord1bvOES_fnptr = &glMultiTexCoord1bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1bvOES_Lazy(uint texture, sbyte* coords)
        {
            _glMultiTexCoord1bvOES_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1bvOES");
            _glMultiTexCoord1bvOES_fnptr(texture, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1d</c>]</b></summary>
        public static delegate* unmanaged<uint, double, void> _glMultiTexCoord1d_fnptr = &glMultiTexCoord1d_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1d_Lazy(uint target, double s)
        {
            _glMultiTexCoord1d_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1d");
            _glMultiTexCoord1d_fnptr(target, s);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1dARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double, void> _glMultiTexCoord1dARB_fnptr = &glMultiTexCoord1dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1dARB_Lazy(uint target, double s)
        {
            _glMultiTexCoord1dARB_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1dARB");
            _glMultiTexCoord1dARB_fnptr(target, s);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1dv</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glMultiTexCoord1dv_fnptr = &glMultiTexCoord1dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1dv_Lazy(uint target, double* v)
        {
            _glMultiTexCoord1dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1dv");
            _glMultiTexCoord1dv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1dvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glMultiTexCoord1dvARB_fnptr = &glMultiTexCoord1dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1dvARB_Lazy(uint target, double* v)
        {
            _glMultiTexCoord1dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1dvARB");
            _glMultiTexCoord1dvARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1f</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glMultiTexCoord1f_fnptr = &glMultiTexCoord1f_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1f_Lazy(uint target, float s)
        {
            _glMultiTexCoord1f_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1f");
            _glMultiTexCoord1f_fnptr(target, s);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1fARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glMultiTexCoord1fARB_fnptr = &glMultiTexCoord1fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1fARB_Lazy(uint target, float s)
        {
            _glMultiTexCoord1fARB_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1fARB");
            _glMultiTexCoord1fARB_fnptr(target, s);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1fv</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMultiTexCoord1fv_fnptr = &glMultiTexCoord1fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1fv_Lazy(uint target, float* v)
        {
            _glMultiTexCoord1fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1fv");
            _glMultiTexCoord1fv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1fvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMultiTexCoord1fvARB_fnptr = &glMultiTexCoord1fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1fvARB_Lazy(uint target, float* v)
        {
            _glMultiTexCoord1fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1fvARB");
            _glMultiTexCoord1fvARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1hNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half, void> _glMultiTexCoord1hNV_fnptr = &glMultiTexCoord1hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1hNV_Lazy(uint target, Half s)
        {
            _glMultiTexCoord1hNV_fnptr = (delegate* unmanaged<uint, Half, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1hNV");
            _glMultiTexCoord1hNV_fnptr(target, s);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1hvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half*, void> _glMultiTexCoord1hvNV_fnptr = &glMultiTexCoord1hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1hvNV_Lazy(uint target, Half* v)
        {
            _glMultiTexCoord1hvNV_fnptr = (delegate* unmanaged<uint, Half*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1hvNV");
            _glMultiTexCoord1hvNV_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1i</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glMultiTexCoord1i_fnptr = &glMultiTexCoord1i_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1i_Lazy(uint target, int s)
        {
            _glMultiTexCoord1i_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1i");
            _glMultiTexCoord1i_fnptr(target, s);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1iARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glMultiTexCoord1iARB_fnptr = &glMultiTexCoord1iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1iARB_Lazy(uint target, int s)
        {
            _glMultiTexCoord1iARB_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1iARB");
            _glMultiTexCoord1iARB_fnptr(target, s);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1iv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glMultiTexCoord1iv_fnptr = &glMultiTexCoord1iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1iv_Lazy(uint target, int* v)
        {
            _glMultiTexCoord1iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1iv");
            _glMultiTexCoord1iv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1ivARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glMultiTexCoord1ivARB_fnptr = &glMultiTexCoord1ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1ivARB_Lazy(uint target, int* v)
        {
            _glMultiTexCoord1ivARB_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1ivARB");
            _glMultiTexCoord1ivARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1s</c>]</b></summary>
        public static delegate* unmanaged<uint, short, void> _glMultiTexCoord1s_fnptr = &glMultiTexCoord1s_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1s_Lazy(uint target, short s)
        {
            _glMultiTexCoord1s_fnptr = (delegate* unmanaged<uint, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1s");
            _glMultiTexCoord1s_fnptr(target, s);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1sARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short, void> _glMultiTexCoord1sARB_fnptr = &glMultiTexCoord1sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1sARB_Lazy(uint target, short s)
        {
            _glMultiTexCoord1sARB_fnptr = (delegate* unmanaged<uint, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1sARB");
            _glMultiTexCoord1sARB_fnptr(target, s);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1sv</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glMultiTexCoord1sv_fnptr = &glMultiTexCoord1sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1sv_Lazy(uint target, short* v)
        {
            _glMultiTexCoord1sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1sv");
            _glMultiTexCoord1sv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1svARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glMultiTexCoord1svARB_fnptr = &glMultiTexCoord1svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1svARB_Lazy(uint target, short* v)
        {
            _glMultiTexCoord1svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1svARB");
            _glMultiTexCoord1svARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1xOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glMultiTexCoord1xOES_fnptr = &glMultiTexCoord1xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1xOES_Lazy(uint texture, int s)
        {
            _glMultiTexCoord1xOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1xOES");
            _glMultiTexCoord1xOES_fnptr(texture, s);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord1xvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glMultiTexCoord1xvOES_fnptr = &glMultiTexCoord1xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord1xvOES_Lazy(uint texture, int* coords)
        {
            _glMultiTexCoord1xvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1xvOES");
            _glMultiTexCoord1xvOES_fnptr(texture, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2bOES</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte, sbyte, void> _glMultiTexCoord2bOES_fnptr = &glMultiTexCoord2bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2bOES_Lazy(uint texture, sbyte s, sbyte t)
        {
            _glMultiTexCoord2bOES_fnptr = (delegate* unmanaged<uint, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2bOES");
            _glMultiTexCoord2bOES_fnptr(texture, s, t);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2bvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte*, void> _glMultiTexCoord2bvOES_fnptr = &glMultiTexCoord2bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2bvOES_Lazy(uint texture, sbyte* coords)
        {
            _glMultiTexCoord2bvOES_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2bvOES");
            _glMultiTexCoord2bvOES_fnptr(texture, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2d</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, void> _glMultiTexCoord2d_fnptr = &glMultiTexCoord2d_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2d_Lazy(uint target, double s, double t)
        {
            _glMultiTexCoord2d_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2d");
            _glMultiTexCoord2d_fnptr(target, s, t);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2dARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, void> _glMultiTexCoord2dARB_fnptr = &glMultiTexCoord2dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2dARB_Lazy(uint target, double s, double t)
        {
            _glMultiTexCoord2dARB_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2dARB");
            _glMultiTexCoord2dARB_fnptr(target, s, t);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2dv</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glMultiTexCoord2dv_fnptr = &glMultiTexCoord2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2dv_Lazy(uint target, double* v)
        {
            _glMultiTexCoord2dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2dv");
            _glMultiTexCoord2dv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2dvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glMultiTexCoord2dvARB_fnptr = &glMultiTexCoord2dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2dvARB_Lazy(uint target, double* v)
        {
            _glMultiTexCoord2dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2dvARB");
            _glMultiTexCoord2dvARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2f</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, void> _glMultiTexCoord2f_fnptr = &glMultiTexCoord2f_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2f_Lazy(uint target, float s, float t)
        {
            _glMultiTexCoord2f_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2f");
            _glMultiTexCoord2f_fnptr(target, s, t);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2fARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, void> _glMultiTexCoord2fARB_fnptr = &glMultiTexCoord2fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2fARB_Lazy(uint target, float s, float t)
        {
            _glMultiTexCoord2fARB_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2fARB");
            _glMultiTexCoord2fARB_fnptr(target, s, t);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2fv</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMultiTexCoord2fv_fnptr = &glMultiTexCoord2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2fv_Lazy(uint target, float* v)
        {
            _glMultiTexCoord2fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2fv");
            _glMultiTexCoord2fv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2fvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMultiTexCoord2fvARB_fnptr = &glMultiTexCoord2fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2fvARB_Lazy(uint target, float* v)
        {
            _glMultiTexCoord2fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2fvARB");
            _glMultiTexCoord2fvARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2hNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half, Half, void> _glMultiTexCoord2hNV_fnptr = &glMultiTexCoord2hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2hNV_Lazy(uint target, Half s, Half t)
        {
            _glMultiTexCoord2hNV_fnptr = (delegate* unmanaged<uint, Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2hNV");
            _glMultiTexCoord2hNV_fnptr(target, s, t);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2hvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half*, void> _glMultiTexCoord2hvNV_fnptr = &glMultiTexCoord2hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2hvNV_Lazy(uint target, Half* v)
        {
            _glMultiTexCoord2hvNV_fnptr = (delegate* unmanaged<uint, Half*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2hvNV");
            _glMultiTexCoord2hvNV_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2i</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void> _glMultiTexCoord2i_fnptr = &glMultiTexCoord2i_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2i_Lazy(uint target, int s, int t)
        {
            _glMultiTexCoord2i_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2i");
            _glMultiTexCoord2i_fnptr(target, s, t);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2iARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void> _glMultiTexCoord2iARB_fnptr = &glMultiTexCoord2iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2iARB_Lazy(uint target, int s, int t)
        {
            _glMultiTexCoord2iARB_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2iARB");
            _glMultiTexCoord2iARB_fnptr(target, s, t);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2iv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glMultiTexCoord2iv_fnptr = &glMultiTexCoord2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2iv_Lazy(uint target, int* v)
        {
            _glMultiTexCoord2iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2iv");
            _glMultiTexCoord2iv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2ivARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glMultiTexCoord2ivARB_fnptr = &glMultiTexCoord2ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2ivARB_Lazy(uint target, int* v)
        {
            _glMultiTexCoord2ivARB_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2ivARB");
            _glMultiTexCoord2ivARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2s</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, void> _glMultiTexCoord2s_fnptr = &glMultiTexCoord2s_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2s_Lazy(uint target, short s, short t)
        {
            _glMultiTexCoord2s_fnptr = (delegate* unmanaged<uint, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2s");
            _glMultiTexCoord2s_fnptr(target, s, t);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2sARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, void> _glMultiTexCoord2sARB_fnptr = &glMultiTexCoord2sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2sARB_Lazy(uint target, short s, short t)
        {
            _glMultiTexCoord2sARB_fnptr = (delegate* unmanaged<uint, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2sARB");
            _glMultiTexCoord2sARB_fnptr(target, s, t);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2sv</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glMultiTexCoord2sv_fnptr = &glMultiTexCoord2sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2sv_Lazy(uint target, short* v)
        {
            _glMultiTexCoord2sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2sv");
            _glMultiTexCoord2sv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2svARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glMultiTexCoord2svARB_fnptr = &glMultiTexCoord2svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2svARB_Lazy(uint target, short* v)
        {
            _glMultiTexCoord2svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2svARB");
            _glMultiTexCoord2svARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2xOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void> _glMultiTexCoord2xOES_fnptr = &glMultiTexCoord2xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2xOES_Lazy(uint texture, int s, int t)
        {
            _glMultiTexCoord2xOES_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2xOES");
            _glMultiTexCoord2xOES_fnptr(texture, s, t);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord2xvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glMultiTexCoord2xvOES_fnptr = &glMultiTexCoord2xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord2xvOES_Lazy(uint texture, int* coords)
        {
            _glMultiTexCoord2xvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2xvOES");
            _glMultiTexCoord2xvOES_fnptr(texture, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3bOES</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte, sbyte, sbyte, void> _glMultiTexCoord3bOES_fnptr = &glMultiTexCoord3bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3bOES_Lazy(uint texture, sbyte s, sbyte t, sbyte r)
        {
            _glMultiTexCoord3bOES_fnptr = (delegate* unmanaged<uint, sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3bOES");
            _glMultiTexCoord3bOES_fnptr(texture, s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3bvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte*, void> _glMultiTexCoord3bvOES_fnptr = &glMultiTexCoord3bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3bvOES_Lazy(uint texture, sbyte* coords)
        {
            _glMultiTexCoord3bvOES_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3bvOES");
            _glMultiTexCoord3bvOES_fnptr(texture, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3d</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, void> _glMultiTexCoord3d_fnptr = &glMultiTexCoord3d_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3d_Lazy(uint target, double s, double t, double r)
        {
            _glMultiTexCoord3d_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3d");
            _glMultiTexCoord3d_fnptr(target, s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3dARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, void> _glMultiTexCoord3dARB_fnptr = &glMultiTexCoord3dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3dARB_Lazy(uint target, double s, double t, double r)
        {
            _glMultiTexCoord3dARB_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3dARB");
            _glMultiTexCoord3dARB_fnptr(target, s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3dv</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glMultiTexCoord3dv_fnptr = &glMultiTexCoord3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3dv_Lazy(uint target, double* v)
        {
            _glMultiTexCoord3dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3dv");
            _glMultiTexCoord3dv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3dvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glMultiTexCoord3dvARB_fnptr = &glMultiTexCoord3dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3dvARB_Lazy(uint target, double* v)
        {
            _glMultiTexCoord3dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3dvARB");
            _glMultiTexCoord3dvARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3f</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, void> _glMultiTexCoord3f_fnptr = &glMultiTexCoord3f_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3f_Lazy(uint target, float s, float t, float r)
        {
            _glMultiTexCoord3f_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3f");
            _glMultiTexCoord3f_fnptr(target, s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3fARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, void> _glMultiTexCoord3fARB_fnptr = &glMultiTexCoord3fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3fARB_Lazy(uint target, float s, float t, float r)
        {
            _glMultiTexCoord3fARB_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3fARB");
            _glMultiTexCoord3fARB_fnptr(target, s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3fv</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMultiTexCoord3fv_fnptr = &glMultiTexCoord3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3fv_Lazy(uint target, float* v)
        {
            _glMultiTexCoord3fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3fv");
            _glMultiTexCoord3fv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3fvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMultiTexCoord3fvARB_fnptr = &glMultiTexCoord3fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3fvARB_Lazy(uint target, float* v)
        {
            _glMultiTexCoord3fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3fvARB");
            _glMultiTexCoord3fvARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3hNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half, Half, Half, void> _glMultiTexCoord3hNV_fnptr = &glMultiTexCoord3hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3hNV_Lazy(uint target, Half s, Half t, Half r)
        {
            _glMultiTexCoord3hNV_fnptr = (delegate* unmanaged<uint, Half, Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3hNV");
            _glMultiTexCoord3hNV_fnptr(target, s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3hvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half*, void> _glMultiTexCoord3hvNV_fnptr = &glMultiTexCoord3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3hvNV_Lazy(uint target, Half* v)
        {
            _glMultiTexCoord3hvNV_fnptr = (delegate* unmanaged<uint, Half*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3hvNV");
            _glMultiTexCoord3hvNV_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3i</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, void> _glMultiTexCoord3i_fnptr = &glMultiTexCoord3i_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3i_Lazy(uint target, int s, int t, int r)
        {
            _glMultiTexCoord3i_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3i");
            _glMultiTexCoord3i_fnptr(target, s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3iARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, void> _glMultiTexCoord3iARB_fnptr = &glMultiTexCoord3iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3iARB_Lazy(uint target, int s, int t, int r)
        {
            _glMultiTexCoord3iARB_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3iARB");
            _glMultiTexCoord3iARB_fnptr(target, s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3iv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glMultiTexCoord3iv_fnptr = &glMultiTexCoord3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3iv_Lazy(uint target, int* v)
        {
            _glMultiTexCoord3iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3iv");
            _glMultiTexCoord3iv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3ivARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glMultiTexCoord3ivARB_fnptr = &glMultiTexCoord3ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3ivARB_Lazy(uint target, int* v)
        {
            _glMultiTexCoord3ivARB_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3ivARB");
            _glMultiTexCoord3ivARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3s</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, short, void> _glMultiTexCoord3s_fnptr = &glMultiTexCoord3s_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3s_Lazy(uint target, short s, short t, short r)
        {
            _glMultiTexCoord3s_fnptr = (delegate* unmanaged<uint, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3s");
            _glMultiTexCoord3s_fnptr(target, s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3sARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, short, void> _glMultiTexCoord3sARB_fnptr = &glMultiTexCoord3sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3sARB_Lazy(uint target, short s, short t, short r)
        {
            _glMultiTexCoord3sARB_fnptr = (delegate* unmanaged<uint, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3sARB");
            _glMultiTexCoord3sARB_fnptr(target, s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3sv</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glMultiTexCoord3sv_fnptr = &glMultiTexCoord3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3sv_Lazy(uint target, short* v)
        {
            _glMultiTexCoord3sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3sv");
            _glMultiTexCoord3sv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3svARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glMultiTexCoord3svARB_fnptr = &glMultiTexCoord3svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3svARB_Lazy(uint target, short* v)
        {
            _glMultiTexCoord3svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3svARB");
            _glMultiTexCoord3svARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3xOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, void> _glMultiTexCoord3xOES_fnptr = &glMultiTexCoord3xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3xOES_Lazy(uint texture, int s, int t, int r)
        {
            _glMultiTexCoord3xOES_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3xOES");
            _glMultiTexCoord3xOES_fnptr(texture, s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord3xvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glMultiTexCoord3xvOES_fnptr = &glMultiTexCoord3xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord3xvOES_Lazy(uint texture, int* coords)
        {
            _glMultiTexCoord3xvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3xvOES");
            _glMultiTexCoord3xvOES_fnptr(texture, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4bOES</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte, sbyte, sbyte, sbyte, void> _glMultiTexCoord4bOES_fnptr = &glMultiTexCoord4bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4bOES_Lazy(uint texture, sbyte s, sbyte t, sbyte r, sbyte q)
        {
            _glMultiTexCoord4bOES_fnptr = (delegate* unmanaged<uint, sbyte, sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4bOES");
            _glMultiTexCoord4bOES_fnptr(texture, s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4bvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte*, void> _glMultiTexCoord4bvOES_fnptr = &glMultiTexCoord4bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4bvOES_Lazy(uint texture, sbyte* coords)
        {
            _glMultiTexCoord4bvOES_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4bvOES");
            _glMultiTexCoord4bvOES_fnptr(texture, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4d</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, double, void> _glMultiTexCoord4d_fnptr = &glMultiTexCoord4d_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4d_Lazy(uint target, double s, double t, double r, double q)
        {
            _glMultiTexCoord4d_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4d");
            _glMultiTexCoord4d_fnptr(target, s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4dARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, double, void> _glMultiTexCoord4dARB_fnptr = &glMultiTexCoord4dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4dARB_Lazy(uint target, double s, double t, double r, double q)
        {
            _glMultiTexCoord4dARB_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4dARB");
            _glMultiTexCoord4dARB_fnptr(target, s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4dv</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glMultiTexCoord4dv_fnptr = &glMultiTexCoord4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4dv_Lazy(uint target, double* v)
        {
            _glMultiTexCoord4dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4dv");
            _glMultiTexCoord4dv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4dvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glMultiTexCoord4dvARB_fnptr = &glMultiTexCoord4dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4dvARB_Lazy(uint target, double* v)
        {
            _glMultiTexCoord4dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4dvARB");
            _glMultiTexCoord4dvARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4f</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, void> _glMultiTexCoord4f_fnptr = &glMultiTexCoord4f_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4f_Lazy(uint target, float s, float t, float r, float q)
        {
            _glMultiTexCoord4f_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4f");
            _glMultiTexCoord4f_fnptr(target, s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4fARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, void> _glMultiTexCoord4fARB_fnptr = &glMultiTexCoord4fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4fARB_Lazy(uint target, float s, float t, float r, float q)
        {
            _glMultiTexCoord4fARB_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4fARB");
            _glMultiTexCoord4fARB_fnptr(target, s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4fv</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMultiTexCoord4fv_fnptr = &glMultiTexCoord4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4fv_Lazy(uint target, float* v)
        {
            _glMultiTexCoord4fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4fv");
            _glMultiTexCoord4fv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4fvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glMultiTexCoord4fvARB_fnptr = &glMultiTexCoord4fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4fvARB_Lazy(uint target, float* v)
        {
            _glMultiTexCoord4fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4fvARB");
            _glMultiTexCoord4fvARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4hNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half, Half, Half, Half, void> _glMultiTexCoord4hNV_fnptr = &glMultiTexCoord4hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4hNV_Lazy(uint target, Half s, Half t, Half r, Half q)
        {
            _glMultiTexCoord4hNV_fnptr = (delegate* unmanaged<uint, Half, Half, Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4hNV");
            _glMultiTexCoord4hNV_fnptr(target, s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4hvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half*, void> _glMultiTexCoord4hvNV_fnptr = &glMultiTexCoord4hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4hvNV_Lazy(uint target, Half* v)
        {
            _glMultiTexCoord4hvNV_fnptr = (delegate* unmanaged<uint, Half*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4hvNV");
            _glMultiTexCoord4hvNV_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4i</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, void> _glMultiTexCoord4i_fnptr = &glMultiTexCoord4i_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4i_Lazy(uint target, int s, int t, int r, int q)
        {
            _glMultiTexCoord4i_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4i");
            _glMultiTexCoord4i_fnptr(target, s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4iARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, void> _glMultiTexCoord4iARB_fnptr = &glMultiTexCoord4iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4iARB_Lazy(uint target, int s, int t, int r, int q)
        {
            _glMultiTexCoord4iARB_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4iARB");
            _glMultiTexCoord4iARB_fnptr(target, s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4iv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glMultiTexCoord4iv_fnptr = &glMultiTexCoord4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4iv_Lazy(uint target, int* v)
        {
            _glMultiTexCoord4iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4iv");
            _glMultiTexCoord4iv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4ivARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glMultiTexCoord4ivARB_fnptr = &glMultiTexCoord4ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4ivARB_Lazy(uint target, int* v)
        {
            _glMultiTexCoord4ivARB_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4ivARB");
            _glMultiTexCoord4ivARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4s</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, short, short, void> _glMultiTexCoord4s_fnptr = &glMultiTexCoord4s_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4s_Lazy(uint target, short s, short t, short r, short q)
        {
            _glMultiTexCoord4s_fnptr = (delegate* unmanaged<uint, short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4s");
            _glMultiTexCoord4s_fnptr(target, s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4sARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, short, short, void> _glMultiTexCoord4sARB_fnptr = &glMultiTexCoord4sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4sARB_Lazy(uint target, short s, short t, short r, short q)
        {
            _glMultiTexCoord4sARB_fnptr = (delegate* unmanaged<uint, short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4sARB");
            _glMultiTexCoord4sARB_fnptr(target, s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4sv</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glMultiTexCoord4sv_fnptr = &glMultiTexCoord4sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4sv_Lazy(uint target, short* v)
        {
            _glMultiTexCoord4sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4sv");
            _glMultiTexCoord4sv_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4svARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glMultiTexCoord4svARB_fnptr = &glMultiTexCoord4svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4svARB_Lazy(uint target, short* v)
        {
            _glMultiTexCoord4svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4svARB");
            _glMultiTexCoord4svARB_fnptr(target, v);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4x</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, void> _glMultiTexCoord4x_fnptr = &glMultiTexCoord4x_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4x_Lazy(uint texture, int s, int t, int r, int q)
        {
            _glMultiTexCoord4x_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4x");
            _glMultiTexCoord4x_fnptr(texture, s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4xOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, void> _glMultiTexCoord4xOES_fnptr = &glMultiTexCoord4xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4xOES_Lazy(uint texture, int s, int t, int r, int q)
        {
            _glMultiTexCoord4xOES_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4xOES");
            _glMultiTexCoord4xOES_fnptr(texture, s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoord4xvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glMultiTexCoord4xvOES_fnptr = &glMultiTexCoord4xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoord4xvOES_Lazy(uint texture, int* coords)
        {
            _glMultiTexCoord4xvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4xvOES");
            _glMultiTexCoord4xvOES_fnptr(texture, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoordP1ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glMultiTexCoordP1ui_fnptr = &glMultiTexCoordP1ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoordP1ui_Lazy(uint texture, uint type, uint coords)
        {
            _glMultiTexCoordP1ui_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP1ui");
            _glMultiTexCoordP1ui_fnptr(texture, type, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoordP1uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glMultiTexCoordP1uiv_fnptr = &glMultiTexCoordP1uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoordP1uiv_Lazy(uint texture, uint type, uint* coords)
        {
            _glMultiTexCoordP1uiv_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP1uiv");
            _glMultiTexCoordP1uiv_fnptr(texture, type, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoordP2ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glMultiTexCoordP2ui_fnptr = &glMultiTexCoordP2ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoordP2ui_Lazy(uint texture, uint type, uint coords)
        {
            _glMultiTexCoordP2ui_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP2ui");
            _glMultiTexCoordP2ui_fnptr(texture, type, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoordP2uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glMultiTexCoordP2uiv_fnptr = &glMultiTexCoordP2uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoordP2uiv_Lazy(uint texture, uint type, uint* coords)
        {
            _glMultiTexCoordP2uiv_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP2uiv");
            _glMultiTexCoordP2uiv_fnptr(texture, type, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoordP3ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glMultiTexCoordP3ui_fnptr = &glMultiTexCoordP3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoordP3ui_Lazy(uint texture, uint type, uint coords)
        {
            _glMultiTexCoordP3ui_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP3ui");
            _glMultiTexCoordP3ui_fnptr(texture, type, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoordP3uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glMultiTexCoordP3uiv_fnptr = &glMultiTexCoordP3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoordP3uiv_Lazy(uint texture, uint type, uint* coords)
        {
            _glMultiTexCoordP3uiv_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP3uiv");
            _glMultiTexCoordP3uiv_fnptr(texture, type, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoordP4ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glMultiTexCoordP4ui_fnptr = &glMultiTexCoordP4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoordP4ui_Lazy(uint texture, uint type, uint coords)
        {
            _glMultiTexCoordP4ui_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP4ui");
            _glMultiTexCoordP4ui_fnptr(texture, type, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoordP4uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glMultiTexCoordP4uiv_fnptr = &glMultiTexCoordP4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoordP4uiv_Lazy(uint texture, uint type, uint* coords)
        {
            _glMultiTexCoordP4uiv_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP4uiv");
            _glMultiTexCoordP4uiv_fnptr(texture, type, coords);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexCoordPointerEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, void*, void> _glMultiTexCoordPointerEXT_fnptr = &glMultiTexCoordPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexCoordPointerEXT_Lazy(uint texunit, int size, uint type, int stride, void* pointer)
        {
            _glMultiTexCoordPointerEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordPointerEXT");
            _glMultiTexCoordPointerEXT_fnptr(texunit, size, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexEnvfEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float, void> _glMultiTexEnvfEXT_fnptr = &glMultiTexEnvfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexEnvfEXT_Lazy(uint texunit, uint target, uint pname, float param)
        {
            _glMultiTexEnvfEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexEnvfEXT");
            _glMultiTexEnvfEXT_fnptr(texunit, target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexEnvfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float*, void> _glMultiTexEnvfvEXT_fnptr = &glMultiTexEnvfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexEnvfvEXT_Lazy(uint texunit, uint target, uint pname, float* parameters)
        {
            _glMultiTexEnvfvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexEnvfvEXT");
            _glMultiTexEnvfvEXT_fnptr(texunit, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexEnviEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, void> _glMultiTexEnviEXT_fnptr = &glMultiTexEnviEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexEnviEXT_Lazy(uint texunit, uint target, uint pname, int param)
        {
            _glMultiTexEnviEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexEnviEXT");
            _glMultiTexEnviEXT_fnptr(texunit, target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexEnvivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glMultiTexEnvivEXT_fnptr = &glMultiTexEnvivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexEnvivEXT_Lazy(uint texunit, uint target, uint pname, int* parameters)
        {
            _glMultiTexEnvivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexEnvivEXT");
            _glMultiTexEnvivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexGendEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, double, void> _glMultiTexGendEXT_fnptr = &glMultiTexGendEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexGendEXT_Lazy(uint texunit, uint coord, uint pname, double param)
        {
            _glMultiTexGendEXT_fnptr = (delegate* unmanaged<uint, uint, uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexGendEXT");
            _glMultiTexGendEXT_fnptr(texunit, coord, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexGendvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, double*, void> _glMultiTexGendvEXT_fnptr = &glMultiTexGendvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexGendvEXT_Lazy(uint texunit, uint coord, uint pname, double* parameters)
        {
            _glMultiTexGendvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexGendvEXT");
            _glMultiTexGendvEXT_fnptr(texunit, coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexGenfEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float, void> _glMultiTexGenfEXT_fnptr = &glMultiTexGenfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexGenfEXT_Lazy(uint texunit, uint coord, uint pname, float param)
        {
            _glMultiTexGenfEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexGenfEXT");
            _glMultiTexGenfEXT_fnptr(texunit, coord, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexGenfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float*, void> _glMultiTexGenfvEXT_fnptr = &glMultiTexGenfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexGenfvEXT_Lazy(uint texunit, uint coord, uint pname, float* parameters)
        {
            _glMultiTexGenfvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexGenfvEXT");
            _glMultiTexGenfvEXT_fnptr(texunit, coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexGeniEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, void> _glMultiTexGeniEXT_fnptr = &glMultiTexGeniEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexGeniEXT_Lazy(uint texunit, uint coord, uint pname, int param)
        {
            _glMultiTexGeniEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexGeniEXT");
            _glMultiTexGeniEXT_fnptr(texunit, coord, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexGenivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glMultiTexGenivEXT_fnptr = &glMultiTexGenivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexGenivEXT_Lazy(uint texunit, uint coord, uint pname, int* parameters)
        {
            _glMultiTexGenivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexGenivEXT");
            _glMultiTexGenivEXT_fnptr(texunit, coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexImage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, void*, void> _glMultiTexImage1DEXT_fnptr = &glMultiTexImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexImage1DEXT_Lazy(uint texunit, uint target, int level, int internalformat, int width, int border, uint format, uint type, void* pixels)
        {
            _glMultiTexImage1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexImage1DEXT");
            _glMultiTexImage1DEXT_fnptr(texunit, target, level, internalformat, width, border, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexImage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, int, uint, uint, void*, void> _glMultiTexImage2DEXT_fnptr = &glMultiTexImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexImage2DEXT_Lazy(uint texunit, uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, void* pixels)
        {
            _glMultiTexImage2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexImage2DEXT");
            _glMultiTexImage2DEXT_fnptr(texunit, target, level, internalformat, width, height, border, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexImage3DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, int, int, uint, uint, void*, void> _glMultiTexImage3DEXT_fnptr = &glMultiTexImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexImage3DEXT_Lazy(uint texunit, uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels)
        {
            _glMultiTexImage3DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexImage3DEXT");
            _glMultiTexImage3DEXT_fnptr(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexParameterfEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float, void> _glMultiTexParameterfEXT_fnptr = &glMultiTexParameterfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexParameterfEXT_Lazy(uint texunit, uint target, uint pname, float param)
        {
            _glMultiTexParameterfEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexParameterfEXT");
            _glMultiTexParameterfEXT_fnptr(texunit, target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float*, void> _glMultiTexParameterfvEXT_fnptr = &glMultiTexParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexParameterfvEXT_Lazy(uint texunit, uint target, uint pname, float* parameters)
        {
            _glMultiTexParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexParameterfvEXT");
            _glMultiTexParameterfvEXT_fnptr(texunit, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexParameteriEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, void> _glMultiTexParameteriEXT_fnptr = &glMultiTexParameteriEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexParameteriEXT_Lazy(uint texunit, uint target, uint pname, int param)
        {
            _glMultiTexParameteriEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexParameteriEXT");
            _glMultiTexParameteriEXT_fnptr(texunit, target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexParameterIivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glMultiTexParameterIivEXT_fnptr = &glMultiTexParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexParameterIivEXT_Lazy(uint texunit, uint target, uint pname, int* parameters)
        {
            _glMultiTexParameterIivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexParameterIivEXT");
            _glMultiTexParameterIivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexParameterIuivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint*, void> _glMultiTexParameterIuivEXT_fnptr = &glMultiTexParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexParameterIuivEXT_Lazy(uint texunit, uint target, uint pname, uint* parameters)
        {
            _glMultiTexParameterIuivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexParameterIuivEXT");
            _glMultiTexParameterIuivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glMultiTexParameterivEXT_fnptr = &glMultiTexParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexParameterivEXT_Lazy(uint texunit, uint target, uint pname, int* parameters)
        {
            _glMultiTexParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexParameterivEXT");
            _glMultiTexParameterivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexRenderbufferEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glMultiTexRenderbufferEXT_fnptr = &glMultiTexRenderbufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexRenderbufferEXT_Lazy(uint texunit, uint target, int renderbuffer)
        {
            _glMultiTexRenderbufferEXT_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexRenderbufferEXT");
            _glMultiTexRenderbufferEXT_fnptr(texunit, target, renderbuffer);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexSubImage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, uint, uint, void*, void> _glMultiTexSubImage1DEXT_fnptr = &glMultiTexSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexSubImage1DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int width, uint format, uint type, void* pixels)
        {
            _glMultiTexSubImage1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexSubImage1DEXT");
            _glMultiTexSubImage1DEXT_fnptr(texunit, target, level, xoffset, width, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexSubImage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, int, uint, uint, void*, void> _glMultiTexSubImage2DEXT_fnptr = &glMultiTexSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexSubImage2DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels)
        {
            _glMultiTexSubImage2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexSubImage2DEXT");
            _glMultiTexSubImage2DEXT_fnptr(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glMultiTexSubImage3DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, uint, uint, void*, void> _glMultiTexSubImage3DEXT_fnptr = &glMultiTexSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultiTexSubImage3DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels)
        {
            _glMultiTexSubImage3DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexSubImage3DEXT");
            _glMultiTexSubImage3DEXT_fnptr(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glMultMatrixd</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glMultMatrixd_fnptr = &glMultMatrixd_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultMatrixd_Lazy(double* m)
        {
            _glMultMatrixd_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultMatrixd");
            _glMultMatrixd_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glMultMatrixf</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glMultMatrixf_fnptr = &glMultMatrixf_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultMatrixf_Lazy(float* m)
        {
            _glMultMatrixf_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultMatrixf");
            _glMultMatrixf_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glMultMatrixx</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glMultMatrixx_fnptr = &glMultMatrixx_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultMatrixx_Lazy(int* m)
        {
            _glMultMatrixx_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultMatrixx");
            _glMultMatrixx_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glMultMatrixxOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glMultMatrixxOES_fnptr = &glMultMatrixxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultMatrixxOES_Lazy(int* m)
        {
            _glMultMatrixxOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultMatrixxOES");
            _glMultMatrixxOES_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glMultTransposeMatrixd</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glMultTransposeMatrixd_fnptr = &glMultTransposeMatrixd_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultTransposeMatrixd_Lazy(double* m)
        {
            _glMultTransposeMatrixd_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultTransposeMatrixd");
            _glMultTransposeMatrixd_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glMultTransposeMatrixdARB</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glMultTransposeMatrixdARB_fnptr = &glMultTransposeMatrixdARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultTransposeMatrixdARB_Lazy(double* m)
        {
            _glMultTransposeMatrixdARB_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultTransposeMatrixdARB");
            _glMultTransposeMatrixdARB_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glMultTransposeMatrixf</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glMultTransposeMatrixf_fnptr = &glMultTransposeMatrixf_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultTransposeMatrixf_Lazy(float* m)
        {
            _glMultTransposeMatrixf_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultTransposeMatrixf");
            _glMultTransposeMatrixf_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glMultTransposeMatrixfARB</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glMultTransposeMatrixfARB_fnptr = &glMultTransposeMatrixfARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultTransposeMatrixfARB_Lazy(float* m)
        {
            _glMultTransposeMatrixfARB_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultTransposeMatrixfARB");
            _glMultTransposeMatrixfARB_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glMultTransposeMatrixxOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glMultTransposeMatrixxOES_fnptr = &glMultTransposeMatrixxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glMultTransposeMatrixxOES_Lazy(int* m)
        {
            _glMultTransposeMatrixxOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultTransposeMatrixxOES");
            _glMultTransposeMatrixxOES_fnptr(m);
        }
        
        /// <summary><b>[entry point: <c>glNamedBufferAttachMemoryNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, ulong, void> _glNamedBufferAttachMemoryNV_fnptr = &glNamedBufferAttachMemoryNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedBufferAttachMemoryNV_Lazy(int buffer, uint memory, ulong offset)
        {
            _glNamedBufferAttachMemoryNV_fnptr = (delegate* unmanaged<int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferAttachMemoryNV");
            _glNamedBufferAttachMemoryNV_fnptr(buffer, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glNamedBufferData</c>]</b></summary>
        public static delegate* unmanaged<int, nint, void*, uint, void> _glNamedBufferData_fnptr = &glNamedBufferData_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedBufferData_Lazy(int buffer, nint size, void* data, uint usage)
        {
            _glNamedBufferData_fnptr = (delegate* unmanaged<int, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferData");
            _glNamedBufferData_fnptr(buffer, size, data, usage);
        }
        
        /// <summary><b>[entry point: <c>glNamedBufferDataEXT</c>]</b></summary>
        public static delegate* unmanaged<int, nint, void*, uint, void> _glNamedBufferDataEXT_fnptr = &glNamedBufferDataEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedBufferDataEXT_Lazy(int buffer, nint size, void* data, uint usage)
        {
            _glNamedBufferDataEXT_fnptr = (delegate* unmanaged<int, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferDataEXT");
            _glNamedBufferDataEXT_fnptr(buffer, size, data, usage);
        }
        
        /// <summary><b>[entry point: <c>glNamedBufferPageCommitmentARB</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr, nint, byte, void> _glNamedBufferPageCommitmentARB_fnptr = &glNamedBufferPageCommitmentARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedBufferPageCommitmentARB_Lazy(int buffer, IntPtr offset, nint size, byte commit)
        {
            _glNamedBufferPageCommitmentARB_fnptr = (delegate* unmanaged<int, IntPtr, nint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferPageCommitmentARB");
            _glNamedBufferPageCommitmentARB_fnptr(buffer, offset, size, commit);
        }
        
        /// <summary><b>[entry point: <c>glNamedBufferPageCommitmentEXT</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr, nint, byte, void> _glNamedBufferPageCommitmentEXT_fnptr = &glNamedBufferPageCommitmentEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedBufferPageCommitmentEXT_Lazy(int buffer, IntPtr offset, nint size, byte commit)
        {
            _glNamedBufferPageCommitmentEXT_fnptr = (delegate* unmanaged<int, IntPtr, nint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferPageCommitmentEXT");
            _glNamedBufferPageCommitmentEXT_fnptr(buffer, offset, size, commit);
        }
        
        /// <summary><b>[entry point: <c>glNamedBufferPageCommitmentMemNV</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr, nint, uint, ulong, byte, void> _glNamedBufferPageCommitmentMemNV_fnptr = &glNamedBufferPageCommitmentMemNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedBufferPageCommitmentMemNV_Lazy(int buffer, IntPtr offset, nint size, uint memory, ulong memOffset, byte commit)
        {
            _glNamedBufferPageCommitmentMemNV_fnptr = (delegate* unmanaged<int, IntPtr, nint, uint, ulong, byte, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferPageCommitmentMemNV");
            _glNamedBufferPageCommitmentMemNV_fnptr(buffer, offset, size, memory, memOffset, commit);
        }
        
        /// <summary><b>[entry point: <c>glNamedBufferStorage</c>]</b></summary>
        public static delegate* unmanaged<int, nint, void*, uint, void> _glNamedBufferStorage_fnptr = &glNamedBufferStorage_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedBufferStorage_Lazy(int buffer, nint size, void* data, uint flags)
        {
            _glNamedBufferStorage_fnptr = (delegate* unmanaged<int, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferStorage");
            _glNamedBufferStorage_fnptr(buffer, size, data, flags);
        }
        
        /// <summary><b>[entry point: <c>glNamedBufferStorageEXT</c>]</b></summary>
        public static delegate* unmanaged<int, nint, void*, uint, void> _glNamedBufferStorageEXT_fnptr = &glNamedBufferStorageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedBufferStorageEXT_Lazy(int buffer, nint size, void* data, uint flags)
        {
            _glNamedBufferStorageEXT_fnptr = (delegate* unmanaged<int, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferStorageEXT");
            _glNamedBufferStorageEXT_fnptr(buffer, size, data, flags);
        }
        
        /// <summary><b>[entry point: <c>glNamedBufferStorageExternalEXT</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr, nint, void*, uint, void> _glNamedBufferStorageExternalEXT_fnptr = &glNamedBufferStorageExternalEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedBufferStorageExternalEXT_Lazy(int buffer, IntPtr offset, nint size, void* clientBuffer, uint flags)
        {
            _glNamedBufferStorageExternalEXT_fnptr = (delegate* unmanaged<int, IntPtr, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferStorageExternalEXT");
            _glNamedBufferStorageExternalEXT_fnptr(buffer, offset, size, clientBuffer, flags);
        }
        
        /// <summary><b>[entry point: <c>glNamedBufferStorageMemEXT</c>]</b></summary>
        public static delegate* unmanaged<int, nint, uint, ulong, void> _glNamedBufferStorageMemEXT_fnptr = &glNamedBufferStorageMemEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedBufferStorageMemEXT_Lazy(int buffer, nint size, uint memory, ulong offset)
        {
            _glNamedBufferStorageMemEXT_fnptr = (delegate* unmanaged<int, nint, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferStorageMemEXT");
            _glNamedBufferStorageMemEXT_fnptr(buffer, size, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glNamedBufferSubData</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr, nint, void*, void> _glNamedBufferSubData_fnptr = &glNamedBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedBufferSubData_Lazy(int buffer, IntPtr offset, nint size, void* data)
        {
            _glNamedBufferSubData_fnptr = (delegate* unmanaged<int, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferSubData");
            _glNamedBufferSubData_fnptr(buffer, offset, size, data);
        }
        
        /// <summary><b>[entry point: <c>glNamedBufferSubDataEXT</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr, nint, void*, void> _glNamedBufferSubDataEXT_fnptr = &glNamedBufferSubDataEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedBufferSubDataEXT_Lazy(int buffer, IntPtr offset, nint size, void* data)
        {
            _glNamedBufferSubDataEXT_fnptr = (delegate* unmanaged<int, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferSubDataEXT");
            _glNamedBufferSubDataEXT_fnptr(buffer, offset, size, data);
        }
        
        /// <summary><b>[entry point: <c>glNamedCopyBufferSubDataEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, IntPtr, IntPtr, nint, void> _glNamedCopyBufferSubDataEXT_fnptr = &glNamedCopyBufferSubDataEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedCopyBufferSubDataEXT_Lazy(int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size)
        {
            _glNamedCopyBufferSubDataEXT_fnptr = (delegate* unmanaged<int, int, IntPtr, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedCopyBufferSubDataEXT");
            _glNamedCopyBufferSubDataEXT_fnptr(readBuffer, writeBuffer, readOffset, writeOffset, size);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferDrawBuffer</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glNamedFramebufferDrawBuffer_fnptr = &glNamedFramebufferDrawBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferDrawBuffer_Lazy(int framebuffer, uint buf)
        {
            _glNamedFramebufferDrawBuffer_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferDrawBuffer");
            _glNamedFramebufferDrawBuffer_fnptr(framebuffer, buf);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferDrawBuffers</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, void> _glNamedFramebufferDrawBuffers_fnptr = &glNamedFramebufferDrawBuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferDrawBuffers_Lazy(int framebuffer, int n, uint* bufs)
        {
            _glNamedFramebufferDrawBuffers_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferDrawBuffers");
            _glNamedFramebufferDrawBuffers_fnptr(framebuffer, n, bufs);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferParameteri</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glNamedFramebufferParameteri_fnptr = &glNamedFramebufferParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferParameteri_Lazy(int framebuffer, uint pname, int param)
        {
            _glNamedFramebufferParameteri_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferParameteri");
            _glNamedFramebufferParameteri_fnptr(framebuffer, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferParameteriEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glNamedFramebufferParameteriEXT_fnptr = &glNamedFramebufferParameteriEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferParameteriEXT_Lazy(int framebuffer, uint pname, int param)
        {
            _glNamedFramebufferParameteriEXT_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferParameteriEXT");
            _glNamedFramebufferParameteriEXT_fnptr(framebuffer, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferReadBuffer</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glNamedFramebufferReadBuffer_fnptr = &glNamedFramebufferReadBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferReadBuffer_Lazy(int framebuffer, uint src)
        {
            _glNamedFramebufferReadBuffer_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferReadBuffer");
            _glNamedFramebufferReadBuffer_fnptr(framebuffer, src);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferRenderbuffer</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, void> _glNamedFramebufferRenderbuffer_fnptr = &glNamedFramebufferRenderbuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferRenderbuffer_Lazy(int framebuffer, uint attachment, uint renderbuffertarget, int renderbuffer)
        {
            _glNamedFramebufferRenderbuffer_fnptr = (delegate* unmanaged<int, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferRenderbuffer");
            _glNamedFramebufferRenderbuffer_fnptr(framebuffer, attachment, renderbuffertarget, renderbuffer);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferRenderbufferEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, void> _glNamedFramebufferRenderbufferEXT_fnptr = &glNamedFramebufferRenderbufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferRenderbufferEXT_Lazy(int framebuffer, uint attachment, uint renderbuffertarget, int renderbuffer)
        {
            _glNamedFramebufferRenderbufferEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferRenderbufferEXT");
            _glNamedFramebufferRenderbufferEXT_fnptr(framebuffer, attachment, renderbuffertarget, renderbuffer);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferSampleLocationsfvARB</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, float*, void> _glNamedFramebufferSampleLocationsfvARB_fnptr = &glNamedFramebufferSampleLocationsfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferSampleLocationsfvARB_Lazy(int framebuffer, uint start, int count, float* v)
        {
            _glNamedFramebufferSampleLocationsfvARB_fnptr = (delegate* unmanaged<int, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferSampleLocationsfvARB");
            _glNamedFramebufferSampleLocationsfvARB_fnptr(framebuffer, start, count, v);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferSampleLocationsfvNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, float*, void> _glNamedFramebufferSampleLocationsfvNV_fnptr = &glNamedFramebufferSampleLocationsfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferSampleLocationsfvNV_Lazy(int framebuffer, uint start, int count, float* v)
        {
            _glNamedFramebufferSampleLocationsfvNV_fnptr = (delegate* unmanaged<int, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferSampleLocationsfvNV");
            _glNamedFramebufferSampleLocationsfvNV_fnptr(framebuffer, start, count, v);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferSamplePositionsfvAMD</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, float*, void> _glNamedFramebufferSamplePositionsfvAMD_fnptr = &glNamedFramebufferSamplePositionsfvAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferSamplePositionsfvAMD_Lazy(int framebuffer, uint numsamples, uint pixelindex, float* values)
        {
            _glNamedFramebufferSamplePositionsfvAMD_fnptr = (delegate* unmanaged<int, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferSamplePositionsfvAMD");
            _glNamedFramebufferSamplePositionsfvAMD_fnptr(framebuffer, numsamples, pixelindex, values);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferTexture</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, void> _glNamedFramebufferTexture_fnptr = &glNamedFramebufferTexture_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferTexture_Lazy(int framebuffer, uint attachment, int texture, int level)
        {
            _glNamedFramebufferTexture_fnptr = (delegate* unmanaged<int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTexture");
            _glNamedFramebufferTexture_fnptr(framebuffer, attachment, texture, level);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferTexture1DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, int, void> _glNamedFramebufferTexture1DEXT_fnptr = &glNamedFramebufferTexture1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferTexture1DEXT_Lazy(int framebuffer, uint attachment, uint textarget, int texture, int level)
        {
            _glNamedFramebufferTexture1DEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTexture1DEXT");
            _glNamedFramebufferTexture1DEXT_fnptr(framebuffer, attachment, textarget, texture, level);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferTexture2DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, int, void> _glNamedFramebufferTexture2DEXT_fnptr = &glNamedFramebufferTexture2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferTexture2DEXT_Lazy(int framebuffer, uint attachment, uint textarget, int texture, int level)
        {
            _glNamedFramebufferTexture2DEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTexture2DEXT");
            _glNamedFramebufferTexture2DEXT_fnptr(framebuffer, attachment, textarget, texture, level);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferTexture3DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, int, int, void> _glNamedFramebufferTexture3DEXT_fnptr = &glNamedFramebufferTexture3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferTexture3DEXT_Lazy(int framebuffer, uint attachment, uint textarget, int texture, int level, int zoffset)
        {
            _glNamedFramebufferTexture3DEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTexture3DEXT");
            _glNamedFramebufferTexture3DEXT_fnptr(framebuffer, attachment, textarget, texture, level, zoffset);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferTextureEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, void> _glNamedFramebufferTextureEXT_fnptr = &glNamedFramebufferTextureEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferTextureEXT_Lazy(int framebuffer, uint attachment, int texture, int level)
        {
            _glNamedFramebufferTextureEXT_fnptr = (delegate* unmanaged<int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTextureEXT");
            _glNamedFramebufferTextureEXT_fnptr(framebuffer, attachment, texture, level);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferTextureFaceEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, uint, void> _glNamedFramebufferTextureFaceEXT_fnptr = &glNamedFramebufferTextureFaceEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferTextureFaceEXT_Lazy(int framebuffer, uint attachment, int texture, int level, uint face)
        {
            _glNamedFramebufferTextureFaceEXT_fnptr = (delegate* unmanaged<int, uint, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTextureFaceEXT");
            _glNamedFramebufferTextureFaceEXT_fnptr(framebuffer, attachment, texture, level, face);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferTextureLayer</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, void> _glNamedFramebufferTextureLayer_fnptr = &glNamedFramebufferTextureLayer_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferTextureLayer_Lazy(int framebuffer, uint attachment, int texture, int level, int layer)
        {
            _glNamedFramebufferTextureLayer_fnptr = (delegate* unmanaged<int, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTextureLayer");
            _glNamedFramebufferTextureLayer_fnptr(framebuffer, attachment, texture, level, layer);
        }
        
        /// <summary><b>[entry point: <c>glNamedFramebufferTextureLayerEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, void> _glNamedFramebufferTextureLayerEXT_fnptr = &glNamedFramebufferTextureLayerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedFramebufferTextureLayerEXT_Lazy(int framebuffer, uint attachment, int texture, int level, int layer)
        {
            _glNamedFramebufferTextureLayerEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTextureLayerEXT");
            _glNamedFramebufferTextureLayerEXT_fnptr(framebuffer, attachment, texture, level, layer);
        }
        
        /// <summary><b>[entry point: <c>glNamedProgramLocalParameter4dEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, double, double, double, double, void> _glNamedProgramLocalParameter4dEXT_fnptr = &glNamedProgramLocalParameter4dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedProgramLocalParameter4dEXT_Lazy(int program, uint target, uint index, double x, double y, double z, double w)
        {
            _glNamedProgramLocalParameter4dEXT_fnptr = (delegate* unmanaged<int, uint, uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameter4dEXT");
            _glNamedProgramLocalParameter4dEXT_fnptr(program, target, index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glNamedProgramLocalParameter4dvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, double*, void> _glNamedProgramLocalParameter4dvEXT_fnptr = &glNamedProgramLocalParameter4dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedProgramLocalParameter4dvEXT_Lazy(int program, uint target, uint index, double* parameters)
        {
            _glNamedProgramLocalParameter4dvEXT_fnptr = (delegate* unmanaged<int, uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameter4dvEXT");
            _glNamedProgramLocalParameter4dvEXT_fnptr(program, target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glNamedProgramLocalParameter4fEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, float, float, float, float, void> _glNamedProgramLocalParameter4fEXT_fnptr = &glNamedProgramLocalParameter4fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedProgramLocalParameter4fEXT_Lazy(int program, uint target, uint index, float x, float y, float z, float w)
        {
            _glNamedProgramLocalParameter4fEXT_fnptr = (delegate* unmanaged<int, uint, uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameter4fEXT");
            _glNamedProgramLocalParameter4fEXT_fnptr(program, target, index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glNamedProgramLocalParameter4fvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, float*, void> _glNamedProgramLocalParameter4fvEXT_fnptr = &glNamedProgramLocalParameter4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedProgramLocalParameter4fvEXT_Lazy(int program, uint target, uint index, float* parameters)
        {
            _glNamedProgramLocalParameter4fvEXT_fnptr = (delegate* unmanaged<int, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameter4fvEXT");
            _glNamedProgramLocalParameter4fvEXT_fnptr(program, target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glNamedProgramLocalParameterI4iEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, int, int, int, void> _glNamedProgramLocalParameterI4iEXT_fnptr = &glNamedProgramLocalParameterI4iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedProgramLocalParameterI4iEXT_Lazy(int program, uint target, uint index, int x, int y, int z, int w)
        {
            _glNamedProgramLocalParameterI4iEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameterI4iEXT");
            _glNamedProgramLocalParameterI4iEXT_fnptr(program, target, index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glNamedProgramLocalParameterI4ivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glNamedProgramLocalParameterI4ivEXT_fnptr = &glNamedProgramLocalParameterI4ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedProgramLocalParameterI4ivEXT_Lazy(int program, uint target, uint index, int* parameters)
        {
            _glNamedProgramLocalParameterI4ivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameterI4ivEXT");
            _glNamedProgramLocalParameterI4ivEXT_fnptr(program, target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glNamedProgramLocalParameterI4uiEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, uint, uint, uint, uint, void> _glNamedProgramLocalParameterI4uiEXT_fnptr = &glNamedProgramLocalParameterI4uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedProgramLocalParameterI4uiEXT_Lazy(int program, uint target, uint index, uint x, uint y, uint z, uint w)
        {
            _glNamedProgramLocalParameterI4uiEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameterI4uiEXT");
            _glNamedProgramLocalParameterI4uiEXT_fnptr(program, target, index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glNamedProgramLocalParameterI4uivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, uint*, void> _glNamedProgramLocalParameterI4uivEXT_fnptr = &glNamedProgramLocalParameterI4uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedProgramLocalParameterI4uivEXT_Lazy(int program, uint target, uint index, uint* parameters)
        {
            _glNamedProgramLocalParameterI4uivEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameterI4uivEXT");
            _glNamedProgramLocalParameterI4uivEXT_fnptr(program, target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glNamedProgramLocalParameters4fvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, float*, void> _glNamedProgramLocalParameters4fvEXT_fnptr = &glNamedProgramLocalParameters4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedProgramLocalParameters4fvEXT_Lazy(int program, uint target, uint index, int count, float* parameters)
        {
            _glNamedProgramLocalParameters4fvEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameters4fvEXT");
            _glNamedProgramLocalParameters4fvEXT_fnptr(program, target, index, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glNamedProgramLocalParametersI4ivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, int*, void> _glNamedProgramLocalParametersI4ivEXT_fnptr = &glNamedProgramLocalParametersI4ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedProgramLocalParametersI4ivEXT_Lazy(int program, uint target, uint index, int count, int* parameters)
        {
            _glNamedProgramLocalParametersI4ivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParametersI4ivEXT");
            _glNamedProgramLocalParametersI4ivEXT_fnptr(program, target, index, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glNamedProgramLocalParametersI4uivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, uint*, void> _glNamedProgramLocalParametersI4uivEXT_fnptr = &glNamedProgramLocalParametersI4uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedProgramLocalParametersI4uivEXT_Lazy(int program, uint target, uint index, int count, uint* parameters)
        {
            _glNamedProgramLocalParametersI4uivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParametersI4uivEXT");
            _glNamedProgramLocalParametersI4uivEXT_fnptr(program, target, index, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glNamedProgramStringEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, void*, void> _glNamedProgramStringEXT_fnptr = &glNamedProgramStringEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedProgramStringEXT_Lazy(int program, uint target, uint format, int len, void* str)
        {
            _glNamedProgramStringEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramStringEXT");
            _glNamedProgramStringEXT_fnptr(program, target, format, len, str);
        }
        
        /// <summary><b>[entry point: <c>glNamedRenderbufferStorage</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, void> _glNamedRenderbufferStorage_fnptr = &glNamedRenderbufferStorage_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedRenderbufferStorage_Lazy(int renderbuffer, uint internalformat, int width, int height)
        {
            _glNamedRenderbufferStorage_fnptr = (delegate* unmanaged<int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedRenderbufferStorage");
            _glNamedRenderbufferStorage_fnptr(renderbuffer, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glNamedRenderbufferStorageEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, void> _glNamedRenderbufferStorageEXT_fnptr = &glNamedRenderbufferStorageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedRenderbufferStorageEXT_Lazy(int renderbuffer, uint internalformat, int width, int height)
        {
            _glNamedRenderbufferStorageEXT_fnptr = (delegate* unmanaged<int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedRenderbufferStorageEXT");
            _glNamedRenderbufferStorageEXT_fnptr(renderbuffer, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glNamedRenderbufferStorageMultisample</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, int, void> _glNamedRenderbufferStorageMultisample_fnptr = &glNamedRenderbufferStorageMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedRenderbufferStorageMultisample_Lazy(int renderbuffer, int samples, uint internalformat, int width, int height)
        {
            _glNamedRenderbufferStorageMultisample_fnptr = (delegate* unmanaged<int, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedRenderbufferStorageMultisample");
            _glNamedRenderbufferStorageMultisample_fnptr(renderbuffer, samples, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glNamedRenderbufferStorageMultisampleAdvancedAMD</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint, int, int, void> _glNamedRenderbufferStorageMultisampleAdvancedAMD_fnptr = &glNamedRenderbufferStorageMultisampleAdvancedAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedRenderbufferStorageMultisampleAdvancedAMD_Lazy(int renderbuffer, int samples, int storageSamples, uint internalformat, int width, int height)
        {
            _glNamedRenderbufferStorageMultisampleAdvancedAMD_fnptr = (delegate* unmanaged<int, int, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedRenderbufferStorageMultisampleAdvancedAMD");
            _glNamedRenderbufferStorageMultisampleAdvancedAMD_fnptr(renderbuffer, samples, storageSamples, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glNamedRenderbufferStorageMultisampleCoverageEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint, int, int, void> _glNamedRenderbufferStorageMultisampleCoverageEXT_fnptr = &glNamedRenderbufferStorageMultisampleCoverageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedRenderbufferStorageMultisampleCoverageEXT_Lazy(int renderbuffer, int coverageSamples, int colorSamples, uint internalformat, int width, int height)
        {
            _glNamedRenderbufferStorageMultisampleCoverageEXT_fnptr = (delegate* unmanaged<int, int, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedRenderbufferStorageMultisampleCoverageEXT");
            _glNamedRenderbufferStorageMultisampleCoverageEXT_fnptr(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glNamedRenderbufferStorageMultisampleEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, int, void> _glNamedRenderbufferStorageMultisampleEXT_fnptr = &glNamedRenderbufferStorageMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedRenderbufferStorageMultisampleEXT_Lazy(int renderbuffer, int samples, uint internalformat, int width, int height)
        {
            _glNamedRenderbufferStorageMultisampleEXT_fnptr = (delegate* unmanaged<int, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedRenderbufferStorageMultisampleEXT");
            _glNamedRenderbufferStorageMultisampleEXT_fnptr(renderbuffer, samples, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glNamedStringARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, byte*, int, byte*, void> _glNamedStringARB_fnptr = &glNamedStringARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glNamedStringARB_Lazy(uint type, int namelen, byte* name, int stringlen, byte* str)
        {
            _glNamedStringARB_fnptr = (delegate* unmanaged<uint, int, byte*, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedStringARB");
            _glNamedStringARB_fnptr(type, namelen, name, stringlen, str);
        }
        
        /// <summary><b>[entry point: <c>glNewList</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glNewList_fnptr = &glNewList_Lazy;
        [UnmanagedCallersOnly]
        private static void glNewList_Lazy(int list, uint mode)
        {
            _glNewList_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNewList");
            _glNewList_fnptr(list, mode);
        }
        
        /// <summary><b>[entry point: <c>glNewObjectBufferATI</c>]</b></summary>
        public static delegate* unmanaged<int, void*, uint, uint> _glNewObjectBufferATI_fnptr = &glNewObjectBufferATI_Lazy;
        [UnmanagedCallersOnly]
        private static uint glNewObjectBufferATI_Lazy(int size, void* pointer, uint usage)
        {
            _glNewObjectBufferATI_fnptr = (delegate* unmanaged<int, void*, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glNewObjectBufferATI");
            return _glNewObjectBufferATI_fnptr(size, pointer, usage);
        }
        
        /// <summary><b>[entry point: <c>glNormal3b</c>]</b></summary>
        public static delegate* unmanaged<sbyte, sbyte, sbyte, void> _glNormal3b_fnptr = &glNormal3b_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3b_Lazy(sbyte nx, sbyte ny, sbyte nz)
        {
            _glNormal3b_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3b");
            _glNormal3b_fnptr(nx, ny, nz);
        }
        
        /// <summary><b>[entry point: <c>glNormal3bv</c>]</b></summary>
        public static delegate* unmanaged<sbyte*, void> _glNormal3bv_fnptr = &glNormal3bv_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3bv_Lazy(sbyte* v)
        {
            _glNormal3bv_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3bv");
            _glNormal3bv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glNormal3d</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, void> _glNormal3d_fnptr = &glNormal3d_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3d_Lazy(double nx, double ny, double nz)
        {
            _glNormal3d_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3d");
            _glNormal3d_fnptr(nx, ny, nz);
        }
        
        /// <summary><b>[entry point: <c>glNormal3dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glNormal3dv_fnptr = &glNormal3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3dv_Lazy(double* v)
        {
            _glNormal3dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3dv");
            _glNormal3dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glNormal3f</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glNormal3f_fnptr = &glNormal3f_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3f_Lazy(float nx, float ny, float nz)
        {
            _glNormal3f_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3f");
            _glNormal3f_fnptr(nx, ny, nz);
        }
        
        /// <summary><b>[entry point: <c>glNormal3fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glNormal3fv_fnptr = &glNormal3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3fv_Lazy(float* v)
        {
            _glNormal3fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3fv");
            _glNormal3fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glNormal3fVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, void> _glNormal3fVertex3fSUN_fnptr = &glNormal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3fVertex3fSUN_Lazy(float nx, float ny, float nz, float x, float y, float z)
        {
            _glNormal3fVertex3fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3fVertex3fSUN");
            _glNormal3fVertex3fSUN_fnptr(nx, ny, nz, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glNormal3fVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<float*, float*, void> _glNormal3fVertex3fvSUN_fnptr = &glNormal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3fVertex3fvSUN_Lazy(float* n, float* v)
        {
            _glNormal3fVertex3fvSUN_fnptr = (delegate* unmanaged<float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3fVertex3fvSUN");
            _glNormal3fVertex3fvSUN_fnptr(n, v);
        }
        
        /// <summary><b>[entry point: <c>glNormal3hNV</c>]</b></summary>
        public static delegate* unmanaged<Half, Half, Half, void> _glNormal3hNV_fnptr = &glNormal3hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3hNV_Lazy(Half nx, Half ny, Half nz)
        {
            _glNormal3hNV_fnptr = (delegate* unmanaged<Half, Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3hNV");
            _glNormal3hNV_fnptr(nx, ny, nz);
        }
        
        /// <summary><b>[entry point: <c>glNormal3hvNV</c>]</b></summary>
        public static delegate* unmanaged<Half*, void> _glNormal3hvNV_fnptr = &glNormal3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3hvNV_Lazy(Half* v)
        {
            _glNormal3hvNV_fnptr = (delegate* unmanaged<Half*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3hvNV");
            _glNormal3hvNV_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glNormal3i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glNormal3i_fnptr = &glNormal3i_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3i_Lazy(int nx, int ny, int nz)
        {
            _glNormal3i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3i");
            _glNormal3i_fnptr(nx, ny, nz);
        }
        
        /// <summary><b>[entry point: <c>glNormal3iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glNormal3iv_fnptr = &glNormal3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3iv_Lazy(int* v)
        {
            _glNormal3iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3iv");
            _glNormal3iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glNormal3s</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, void> _glNormal3s_fnptr = &glNormal3s_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3s_Lazy(short nx, short ny, short nz)
        {
            _glNormal3s_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3s");
            _glNormal3s_fnptr(nx, ny, nz);
        }
        
        /// <summary><b>[entry point: <c>glNormal3sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glNormal3sv_fnptr = &glNormal3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3sv_Lazy(short* v)
        {
            _glNormal3sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3sv");
            _glNormal3sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glNormal3x</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glNormal3x_fnptr = &glNormal3x_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3x_Lazy(int nx, int ny, int nz)
        {
            _glNormal3x_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3x");
            _glNormal3x_fnptr(nx, ny, nz);
        }
        
        /// <summary><b>[entry point: <c>glNormal3xOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glNormal3xOES_fnptr = &glNormal3xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3xOES_Lazy(int nx, int ny, int nz)
        {
            _glNormal3xOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3xOES");
            _glNormal3xOES_fnptr(nx, ny, nz);
        }
        
        /// <summary><b>[entry point: <c>glNormal3xvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glNormal3xvOES_fnptr = &glNormal3xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormal3xvOES_Lazy(int* coords)
        {
            _glNormal3xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3xvOES");
            _glNormal3xvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glNormalFormatNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glNormalFormatNV_fnptr = &glNormalFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalFormatNV_Lazy(uint type, int stride)
        {
            _glNormalFormatNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glNormalFormatNV");
            _glNormalFormatNV_fnptr(type, stride);
        }
        
        /// <summary><b>[entry point: <c>glNormalP3ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glNormalP3ui_fnptr = &glNormalP3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalP3ui_Lazy(uint type, uint coords)
        {
            _glNormalP3ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNormalP3ui");
            _glNormalP3ui_fnptr(type, coords);
        }
        
        /// <summary><b>[entry point: <c>glNormalP3uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glNormalP3uiv_fnptr = &glNormalP3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalP3uiv_Lazy(uint type, uint* coords)
        {
            _glNormalP3uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalP3uiv");
            _glNormalP3uiv_fnptr(type, coords);
        }
        
        /// <summary><b>[entry point: <c>glNormalPointer</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void*, void> _glNormalPointer_fnptr = &glNormalPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalPointer_Lazy(uint type, int stride, void* pointer)
        {
            _glNormalPointer_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalPointer");
            _glNormalPointer_fnptr(type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glNormalPointerEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void*, void> _glNormalPointerEXT_fnptr = &glNormalPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalPointerEXT_Lazy(uint type, int stride, int count, void* pointer)
        {
            _glNormalPointerEXT_fnptr = (delegate* unmanaged<uint, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalPointerEXT");
            _glNormalPointerEXT_fnptr(type, stride, count, pointer);
        }
        
        /// <summary><b>[entry point: <c>glNormalPointerListIBM</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void**, int, void> _glNormalPointerListIBM_fnptr = &glNormalPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalPointerListIBM_Lazy(uint type, int stride, void** pointer, int ptrstride)
        {
            _glNormalPointerListIBM_fnptr = (delegate* unmanaged<uint, int, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glNormalPointerListIBM");
            _glNormalPointerListIBM_fnptr(type, stride, pointer, ptrstride);
        }
        
        /// <summary><b>[entry point: <c>glNormalPointervINTEL</c>]</b></summary>
        public static delegate* unmanaged<uint, void**, void> _glNormalPointervINTEL_fnptr = &glNormalPointervINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalPointervINTEL_Lazy(uint type, void** pointer)
        {
            _glNormalPointervINTEL_fnptr = (delegate* unmanaged<uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glNormalPointervINTEL");
            _glNormalPointervINTEL_fnptr(type, pointer);
        }
        
        /// <summary><b>[entry point: <c>glNormalStream3bATI</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte, sbyte, sbyte, void> _glNormalStream3bATI_fnptr = &glNormalStream3bATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalStream3bATI_Lazy(uint stream, sbyte nx, sbyte ny, sbyte nz)
        {
            _glNormalStream3bATI_fnptr = (delegate* unmanaged<uint, sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3bATI");
            _glNormalStream3bATI_fnptr(stream, nx, ny, nz);
        }
        
        /// <summary><b>[entry point: <c>glNormalStream3bvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte*, void> _glNormalStream3bvATI_fnptr = &glNormalStream3bvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalStream3bvATI_Lazy(uint stream, sbyte* coords)
        {
            _glNormalStream3bvATI_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3bvATI");
            _glNormalStream3bvATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glNormalStream3dATI</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, void> _glNormalStream3dATI_fnptr = &glNormalStream3dATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalStream3dATI_Lazy(uint stream, double nx, double ny, double nz)
        {
            _glNormalStream3dATI_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3dATI");
            _glNormalStream3dATI_fnptr(stream, nx, ny, nz);
        }
        
        /// <summary><b>[entry point: <c>glNormalStream3dvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glNormalStream3dvATI_fnptr = &glNormalStream3dvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalStream3dvATI_Lazy(uint stream, double* coords)
        {
            _glNormalStream3dvATI_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3dvATI");
            _glNormalStream3dvATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glNormalStream3fATI</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, void> _glNormalStream3fATI_fnptr = &glNormalStream3fATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalStream3fATI_Lazy(uint stream, float nx, float ny, float nz)
        {
            _glNormalStream3fATI_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3fATI");
            _glNormalStream3fATI_fnptr(stream, nx, ny, nz);
        }
        
        /// <summary><b>[entry point: <c>glNormalStream3fvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glNormalStream3fvATI_fnptr = &glNormalStream3fvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalStream3fvATI_Lazy(uint stream, float* coords)
        {
            _glNormalStream3fvATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3fvATI");
            _glNormalStream3fvATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glNormalStream3iATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, void> _glNormalStream3iATI_fnptr = &glNormalStream3iATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalStream3iATI_Lazy(uint stream, int nx, int ny, int nz)
        {
            _glNormalStream3iATI_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3iATI");
            _glNormalStream3iATI_fnptr(stream, nx, ny, nz);
        }
        
        /// <summary><b>[entry point: <c>glNormalStream3ivATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glNormalStream3ivATI_fnptr = &glNormalStream3ivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalStream3ivATI_Lazy(uint stream, int* coords)
        {
            _glNormalStream3ivATI_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3ivATI");
            _glNormalStream3ivATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glNormalStream3sATI</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, short, void> _glNormalStream3sATI_fnptr = &glNormalStream3sATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalStream3sATI_Lazy(uint stream, short nx, short ny, short nz)
        {
            _glNormalStream3sATI_fnptr = (delegate* unmanaged<uint, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3sATI");
            _glNormalStream3sATI_fnptr(stream, nx, ny, nz);
        }
        
        /// <summary><b>[entry point: <c>glNormalStream3svATI</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glNormalStream3svATI_fnptr = &glNormalStream3svATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glNormalStream3svATI_Lazy(uint stream, short* coords)
        {
            _glNormalStream3svATI_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3svATI");
            _glNormalStream3svATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glObjectLabel</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, byte*, void> _glObjectLabel_fnptr = &glObjectLabel_Lazy;
        [UnmanagedCallersOnly]
        private static void glObjectLabel_Lazy(uint identifier, uint name, int length, byte* label)
        {
            _glObjectLabel_fnptr = (delegate* unmanaged<uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glObjectLabel");
            _glObjectLabel_fnptr(identifier, name, length, label);
        }
        
        /// <summary><b>[entry point: <c>glObjectLabelKHR</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, byte*, void> _glObjectLabelKHR_fnptr = &glObjectLabelKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glObjectLabelKHR_Lazy(uint identifier, uint name, int length, byte* label)
        {
            _glObjectLabelKHR_fnptr = (delegate* unmanaged<uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glObjectLabelKHR");
            _glObjectLabelKHR_fnptr(identifier, name, length, label);
        }
        
        /// <summary><b>[entry point: <c>glObjectPtrLabel</c>]</b></summary>
        public static delegate* unmanaged<void*, int, byte*, void> _glObjectPtrLabel_fnptr = &glObjectPtrLabel_Lazy;
        [UnmanagedCallersOnly]
        private static void glObjectPtrLabel_Lazy(void* ptr, int length, byte* label)
        {
            _glObjectPtrLabel_fnptr = (delegate* unmanaged<void*, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glObjectPtrLabel");
            _glObjectPtrLabel_fnptr(ptr, length, label);
        }
        
        /// <summary><b>[entry point: <c>glObjectPtrLabelKHR</c>]</b></summary>
        public static delegate* unmanaged<void*, int, byte*, void> _glObjectPtrLabelKHR_fnptr = &glObjectPtrLabelKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glObjectPtrLabelKHR_Lazy(void* ptr, int length, byte* label)
        {
            _glObjectPtrLabelKHR_fnptr = (delegate* unmanaged<void*, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glObjectPtrLabelKHR");
            _glObjectPtrLabelKHR_fnptr(ptr, length, label);
        }
        
        /// <summary><b>[entry point: <c>glObjectPurgeableAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint> _glObjectPurgeableAPPLE_fnptr = &glObjectPurgeableAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static uint glObjectPurgeableAPPLE_Lazy(uint objectType, uint name, uint option)
        {
            _glObjectPurgeableAPPLE_fnptr = (delegate* unmanaged<uint, uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glObjectPurgeableAPPLE");
            return _glObjectPurgeableAPPLE_fnptr(objectType, name, option);
        }
        
        /// <summary><b>[entry point: <c>glObjectUnpurgeableAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint> _glObjectUnpurgeableAPPLE_fnptr = &glObjectUnpurgeableAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static uint glObjectUnpurgeableAPPLE_Lazy(uint objectType, uint name, uint option)
        {
            _glObjectUnpurgeableAPPLE_fnptr = (delegate* unmanaged<uint, uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glObjectUnpurgeableAPPLE");
            return _glObjectUnpurgeableAPPLE_fnptr(objectType, name, option);
        }
        
        /// <summary><b>[entry point: <c>glOrtho</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, double, double, double, void> _glOrtho_fnptr = &glOrtho_Lazy;
        [UnmanagedCallersOnly]
        private static void glOrtho_Lazy(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            _glOrtho_fnptr = (delegate* unmanaged<double, double, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glOrtho");
            _glOrtho_fnptr(left, right, bottom, top, zNear, zFar);
        }
        
        /// <summary><b>[entry point: <c>glOrthof</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, void> _glOrthof_fnptr = &glOrthof_Lazy;
        [UnmanagedCallersOnly]
        private static void glOrthof_Lazy(float l, float r, float b, float t, float n, float f)
        {
            _glOrthof_fnptr = (delegate* unmanaged<float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glOrthof");
            _glOrthof_fnptr(l, r, b, t, n, f);
        }
        
        /// <summary><b>[entry point: <c>glOrthofOES</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, void> _glOrthofOES_fnptr = &glOrthofOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glOrthofOES_Lazy(float l, float r, float b, float t, float n, float f)
        {
            _glOrthofOES_fnptr = (delegate* unmanaged<float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glOrthofOES");
            _glOrthofOES_fnptr(l, r, b, t, n, f);
        }
        
        /// <summary><b>[entry point: <c>glOrthox</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, void> _glOrthox_fnptr = &glOrthox_Lazy;
        [UnmanagedCallersOnly]
        private static void glOrthox_Lazy(int l, int r, int b, int t, int n, int f)
        {
            _glOrthox_fnptr = (delegate* unmanaged<int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glOrthox");
            _glOrthox_fnptr(l, r, b, t, n, f);
        }
        
        /// <summary><b>[entry point: <c>glOrthoxOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, void> _glOrthoxOES_fnptr = &glOrthoxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glOrthoxOES_Lazy(int l, int r, int b, int t, int n, int f)
        {
            _glOrthoxOES_fnptr = (delegate* unmanaged<int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glOrthoxOES");
            _glOrthoxOES_fnptr(l, r, b, t, n, f);
        }
        
        /// <summary><b>[entry point: <c>glPassTexCoordATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glPassTexCoordATI_fnptr = &glPassTexCoordATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glPassTexCoordATI_Lazy(uint dst, uint coord, uint swizzle)
        {
            _glPassTexCoordATI_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glPassTexCoordATI");
            _glPassTexCoordATI_fnptr(dst, coord, swizzle);
        }
        
        /// <summary><b>[entry point: <c>glPassThrough</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glPassThrough_fnptr = &glPassThrough_Lazy;
        [UnmanagedCallersOnly]
        private static void glPassThrough_Lazy(float token)
        {
            _glPassThrough_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glPassThrough");
            _glPassThrough_fnptr(token);
        }
        
        /// <summary><b>[entry point: <c>glPassThroughxOES</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glPassThroughxOES_fnptr = &glPassThroughxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glPassThroughxOES_Lazy(int token)
        {
            _glPassThroughxOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glPassThroughxOES");
            _glPassThroughxOES_fnptr(token);
        }
        
        /// <summary><b>[entry point: <c>glPatchParameterfv</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glPatchParameterfv_fnptr = &glPatchParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glPatchParameterfv_Lazy(uint pname, float* values)
        {
            _glPatchParameterfv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPatchParameterfv");
            _glPatchParameterfv_fnptr(pname, values);
        }
        
        /// <summary><b>[entry point: <c>glPatchParameteri</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glPatchParameteri_fnptr = &glPatchParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void glPatchParameteri_Lazy(uint pname, int value)
        {
            _glPatchParameteri_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPatchParameteri");
            _glPatchParameteri_fnptr(pname, value);
        }
        
        /// <summary><b>[entry point: <c>glPatchParameteriEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glPatchParameteriEXT_fnptr = &glPatchParameteriEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glPatchParameteriEXT_Lazy(uint pname, int value)
        {
            _glPatchParameteriEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPatchParameteriEXT");
            _glPatchParameteriEXT_fnptr(pname, value);
        }
        
        /// <summary><b>[entry point: <c>glPatchParameteriOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glPatchParameteriOES_fnptr = &glPatchParameteriOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glPatchParameteriOES_Lazy(uint pname, int value)
        {
            _glPatchParameteriOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPatchParameteriOES");
            _glPatchParameteriOES_fnptr(pname, value);
        }
        
        /// <summary><b>[entry point: <c>glPathColorGenNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float*, void> _glPathColorGenNV_fnptr = &glPathColorGenNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathColorGenNV_Lazy(uint color, uint genMode, uint colorFormat, float* coeffs)
        {
            _glPathColorGenNV_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPathColorGenNV");
            _glPathColorGenNV_fnptr(color, genMode, colorFormat, coeffs);
        }
        
        /// <summary><b>[entry point: <c>glPathCommandsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, byte*, int, uint, void*, void> _glPathCommandsNV_fnptr = &glPathCommandsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathCommandsNV_Lazy(uint path, int numCommands, byte* commands, int numCoords, uint coordType, void* coords)
        {
            _glPathCommandsNV_fnptr = (delegate* unmanaged<uint, int, byte*, int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glPathCommandsNV");
            _glPathCommandsNV_fnptr(path, numCommands, commands, numCoords, coordType, coords);
        }
        
        /// <summary><b>[entry point: <c>glPathCoordsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void*, void> _glPathCoordsNV_fnptr = &glPathCoordsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathCoordsNV_Lazy(uint path, int numCoords, uint coordType, void* coords)
        {
            _glPathCoordsNV_fnptr = (delegate* unmanaged<uint, int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glPathCoordsNV");
            _glPathCoordsNV_fnptr(path, numCoords, coordType, coords);
        }
        
        /// <summary><b>[entry point: <c>glPathCoverDepthFuncNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glPathCoverDepthFuncNV_fnptr = &glPathCoverDepthFuncNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathCoverDepthFuncNV_Lazy(uint func)
        {
            _glPathCoverDepthFuncNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPathCoverDepthFuncNV");
            _glPathCoverDepthFuncNV_fnptr(func);
        }
        
        /// <summary><b>[entry point: <c>glPathDashArrayNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glPathDashArrayNV_fnptr = &glPathDashArrayNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathDashArrayNV_Lazy(uint path, int dashCount, float* dashArray)
        {
            _glPathDashArrayNV_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPathDashArrayNV");
            _glPathDashArrayNV_fnptr(path, dashCount, dashArray);
        }
        
        /// <summary><b>[entry point: <c>glPathFogGenNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glPathFogGenNV_fnptr = &glPathFogGenNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathFogGenNV_Lazy(uint genMode)
        {
            _glPathFogGenNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPathFogGenNV");
            _glPathFogGenNV_fnptr(genMode);
        }
        
        /// <summary><b>[entry point: <c>glPathGlyphIndexArrayNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, uint, uint, int, uint, float, uint> _glPathGlyphIndexArrayNV_fnptr = &glPathGlyphIndexArrayNV_Lazy;
        [UnmanagedCallersOnly]
        private static uint glPathGlyphIndexArrayNV_Lazy(uint firstPathName, uint fontTarget, void* fontName, uint fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
        {
            _glPathGlyphIndexArrayNV_fnptr = (delegate* unmanaged<uint, uint, void*, uint, uint, int, uint, float, uint>)GLLoader.BindingsContext.GetProcAddress("glPathGlyphIndexArrayNV");
            return _glPathGlyphIndexArrayNV_fnptr(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
        }
        
        /// <summary><b>[entry point: <c>glPathGlyphIndexRangeNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void*, uint, uint, float, uint*, uint> _glPathGlyphIndexRangeNV_fnptr = &glPathGlyphIndexRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static uint glPathGlyphIndexRangeNV_Lazy(uint fontTarget, void* fontName, uint fontStyle, uint pathParameterTemplate, float emScale, uint* baseAndCount)
        {
            _glPathGlyphIndexRangeNV_fnptr = (delegate* unmanaged<uint, void*, uint, uint, float, uint*, uint>)GLLoader.BindingsContext.GetProcAddress("glPathGlyphIndexRangeNV");
            return _glPathGlyphIndexRangeNV_fnptr(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
        }
        
        /// <summary><b>[entry point: <c>glPathGlyphRangeNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, uint, uint, int, uint, uint, float, void> _glPathGlyphRangeNV_fnptr = &glPathGlyphRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathGlyphRangeNV_Lazy(uint firstPathName, uint fontTarget, void* fontName, uint fontStyle, uint firstGlyph, int numGlyphs, uint handleMissingGlyphs, uint pathParameterTemplate, float emScale)
        {
            _glPathGlyphRangeNV_fnptr = (delegate* unmanaged<uint, uint, void*, uint, uint, int, uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPathGlyphRangeNV");
            _glPathGlyphRangeNV_fnptr(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
        }
        
        /// <summary><b>[entry point: <c>glPathGlyphsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, uint, int, uint, void*, uint, uint, float, void> _glPathGlyphsNV_fnptr = &glPathGlyphsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathGlyphsNV_Lazy(uint firstPathName, uint fontTarget, void* fontName, uint fontStyle, int numGlyphs, uint type, void* charcodes, uint handleMissingGlyphs, uint pathParameterTemplate, float emScale)
        {
            _glPathGlyphsNV_fnptr = (delegate* unmanaged<uint, uint, void*, uint, int, uint, void*, uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPathGlyphsNV");
            _glPathGlyphsNV_fnptr(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
        }
        
        /// <summary><b>[entry point: <c>glPathMemoryGlyphIndexArrayNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, nint, void*, int, uint, int, uint, float, uint> _glPathMemoryGlyphIndexArrayNV_fnptr = &glPathMemoryGlyphIndexArrayNV_Lazy;
        [UnmanagedCallersOnly]
        private static uint glPathMemoryGlyphIndexArrayNV_Lazy(uint firstPathName, uint fontTarget, nint fontSize, void* fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
        {
            _glPathMemoryGlyphIndexArrayNV_fnptr = (delegate* unmanaged<uint, uint, nint, void*, int, uint, int, uint, float, uint>)GLLoader.BindingsContext.GetProcAddress("glPathMemoryGlyphIndexArrayNV");
            return _glPathMemoryGlyphIndexArrayNV_fnptr(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
        }
        
        /// <summary><b>[entry point: <c>glPathParameterfNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, void> _glPathParameterfNV_fnptr = &glPathParameterfNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathParameterfNV_Lazy(uint path, uint pname, float value)
        {
            _glPathParameterfNV_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPathParameterfNV");
            _glPathParameterfNV_fnptr(path, pname, value);
        }
        
        /// <summary><b>[entry point: <c>glPathParameterfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glPathParameterfvNV_fnptr = &glPathParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathParameterfvNV_Lazy(uint path, uint pname, float* value)
        {
            _glPathParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPathParameterfvNV");
            _glPathParameterfvNV_fnptr(path, pname, value);
        }
        
        /// <summary><b>[entry point: <c>glPathParameteriNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glPathParameteriNV_fnptr = &glPathParameteriNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathParameteriNV_Lazy(uint path, uint pname, int value)
        {
            _glPathParameteriNV_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPathParameteriNV");
            _glPathParameteriNV_fnptr(path, pname, value);
        }
        
        /// <summary><b>[entry point: <c>glPathParameterivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glPathParameterivNV_fnptr = &glPathParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathParameterivNV_Lazy(uint path, uint pname, int* value)
        {
            _glPathParameterivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPathParameterivNV");
            _glPathParameterivNV_fnptr(path, pname, value);
        }
        
        /// <summary><b>[entry point: <c>glPathStencilDepthOffsetNV</c>]</b></summary>
        public static delegate* unmanaged<float, float, void> _glPathStencilDepthOffsetNV_fnptr = &glPathStencilDepthOffsetNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathStencilDepthOffsetNV_Lazy(float factor, float units)
        {
            _glPathStencilDepthOffsetNV_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPathStencilDepthOffsetNV");
            _glPathStencilDepthOffsetNV_fnptr(factor, units);
        }
        
        /// <summary><b>[entry point: <c>glPathStencilFuncNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void> _glPathStencilFuncNV_fnptr = &glPathStencilFuncNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathStencilFuncNV_Lazy(uint func, int reference, uint mask)
        {
            _glPathStencilFuncNV_fnptr = (delegate* unmanaged<uint, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glPathStencilFuncNV");
            _glPathStencilFuncNV_fnptr(func, reference, mask);
        }
        
        /// <summary><b>[entry point: <c>glPathStringNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void*, void> _glPathStringNV_fnptr = &glPathStringNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathStringNV_Lazy(uint path, uint format, int length, void* pathString)
        {
            _glPathStringNV_fnptr = (delegate* unmanaged<uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glPathStringNV");
            _glPathStringNV_fnptr(path, format, length, pathString);
        }
        
        /// <summary><b>[entry point: <c>glPathSubCommandsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, byte*, int, uint, void*, void> _glPathSubCommandsNV_fnptr = &glPathSubCommandsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathSubCommandsNV_Lazy(uint path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, uint coordType, void* coords)
        {
            _glPathSubCommandsNV_fnptr = (delegate* unmanaged<uint, int, int, int, byte*, int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glPathSubCommandsNV");
            _glPathSubCommandsNV_fnptr(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
        }
        
        /// <summary><b>[entry point: <c>glPathSubCoordsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, uint, void*, void> _glPathSubCoordsNV_fnptr = &glPathSubCoordsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathSubCoordsNV_Lazy(uint path, int coordStart, int numCoords, uint coordType, void* coords)
        {
            _glPathSubCoordsNV_fnptr = (delegate* unmanaged<uint, int, int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glPathSubCoordsNV");
            _glPathSubCoordsNV_fnptr(path, coordStart, numCoords, coordType, coords);
        }
        
        /// <summary><b>[entry point: <c>glPathTexGenNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, float*, void> _glPathTexGenNV_fnptr = &glPathTexGenNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPathTexGenNV_Lazy(uint texCoordSet, uint genMode, int components, float* coeffs)
        {
            _glPathTexGenNV_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPathTexGenNV");
            _glPathTexGenNV_fnptr(texCoordSet, genMode, components, coeffs);
        }
        
        /// <summary><b>[entry point: <c>glPauseTransformFeedback</c>]</b></summary>
        public static delegate* unmanaged<void> _glPauseTransformFeedback_fnptr = &glPauseTransformFeedback_Lazy;
        [UnmanagedCallersOnly]
        private static void glPauseTransformFeedback_Lazy()
        {
            _glPauseTransformFeedback_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPauseTransformFeedback");
            _glPauseTransformFeedback_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glPauseTransformFeedbackNV</c>]</b></summary>
        public static delegate* unmanaged<void> _glPauseTransformFeedbackNV_fnptr = &glPauseTransformFeedbackNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPauseTransformFeedbackNV_Lazy()
        {
            _glPauseTransformFeedbackNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPauseTransformFeedbackNV");
            _glPauseTransformFeedbackNV_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glPixelDataRangeNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void*, void> _glPixelDataRangeNV_fnptr = &glPixelDataRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelDataRangeNV_Lazy(uint target, int length, void* pointer)
        {
            _glPixelDataRangeNV_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelDataRangeNV");
            _glPixelDataRangeNV_fnptr(target, length, pointer);
        }
        
        /// <summary><b>[entry point: <c>glPixelMapfv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glPixelMapfv_fnptr = &glPixelMapfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelMapfv_Lazy(uint map, int mapsize, float* values)
        {
            _glPixelMapfv_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelMapfv");
            _glPixelMapfv_fnptr(map, mapsize, values);
        }
        
        /// <summary><b>[entry point: <c>glPixelMapuiv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, void> _glPixelMapuiv_fnptr = &glPixelMapuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelMapuiv_Lazy(uint map, int mapsize, uint* values)
        {
            _glPixelMapuiv_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelMapuiv");
            _glPixelMapuiv_fnptr(map, mapsize, values);
        }
        
        /// <summary><b>[entry point: <c>glPixelMapusv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, ushort*, void> _glPixelMapusv_fnptr = &glPixelMapusv_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelMapusv_Lazy(uint map, int mapsize, ushort* values)
        {
            _glPixelMapusv_fnptr = (delegate* unmanaged<uint, int, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelMapusv");
            _glPixelMapusv_fnptr(map, mapsize, values);
        }
        
        /// <summary><b>[entry point: <c>glPixelMapx</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, void> _glPixelMapx_fnptr = &glPixelMapx_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelMapx_Lazy(uint map, int size, int* values)
        {
            _glPixelMapx_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelMapx");
            _glPixelMapx_fnptr(map, size, values);
        }
        
        /// <summary><b>[entry point: <c>glPixelStoref</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glPixelStoref_fnptr = &glPixelStoref_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelStoref_Lazy(uint pname, float param)
        {
            _glPixelStoref_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPixelStoref");
            _glPixelStoref_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPixelStorei</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glPixelStorei_fnptr = &glPixelStorei_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelStorei_Lazy(uint pname, int param)
        {
            _glPixelStorei_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPixelStorei");
            _glPixelStorei_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPixelStorex</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glPixelStorex_fnptr = &glPixelStorex_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelStorex_Lazy(uint pname, int param)
        {
            _glPixelStorex_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPixelStorex");
            _glPixelStorex_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPixelTexGenParameterfSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glPixelTexGenParameterfSGIS_fnptr = &glPixelTexGenParameterfSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelTexGenParameterfSGIS_Lazy(uint pname, float param)
        {
            _glPixelTexGenParameterfSGIS_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTexGenParameterfSGIS");
            _glPixelTexGenParameterfSGIS_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPixelTexGenParameterfvSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glPixelTexGenParameterfvSGIS_fnptr = &glPixelTexGenParameterfvSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelTexGenParameterfvSGIS_Lazy(uint pname, float* parameters)
        {
            _glPixelTexGenParameterfvSGIS_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTexGenParameterfvSGIS");
            _glPixelTexGenParameterfvSGIS_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glPixelTexGenParameteriSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glPixelTexGenParameteriSGIS_fnptr = &glPixelTexGenParameteriSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelTexGenParameteriSGIS_Lazy(uint pname, int param)
        {
            _glPixelTexGenParameteriSGIS_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTexGenParameteriSGIS");
            _glPixelTexGenParameteriSGIS_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPixelTexGenParameterivSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glPixelTexGenParameterivSGIS_fnptr = &glPixelTexGenParameterivSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelTexGenParameterivSGIS_Lazy(uint pname, int* parameters)
        {
            _glPixelTexGenParameterivSGIS_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTexGenParameterivSGIS");
            _glPixelTexGenParameterivSGIS_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glPixelTexGenSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glPixelTexGenSGIX_fnptr = &glPixelTexGenSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelTexGenSGIX_Lazy(uint mode)
        {
            _glPixelTexGenSGIX_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTexGenSGIX");
            _glPixelTexGenSGIX_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glPixelTransferf</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glPixelTransferf_fnptr = &glPixelTransferf_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelTransferf_Lazy(uint pname, float param)
        {
            _glPixelTransferf_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTransferf");
            _glPixelTransferf_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPixelTransferi</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glPixelTransferi_fnptr = &glPixelTransferi_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelTransferi_Lazy(uint pname, int param)
        {
            _glPixelTransferi_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTransferi");
            _glPixelTransferi_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPixelTransferxOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glPixelTransferxOES_fnptr = &glPixelTransferxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelTransferxOES_Lazy(uint pname, int param)
        {
            _glPixelTransferxOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTransferxOES");
            _glPixelTransferxOES_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPixelTransformParameterfEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, void> _glPixelTransformParameterfEXT_fnptr = &glPixelTransformParameterfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelTransformParameterfEXT_Lazy(uint target, uint pname, float param)
        {
            _glPixelTransformParameterfEXT_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTransformParameterfEXT");
            _glPixelTransformParameterfEXT_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPixelTransformParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glPixelTransformParameterfvEXT_fnptr = &glPixelTransformParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelTransformParameterfvEXT_Lazy(uint target, uint pname, float* parameters)
        {
            _glPixelTransformParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTransformParameterfvEXT");
            _glPixelTransformParameterfvEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glPixelTransformParameteriEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glPixelTransformParameteriEXT_fnptr = &glPixelTransformParameteriEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelTransformParameteriEXT_Lazy(uint target, uint pname, int param)
        {
            _glPixelTransformParameteriEXT_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTransformParameteriEXT");
            _glPixelTransformParameteriEXT_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPixelTransformParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glPixelTransformParameterivEXT_fnptr = &glPixelTransformParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelTransformParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _glPixelTransformParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTransformParameterivEXT");
            _glPixelTransformParameterivEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glPixelZoom</c>]</b></summary>
        public static delegate* unmanaged<float, float, void> _glPixelZoom_fnptr = &glPixelZoom_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelZoom_Lazy(float xfactor, float yfactor)
        {
            _glPixelZoom_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPixelZoom");
            _glPixelZoom_fnptr(xfactor, yfactor);
        }
        
        /// <summary><b>[entry point: <c>glPixelZoomxOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glPixelZoomxOES_fnptr = &glPixelZoomxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glPixelZoomxOES_Lazy(int xfactor, int yfactor)
        {
            _glPixelZoomxOES_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glPixelZoomxOES");
            _glPixelZoomxOES_fnptr(xfactor, yfactor);
        }
        
        /// <summary><b>[entry point: <c>glPNTrianglesfATI</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glPNTrianglesfATI_fnptr = &glPNTrianglesfATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glPNTrianglesfATI_Lazy(uint pname, float param)
        {
            _glPNTrianglesfATI_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPNTrianglesfATI");
            _glPNTrianglesfATI_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPNTrianglesiATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glPNTrianglesiATI_fnptr = &glPNTrianglesiATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glPNTrianglesiATI_Lazy(uint pname, int param)
        {
            _glPNTrianglesiATI_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPNTrianglesiATI");
            _glPNTrianglesiATI_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPointAlongPathNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, float, float*, float*, float*, float*, byte> _glPointAlongPathNV_fnptr = &glPointAlongPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glPointAlongPathNV_Lazy(uint path, int startSegment, int numSegments, float distance, float* x, float* y, float* tangentX, float* tangentY)
        {
            _glPointAlongPathNV_fnptr = (delegate* unmanaged<uint, int, int, float, float*, float*, float*, float*, byte>)GLLoader.BindingsContext.GetProcAddress("glPointAlongPathNV");
            return _glPointAlongPathNV_fnptr(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
        }
        
        /// <summary><b>[entry point: <c>glPointParameterf</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glPointParameterf_fnptr = &glPointParameterf_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameterf_Lazy(uint pname, float param)
        {
            _glPointParameterf_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterf");
            _glPointParameterf_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPointParameterfARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glPointParameterfARB_fnptr = &glPointParameterfARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameterfARB_Lazy(uint pname, float param)
        {
            _glPointParameterfARB_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterfARB");
            _glPointParameterfARB_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPointParameterfEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glPointParameterfEXT_fnptr = &glPointParameterfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameterfEXT_Lazy(uint pname, float param)
        {
            _glPointParameterfEXT_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterfEXT");
            _glPointParameterfEXT_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPointParameterfSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glPointParameterfSGIS_fnptr = &glPointParameterfSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameterfSGIS_Lazy(uint pname, float param)
        {
            _glPointParameterfSGIS_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterfSGIS");
            _glPointParameterfSGIS_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPointParameterfv</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glPointParameterfv_fnptr = &glPointParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameterfv_Lazy(uint pname, float* parameters)
        {
            _glPointParameterfv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterfv");
            _glPointParameterfv_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glPointParameterfvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glPointParameterfvARB_fnptr = &glPointParameterfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameterfvARB_Lazy(uint pname, float* parameters)
        {
            _glPointParameterfvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterfvARB");
            _glPointParameterfvARB_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glPointParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glPointParameterfvEXT_fnptr = &glPointParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameterfvEXT_Lazy(uint pname, float* parameters)
        {
            _glPointParameterfvEXT_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterfvEXT");
            _glPointParameterfvEXT_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glPointParameterfvSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glPointParameterfvSGIS_fnptr = &glPointParameterfvSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameterfvSGIS_Lazy(uint pname, float* parameters)
        {
            _glPointParameterfvSGIS_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterfvSGIS");
            _glPointParameterfvSGIS_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glPointParameteri</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glPointParameteri_fnptr = &glPointParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameteri_Lazy(uint pname, int param)
        {
            _glPointParameteri_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameteri");
            _glPointParameteri_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPointParameteriNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glPointParameteriNV_fnptr = &glPointParameteriNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameteriNV_Lazy(uint pname, int param)
        {
            _glPointParameteriNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameteriNV");
            _glPointParameteriNV_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPointParameteriv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glPointParameteriv_fnptr = &glPointParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameteriv_Lazy(uint pname, int* parameters)
        {
            _glPointParameteriv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameteriv");
            _glPointParameteriv_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glPointParameterivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glPointParameterivNV_fnptr = &glPointParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameterivNV_Lazy(uint pname, int* parameters)
        {
            _glPointParameterivNV_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterivNV");
            _glPointParameterivNV_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glPointParameterx</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glPointParameterx_fnptr = &glPointParameterx_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameterx_Lazy(uint pname, int param)
        {
            _glPointParameterx_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterx");
            _glPointParameterx_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPointParameterxOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glPointParameterxOES_fnptr = &glPointParameterxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameterxOES_Lazy(uint pname, int param)
        {
            _glPointParameterxOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterxOES");
            _glPointParameterxOES_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glPointParameterxv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glPointParameterxv_fnptr = &glPointParameterxv_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameterxv_Lazy(uint pname, int* parameters)
        {
            _glPointParameterxv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterxv");
            _glPointParameterxv_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glPointParameterxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glPointParameterxvOES_fnptr = &glPointParameterxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointParameterxvOES_Lazy(uint pname, int* parameters)
        {
            _glPointParameterxvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterxvOES");
            _glPointParameterxvOES_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glPointSize</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glPointSize_fnptr = &glPointSize_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointSize_Lazy(float size)
        {
            _glPointSize_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glPointSize");
            _glPointSize_fnptr(size);
        }
        
        /// <summary><b>[entry point: <c>glPointSizePointerOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void*, void> _glPointSizePointerOES_fnptr = &glPointSizePointerOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointSizePointerOES_Lazy(uint type, int stride, void* pointer)
        {
            _glPointSizePointerOES_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glPointSizePointerOES");
            _glPointSizePointerOES_fnptr(type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glPointSizex</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glPointSizex_fnptr = &glPointSizex_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointSizex_Lazy(int size)
        {
            _glPointSizex_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glPointSizex");
            _glPointSizex_fnptr(size);
        }
        
        /// <summary><b>[entry point: <c>glPointSizexOES</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glPointSizexOES_fnptr = &glPointSizexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glPointSizexOES_Lazy(int size)
        {
            _glPointSizexOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glPointSizexOES");
            _glPointSizexOES_fnptr(size);
        }
        
        /// <summary><b>[entry point: <c>glPollAsyncSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint*, int> _glPollAsyncSGIX_fnptr = &glPollAsyncSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static int glPollAsyncSGIX_Lazy(uint* markerp)
        {
            _glPollAsyncSGIX_fnptr = (delegate* unmanaged<uint*, int>)GLLoader.BindingsContext.GetProcAddress("glPollAsyncSGIX");
            return _glPollAsyncSGIX_fnptr(markerp);
        }
        
        /// <summary><b>[entry point: <c>glPollInstrumentsSGIX</c>]</b></summary>
        public static delegate* unmanaged<int*, int> _glPollInstrumentsSGIX_fnptr = &glPollInstrumentsSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static int glPollInstrumentsSGIX_Lazy(int* marker_p)
        {
            _glPollInstrumentsSGIX_fnptr = (delegate* unmanaged<int*, int>)GLLoader.BindingsContext.GetProcAddress("glPollInstrumentsSGIX");
            return _glPollInstrumentsSGIX_fnptr(marker_p);
        }
        
        /// <summary><b>[entry point: <c>glPolygonMode</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glPolygonMode_fnptr = &glPolygonMode_Lazy;
        [UnmanagedCallersOnly]
        private static void glPolygonMode_Lazy(uint face, uint mode)
        {
            _glPolygonMode_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonMode");
            _glPolygonMode_fnptr(face, mode);
        }
        
        /// <summary><b>[entry point: <c>glPolygonModeNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glPolygonModeNV_fnptr = &glPolygonModeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPolygonModeNV_Lazy(uint face, uint mode)
        {
            _glPolygonModeNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonModeNV");
            _glPolygonModeNV_fnptr(face, mode);
        }
        
        /// <summary><b>[entry point: <c>glPolygonOffset</c>]</b></summary>
        public static delegate* unmanaged<float, float, void> _glPolygonOffset_fnptr = &glPolygonOffset_Lazy;
        [UnmanagedCallersOnly]
        private static void glPolygonOffset_Lazy(float factor, float units)
        {
            _glPolygonOffset_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonOffset");
            _glPolygonOffset_fnptr(factor, units);
        }
        
        /// <summary><b>[entry point: <c>glPolygonOffsetClamp</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glPolygonOffsetClamp_fnptr = &glPolygonOffsetClamp_Lazy;
        [UnmanagedCallersOnly]
        private static void glPolygonOffsetClamp_Lazy(float factor, float units, float clamp)
        {
            _glPolygonOffsetClamp_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonOffsetClamp");
            _glPolygonOffsetClamp_fnptr(factor, units, clamp);
        }
        
        /// <summary><b>[entry point: <c>glPolygonOffsetClampEXT</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glPolygonOffsetClampEXT_fnptr = &glPolygonOffsetClampEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glPolygonOffsetClampEXT_Lazy(float factor, float units, float clamp)
        {
            _glPolygonOffsetClampEXT_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonOffsetClampEXT");
            _glPolygonOffsetClampEXT_fnptr(factor, units, clamp);
        }
        
        /// <summary><b>[entry point: <c>glPolygonOffsetEXT</c>]</b></summary>
        public static delegate* unmanaged<float, float, void> _glPolygonOffsetEXT_fnptr = &glPolygonOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glPolygonOffsetEXT_Lazy(float factor, float bias)
        {
            _glPolygonOffsetEXT_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonOffsetEXT");
            _glPolygonOffsetEXT_fnptr(factor, bias);
        }
        
        /// <summary><b>[entry point: <c>glPolygonOffsetx</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glPolygonOffsetx_fnptr = &glPolygonOffsetx_Lazy;
        [UnmanagedCallersOnly]
        private static void glPolygonOffsetx_Lazy(int factor, int units)
        {
            _glPolygonOffsetx_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonOffsetx");
            _glPolygonOffsetx_fnptr(factor, units);
        }
        
        /// <summary><b>[entry point: <c>glPolygonOffsetxOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glPolygonOffsetxOES_fnptr = &glPolygonOffsetxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glPolygonOffsetxOES_Lazy(int factor, int units)
        {
            _glPolygonOffsetxOES_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonOffsetxOES");
            _glPolygonOffsetxOES_fnptr(factor, units);
        }
        
        /// <summary><b>[entry point: <c>glPolygonStipple</c>]</b></summary>
        public static delegate* unmanaged<byte*, void> _glPolygonStipple_fnptr = &glPolygonStipple_Lazy;
        [UnmanagedCallersOnly]
        private static void glPolygonStipple_Lazy(byte* mask)
        {
            _glPolygonStipple_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonStipple");
            _glPolygonStipple_fnptr(mask);
        }
        
        /// <summary><b>[entry point: <c>glPopAttrib</c>]</b></summary>
        public static delegate* unmanaged<void> _glPopAttrib_fnptr = &glPopAttrib_Lazy;
        [UnmanagedCallersOnly]
        private static void glPopAttrib_Lazy()
        {
            _glPopAttrib_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPopAttrib");
            _glPopAttrib_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glPopClientAttrib</c>]</b></summary>
        public static delegate* unmanaged<void> _glPopClientAttrib_fnptr = &glPopClientAttrib_Lazy;
        [UnmanagedCallersOnly]
        private static void glPopClientAttrib_Lazy()
        {
            _glPopClientAttrib_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPopClientAttrib");
            _glPopClientAttrib_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glPopDebugGroup</c>]</b></summary>
        public static delegate* unmanaged<void> _glPopDebugGroup_fnptr = &glPopDebugGroup_Lazy;
        [UnmanagedCallersOnly]
        private static void glPopDebugGroup_Lazy()
        {
            _glPopDebugGroup_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPopDebugGroup");
            _glPopDebugGroup_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glPopDebugGroupKHR</c>]</b></summary>
        public static delegate* unmanaged<void> _glPopDebugGroupKHR_fnptr = &glPopDebugGroupKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glPopDebugGroupKHR_Lazy()
        {
            _glPopDebugGroupKHR_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPopDebugGroupKHR");
            _glPopDebugGroupKHR_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glPopGroupMarkerEXT</c>]</b></summary>
        public static delegate* unmanaged<void> _glPopGroupMarkerEXT_fnptr = &glPopGroupMarkerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glPopGroupMarkerEXT_Lazy()
        {
            _glPopGroupMarkerEXT_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPopGroupMarkerEXT");
            _glPopGroupMarkerEXT_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glPopMatrix</c>]</b></summary>
        public static delegate* unmanaged<void> _glPopMatrix_fnptr = &glPopMatrix_Lazy;
        [UnmanagedCallersOnly]
        private static void glPopMatrix_Lazy()
        {
            _glPopMatrix_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPopMatrix");
            _glPopMatrix_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glPopName</c>]</b></summary>
        public static delegate* unmanaged<void> _glPopName_fnptr = &glPopName_Lazy;
        [UnmanagedCallersOnly]
        private static void glPopName_Lazy()
        {
            _glPopName_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPopName");
            _glPopName_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glPresentFrameDualFillNV</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _glPresentFrameDualFillNV_fnptr = &glPresentFrameDualFillNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPresentFrameDualFillNV_Lazy(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, uint type, uint target0, uint fill0, uint target1, uint fill1, uint target2, uint fill2, uint target3, uint fill3)
        {
            _glPresentFrameDualFillNV_fnptr = (delegate* unmanaged<uint, ulong, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glPresentFrameDualFillNV");
            _glPresentFrameDualFillNV_fnptr(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
        }
        
        /// <summary><b>[entry point: <c>glPresentFrameKeyedNV</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _glPresentFrameKeyedNV_fnptr = &glPresentFrameKeyedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPresentFrameKeyedNV_Lazy(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, uint type, uint target0, uint fill0, uint key0, uint target1, uint fill1, uint key1)
        {
            _glPresentFrameKeyedNV_fnptr = (delegate* unmanaged<uint, ulong, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glPresentFrameKeyedNV");
            _glPresentFrameKeyedNV_fnptr(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
        }
        
        /// <summary><b>[entry point: <c>glPrimitiveBoundingBox</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, float, float, void> _glPrimitiveBoundingBox_fnptr = &glPrimitiveBoundingBox_Lazy;
        [UnmanagedCallersOnly]
        private static void glPrimitiveBoundingBox_Lazy(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
        {
            _glPrimitiveBoundingBox_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPrimitiveBoundingBox");
            _glPrimitiveBoundingBox_fnptr(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        /// <summary><b>[entry point: <c>glPrimitiveBoundingBoxARB</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, float, float, void> _glPrimitiveBoundingBoxARB_fnptr = &glPrimitiveBoundingBoxARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glPrimitiveBoundingBoxARB_Lazy(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
        {
            _glPrimitiveBoundingBoxARB_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPrimitiveBoundingBoxARB");
            _glPrimitiveBoundingBoxARB_fnptr(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        /// <summary><b>[entry point: <c>glPrimitiveBoundingBoxEXT</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, float, float, void> _glPrimitiveBoundingBoxEXT_fnptr = &glPrimitiveBoundingBoxEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glPrimitiveBoundingBoxEXT_Lazy(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
        {
            _glPrimitiveBoundingBoxEXT_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPrimitiveBoundingBoxEXT");
            _glPrimitiveBoundingBoxEXT_fnptr(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        /// <summary><b>[entry point: <c>glPrimitiveBoundingBoxOES</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, float, float, void> _glPrimitiveBoundingBoxOES_fnptr = &glPrimitiveBoundingBoxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glPrimitiveBoundingBoxOES_Lazy(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
        {
            _glPrimitiveBoundingBoxOES_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPrimitiveBoundingBoxOES");
            _glPrimitiveBoundingBoxOES_fnptr(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        /// <summary><b>[entry point: <c>glPrimitiveRestartIndex</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glPrimitiveRestartIndex_fnptr = &glPrimitiveRestartIndex_Lazy;
        [UnmanagedCallersOnly]
        private static void glPrimitiveRestartIndex_Lazy(uint index)
        {
            _glPrimitiveRestartIndex_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPrimitiveRestartIndex");
            _glPrimitiveRestartIndex_fnptr(index);
        }
        
        /// <summary><b>[entry point: <c>glPrimitiveRestartIndexNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glPrimitiveRestartIndexNV_fnptr = &glPrimitiveRestartIndexNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPrimitiveRestartIndexNV_Lazy(uint index)
        {
            _glPrimitiveRestartIndexNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPrimitiveRestartIndexNV");
            _glPrimitiveRestartIndexNV_fnptr(index);
        }
        
        /// <summary><b>[entry point: <c>glPrimitiveRestartNV</c>]</b></summary>
        public static delegate* unmanaged<void> _glPrimitiveRestartNV_fnptr = &glPrimitiveRestartNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glPrimitiveRestartNV_Lazy()
        {
            _glPrimitiveRestartNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPrimitiveRestartNV");
            _glPrimitiveRestartNV_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glPrioritizeTextures</c>]</b></summary>
        public static delegate* unmanaged<int, int*, float*, void> _glPrioritizeTextures_fnptr = &glPrioritizeTextures_Lazy;
        [UnmanagedCallersOnly]
        private static void glPrioritizeTextures_Lazy(int n, int* textures, float* priorities)
        {
            _glPrioritizeTextures_fnptr = (delegate* unmanaged<int, int*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPrioritizeTextures");
            _glPrioritizeTextures_fnptr(n, textures, priorities);
        }
        
        /// <summary><b>[entry point: <c>glPrioritizeTexturesEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int*, float*, void> _glPrioritizeTexturesEXT_fnptr = &glPrioritizeTexturesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glPrioritizeTexturesEXT_Lazy(int n, int* textures, float* priorities)
        {
            _glPrioritizeTexturesEXT_fnptr = (delegate* unmanaged<int, int*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPrioritizeTexturesEXT");
            _glPrioritizeTexturesEXT_fnptr(n, textures, priorities);
        }
        
        /// <summary><b>[entry point: <c>glPrioritizeTexturesxOES</c>]</b></summary>
        public static delegate* unmanaged<int, int*, int*, void> _glPrioritizeTexturesxOES_fnptr = &glPrioritizeTexturesxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glPrioritizeTexturesxOES_Lazy(int n, int* textures, int* priorities)
        {
            _glPrioritizeTexturesxOES_fnptr = (delegate* unmanaged<int, int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPrioritizeTexturesxOES");
            _glPrioritizeTexturesxOES_fnptr(n, textures, priorities);
        }
        
        /// <summary><b>[entry point: <c>glProgramBinary</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void*, int, void> _glProgramBinary_fnptr = &glProgramBinary_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramBinary_Lazy(int program, uint binaryFormat, void* binary, int length)
        {
            _glProgramBinary_fnptr = (delegate* unmanaged<int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramBinary");
            _glProgramBinary_fnptr(program, binaryFormat, binary, length);
        }
        
        /// <summary><b>[entry point: <c>glProgramBinaryOES</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void*, int, void> _glProgramBinaryOES_fnptr = &glProgramBinaryOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramBinaryOES_Lazy(int program, uint binaryFormat, void* binary, int length)
        {
            _glProgramBinaryOES_fnptr = (delegate* unmanaged<int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramBinaryOES");
            _glProgramBinaryOES_fnptr(program, binaryFormat, binary, length);
        }
        
        /// <summary><b>[entry point: <c>glProgramBufferParametersfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, float*, void> _glProgramBufferParametersfvNV_fnptr = &glProgramBufferParametersfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramBufferParametersfvNV_Lazy(uint target, uint bindingIndex, uint wordIndex, int count, float* parameters)
        {
            _glProgramBufferParametersfvNV_fnptr = (delegate* unmanaged<uint, uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramBufferParametersfvNV");
            _glProgramBufferParametersfvNV_fnptr(target, bindingIndex, wordIndex, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramBufferParametersIivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, int*, void> _glProgramBufferParametersIivNV_fnptr = &glProgramBufferParametersIivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramBufferParametersIivNV_Lazy(uint target, uint bindingIndex, uint wordIndex, int count, int* parameters)
        {
            _glProgramBufferParametersIivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramBufferParametersIivNV");
            _glProgramBufferParametersIivNV_fnptr(target, bindingIndex, wordIndex, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramBufferParametersIuivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int, uint*, void> _glProgramBufferParametersIuivNV_fnptr = &glProgramBufferParametersIuivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramBufferParametersIuivNV_Lazy(uint target, uint bindingIndex, uint wordIndex, int count, uint* parameters)
        {
            _glProgramBufferParametersIuivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramBufferParametersIuivNV");
            _glProgramBufferParametersIuivNV_fnptr(target, bindingIndex, wordIndex, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramEnvParameter4dARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double, double, double, double, void> _glProgramEnvParameter4dARB_fnptr = &glProgramEnvParameter4dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramEnvParameter4dARB_Lazy(uint target, uint index, double x, double y, double z, double w)
        {
            _glProgramEnvParameter4dARB_fnptr = (delegate* unmanaged<uint, uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameter4dARB");
            _glProgramEnvParameter4dARB_fnptr(target, index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramEnvParameter4dvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glProgramEnvParameter4dvARB_fnptr = &glProgramEnvParameter4dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramEnvParameter4dvARB_Lazy(uint target, uint index, double* parameters)
        {
            _glProgramEnvParameter4dvARB_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameter4dvARB");
            _glProgramEnvParameter4dvARB_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramEnvParameter4fARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, float, float, float, void> _glProgramEnvParameter4fARB_fnptr = &glProgramEnvParameter4fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramEnvParameter4fARB_Lazy(uint target, uint index, float x, float y, float z, float w)
        {
            _glProgramEnvParameter4fARB_fnptr = (delegate* unmanaged<uint, uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameter4fARB");
            _glProgramEnvParameter4fARB_fnptr(target, index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramEnvParameter4fvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glProgramEnvParameter4fvARB_fnptr = &glProgramEnvParameter4fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramEnvParameter4fvARB_Lazy(uint target, uint index, float* parameters)
        {
            _glProgramEnvParameter4fvARB_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameter4fvARB");
            _glProgramEnvParameter4fvARB_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramEnvParameterI4iNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, void> _glProgramEnvParameterI4iNV_fnptr = &glProgramEnvParameterI4iNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramEnvParameterI4iNV_Lazy(uint target, uint index, int x, int y, int z, int w)
        {
            _glProgramEnvParameterI4iNV_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameterI4iNV");
            _glProgramEnvParameterI4iNV_fnptr(target, index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramEnvParameterI4ivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glProgramEnvParameterI4ivNV_fnptr = &glProgramEnvParameterI4ivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramEnvParameterI4ivNV_Lazy(uint target, uint index, int* parameters)
        {
            _glProgramEnvParameterI4ivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameterI4ivNV");
            _glProgramEnvParameterI4ivNV_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramEnvParameterI4uiNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, uint, void> _glProgramEnvParameterI4uiNV_fnptr = &glProgramEnvParameterI4uiNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramEnvParameterI4uiNV_Lazy(uint target, uint index, uint x, uint y, uint z, uint w)
        {
            _glProgramEnvParameterI4uiNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameterI4uiNV");
            _glProgramEnvParameterI4uiNV_fnptr(target, index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramEnvParameterI4uivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glProgramEnvParameterI4uivNV_fnptr = &glProgramEnvParameterI4uivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramEnvParameterI4uivNV_Lazy(uint target, uint index, uint* parameters)
        {
            _glProgramEnvParameterI4uivNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameterI4uivNV");
            _glProgramEnvParameterI4uivNV_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramEnvParameters4fvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, float*, void> _glProgramEnvParameters4fvEXT_fnptr = &glProgramEnvParameters4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramEnvParameters4fvEXT_Lazy(uint target, uint index, int count, float* parameters)
        {
            _glProgramEnvParameters4fvEXT_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameters4fvEXT");
            _glProgramEnvParameters4fvEXT_fnptr(target, index, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramEnvParametersI4ivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int*, void> _glProgramEnvParametersI4ivNV_fnptr = &glProgramEnvParametersI4ivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramEnvParametersI4ivNV_Lazy(uint target, uint index, int count, int* parameters)
        {
            _glProgramEnvParametersI4ivNV_fnptr = (delegate* unmanaged<uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParametersI4ivNV");
            _glProgramEnvParametersI4ivNV_fnptr(target, index, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramEnvParametersI4uivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint*, void> _glProgramEnvParametersI4uivNV_fnptr = &glProgramEnvParametersI4uivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramEnvParametersI4uivNV_Lazy(uint target, uint index, int count, uint* parameters)
        {
            _glProgramEnvParametersI4uivNV_fnptr = (delegate* unmanaged<uint, uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParametersI4uivNV");
            _glProgramEnvParametersI4uivNV_fnptr(target, index, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramLocalParameter4dARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double, double, double, double, void> _glProgramLocalParameter4dARB_fnptr = &glProgramLocalParameter4dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramLocalParameter4dARB_Lazy(uint target, uint index, double x, double y, double z, double w)
        {
            _glProgramLocalParameter4dARB_fnptr = (delegate* unmanaged<uint, uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameter4dARB");
            _glProgramLocalParameter4dARB_fnptr(target, index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramLocalParameter4dvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glProgramLocalParameter4dvARB_fnptr = &glProgramLocalParameter4dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramLocalParameter4dvARB_Lazy(uint target, uint index, double* parameters)
        {
            _glProgramLocalParameter4dvARB_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameter4dvARB");
            _glProgramLocalParameter4dvARB_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramLocalParameter4fARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, float, float, float, void> _glProgramLocalParameter4fARB_fnptr = &glProgramLocalParameter4fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramLocalParameter4fARB_Lazy(uint target, uint index, float x, float y, float z, float w)
        {
            _glProgramLocalParameter4fARB_fnptr = (delegate* unmanaged<uint, uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameter4fARB");
            _glProgramLocalParameter4fARB_fnptr(target, index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramLocalParameter4fvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glProgramLocalParameter4fvARB_fnptr = &glProgramLocalParameter4fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramLocalParameter4fvARB_Lazy(uint target, uint index, float* parameters)
        {
            _glProgramLocalParameter4fvARB_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameter4fvARB");
            _glProgramLocalParameter4fvARB_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramLocalParameterI4iNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, void> _glProgramLocalParameterI4iNV_fnptr = &glProgramLocalParameterI4iNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramLocalParameterI4iNV_Lazy(uint target, uint index, int x, int y, int z, int w)
        {
            _glProgramLocalParameterI4iNV_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameterI4iNV");
            _glProgramLocalParameterI4iNV_fnptr(target, index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramLocalParameterI4ivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glProgramLocalParameterI4ivNV_fnptr = &glProgramLocalParameterI4ivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramLocalParameterI4ivNV_Lazy(uint target, uint index, int* parameters)
        {
            _glProgramLocalParameterI4ivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameterI4ivNV");
            _glProgramLocalParameterI4ivNV_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramLocalParameterI4uiNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, uint, void> _glProgramLocalParameterI4uiNV_fnptr = &glProgramLocalParameterI4uiNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramLocalParameterI4uiNV_Lazy(uint target, uint index, uint x, uint y, uint z, uint w)
        {
            _glProgramLocalParameterI4uiNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameterI4uiNV");
            _glProgramLocalParameterI4uiNV_fnptr(target, index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramLocalParameterI4uivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glProgramLocalParameterI4uivNV_fnptr = &glProgramLocalParameterI4uivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramLocalParameterI4uivNV_Lazy(uint target, uint index, uint* parameters)
        {
            _glProgramLocalParameterI4uivNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameterI4uivNV");
            _glProgramLocalParameterI4uivNV_fnptr(target, index, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramLocalParameters4fvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, float*, void> _glProgramLocalParameters4fvEXT_fnptr = &glProgramLocalParameters4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramLocalParameters4fvEXT_Lazy(uint target, uint index, int count, float* parameters)
        {
            _glProgramLocalParameters4fvEXT_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameters4fvEXT");
            _glProgramLocalParameters4fvEXT_fnptr(target, index, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramLocalParametersI4ivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int*, void> _glProgramLocalParametersI4ivNV_fnptr = &glProgramLocalParametersI4ivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramLocalParametersI4ivNV_Lazy(uint target, uint index, int count, int* parameters)
        {
            _glProgramLocalParametersI4ivNV_fnptr = (delegate* unmanaged<uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParametersI4ivNV");
            _glProgramLocalParametersI4ivNV_fnptr(target, index, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramLocalParametersI4uivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint*, void> _glProgramLocalParametersI4uivNV_fnptr = &glProgramLocalParametersI4uivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramLocalParametersI4uivNV_Lazy(uint target, uint index, int count, uint* parameters)
        {
            _glProgramLocalParametersI4uivNV_fnptr = (delegate* unmanaged<uint, uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParametersI4uivNV");
            _glProgramLocalParametersI4uivNV_fnptr(target, index, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramNamedParameter4dNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte*, double, double, double, double, void> _glProgramNamedParameter4dNV_fnptr = &glProgramNamedParameter4dNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramNamedParameter4dNV_Lazy(int id, int len, byte* name, double x, double y, double z, double w)
        {
            _glProgramNamedParameter4dNV_fnptr = (delegate* unmanaged<int, int, byte*, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramNamedParameter4dNV");
            _glProgramNamedParameter4dNV_fnptr(id, len, name, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramNamedParameter4dvNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte*, double*, void> _glProgramNamedParameter4dvNV_fnptr = &glProgramNamedParameter4dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramNamedParameter4dvNV_Lazy(int id, int len, byte* name, double* v)
        {
            _glProgramNamedParameter4dvNV_fnptr = (delegate* unmanaged<int, int, byte*, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramNamedParameter4dvNV");
            _glProgramNamedParameter4dvNV_fnptr(id, len, name, v);
        }
        
        /// <summary><b>[entry point: <c>glProgramNamedParameter4fNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte*, float, float, float, float, void> _glProgramNamedParameter4fNV_fnptr = &glProgramNamedParameter4fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramNamedParameter4fNV_Lazy(int id, int len, byte* name, float x, float y, float z, float w)
        {
            _glProgramNamedParameter4fNV_fnptr = (delegate* unmanaged<int, int, byte*, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramNamedParameter4fNV");
            _glProgramNamedParameter4fNV_fnptr(id, len, name, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramNamedParameter4fvNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte*, float*, void> _glProgramNamedParameter4fvNV_fnptr = &glProgramNamedParameter4fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramNamedParameter4fvNV_Lazy(int id, int len, byte* name, float* v)
        {
            _glProgramNamedParameter4fvNV_fnptr = (delegate* unmanaged<int, int, byte*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramNamedParameter4fvNV");
            _glProgramNamedParameter4fvNV_fnptr(id, len, name, v);
        }
        
        /// <summary><b>[entry point: <c>glProgramParameter4dNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double, double, double, double, void> _glProgramParameter4dNV_fnptr = &glProgramParameter4dNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramParameter4dNV_Lazy(uint target, uint index, double x, double y, double z, double w)
        {
            _glProgramParameter4dNV_fnptr = (delegate* unmanaged<uint, uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameter4dNV");
            _glProgramParameter4dNV_fnptr(target, index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramParameter4dvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glProgramParameter4dvNV_fnptr = &glProgramParameter4dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramParameter4dvNV_Lazy(uint target, uint index, double* v)
        {
            _glProgramParameter4dvNV_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameter4dvNV");
            _glProgramParameter4dvNV_fnptr(target, index, v);
        }
        
        /// <summary><b>[entry point: <c>glProgramParameter4fNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, float, float, float, void> _glProgramParameter4fNV_fnptr = &glProgramParameter4fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramParameter4fNV_Lazy(uint target, uint index, float x, float y, float z, float w)
        {
            _glProgramParameter4fNV_fnptr = (delegate* unmanaged<uint, uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameter4fNV");
            _glProgramParameter4fNV_fnptr(target, index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramParameter4fvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glProgramParameter4fvNV_fnptr = &glProgramParameter4fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramParameter4fvNV_Lazy(uint target, uint index, float* v)
        {
            _glProgramParameter4fvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameter4fvNV");
            _glProgramParameter4fvNV_fnptr(target, index, v);
        }
        
        /// <summary><b>[entry point: <c>glProgramParameteri</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glProgramParameteri_fnptr = &glProgramParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramParameteri_Lazy(int program, uint pname, int value)
        {
            _glProgramParameteri_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameteri");
            _glProgramParameteri_fnptr(program, pname, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramParameteriARB</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glProgramParameteriARB_fnptr = &glProgramParameteriARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramParameteriARB_Lazy(int program, uint pname, int value)
        {
            _glProgramParameteriARB_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameteriARB");
            _glProgramParameteriARB_fnptr(program, pname, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramParameteriEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glProgramParameteriEXT_fnptr = &glProgramParameteriEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramParameteriEXT_Lazy(int program, uint pname, int value)
        {
            _glProgramParameteriEXT_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameteriEXT");
            _glProgramParameteriEXT_fnptr(program, pname, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramParameters4dvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, double*, void> _glProgramParameters4dvNV_fnptr = &glProgramParameters4dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramParameters4dvNV_Lazy(uint target, uint index, int count, double* v)
        {
            _glProgramParameters4dvNV_fnptr = (delegate* unmanaged<uint, uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameters4dvNV");
            _glProgramParameters4dvNV_fnptr(target, index, count, v);
        }
        
        /// <summary><b>[entry point: <c>glProgramParameters4fvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, float*, void> _glProgramParameters4fvNV_fnptr = &glProgramParameters4fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramParameters4fvNV_Lazy(uint target, uint index, int count, float* v)
        {
            _glProgramParameters4fvNV_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameters4fvNV");
            _glProgramParameters4fvNV_fnptr(target, index, count, v);
        }
        
        /// <summary><b>[entry point: <c>glProgramPathFragmentInputGenNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, float*, void> _glProgramPathFragmentInputGenNV_fnptr = &glProgramPathFragmentInputGenNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramPathFragmentInputGenNV_Lazy(int program, int location, uint genMode, int components, float* coeffs)
        {
            _glProgramPathFragmentInputGenNV_fnptr = (delegate* unmanaged<int, int, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramPathFragmentInputGenNV");
            _glProgramPathFragmentInputGenNV_fnptr(program, location, genMode, components, coeffs);
        }
        
        /// <summary><b>[entry point: <c>glProgramStringARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void*, void> _glProgramStringARB_fnptr = &glProgramStringARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramStringARB_Lazy(uint target, uint format, int len, void* str)
        {
            _glProgramStringARB_fnptr = (delegate* unmanaged<uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramStringARB");
            _glProgramStringARB_fnptr(target, format, len, str);
        }
        
        /// <summary><b>[entry point: <c>glProgramSubroutineParametersuivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, void> _glProgramSubroutineParametersuivNV_fnptr = &glProgramSubroutineParametersuivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramSubroutineParametersuivNV_Lazy(uint target, int count, uint* parameters)
        {
            _glProgramSubroutineParametersuivNV_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramSubroutineParametersuivNV");
            _glProgramSubroutineParametersuivNV_fnptr(target, count, parameters);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1d</c>]</b></summary>
        public static delegate* unmanaged<int, int, double, void> _glProgramUniform1d_fnptr = &glProgramUniform1d_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1d_Lazy(int program, int location, double v0)
        {
            _glProgramUniform1d_fnptr = (delegate* unmanaged<int, int, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1d");
            _glProgramUniform1d_fnptr(program, location, v0);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1dEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, double, void> _glProgramUniform1dEXT_fnptr = &glProgramUniform1dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1dEXT_Lazy(int program, int location, double x)
        {
            _glProgramUniform1dEXT_fnptr = (delegate* unmanaged<int, int, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1dEXT");
            _glProgramUniform1dEXT_fnptr(program, location, x);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, double*, void> _glProgramUniform1dv_fnptr = &glProgramUniform1dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1dv_Lazy(int program, int location, int count, double* value)
        {
            _glProgramUniform1dv_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1dv");
            _glProgramUniform1dv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1dvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, double*, void> _glProgramUniform1dvEXT_fnptr = &glProgramUniform1dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1dvEXT_Lazy(int program, int location, int count, double* value)
        {
            _glProgramUniform1dvEXT_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1dvEXT");
            _glProgramUniform1dvEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1f</c>]</b></summary>
        public static delegate* unmanaged<int, int, float, void> _glProgramUniform1f_fnptr = &glProgramUniform1f_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1f_Lazy(int program, int location, float v0)
        {
            _glProgramUniform1f_fnptr = (delegate* unmanaged<int, int, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1f");
            _glProgramUniform1f_fnptr(program, location, v0);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1fEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, float, void> _glProgramUniform1fEXT_fnptr = &glProgramUniform1fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1fEXT_Lazy(int program, int location, float v0)
        {
            _glProgramUniform1fEXT_fnptr = (delegate* unmanaged<int, int, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1fEXT");
            _glProgramUniform1fEXT_fnptr(program, location, v0);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, float*, void> _glProgramUniform1fv_fnptr = &glProgramUniform1fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1fv_Lazy(int program, int location, int count, float* value)
        {
            _glProgramUniform1fv_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1fv");
            _glProgramUniform1fv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1fvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, float*, void> _glProgramUniform1fvEXT_fnptr = &glProgramUniform1fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1fvEXT_Lazy(int program, int location, int count, float* value)
        {
            _glProgramUniform1fvEXT_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1fvEXT");
            _glProgramUniform1fvEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glProgramUniform1i_fnptr = &glProgramUniform1i_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1i_Lazy(int program, int location, int v0)
        {
            _glProgramUniform1i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1i");
            _glProgramUniform1i_fnptr(program, location, v0);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1i64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, long, void> _glProgramUniform1i64ARB_fnptr = &glProgramUniform1i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1i64ARB_Lazy(int program, int location, long x)
        {
            _glProgramUniform1i64ARB_fnptr = (delegate* unmanaged<int, int, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1i64ARB");
            _glProgramUniform1i64ARB_fnptr(program, location, x);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1i64NV</c>]</b></summary>
        public static delegate* unmanaged<int, int, long, void> _glProgramUniform1i64NV_fnptr = &glProgramUniform1i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1i64NV_Lazy(int program, int location, long x)
        {
            _glProgramUniform1i64NV_fnptr = (delegate* unmanaged<int, int, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1i64NV");
            _glProgramUniform1i64NV_fnptr(program, location, x);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1i64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, long*, void> _glProgramUniform1i64vARB_fnptr = &glProgramUniform1i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1i64vARB_Lazy(int program, int location, int count, long* value)
        {
            _glProgramUniform1i64vARB_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1i64vARB");
            _glProgramUniform1i64vARB_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1i64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, long*, void> _glProgramUniform1i64vNV_fnptr = &glProgramUniform1i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1i64vNV_Lazy(int program, int location, int count, long* value)
        {
            _glProgramUniform1i64vNV_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1i64vNV");
            _glProgramUniform1i64vNV_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1iEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glProgramUniform1iEXT_fnptr = &glProgramUniform1iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1iEXT_Lazy(int program, int location, int v0)
        {
            _glProgramUniform1iEXT_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1iEXT");
            _glProgramUniform1iEXT_fnptr(program, location, v0);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1iv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int*, void> _glProgramUniform1iv_fnptr = &glProgramUniform1iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1iv_Lazy(int program, int location, int count, int* value)
        {
            _glProgramUniform1iv_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1iv");
            _glProgramUniform1iv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1ivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int*, void> _glProgramUniform1ivEXT_fnptr = &glProgramUniform1ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1ivEXT_Lazy(int program, int location, int count, int* value)
        {
            _glProgramUniform1ivEXT_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1ivEXT");
            _glProgramUniform1ivEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1ui</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, void> _glProgramUniform1ui_fnptr = &glProgramUniform1ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1ui_Lazy(int program, int location, uint v0)
        {
            _glProgramUniform1ui_fnptr = (delegate* unmanaged<int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1ui");
            _glProgramUniform1ui_fnptr(program, location, v0);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1ui64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong, void> _glProgramUniform1ui64ARB_fnptr = &glProgramUniform1ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1ui64ARB_Lazy(int program, int location, ulong x)
        {
            _glProgramUniform1ui64ARB_fnptr = (delegate* unmanaged<int, int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1ui64ARB");
            _glProgramUniform1ui64ARB_fnptr(program, location, x);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1ui64NV</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong, void> _glProgramUniform1ui64NV_fnptr = &glProgramUniform1ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1ui64NV_Lazy(int program, int location, ulong x)
        {
            _glProgramUniform1ui64NV_fnptr = (delegate* unmanaged<int, int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1ui64NV");
            _glProgramUniform1ui64NV_fnptr(program, location, x);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1ui64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, ulong*, void> _glProgramUniform1ui64vARB_fnptr = &glProgramUniform1ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1ui64vARB_Lazy(int program, int location, int count, ulong* value)
        {
            _glProgramUniform1ui64vARB_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1ui64vARB");
            _glProgramUniform1ui64vARB_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1ui64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, ulong*, void> _glProgramUniform1ui64vNV_fnptr = &glProgramUniform1ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1ui64vNV_Lazy(int program, int location, int count, ulong* value)
        {
            _glProgramUniform1ui64vNV_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1ui64vNV");
            _glProgramUniform1ui64vNV_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1uiEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, void> _glProgramUniform1uiEXT_fnptr = &glProgramUniform1uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1uiEXT_Lazy(int program, int location, uint v0)
        {
            _glProgramUniform1uiEXT_fnptr = (delegate* unmanaged<int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1uiEXT");
            _glProgramUniform1uiEXT_fnptr(program, location, v0);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1uiv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint*, void> _glProgramUniform1uiv_fnptr = &glProgramUniform1uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1uiv_Lazy(int program, int location, int count, uint* value)
        {
            _glProgramUniform1uiv_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1uiv");
            _glProgramUniform1uiv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform1uivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint*, void> _glProgramUniform1uivEXT_fnptr = &glProgramUniform1uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform1uivEXT_Lazy(int program, int location, int count, uint* value)
        {
            _glProgramUniform1uivEXT_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1uivEXT");
            _glProgramUniform1uivEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2d</c>]</b></summary>
        public static delegate* unmanaged<int, int, double, double, void> _glProgramUniform2d_fnptr = &glProgramUniform2d_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2d_Lazy(int program, int location, double v0, double v1)
        {
            _glProgramUniform2d_fnptr = (delegate* unmanaged<int, int, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2d");
            _glProgramUniform2d_fnptr(program, location, v0, v1);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2dEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, double, double, void> _glProgramUniform2dEXT_fnptr = &glProgramUniform2dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2dEXT_Lazy(int program, int location, double x, double y)
        {
            _glProgramUniform2dEXT_fnptr = (delegate* unmanaged<int, int, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2dEXT");
            _glProgramUniform2dEXT_fnptr(program, location, x, y);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, double*, void> _glProgramUniform2dv_fnptr = &glProgramUniform2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2dv_Lazy(int program, int location, int count, double* value)
        {
            _glProgramUniform2dv_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2dv");
            _glProgramUniform2dv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2dvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, double*, void> _glProgramUniform2dvEXT_fnptr = &glProgramUniform2dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2dvEXT_Lazy(int program, int location, int count, double* value)
        {
            _glProgramUniform2dvEXT_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2dvEXT");
            _glProgramUniform2dvEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2f</c>]</b></summary>
        public static delegate* unmanaged<int, int, float, float, void> _glProgramUniform2f_fnptr = &glProgramUniform2f_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2f_Lazy(int program, int location, float v0, float v1)
        {
            _glProgramUniform2f_fnptr = (delegate* unmanaged<int, int, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2f");
            _glProgramUniform2f_fnptr(program, location, v0, v1);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2fEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, float, float, void> _glProgramUniform2fEXT_fnptr = &glProgramUniform2fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2fEXT_Lazy(int program, int location, float v0, float v1)
        {
            _glProgramUniform2fEXT_fnptr = (delegate* unmanaged<int, int, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2fEXT");
            _glProgramUniform2fEXT_fnptr(program, location, v0, v1);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, float*, void> _glProgramUniform2fv_fnptr = &glProgramUniform2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2fv_Lazy(int program, int location, int count, float* value)
        {
            _glProgramUniform2fv_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2fv");
            _glProgramUniform2fv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2fvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, float*, void> _glProgramUniform2fvEXT_fnptr = &glProgramUniform2fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2fvEXT_Lazy(int program, int location, int count, float* value)
        {
            _glProgramUniform2fvEXT_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2fvEXT");
            _glProgramUniform2fvEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glProgramUniform2i_fnptr = &glProgramUniform2i_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2i_Lazy(int program, int location, int v0, int v1)
        {
            _glProgramUniform2i_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2i");
            _glProgramUniform2i_fnptr(program, location, v0, v1);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2i64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, long, long, void> _glProgramUniform2i64ARB_fnptr = &glProgramUniform2i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2i64ARB_Lazy(int program, int location, long x, long y)
        {
            _glProgramUniform2i64ARB_fnptr = (delegate* unmanaged<int, int, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2i64ARB");
            _glProgramUniform2i64ARB_fnptr(program, location, x, y);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2i64NV</c>]</b></summary>
        public static delegate* unmanaged<int, int, long, long, void> _glProgramUniform2i64NV_fnptr = &glProgramUniform2i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2i64NV_Lazy(int program, int location, long x, long y)
        {
            _glProgramUniform2i64NV_fnptr = (delegate* unmanaged<int, int, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2i64NV");
            _glProgramUniform2i64NV_fnptr(program, location, x, y);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2i64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, long*, void> _glProgramUniform2i64vARB_fnptr = &glProgramUniform2i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2i64vARB_Lazy(int program, int location, int count, long* value)
        {
            _glProgramUniform2i64vARB_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2i64vARB");
            _glProgramUniform2i64vARB_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2i64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, long*, void> _glProgramUniform2i64vNV_fnptr = &glProgramUniform2i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2i64vNV_Lazy(int program, int location, int count, long* value)
        {
            _glProgramUniform2i64vNV_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2i64vNV");
            _glProgramUniform2i64vNV_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2iEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glProgramUniform2iEXT_fnptr = &glProgramUniform2iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2iEXT_Lazy(int program, int location, int v0, int v1)
        {
            _glProgramUniform2iEXT_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2iEXT");
            _glProgramUniform2iEXT_fnptr(program, location, v0, v1);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2iv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int*, void> _glProgramUniform2iv_fnptr = &glProgramUniform2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2iv_Lazy(int program, int location, int count, int* value)
        {
            _glProgramUniform2iv_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2iv");
            _glProgramUniform2iv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2ivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int*, void> _glProgramUniform2ivEXT_fnptr = &glProgramUniform2ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2ivEXT_Lazy(int program, int location, int count, int* value)
        {
            _glProgramUniform2ivEXT_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2ivEXT");
            _glProgramUniform2ivEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2ui</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, uint, void> _glProgramUniform2ui_fnptr = &glProgramUniform2ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2ui_Lazy(int program, int location, uint v0, uint v1)
        {
            _glProgramUniform2ui_fnptr = (delegate* unmanaged<int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2ui");
            _glProgramUniform2ui_fnptr(program, location, v0, v1);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2ui64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong, ulong, void> _glProgramUniform2ui64ARB_fnptr = &glProgramUniform2ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2ui64ARB_Lazy(int program, int location, ulong x, ulong y)
        {
            _glProgramUniform2ui64ARB_fnptr = (delegate* unmanaged<int, int, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2ui64ARB");
            _glProgramUniform2ui64ARB_fnptr(program, location, x, y);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2ui64NV</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong, ulong, void> _glProgramUniform2ui64NV_fnptr = &glProgramUniform2ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2ui64NV_Lazy(int program, int location, ulong x, ulong y)
        {
            _glProgramUniform2ui64NV_fnptr = (delegate* unmanaged<int, int, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2ui64NV");
            _glProgramUniform2ui64NV_fnptr(program, location, x, y);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2ui64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, ulong*, void> _glProgramUniform2ui64vARB_fnptr = &glProgramUniform2ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2ui64vARB_Lazy(int program, int location, int count, ulong* value)
        {
            _glProgramUniform2ui64vARB_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2ui64vARB");
            _glProgramUniform2ui64vARB_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2ui64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, ulong*, void> _glProgramUniform2ui64vNV_fnptr = &glProgramUniform2ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2ui64vNV_Lazy(int program, int location, int count, ulong* value)
        {
            _glProgramUniform2ui64vNV_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2ui64vNV");
            _glProgramUniform2ui64vNV_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2uiEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, uint, void> _glProgramUniform2uiEXT_fnptr = &glProgramUniform2uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2uiEXT_Lazy(int program, int location, uint v0, uint v1)
        {
            _glProgramUniform2uiEXT_fnptr = (delegate* unmanaged<int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2uiEXT");
            _glProgramUniform2uiEXT_fnptr(program, location, v0, v1);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2uiv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint*, void> _glProgramUniform2uiv_fnptr = &glProgramUniform2uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2uiv_Lazy(int program, int location, int count, uint* value)
        {
            _glProgramUniform2uiv_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2uiv");
            _glProgramUniform2uiv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform2uivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint*, void> _glProgramUniform2uivEXT_fnptr = &glProgramUniform2uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform2uivEXT_Lazy(int program, int location, int count, uint* value)
        {
            _glProgramUniform2uivEXT_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2uivEXT");
            _glProgramUniform2uivEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3d</c>]</b></summary>
        public static delegate* unmanaged<int, int, double, double, double, void> _glProgramUniform3d_fnptr = &glProgramUniform3d_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3d_Lazy(int program, int location, double v0, double v1, double v2)
        {
            _glProgramUniform3d_fnptr = (delegate* unmanaged<int, int, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3d");
            _glProgramUniform3d_fnptr(program, location, v0, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3dEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, double, double, double, void> _glProgramUniform3dEXT_fnptr = &glProgramUniform3dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3dEXT_Lazy(int program, int location, double x, double y, double z)
        {
            _glProgramUniform3dEXT_fnptr = (delegate* unmanaged<int, int, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3dEXT");
            _glProgramUniform3dEXT_fnptr(program, location, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, double*, void> _glProgramUniform3dv_fnptr = &glProgramUniform3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3dv_Lazy(int program, int location, int count, double* value)
        {
            _glProgramUniform3dv_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3dv");
            _glProgramUniform3dv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3dvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, double*, void> _glProgramUniform3dvEXT_fnptr = &glProgramUniform3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3dvEXT_Lazy(int program, int location, int count, double* value)
        {
            _glProgramUniform3dvEXT_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3dvEXT");
            _glProgramUniform3dvEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3f</c>]</b></summary>
        public static delegate* unmanaged<int, int, float, float, float, void> _glProgramUniform3f_fnptr = &glProgramUniform3f_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3f_Lazy(int program, int location, float v0, float v1, float v2)
        {
            _glProgramUniform3f_fnptr = (delegate* unmanaged<int, int, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3f");
            _glProgramUniform3f_fnptr(program, location, v0, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3fEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, float, float, float, void> _glProgramUniform3fEXT_fnptr = &glProgramUniform3fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3fEXT_Lazy(int program, int location, float v0, float v1, float v2)
        {
            _glProgramUniform3fEXT_fnptr = (delegate* unmanaged<int, int, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3fEXT");
            _glProgramUniform3fEXT_fnptr(program, location, v0, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, float*, void> _glProgramUniform3fv_fnptr = &glProgramUniform3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3fv_Lazy(int program, int location, int count, float* value)
        {
            _glProgramUniform3fv_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3fv");
            _glProgramUniform3fv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3fvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, float*, void> _glProgramUniform3fvEXT_fnptr = &glProgramUniform3fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3fvEXT_Lazy(int program, int location, int count, float* value)
        {
            _glProgramUniform3fvEXT_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3fvEXT");
            _glProgramUniform3fvEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, void> _glProgramUniform3i_fnptr = &glProgramUniform3i_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3i_Lazy(int program, int location, int v0, int v1, int v2)
        {
            _glProgramUniform3i_fnptr = (delegate* unmanaged<int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3i");
            _glProgramUniform3i_fnptr(program, location, v0, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3i64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, long, long, long, void> _glProgramUniform3i64ARB_fnptr = &glProgramUniform3i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3i64ARB_Lazy(int program, int location, long x, long y, long z)
        {
            _glProgramUniform3i64ARB_fnptr = (delegate* unmanaged<int, int, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3i64ARB");
            _glProgramUniform3i64ARB_fnptr(program, location, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3i64NV</c>]</b></summary>
        public static delegate* unmanaged<int, int, long, long, long, void> _glProgramUniform3i64NV_fnptr = &glProgramUniform3i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3i64NV_Lazy(int program, int location, long x, long y, long z)
        {
            _glProgramUniform3i64NV_fnptr = (delegate* unmanaged<int, int, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3i64NV");
            _glProgramUniform3i64NV_fnptr(program, location, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3i64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, long*, void> _glProgramUniform3i64vARB_fnptr = &glProgramUniform3i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3i64vARB_Lazy(int program, int location, int count, long* value)
        {
            _glProgramUniform3i64vARB_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3i64vARB");
            _glProgramUniform3i64vARB_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3i64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, long*, void> _glProgramUniform3i64vNV_fnptr = &glProgramUniform3i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3i64vNV_Lazy(int program, int location, int count, long* value)
        {
            _glProgramUniform3i64vNV_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3i64vNV");
            _glProgramUniform3i64vNV_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3iEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, void> _glProgramUniform3iEXT_fnptr = &glProgramUniform3iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3iEXT_Lazy(int program, int location, int v0, int v1, int v2)
        {
            _glProgramUniform3iEXT_fnptr = (delegate* unmanaged<int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3iEXT");
            _glProgramUniform3iEXT_fnptr(program, location, v0, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3iv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int*, void> _glProgramUniform3iv_fnptr = &glProgramUniform3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3iv_Lazy(int program, int location, int count, int* value)
        {
            _glProgramUniform3iv_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3iv");
            _glProgramUniform3iv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3ivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int*, void> _glProgramUniform3ivEXT_fnptr = &glProgramUniform3ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3ivEXT_Lazy(int program, int location, int count, int* value)
        {
            _glProgramUniform3ivEXT_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3ivEXT");
            _glProgramUniform3ivEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3ui</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, uint, uint, void> _glProgramUniform3ui_fnptr = &glProgramUniform3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3ui_Lazy(int program, int location, uint v0, uint v1, uint v2)
        {
            _glProgramUniform3ui_fnptr = (delegate* unmanaged<int, int, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3ui");
            _glProgramUniform3ui_fnptr(program, location, v0, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3ui64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong, ulong, ulong, void> _glProgramUniform3ui64ARB_fnptr = &glProgramUniform3ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3ui64ARB_Lazy(int program, int location, ulong x, ulong y, ulong z)
        {
            _glProgramUniform3ui64ARB_fnptr = (delegate* unmanaged<int, int, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3ui64ARB");
            _glProgramUniform3ui64ARB_fnptr(program, location, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3ui64NV</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong, ulong, ulong, void> _glProgramUniform3ui64NV_fnptr = &glProgramUniform3ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3ui64NV_Lazy(int program, int location, ulong x, ulong y, ulong z)
        {
            _glProgramUniform3ui64NV_fnptr = (delegate* unmanaged<int, int, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3ui64NV");
            _glProgramUniform3ui64NV_fnptr(program, location, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3ui64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, ulong*, void> _glProgramUniform3ui64vARB_fnptr = &glProgramUniform3ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3ui64vARB_Lazy(int program, int location, int count, ulong* value)
        {
            _glProgramUniform3ui64vARB_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3ui64vARB");
            _glProgramUniform3ui64vARB_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3ui64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, ulong*, void> _glProgramUniform3ui64vNV_fnptr = &glProgramUniform3ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3ui64vNV_Lazy(int program, int location, int count, ulong* value)
        {
            _glProgramUniform3ui64vNV_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3ui64vNV");
            _glProgramUniform3ui64vNV_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3uiEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, uint, uint, void> _glProgramUniform3uiEXT_fnptr = &glProgramUniform3uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3uiEXT_Lazy(int program, int location, uint v0, uint v1, uint v2)
        {
            _glProgramUniform3uiEXT_fnptr = (delegate* unmanaged<int, int, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3uiEXT");
            _glProgramUniform3uiEXT_fnptr(program, location, v0, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3uiv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint*, void> _glProgramUniform3uiv_fnptr = &glProgramUniform3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3uiv_Lazy(int program, int location, int count, uint* value)
        {
            _glProgramUniform3uiv_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3uiv");
            _glProgramUniform3uiv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform3uivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint*, void> _glProgramUniform3uivEXT_fnptr = &glProgramUniform3uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform3uivEXT_Lazy(int program, int location, int count, uint* value)
        {
            _glProgramUniform3uivEXT_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3uivEXT");
            _glProgramUniform3uivEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4d</c>]</b></summary>
        public static delegate* unmanaged<int, int, double, double, double, double, void> _glProgramUniform4d_fnptr = &glProgramUniform4d_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4d_Lazy(int program, int location, double v0, double v1, double v2, double v3)
        {
            _glProgramUniform4d_fnptr = (delegate* unmanaged<int, int, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4d");
            _glProgramUniform4d_fnptr(program, location, v0, v1, v2, v3);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4dEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, double, double, double, double, void> _glProgramUniform4dEXT_fnptr = &glProgramUniform4dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4dEXT_Lazy(int program, int location, double x, double y, double z, double w)
        {
            _glProgramUniform4dEXT_fnptr = (delegate* unmanaged<int, int, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4dEXT");
            _glProgramUniform4dEXT_fnptr(program, location, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, double*, void> _glProgramUniform4dv_fnptr = &glProgramUniform4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4dv_Lazy(int program, int location, int count, double* value)
        {
            _glProgramUniform4dv_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4dv");
            _glProgramUniform4dv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4dvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, double*, void> _glProgramUniform4dvEXT_fnptr = &glProgramUniform4dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4dvEXT_Lazy(int program, int location, int count, double* value)
        {
            _glProgramUniform4dvEXT_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4dvEXT");
            _glProgramUniform4dvEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4f</c>]</b></summary>
        public static delegate* unmanaged<int, int, float, float, float, float, void> _glProgramUniform4f_fnptr = &glProgramUniform4f_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4f_Lazy(int program, int location, float v0, float v1, float v2, float v3)
        {
            _glProgramUniform4f_fnptr = (delegate* unmanaged<int, int, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4f");
            _glProgramUniform4f_fnptr(program, location, v0, v1, v2, v3);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4fEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, float, float, float, float, void> _glProgramUniform4fEXT_fnptr = &glProgramUniform4fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4fEXT_Lazy(int program, int location, float v0, float v1, float v2, float v3)
        {
            _glProgramUniform4fEXT_fnptr = (delegate* unmanaged<int, int, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4fEXT");
            _glProgramUniform4fEXT_fnptr(program, location, v0, v1, v2, v3);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, float*, void> _glProgramUniform4fv_fnptr = &glProgramUniform4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4fv_Lazy(int program, int location, int count, float* value)
        {
            _glProgramUniform4fv_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4fv");
            _glProgramUniform4fv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4fvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, float*, void> _glProgramUniform4fvEXT_fnptr = &glProgramUniform4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4fvEXT_Lazy(int program, int location, int count, float* value)
        {
            _glProgramUniform4fvEXT_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4fvEXT");
            _glProgramUniform4fvEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, void> _glProgramUniform4i_fnptr = &glProgramUniform4i_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4i_Lazy(int program, int location, int v0, int v1, int v2, int v3)
        {
            _glProgramUniform4i_fnptr = (delegate* unmanaged<int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4i");
            _glProgramUniform4i_fnptr(program, location, v0, v1, v2, v3);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4i64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, long, long, long, long, void> _glProgramUniform4i64ARB_fnptr = &glProgramUniform4i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4i64ARB_Lazy(int program, int location, long x, long y, long z, long w)
        {
            _glProgramUniform4i64ARB_fnptr = (delegate* unmanaged<int, int, long, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4i64ARB");
            _glProgramUniform4i64ARB_fnptr(program, location, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4i64NV</c>]</b></summary>
        public static delegate* unmanaged<int, int, long, long, long, long, void> _glProgramUniform4i64NV_fnptr = &glProgramUniform4i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4i64NV_Lazy(int program, int location, long x, long y, long z, long w)
        {
            _glProgramUniform4i64NV_fnptr = (delegate* unmanaged<int, int, long, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4i64NV");
            _glProgramUniform4i64NV_fnptr(program, location, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4i64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, long*, void> _glProgramUniform4i64vARB_fnptr = &glProgramUniform4i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4i64vARB_Lazy(int program, int location, int count, long* value)
        {
            _glProgramUniform4i64vARB_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4i64vARB");
            _glProgramUniform4i64vARB_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4i64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, long*, void> _glProgramUniform4i64vNV_fnptr = &glProgramUniform4i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4i64vNV_Lazy(int program, int location, int count, long* value)
        {
            _glProgramUniform4i64vNV_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4i64vNV");
            _glProgramUniform4i64vNV_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4iEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, void> _glProgramUniform4iEXT_fnptr = &glProgramUniform4iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4iEXT_Lazy(int program, int location, int v0, int v1, int v2, int v3)
        {
            _glProgramUniform4iEXT_fnptr = (delegate* unmanaged<int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4iEXT");
            _glProgramUniform4iEXT_fnptr(program, location, v0, v1, v2, v3);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4iv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int*, void> _glProgramUniform4iv_fnptr = &glProgramUniform4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4iv_Lazy(int program, int location, int count, int* value)
        {
            _glProgramUniform4iv_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4iv");
            _glProgramUniform4iv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4ivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int*, void> _glProgramUniform4ivEXT_fnptr = &glProgramUniform4ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4ivEXT_Lazy(int program, int location, int count, int* value)
        {
            _glProgramUniform4ivEXT_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4ivEXT");
            _glProgramUniform4ivEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4ui</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, uint, uint, uint, void> _glProgramUniform4ui_fnptr = &glProgramUniform4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4ui_Lazy(int program, int location, uint v0, uint v1, uint v2, uint v3)
        {
            _glProgramUniform4ui_fnptr = (delegate* unmanaged<int, int, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4ui");
            _glProgramUniform4ui_fnptr(program, location, v0, v1, v2, v3);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4ui64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong, ulong, ulong, ulong, void> _glProgramUniform4ui64ARB_fnptr = &glProgramUniform4ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4ui64ARB_Lazy(int program, int location, ulong x, ulong y, ulong z, ulong w)
        {
            _glProgramUniform4ui64ARB_fnptr = (delegate* unmanaged<int, int, ulong, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4ui64ARB");
            _glProgramUniform4ui64ARB_fnptr(program, location, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4ui64NV</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong, ulong, ulong, ulong, void> _glProgramUniform4ui64NV_fnptr = &glProgramUniform4ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4ui64NV_Lazy(int program, int location, ulong x, ulong y, ulong z, ulong w)
        {
            _glProgramUniform4ui64NV_fnptr = (delegate* unmanaged<int, int, ulong, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4ui64NV");
            _glProgramUniform4ui64NV_fnptr(program, location, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4ui64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, ulong*, void> _glProgramUniform4ui64vARB_fnptr = &glProgramUniform4ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4ui64vARB_Lazy(int program, int location, int count, ulong* value)
        {
            _glProgramUniform4ui64vARB_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4ui64vARB");
            _glProgramUniform4ui64vARB_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4ui64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, ulong*, void> _glProgramUniform4ui64vNV_fnptr = &glProgramUniform4ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4ui64vNV_Lazy(int program, int location, int count, ulong* value)
        {
            _glProgramUniform4ui64vNV_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4ui64vNV");
            _glProgramUniform4ui64vNV_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4uiEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, uint, uint, uint, void> _glProgramUniform4uiEXT_fnptr = &glProgramUniform4uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4uiEXT_Lazy(int program, int location, uint v0, uint v1, uint v2, uint v3)
        {
            _glProgramUniform4uiEXT_fnptr = (delegate* unmanaged<int, int, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4uiEXT");
            _glProgramUniform4uiEXT_fnptr(program, location, v0, v1, v2, v3);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4uiv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint*, void> _glProgramUniform4uiv_fnptr = &glProgramUniform4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4uiv_Lazy(int program, int location, int count, uint* value)
        {
            _glProgramUniform4uiv_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4uiv");
            _glProgramUniform4uiv_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniform4uivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint*, void> _glProgramUniform4uivEXT_fnptr = &glProgramUniform4uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniform4uivEXT_Lazy(int program, int location, int count, uint* value)
        {
            _glProgramUniform4uivEXT_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4uivEXT");
            _glProgramUniform4uivEXT_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformHandleui64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong, void> _glProgramUniformHandleui64ARB_fnptr = &glProgramUniformHandleui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformHandleui64ARB_Lazy(int program, int location, ulong value)
        {
            _glProgramUniformHandleui64ARB_fnptr = (delegate* unmanaged<int, int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformHandleui64ARB");
            _glProgramUniformHandleui64ARB_fnptr(program, location, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformHandleui64IMG</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong, void> _glProgramUniformHandleui64IMG_fnptr = &glProgramUniformHandleui64IMG_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformHandleui64IMG_Lazy(int program, int location, ulong value)
        {
            _glProgramUniformHandleui64IMG_fnptr = (delegate* unmanaged<int, int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformHandleui64IMG");
            _glProgramUniformHandleui64IMG_fnptr(program, location, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformHandleui64NV</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong, void> _glProgramUniformHandleui64NV_fnptr = &glProgramUniformHandleui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformHandleui64NV_Lazy(int program, int location, ulong value)
        {
            _glProgramUniformHandleui64NV_fnptr = (delegate* unmanaged<int, int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformHandleui64NV");
            _glProgramUniformHandleui64NV_fnptr(program, location, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformHandleui64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, ulong*, void> _glProgramUniformHandleui64vARB_fnptr = &glProgramUniformHandleui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformHandleui64vARB_Lazy(int program, int location, int count, ulong* values)
        {
            _glProgramUniformHandleui64vARB_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformHandleui64vARB");
            _glProgramUniformHandleui64vARB_fnptr(program, location, count, values);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformHandleui64vIMG</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, ulong*, void> _glProgramUniformHandleui64vIMG_fnptr = &glProgramUniformHandleui64vIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformHandleui64vIMG_Lazy(int program, int location, int count, ulong* values)
        {
            _glProgramUniformHandleui64vIMG_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformHandleui64vIMG");
            _glProgramUniformHandleui64vIMG_fnptr(program, location, count, values);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformHandleui64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, ulong*, void> _glProgramUniformHandleui64vNV_fnptr = &glProgramUniformHandleui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformHandleui64vNV_Lazy(int program, int location, int count, ulong* values)
        {
            _glProgramUniformHandleui64vNV_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformHandleui64vNV");
            _glProgramUniformHandleui64vNV_fnptr(program, location, count, values);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix2dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix2dv_fnptr = &glProgramUniformMatrix2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix2dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix2dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2dv");
            _glProgramUniformMatrix2dv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix2dvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix2dvEXT_fnptr = &glProgramUniformMatrix2dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix2dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix2dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2dvEXT");
            _glProgramUniformMatrix2dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix2fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix2fv_fnptr = &glProgramUniformMatrix2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix2fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix2fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2fv");
            _glProgramUniformMatrix2fv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix2fvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix2fvEXT_fnptr = &glProgramUniformMatrix2fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix2fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix2fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2fvEXT");
            _glProgramUniformMatrix2fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix2x3dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix2x3dv_fnptr = &glProgramUniformMatrix2x3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix2x3dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix2x3dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x3dv");
            _glProgramUniformMatrix2x3dv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix2x3dvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix2x3dvEXT_fnptr = &glProgramUniformMatrix2x3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix2x3dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix2x3dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x3dvEXT");
            _glProgramUniformMatrix2x3dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix2x3fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix2x3fv_fnptr = &glProgramUniformMatrix2x3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix2x3fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix2x3fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x3fv");
            _glProgramUniformMatrix2x3fv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix2x3fvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix2x3fvEXT_fnptr = &glProgramUniformMatrix2x3fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix2x3fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix2x3fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x3fvEXT");
            _glProgramUniformMatrix2x3fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix2x4dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix2x4dv_fnptr = &glProgramUniformMatrix2x4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix2x4dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix2x4dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x4dv");
            _glProgramUniformMatrix2x4dv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix2x4dvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix2x4dvEXT_fnptr = &glProgramUniformMatrix2x4dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix2x4dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix2x4dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x4dvEXT");
            _glProgramUniformMatrix2x4dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix2x4fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix2x4fv_fnptr = &glProgramUniformMatrix2x4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix2x4fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix2x4fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x4fv");
            _glProgramUniformMatrix2x4fv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix2x4fvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix2x4fvEXT_fnptr = &glProgramUniformMatrix2x4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix2x4fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix2x4fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x4fvEXT");
            _glProgramUniformMatrix2x4fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix3dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix3dv_fnptr = &glProgramUniformMatrix3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix3dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix3dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3dv");
            _glProgramUniformMatrix3dv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix3dvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix3dvEXT_fnptr = &glProgramUniformMatrix3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix3dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix3dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3dvEXT");
            _glProgramUniformMatrix3dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix3fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix3fv_fnptr = &glProgramUniformMatrix3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix3fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix3fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3fv");
            _glProgramUniformMatrix3fv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix3fvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix3fvEXT_fnptr = &glProgramUniformMatrix3fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix3fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix3fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3fvEXT");
            _glProgramUniformMatrix3fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix3x2dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix3x2dv_fnptr = &glProgramUniformMatrix3x2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix3x2dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix3x2dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x2dv");
            _glProgramUniformMatrix3x2dv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix3x2dvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix3x2dvEXT_fnptr = &glProgramUniformMatrix3x2dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix3x2dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix3x2dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x2dvEXT");
            _glProgramUniformMatrix3x2dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix3x2fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix3x2fv_fnptr = &glProgramUniformMatrix3x2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix3x2fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix3x2fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x2fv");
            _glProgramUniformMatrix3x2fv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix3x2fvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix3x2fvEXT_fnptr = &glProgramUniformMatrix3x2fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix3x2fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix3x2fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x2fvEXT");
            _glProgramUniformMatrix3x2fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix3x4dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix3x4dv_fnptr = &glProgramUniformMatrix3x4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix3x4dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix3x4dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x4dv");
            _glProgramUniformMatrix3x4dv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix3x4dvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix3x4dvEXT_fnptr = &glProgramUniformMatrix3x4dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix3x4dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix3x4dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x4dvEXT");
            _glProgramUniformMatrix3x4dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix3x4fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix3x4fv_fnptr = &glProgramUniformMatrix3x4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix3x4fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix3x4fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x4fv");
            _glProgramUniformMatrix3x4fv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix3x4fvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix3x4fvEXT_fnptr = &glProgramUniformMatrix3x4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix3x4fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix3x4fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x4fvEXT");
            _glProgramUniformMatrix3x4fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix4dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix4dv_fnptr = &glProgramUniformMatrix4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix4dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix4dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4dv");
            _glProgramUniformMatrix4dv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix4dvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix4dvEXT_fnptr = &glProgramUniformMatrix4dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix4dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix4dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4dvEXT");
            _glProgramUniformMatrix4dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix4fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix4fv_fnptr = &glProgramUniformMatrix4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix4fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix4fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4fv");
            _glProgramUniformMatrix4fv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix4fvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix4fvEXT_fnptr = &glProgramUniformMatrix4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix4fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix4fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4fvEXT");
            _glProgramUniformMatrix4fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix4x2dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix4x2dv_fnptr = &glProgramUniformMatrix4x2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix4x2dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix4x2dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x2dv");
            _glProgramUniformMatrix4x2dv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix4x2dvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix4x2dvEXT_fnptr = &glProgramUniformMatrix4x2dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix4x2dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix4x2dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x2dvEXT");
            _glProgramUniformMatrix4x2dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix4x2fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix4x2fv_fnptr = &glProgramUniformMatrix4x2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix4x2fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix4x2fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x2fv");
            _glProgramUniformMatrix4x2fv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix4x2fvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix4x2fvEXT_fnptr = &glProgramUniformMatrix4x2fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix4x2fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix4x2fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x2fvEXT");
            _glProgramUniformMatrix4x2fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix4x3dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix4x3dv_fnptr = &glProgramUniformMatrix4x3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix4x3dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix4x3dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x3dv");
            _glProgramUniformMatrix4x3dv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix4x3dvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, double*, void> _glProgramUniformMatrix4x3dvEXT_fnptr = &glProgramUniformMatrix4x3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix4x3dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _glProgramUniformMatrix4x3dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x3dvEXT");
            _glProgramUniformMatrix4x3dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix4x3fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix4x3fv_fnptr = &glProgramUniformMatrix4x3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix4x3fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix4x3fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x3fv");
            _glProgramUniformMatrix4x3fv_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformMatrix4x3fvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, byte, float*, void> _glProgramUniformMatrix4x3fvEXT_fnptr = &glProgramUniformMatrix4x3fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformMatrix4x3fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _glProgramUniformMatrix4x3fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x3fvEXT");
            _glProgramUniformMatrix4x3fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformui64NV</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong, void> _glProgramUniformui64NV_fnptr = &glProgramUniformui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformui64NV_Lazy(int program, int location, ulong value)
        {
            _glProgramUniformui64NV_fnptr = (delegate* unmanaged<int, int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformui64NV");
            _glProgramUniformui64NV_fnptr(program, location, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramUniformui64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, ulong*, void> _glProgramUniformui64vNV_fnptr = &glProgramUniformui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramUniformui64vNV_Lazy(int program, int location, int count, ulong* value)
        {
            _glProgramUniformui64vNV_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformui64vNV");
            _glProgramUniformui64vNV_fnptr(program, location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glProgramVertexLimitNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glProgramVertexLimitNV_fnptr = &glProgramVertexLimitNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glProgramVertexLimitNV_Lazy(uint target, int limit)
        {
            _glProgramVertexLimitNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramVertexLimitNV");
            _glProgramVertexLimitNV_fnptr(target, limit);
        }
        
        /// <summary><b>[entry point: <c>glProvokingVertex</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glProvokingVertex_fnptr = &glProvokingVertex_Lazy;
        [UnmanagedCallersOnly]
        private static void glProvokingVertex_Lazy(uint mode)
        {
            _glProvokingVertex_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glProvokingVertex");
            _glProvokingVertex_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glProvokingVertexEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glProvokingVertexEXT_fnptr = &glProvokingVertexEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glProvokingVertexEXT_Lazy(uint mode)
        {
            _glProvokingVertexEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glProvokingVertexEXT");
            _glProvokingVertexEXT_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glPushAttrib</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glPushAttrib_fnptr = &glPushAttrib_Lazy;
        [UnmanagedCallersOnly]
        private static void glPushAttrib_Lazy(uint mask)
        {
            _glPushAttrib_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPushAttrib");
            _glPushAttrib_fnptr(mask);
        }
        
        /// <summary><b>[entry point: <c>glPushClientAttrib</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glPushClientAttrib_fnptr = &glPushClientAttrib_Lazy;
        [UnmanagedCallersOnly]
        private static void glPushClientAttrib_Lazy(uint mask)
        {
            _glPushClientAttrib_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPushClientAttrib");
            _glPushClientAttrib_fnptr(mask);
        }
        
        /// <summary><b>[entry point: <c>glPushClientAttribDefaultEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glPushClientAttribDefaultEXT_fnptr = &glPushClientAttribDefaultEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glPushClientAttribDefaultEXT_Lazy(uint mask)
        {
            _glPushClientAttribDefaultEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPushClientAttribDefaultEXT");
            _glPushClientAttribDefaultEXT_fnptr(mask);
        }
        
        /// <summary><b>[entry point: <c>glPushDebugGroup</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, byte*, void> _glPushDebugGroup_fnptr = &glPushDebugGroup_Lazy;
        [UnmanagedCallersOnly]
        private static void glPushDebugGroup_Lazy(uint source, uint id, int length, byte* message)
        {
            _glPushDebugGroup_fnptr = (delegate* unmanaged<uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glPushDebugGroup");
            _glPushDebugGroup_fnptr(source, id, length, message);
        }
        
        /// <summary><b>[entry point: <c>glPushDebugGroupKHR</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, byte*, void> _glPushDebugGroupKHR_fnptr = &glPushDebugGroupKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glPushDebugGroupKHR_Lazy(uint source, uint id, int length, byte* message)
        {
            _glPushDebugGroupKHR_fnptr = (delegate* unmanaged<uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glPushDebugGroupKHR");
            _glPushDebugGroupKHR_fnptr(source, id, length, message);
        }
        
        /// <summary><b>[entry point: <c>glPushGroupMarkerEXT</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, void> _glPushGroupMarkerEXT_fnptr = &glPushGroupMarkerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glPushGroupMarkerEXT_Lazy(int length, byte* marker)
        {
            _glPushGroupMarkerEXT_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glPushGroupMarkerEXT");
            _glPushGroupMarkerEXT_fnptr(length, marker);
        }
        
        /// <summary><b>[entry point: <c>glPushMatrix</c>]</b></summary>
        public static delegate* unmanaged<void> _glPushMatrix_fnptr = &glPushMatrix_Lazy;
        [UnmanagedCallersOnly]
        private static void glPushMatrix_Lazy()
        {
            _glPushMatrix_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPushMatrix");
            _glPushMatrix_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glPushName</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glPushName_fnptr = &glPushName_Lazy;
        [UnmanagedCallersOnly]
        private static void glPushName_Lazy(uint name)
        {
            _glPushName_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPushName");
            _glPushName_fnptr(name);
        }
        
        /// <summary><b>[entry point: <c>glQueryCounter</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glQueryCounter_fnptr = &glQueryCounter_Lazy;
        [UnmanagedCallersOnly]
        private static void glQueryCounter_Lazy(int id, uint target)
        {
            _glQueryCounter_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glQueryCounter");
            _glQueryCounter_fnptr(id, target);
        }
        
        /// <summary><b>[entry point: <c>glQueryCounterEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glQueryCounterEXT_fnptr = &glQueryCounterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glQueryCounterEXT_Lazy(int id, uint target)
        {
            _glQueryCounterEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glQueryCounterEXT");
            _glQueryCounterEXT_fnptr(id, target);
        }
        
        /// <summary><b>[entry point: <c>glQueryMatrixxOES</c>]</b></summary>
        public static delegate* unmanaged<int*, int*, uint> _glQueryMatrixxOES_fnptr = &glQueryMatrixxOES_Lazy;
        [UnmanagedCallersOnly]
        private static uint glQueryMatrixxOES_Lazy(int* mantissa, int* exponent)
        {
            _glQueryMatrixxOES_fnptr = (delegate* unmanaged<int*, int*, uint>)GLLoader.BindingsContext.GetProcAddress("glQueryMatrixxOES");
            return _glQueryMatrixxOES_fnptr(mantissa, exponent);
        }
        
        /// <summary><b>[entry point: <c>glQueryObjectParameteruiAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, uint, void> _glQueryObjectParameteruiAMD_fnptr = &glQueryObjectParameteruiAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glQueryObjectParameteruiAMD_Lazy(uint target, int id, uint pname, uint param)
        {
            _glQueryObjectParameteruiAMD_fnptr = (delegate* unmanaged<uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glQueryObjectParameteruiAMD");
            _glQueryObjectParameteruiAMD_fnptr(target, id, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glQueryResourceNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int*, int> _glQueryResourceNV_fnptr = &glQueryResourceNV_Lazy;
        [UnmanagedCallersOnly]
        private static int glQueryResourceNV_Lazy(uint queryType, int tagId, uint count, int* buffer)
        {
            _glQueryResourceNV_fnptr = (delegate* unmanaged<uint, int, uint, int*, int>)GLLoader.BindingsContext.GetProcAddress("glQueryResourceNV");
            return _glQueryResourceNV_fnptr(queryType, tagId, count, buffer);
        }
        
        /// <summary><b>[entry point: <c>glQueryResourceTagNV</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, void> _glQueryResourceTagNV_fnptr = &glQueryResourceTagNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glQueryResourceTagNV_Lazy(int tagId, byte* tagString)
        {
            _glQueryResourceTagNV_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glQueryResourceTagNV");
            _glQueryResourceTagNV_fnptr(tagId, tagString);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos2d</c>]</b></summary>
        public static delegate* unmanaged<double, double, void> _glRasterPos2d_fnptr = &glRasterPos2d_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos2d_Lazy(double x, double y)
        {
            _glRasterPos2d_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2d");
            _glRasterPos2d_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos2dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glRasterPos2dv_fnptr = &glRasterPos2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos2dv_Lazy(double* v)
        {
            _glRasterPos2dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2dv");
            _glRasterPos2dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos2f</c>]</b></summary>
        public static delegate* unmanaged<float, float, void> _glRasterPos2f_fnptr = &glRasterPos2f_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos2f_Lazy(float x, float y)
        {
            _glRasterPos2f_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2f");
            _glRasterPos2f_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos2fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glRasterPos2fv_fnptr = &glRasterPos2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos2fv_Lazy(float* v)
        {
            _glRasterPos2fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2fv");
            _glRasterPos2fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos2i</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glRasterPos2i_fnptr = &glRasterPos2i_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos2i_Lazy(int x, int y)
        {
            _glRasterPos2i_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2i");
            _glRasterPos2i_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos2iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glRasterPos2iv_fnptr = &glRasterPos2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos2iv_Lazy(int* v)
        {
            _glRasterPos2iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2iv");
            _glRasterPos2iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos2s</c>]</b></summary>
        public static delegate* unmanaged<short, short, void> _glRasterPos2s_fnptr = &glRasterPos2s_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos2s_Lazy(short x, short y)
        {
            _glRasterPos2s_fnptr = (delegate* unmanaged<short, short, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2s");
            _glRasterPos2s_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos2sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glRasterPos2sv_fnptr = &glRasterPos2sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos2sv_Lazy(short* v)
        {
            _glRasterPos2sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2sv");
            _glRasterPos2sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos2xOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glRasterPos2xOES_fnptr = &glRasterPos2xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos2xOES_Lazy(int x, int y)
        {
            _glRasterPos2xOES_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2xOES");
            _glRasterPos2xOES_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos2xvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glRasterPos2xvOES_fnptr = &glRasterPos2xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos2xvOES_Lazy(int* coords)
        {
            _glRasterPos2xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2xvOES");
            _glRasterPos2xvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos3d</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, void> _glRasterPos3d_fnptr = &glRasterPos3d_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos3d_Lazy(double x, double y, double z)
        {
            _glRasterPos3d_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3d");
            _glRasterPos3d_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos3dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glRasterPos3dv_fnptr = &glRasterPos3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos3dv_Lazy(double* v)
        {
            _glRasterPos3dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3dv");
            _glRasterPos3dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos3f</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glRasterPos3f_fnptr = &glRasterPos3f_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos3f_Lazy(float x, float y, float z)
        {
            _glRasterPos3f_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3f");
            _glRasterPos3f_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos3fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glRasterPos3fv_fnptr = &glRasterPos3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos3fv_Lazy(float* v)
        {
            _glRasterPos3fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3fv");
            _glRasterPos3fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos3i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glRasterPos3i_fnptr = &glRasterPos3i_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos3i_Lazy(int x, int y, int z)
        {
            _glRasterPos3i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3i");
            _glRasterPos3i_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos3iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glRasterPos3iv_fnptr = &glRasterPos3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos3iv_Lazy(int* v)
        {
            _glRasterPos3iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3iv");
            _glRasterPos3iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos3s</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, void> _glRasterPos3s_fnptr = &glRasterPos3s_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos3s_Lazy(short x, short y, short z)
        {
            _glRasterPos3s_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3s");
            _glRasterPos3s_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos3sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glRasterPos3sv_fnptr = &glRasterPos3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos3sv_Lazy(short* v)
        {
            _glRasterPos3sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3sv");
            _glRasterPos3sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos3xOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glRasterPos3xOES_fnptr = &glRasterPos3xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos3xOES_Lazy(int x, int y, int z)
        {
            _glRasterPos3xOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3xOES");
            _glRasterPos3xOES_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos3xvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glRasterPos3xvOES_fnptr = &glRasterPos3xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos3xvOES_Lazy(int* coords)
        {
            _glRasterPos3xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3xvOES");
            _glRasterPos3xvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos4d</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, double, void> _glRasterPos4d_fnptr = &glRasterPos4d_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos4d_Lazy(double x, double y, double z, double w)
        {
            _glRasterPos4d_fnptr = (delegate* unmanaged<double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4d");
            _glRasterPos4d_fnptr(x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos4dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glRasterPos4dv_fnptr = &glRasterPos4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos4dv_Lazy(double* v)
        {
            _glRasterPos4dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4dv");
            _glRasterPos4dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos4f</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, void> _glRasterPos4f_fnptr = &glRasterPos4f_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos4f_Lazy(float x, float y, float z, float w)
        {
            _glRasterPos4f_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4f");
            _glRasterPos4f_fnptr(x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos4fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glRasterPos4fv_fnptr = &glRasterPos4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos4fv_Lazy(float* v)
        {
            _glRasterPos4fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4fv");
            _glRasterPos4fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos4i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glRasterPos4i_fnptr = &glRasterPos4i_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos4i_Lazy(int x, int y, int z, int w)
        {
            _glRasterPos4i_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4i");
            _glRasterPos4i_fnptr(x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos4iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glRasterPos4iv_fnptr = &glRasterPos4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos4iv_Lazy(int* v)
        {
            _glRasterPos4iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4iv");
            _glRasterPos4iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos4s</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, short, void> _glRasterPos4s_fnptr = &glRasterPos4s_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos4s_Lazy(short x, short y, short z, short w)
        {
            _glRasterPos4s_fnptr = (delegate* unmanaged<short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4s");
            _glRasterPos4s_fnptr(x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos4sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glRasterPos4sv_fnptr = &glRasterPos4sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos4sv_Lazy(short* v)
        {
            _glRasterPos4sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4sv");
            _glRasterPos4sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos4xOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glRasterPos4xOES_fnptr = &glRasterPos4xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos4xOES_Lazy(int x, int y, int z, int w)
        {
            _glRasterPos4xOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4xOES");
            _glRasterPos4xOES_fnptr(x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glRasterPos4xvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glRasterPos4xvOES_fnptr = &glRasterPos4xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterPos4xvOES_Lazy(int* coords)
        {
            _glRasterPos4xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4xvOES");
            _glRasterPos4xvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glRasterSamplesEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, void> _glRasterSamplesEXT_fnptr = &glRasterSamplesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glRasterSamplesEXT_Lazy(uint samples, byte fixedsamplelocations)
        {
            _glRasterSamplesEXT_fnptr = (delegate* unmanaged<uint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glRasterSamplesEXT");
            _glRasterSamplesEXT_fnptr(samples, fixedsamplelocations);
        }
        
        /// <summary><b>[entry point: <c>glReadBuffer</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glReadBuffer_fnptr = &glReadBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glReadBuffer_Lazy(uint src)
        {
            _glReadBuffer_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glReadBuffer");
            _glReadBuffer_fnptr(src);
        }
        
        /// <summary><b>[entry point: <c>glReadBufferIndexedEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glReadBufferIndexedEXT_fnptr = &glReadBufferIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glReadBufferIndexedEXT_Lazy(uint src, int index)
        {
            _glReadBufferIndexedEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glReadBufferIndexedEXT");
            _glReadBufferIndexedEXT_fnptr(src, index);
        }
        
        /// <summary><b>[entry point: <c>glReadBufferNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glReadBufferNV_fnptr = &glReadBufferNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glReadBufferNV_Lazy(uint mode)
        {
            _glReadBufferNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glReadBufferNV");
            _glReadBufferNV_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glReadInstrumentsSGIX</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glReadInstrumentsSGIX_fnptr = &glReadInstrumentsSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glReadInstrumentsSGIX_Lazy(int marker)
        {
            _glReadInstrumentsSGIX_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glReadInstrumentsSGIX");
            _glReadInstrumentsSGIX_fnptr(marker);
        }
        
        /// <summary><b>[entry point: <c>glReadnPixels</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void> _glReadnPixels_fnptr = &glReadnPixels_Lazy;
        [UnmanagedCallersOnly]
        private static void glReadnPixels_Lazy(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data)
        {
            _glReadnPixels_fnptr = (delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glReadnPixels");
            _glReadnPixels_fnptr(x, y, width, height, format, type, bufSize, data);
        }
        
        /// <summary><b>[entry point: <c>glReadnPixelsARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void> _glReadnPixelsARB_fnptr = &glReadnPixelsARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glReadnPixelsARB_Lazy(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data)
        {
            _glReadnPixelsARB_fnptr = (delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glReadnPixelsARB");
            _glReadnPixelsARB_fnptr(x, y, width, height, format, type, bufSize, data);
        }
        
        /// <summary><b>[entry point: <c>glReadnPixelsEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void> _glReadnPixelsEXT_fnptr = &glReadnPixelsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glReadnPixelsEXT_Lazy(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data)
        {
            _glReadnPixelsEXT_fnptr = (delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glReadnPixelsEXT");
            _glReadnPixelsEXT_fnptr(x, y, width, height, format, type, bufSize, data);
        }
        
        /// <summary><b>[entry point: <c>glReadnPixelsKHR</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void> _glReadnPixelsKHR_fnptr = &glReadnPixelsKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void glReadnPixelsKHR_Lazy(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data)
        {
            _glReadnPixelsKHR_fnptr = (delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glReadnPixelsKHR");
            _glReadnPixelsKHR_fnptr(x, y, width, height, format, type, bufSize, data);
        }
        
        /// <summary><b>[entry point: <c>glReadPixels</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, uint, uint, void*, void> _glReadPixels_fnptr = &glReadPixels_Lazy;
        [UnmanagedCallersOnly]
        private static void glReadPixels_Lazy(int x, int y, int width, int height, uint format, uint type, void* pixels)
        {
            _glReadPixels_fnptr = (delegate* unmanaged<int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glReadPixels");
            _glReadPixels_fnptr(x, y, width, height, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glRectd</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, double, void> _glRectd_fnptr = &glRectd_Lazy;
        [UnmanagedCallersOnly]
        private static void glRectd_Lazy(double x1, double y1, double x2, double y2)
        {
            _glRectd_fnptr = (delegate* unmanaged<double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glRectd");
            _glRectd_fnptr(x1, y1, x2, y2);
        }
        
        /// <summary><b>[entry point: <c>glRectdv</c>]</b></summary>
        public static delegate* unmanaged<double*, double*, void> _glRectdv_fnptr = &glRectdv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRectdv_Lazy(double* v1, double* v2)
        {
            _glRectdv_fnptr = (delegate* unmanaged<double*, double*, void>)GLLoader.BindingsContext.GetProcAddress("glRectdv");
            _glRectdv_fnptr(v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glRectf</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, void> _glRectf_fnptr = &glRectf_Lazy;
        [UnmanagedCallersOnly]
        private static void glRectf_Lazy(float x1, float y1, float x2, float y2)
        {
            _glRectf_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glRectf");
            _glRectf_fnptr(x1, y1, x2, y2);
        }
        
        /// <summary><b>[entry point: <c>glRectfv</c>]</b></summary>
        public static delegate* unmanaged<float*, float*, void> _glRectfv_fnptr = &glRectfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRectfv_Lazy(float* v1, float* v2)
        {
            _glRectfv_fnptr = (delegate* unmanaged<float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glRectfv");
            _glRectfv_fnptr(v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glRecti</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glRecti_fnptr = &glRecti_Lazy;
        [UnmanagedCallersOnly]
        private static void glRecti_Lazy(int x1, int y1, int x2, int y2)
        {
            _glRecti_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRecti");
            _glRecti_fnptr(x1, y1, x2, y2);
        }
        
        /// <summary><b>[entry point: <c>glRectiv</c>]</b></summary>
        public static delegate* unmanaged<int*, int*, void> _glRectiv_fnptr = &glRectiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRectiv_Lazy(int* v1, int* v2)
        {
            _glRectiv_fnptr = (delegate* unmanaged<int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glRectiv");
            _glRectiv_fnptr(v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glRects</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, short, void> _glRects_fnptr = &glRects_Lazy;
        [UnmanagedCallersOnly]
        private static void glRects_Lazy(short x1, short y1, short x2, short y2)
        {
            _glRects_fnptr = (delegate* unmanaged<short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glRects");
            _glRects_fnptr(x1, y1, x2, y2);
        }
        
        /// <summary><b>[entry point: <c>glRectsv</c>]</b></summary>
        public static delegate* unmanaged<short*, short*, void> _glRectsv_fnptr = &glRectsv_Lazy;
        [UnmanagedCallersOnly]
        private static void glRectsv_Lazy(short* v1, short* v2)
        {
            _glRectsv_fnptr = (delegate* unmanaged<short*, short*, void>)GLLoader.BindingsContext.GetProcAddress("glRectsv");
            _glRectsv_fnptr(v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glRectxOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glRectxOES_fnptr = &glRectxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glRectxOES_Lazy(int x1, int y1, int x2, int y2)
        {
            _glRectxOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRectxOES");
            _glRectxOES_fnptr(x1, y1, x2, y2);
        }
        
        /// <summary><b>[entry point: <c>glRectxvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, int*, void> _glRectxvOES_fnptr = &glRectxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glRectxvOES_Lazy(int* v1, int* v2)
        {
            _glRectxvOES_fnptr = (delegate* unmanaged<int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glRectxvOES");
            _glRectxvOES_fnptr(v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glReferencePlaneSGIX</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glReferencePlaneSGIX_fnptr = &glReferencePlaneSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glReferencePlaneSGIX_Lazy(double* equation)
        {
            _glReferencePlaneSGIX_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glReferencePlaneSGIX");
            _glReferencePlaneSGIX_fnptr(equation);
        }
        
        /// <summary><b>[entry point: <c>glReleaseKeyedMutexWin32EXT</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong, byte> _glReleaseKeyedMutexWin32EXT_fnptr = &glReleaseKeyedMutexWin32EXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte glReleaseKeyedMutexWin32EXT_Lazy(uint memory, ulong key)
        {
            _glReleaseKeyedMutexWin32EXT_fnptr = (delegate* unmanaged<uint, ulong, byte>)GLLoader.BindingsContext.GetProcAddress("glReleaseKeyedMutexWin32EXT");
            return _glReleaseKeyedMutexWin32EXT_fnptr(memory, key);
        }
        
        /// <summary><b>[entry point: <c>glReleaseShaderCompiler</c>]</b></summary>
        public static delegate* unmanaged<void> _glReleaseShaderCompiler_fnptr = &glReleaseShaderCompiler_Lazy;
        [UnmanagedCallersOnly]
        private static void glReleaseShaderCompiler_Lazy()
        {
            _glReleaseShaderCompiler_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glReleaseShaderCompiler");
            _glReleaseShaderCompiler_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glRenderbufferStorage</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, void> _glRenderbufferStorage_fnptr = &glRenderbufferStorage_Lazy;
        [UnmanagedCallersOnly]
        private static void glRenderbufferStorage_Lazy(uint target, uint internalformat, int width, int height)
        {
            _glRenderbufferStorage_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorage");
            _glRenderbufferStorage_fnptr(target, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glRenderbufferStorageEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, void> _glRenderbufferStorageEXT_fnptr = &glRenderbufferStorageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glRenderbufferStorageEXT_Lazy(uint target, uint internalformat, int width, int height)
        {
            _glRenderbufferStorageEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageEXT");
            _glRenderbufferStorageEXT_fnptr(target, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glRenderbufferStorageMultisample</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, void> _glRenderbufferStorageMultisample_fnptr = &glRenderbufferStorageMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void glRenderbufferStorageMultisample_Lazy(uint target, int samples, uint internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisample_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisample");
            _glRenderbufferStorageMultisample_fnptr(target, samples, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glRenderbufferStorageMultisampleAdvancedAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, uint, int, int, void> _glRenderbufferStorageMultisampleAdvancedAMD_fnptr = &glRenderbufferStorageMultisampleAdvancedAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glRenderbufferStorageMultisampleAdvancedAMD_Lazy(uint target, int samples, int storageSamples, uint internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisampleAdvancedAMD_fnptr = (delegate* unmanaged<uint, int, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisampleAdvancedAMD");
            _glRenderbufferStorageMultisampleAdvancedAMD_fnptr(target, samples, storageSamples, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glRenderbufferStorageMultisampleANGLE</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, void> _glRenderbufferStorageMultisampleANGLE_fnptr = &glRenderbufferStorageMultisampleANGLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glRenderbufferStorageMultisampleANGLE_Lazy(uint target, int samples, uint internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisampleANGLE_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisampleANGLE");
            _glRenderbufferStorageMultisampleANGLE_fnptr(target, samples, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glRenderbufferStorageMultisampleAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, void> _glRenderbufferStorageMultisampleAPPLE_fnptr = &glRenderbufferStorageMultisampleAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glRenderbufferStorageMultisampleAPPLE_Lazy(uint target, int samples, uint internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisampleAPPLE_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisampleAPPLE");
            _glRenderbufferStorageMultisampleAPPLE_fnptr(target, samples, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glRenderbufferStorageMultisampleCoverageNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, uint, int, int, void> _glRenderbufferStorageMultisampleCoverageNV_fnptr = &glRenderbufferStorageMultisampleCoverageNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glRenderbufferStorageMultisampleCoverageNV_Lazy(uint target, int coverageSamples, int colorSamples, uint internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisampleCoverageNV_fnptr = (delegate* unmanaged<uint, int, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisampleCoverageNV");
            _glRenderbufferStorageMultisampleCoverageNV_fnptr(target, coverageSamples, colorSamples, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glRenderbufferStorageMultisampleEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, void> _glRenderbufferStorageMultisampleEXT_fnptr = &glRenderbufferStorageMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glRenderbufferStorageMultisampleEXT_Lazy(uint target, int samples, uint internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisampleEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisampleEXT");
            _glRenderbufferStorageMultisampleEXT_fnptr(target, samples, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glRenderbufferStorageMultisampleIMG</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, void> _glRenderbufferStorageMultisampleIMG_fnptr = &glRenderbufferStorageMultisampleIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void glRenderbufferStorageMultisampleIMG_Lazy(uint target, int samples, uint internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisampleIMG_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisampleIMG");
            _glRenderbufferStorageMultisampleIMG_fnptr(target, samples, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glRenderbufferStorageMultisampleNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, void> _glRenderbufferStorageMultisampleNV_fnptr = &glRenderbufferStorageMultisampleNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glRenderbufferStorageMultisampleNV_Lazy(uint target, int samples, uint internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisampleNV_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisampleNV");
            _glRenderbufferStorageMultisampleNV_fnptr(target, samples, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glRenderbufferStorageOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, void> _glRenderbufferStorageOES_fnptr = &glRenderbufferStorageOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glRenderbufferStorageOES_Lazy(uint target, uint internalformat, int width, int height)
        {
            _glRenderbufferStorageOES_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageOES");
            _glRenderbufferStorageOES_fnptr(target, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glRenderGpuMaskNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glRenderGpuMaskNV_fnptr = &glRenderGpuMaskNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glRenderGpuMaskNV_Lazy(uint mask)
        {
            _glRenderGpuMaskNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glRenderGpuMaskNV");
            _glRenderGpuMaskNV_fnptr(mask);
        }
        
        /// <summary><b>[entry point: <c>glRenderMode</c>]</b></summary>
        public static delegate* unmanaged<uint, int> _glRenderMode_fnptr = &glRenderMode_Lazy;
        [UnmanagedCallersOnly]
        private static int glRenderMode_Lazy(uint mode)
        {
            _glRenderMode_fnptr = (delegate* unmanaged<uint, int>)GLLoader.BindingsContext.GetProcAddress("glRenderMode");
            return _glRenderMode_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodePointerSUN</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void**, void> _glReplacementCodePointerSUN_fnptr = &glReplacementCodePointerSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodePointerSUN_Lazy(uint type, int stride, void** pointer)
        {
            _glReplacementCodePointerSUN_fnptr = (delegate* unmanaged<uint, int, void**, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodePointerSUN");
            _glReplacementCodePointerSUN_fnptr(type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeubSUN</c>]</b></summary>
        public static delegate* unmanaged<byte, void> _glReplacementCodeubSUN_fnptr = &glReplacementCodeubSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeubSUN_Lazy(byte code)
        {
            _glReplacementCodeubSUN_fnptr = (delegate* unmanaged<byte, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeubSUN");
            _glReplacementCodeubSUN_fnptr(code);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeubvSUN</c>]</b></summary>
        public static delegate* unmanaged<byte*, void> _glReplacementCodeubvSUN_fnptr = &glReplacementCodeubvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeubvSUN_Lazy(byte* code)
        {
            _glReplacementCodeubvSUN_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeubvSUN");
            _glReplacementCodeubvSUN_fnptr(code);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiColor3fVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, float, float, void> _glReplacementCodeuiColor3fVertex3fSUN_fnptr = &glReplacementCodeuiColor3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiColor3fVertex3fSUN_Lazy(uint rc, float r, float g, float b, float x, float y, float z)
        {
            _glReplacementCodeuiColor3fVertex3fSUN_fnptr = (delegate* unmanaged<uint, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiColor3fVertex3fSUN");
            _glReplacementCodeuiColor3fVertex3fSUN_fnptr(rc, r, g, b, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiColor3fVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<uint*, float*, float*, void> _glReplacementCodeuiColor3fVertex3fvSUN_fnptr = &glReplacementCodeuiColor3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiColor3fVertex3fvSUN_Lazy(uint* rc, float* c, float* v)
        {
            _glReplacementCodeuiColor3fVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiColor3fVertex3fvSUN");
            _glReplacementCodeuiColor3fVertex3fvSUN_fnptr(rc, c, v);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiColor4fNormal3fVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, float, float, float, float, float, float, void> _glReplacementCodeuiColor4fNormal3fVertex3fSUN_fnptr = &glReplacementCodeuiColor4fNormal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiColor4fNormal3fVertex3fSUN_Lazy(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            _glReplacementCodeuiColor4fNormal3fVertex3fSUN_fnptr = (delegate* unmanaged<uint, float, float, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
            _glReplacementCodeuiColor4fNormal3fVertex3fSUN_fnptr(rc, r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiColor4fNormal3fVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<uint*, float*, float*, float*, void> _glReplacementCodeuiColor4fNormal3fVertex3fvSUN_fnptr = &glReplacementCodeuiColor4fNormal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN_Lazy(uint* rc, float* c, float* n, float* v)
        {
            _glReplacementCodeuiColor4fNormal3fVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
            _glReplacementCodeuiColor4fNormal3fVertex3fvSUN_fnptr(rc, c, n, v);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiColor4ubVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, byte, byte, byte, float, float, float, void> _glReplacementCodeuiColor4ubVertex3fSUN_fnptr = &glReplacementCodeuiColor4ubVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiColor4ubVertex3fSUN_Lazy(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z)
        {
            _glReplacementCodeuiColor4ubVertex3fSUN_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiColor4ubVertex3fSUN");
            _glReplacementCodeuiColor4ubVertex3fSUN_fnptr(rc, r, g, b, a, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiColor4ubVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<uint*, byte*, float*, void> _glReplacementCodeuiColor4ubVertex3fvSUN_fnptr = &glReplacementCodeuiColor4ubVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiColor4ubVertex3fvSUN_Lazy(uint* rc, byte* c, float* v)
        {
            _glReplacementCodeuiColor4ubVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, byte*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiColor4ubVertex3fvSUN");
            _glReplacementCodeuiColor4ubVertex3fvSUN_fnptr(rc, c, v);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiNormal3fVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, float, float, void> _glReplacementCodeuiNormal3fVertex3fSUN_fnptr = &glReplacementCodeuiNormal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiNormal3fVertex3fSUN_Lazy(uint rc, float nx, float ny, float nz, float x, float y, float z)
        {
            _glReplacementCodeuiNormal3fVertex3fSUN_fnptr = (delegate* unmanaged<uint, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiNormal3fVertex3fSUN");
            _glReplacementCodeuiNormal3fVertex3fSUN_fnptr(rc, nx, ny, nz, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiNormal3fVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<uint*, float*, float*, void> _glReplacementCodeuiNormal3fVertex3fvSUN_fnptr = &glReplacementCodeuiNormal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiNormal3fVertex3fvSUN_Lazy(uint* rc, float* n, float* v)
        {
            _glReplacementCodeuiNormal3fVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiNormal3fVertex3fvSUN");
            _glReplacementCodeuiNormal3fVertex3fvSUN_fnptr(rc, n, v);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiSUN</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glReplacementCodeuiSUN_fnptr = &glReplacementCodeuiSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiSUN_Lazy(uint code)
        {
            _glReplacementCodeuiSUN_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiSUN");
            _glReplacementCodeuiSUN_fnptr(code);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, float, float, float, float, float, float, float, float, void> _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_fnptr = &glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Lazy(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_fnptr = (delegate* unmanaged<uint, float, float, float, float, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
            _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_fnptr(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<uint*, float*, float*, float*, float*, void> _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_fnptr = &glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Lazy(uint* rc, float* tc, float* c, float* n, float* v)
        {
            _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, float*, float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
            _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_fnptr(rc, tc, c, n, v);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, float, float, float, float, void> _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_fnptr = &glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Lazy(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z)
        {
            _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_fnptr = (delegate* unmanaged<uint, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
            _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_fnptr(rc, s, t, nx, ny, nz, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<uint*, float*, float*, float*, void> _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_fnptr = &glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Lazy(uint* rc, float* tc, float* n, float* v)
        {
            _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
            _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_fnptr(rc, tc, n, v);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiTexCoord2fVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, float, void> _glReplacementCodeuiTexCoord2fVertex3fSUN_fnptr = &glReplacementCodeuiTexCoord2fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiTexCoord2fVertex3fSUN_Lazy(uint rc, float s, float t, float x, float y, float z)
        {
            _glReplacementCodeuiTexCoord2fVertex3fSUN_fnptr = (delegate* unmanaged<uint, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiTexCoord2fVertex3fSUN");
            _glReplacementCodeuiTexCoord2fVertex3fSUN_fnptr(rc, s, t, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiTexCoord2fVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<uint*, float*, float*, void> _glReplacementCodeuiTexCoord2fVertex3fvSUN_fnptr = &glReplacementCodeuiTexCoord2fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiTexCoord2fVertex3fvSUN_Lazy(uint* rc, float* tc, float* v)
        {
            _glReplacementCodeuiTexCoord2fVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiTexCoord2fVertex3fvSUN");
            _glReplacementCodeuiTexCoord2fVertex3fvSUN_fnptr(rc, tc, v);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, void> _glReplacementCodeuiVertex3fSUN_fnptr = &glReplacementCodeuiVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiVertex3fSUN_Lazy(uint rc, float x, float y, float z)
        {
            _glReplacementCodeuiVertex3fSUN_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiVertex3fSUN");
            _glReplacementCodeuiVertex3fSUN_fnptr(rc, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuiVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<uint*, float*, void> _glReplacementCodeuiVertex3fvSUN_fnptr = &glReplacementCodeuiVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuiVertex3fvSUN_Lazy(uint* rc, float* v)
        {
            _glReplacementCodeuiVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiVertex3fvSUN");
            _glReplacementCodeuiVertex3fvSUN_fnptr(rc, v);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeuivSUN</c>]</b></summary>
        public static delegate* unmanaged<uint*, void> _glReplacementCodeuivSUN_fnptr = &glReplacementCodeuivSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeuivSUN_Lazy(uint* code)
        {
            _glReplacementCodeuivSUN_fnptr = (delegate* unmanaged<uint*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuivSUN");
            _glReplacementCodeuivSUN_fnptr(code);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeusSUN</c>]</b></summary>
        public static delegate* unmanaged<ushort, void> _glReplacementCodeusSUN_fnptr = &glReplacementCodeusSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeusSUN_Lazy(ushort code)
        {
            _glReplacementCodeusSUN_fnptr = (delegate* unmanaged<ushort, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeusSUN");
            _glReplacementCodeusSUN_fnptr(code);
        }
        
        /// <summary><b>[entry point: <c>glReplacementCodeusvSUN</c>]</b></summary>
        public static delegate* unmanaged<ushort*, void> _glReplacementCodeusvSUN_fnptr = &glReplacementCodeusvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glReplacementCodeusvSUN_Lazy(ushort* code)
        {
            _glReplacementCodeusvSUN_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeusvSUN");
            _glReplacementCodeusvSUN_fnptr(code);
        }
        
        /// <summary><b>[entry point: <c>glRequestResidentProgramsNV</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glRequestResidentProgramsNV_fnptr = &glRequestResidentProgramsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glRequestResidentProgramsNV_Lazy(int n, int* programs)
        {
            _glRequestResidentProgramsNV_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glRequestResidentProgramsNV");
            _glRequestResidentProgramsNV_fnptr(n, programs);
        }
        
        /// <summary><b>[entry point: <c>glResetHistogram</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glResetHistogram_fnptr = &glResetHistogram_Lazy;
        [UnmanagedCallersOnly]
        private static void glResetHistogram_Lazy(uint target)
        {
            _glResetHistogram_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glResetHistogram");
            _glResetHistogram_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glResetHistogramEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glResetHistogramEXT_fnptr = &glResetHistogramEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glResetHistogramEXT_Lazy(uint target)
        {
            _glResetHistogramEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glResetHistogramEXT");
            _glResetHistogramEXT_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glResetMemoryObjectParameterNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glResetMemoryObjectParameterNV_fnptr = &glResetMemoryObjectParameterNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glResetMemoryObjectParameterNV_Lazy(uint memory, uint pname)
        {
            _glResetMemoryObjectParameterNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glResetMemoryObjectParameterNV");
            _glResetMemoryObjectParameterNV_fnptr(memory, pname);
        }
        
        /// <summary><b>[entry point: <c>glResetMinmax</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glResetMinmax_fnptr = &glResetMinmax_Lazy;
        [UnmanagedCallersOnly]
        private static void glResetMinmax_Lazy(uint target)
        {
            _glResetMinmax_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glResetMinmax");
            _glResetMinmax_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glResetMinmaxEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glResetMinmaxEXT_fnptr = &glResetMinmaxEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glResetMinmaxEXT_Lazy(uint target)
        {
            _glResetMinmaxEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glResetMinmaxEXT");
            _glResetMinmaxEXT_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glResizeBuffersMESA</c>]</b></summary>
        public static delegate* unmanaged<void> _glResizeBuffersMESA_fnptr = &glResizeBuffersMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glResizeBuffersMESA_Lazy()
        {
            _glResizeBuffersMESA_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glResizeBuffersMESA");
            _glResizeBuffersMESA_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glResolveDepthValuesNV</c>]</b></summary>
        public static delegate* unmanaged<void> _glResolveDepthValuesNV_fnptr = &glResolveDepthValuesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glResolveDepthValuesNV_Lazy()
        {
            _glResolveDepthValuesNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glResolveDepthValuesNV");
            _glResolveDepthValuesNV_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glResolveMultisampleFramebufferAPPLE</c>]</b></summary>
        public static delegate* unmanaged<void> _glResolveMultisampleFramebufferAPPLE_fnptr = &glResolveMultisampleFramebufferAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glResolveMultisampleFramebufferAPPLE_Lazy()
        {
            _glResolveMultisampleFramebufferAPPLE_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glResolveMultisampleFramebufferAPPLE");
            _glResolveMultisampleFramebufferAPPLE_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glResumeTransformFeedback</c>]</b></summary>
        public static delegate* unmanaged<void> _glResumeTransformFeedback_fnptr = &glResumeTransformFeedback_Lazy;
        [UnmanagedCallersOnly]
        private static void glResumeTransformFeedback_Lazy()
        {
            _glResumeTransformFeedback_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glResumeTransformFeedback");
            _glResumeTransformFeedback_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glResumeTransformFeedbackNV</c>]</b></summary>
        public static delegate* unmanaged<void> _glResumeTransformFeedbackNV_fnptr = &glResumeTransformFeedbackNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glResumeTransformFeedbackNV_Lazy()
        {
            _glResumeTransformFeedbackNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glResumeTransformFeedbackNV");
            _glResumeTransformFeedbackNV_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glRotated</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, double, void> _glRotated_fnptr = &glRotated_Lazy;
        [UnmanagedCallersOnly]
        private static void glRotated_Lazy(double angle, double x, double y, double z)
        {
            _glRotated_fnptr = (delegate* unmanaged<double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glRotated");
            _glRotated_fnptr(angle, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glRotatef</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, void> _glRotatef_fnptr = &glRotatef_Lazy;
        [UnmanagedCallersOnly]
        private static void glRotatef_Lazy(float angle, float x, float y, float z)
        {
            _glRotatef_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glRotatef");
            _glRotatef_fnptr(angle, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glRotatex</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glRotatex_fnptr = &glRotatex_Lazy;
        [UnmanagedCallersOnly]
        private static void glRotatex_Lazy(int angle, int x, int y, int z)
        {
            _glRotatex_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRotatex");
            _glRotatex_fnptr(angle, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glRotatexOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glRotatexOES_fnptr = &glRotatexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glRotatexOES_Lazy(int angle, int x, int y, int z)
        {
            _glRotatexOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRotatexOES");
            _glRotatexOES_fnptr(angle, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glSampleCoverage</c>]</b></summary>
        public static delegate* unmanaged<float, byte, void> _glSampleCoverage_fnptr = &glSampleCoverage_Lazy;
        [UnmanagedCallersOnly]
        private static void glSampleCoverage_Lazy(float value, byte invert)
        {
            _glSampleCoverage_fnptr = (delegate* unmanaged<float, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSampleCoverage");
            _glSampleCoverage_fnptr(value, invert);
        }
        
        /// <summary><b>[entry point: <c>glSampleCoverageARB</c>]</b></summary>
        public static delegate* unmanaged<float, byte, void> _glSampleCoverageARB_fnptr = &glSampleCoverageARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glSampleCoverageARB_Lazy(float value, byte invert)
        {
            _glSampleCoverageARB_fnptr = (delegate* unmanaged<float, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSampleCoverageARB");
            _glSampleCoverageARB_fnptr(value, invert);
        }
        
        /// <summary><b>[entry point: <c>glSampleCoveragex</c>]</b></summary>
        public static delegate* unmanaged<int, byte, void> _glSampleCoveragex_fnptr = &glSampleCoveragex_Lazy;
        [UnmanagedCallersOnly]
        private static void glSampleCoveragex_Lazy(int value, byte invert)
        {
            _glSampleCoveragex_fnptr = (delegate* unmanaged<int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSampleCoveragex");
            _glSampleCoveragex_fnptr(value, invert);
        }
        
        /// <summary><b>[entry point: <c>glSampleCoveragexOES</c>]</b></summary>
        public static delegate* unmanaged<int, byte, void> _glSampleCoveragexOES_fnptr = &glSampleCoveragexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glSampleCoveragexOES_Lazy(int value, byte invert)
        {
            _glSampleCoveragexOES_fnptr = (delegate* unmanaged<int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSampleCoveragexOES");
            _glSampleCoveragexOES_fnptr(value, invert);
        }
        
        /// <summary><b>[entry point: <c>glSampleMapATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glSampleMapATI_fnptr = &glSampleMapATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glSampleMapATI_Lazy(uint dst, uint interp, uint swizzle)
        {
            _glSampleMapATI_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSampleMapATI");
            _glSampleMapATI_fnptr(dst, interp, swizzle);
        }
        
        /// <summary><b>[entry point: <c>glSampleMaskEXT</c>]</b></summary>
        public static delegate* unmanaged<float, byte, void> _glSampleMaskEXT_fnptr = &glSampleMaskEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSampleMaskEXT_Lazy(float value, byte invert)
        {
            _glSampleMaskEXT_fnptr = (delegate* unmanaged<float, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSampleMaskEXT");
            _glSampleMaskEXT_fnptr(value, invert);
        }
        
        /// <summary><b>[entry point: <c>glSampleMaski</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glSampleMaski_fnptr = &glSampleMaski_Lazy;
        [UnmanagedCallersOnly]
        private static void glSampleMaski_Lazy(uint maskNumber, uint mask)
        {
            _glSampleMaski_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSampleMaski");
            _glSampleMaski_fnptr(maskNumber, mask);
        }
        
        /// <summary><b>[entry point: <c>glSampleMaskIndexedNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glSampleMaskIndexedNV_fnptr = &glSampleMaskIndexedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glSampleMaskIndexedNV_Lazy(uint index, uint mask)
        {
            _glSampleMaskIndexedNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSampleMaskIndexedNV");
            _glSampleMaskIndexedNV_fnptr(index, mask);
        }
        
        /// <summary><b>[entry point: <c>glSampleMaskSGIS</c>]</b></summary>
        public static delegate* unmanaged<float, byte, void> _glSampleMaskSGIS_fnptr = &glSampleMaskSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glSampleMaskSGIS_Lazy(float value, byte invert)
        {
            _glSampleMaskSGIS_fnptr = (delegate* unmanaged<float, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSampleMaskSGIS");
            _glSampleMaskSGIS_fnptr(value, invert);
        }
        
        /// <summary><b>[entry point: <c>glSamplePatternEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glSamplePatternEXT_fnptr = &glSamplePatternEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSamplePatternEXT_Lazy(uint pattern)
        {
            _glSamplePatternEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glSamplePatternEXT");
            _glSamplePatternEXT_fnptr(pattern);
        }
        
        /// <summary><b>[entry point: <c>glSamplePatternSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glSamplePatternSGIS_fnptr = &glSamplePatternSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glSamplePatternSGIS_Lazy(uint pattern)
        {
            _glSamplePatternSGIS_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glSamplePatternSGIS");
            _glSamplePatternSGIS_fnptr(pattern);
        }
        
        /// <summary><b>[entry point: <c>glSamplerParameterf</c>]</b></summary>
        public static delegate* unmanaged<int, uint, float, void> _glSamplerParameterf_fnptr = &glSamplerParameterf_Lazy;
        [UnmanagedCallersOnly]
        private static void glSamplerParameterf_Lazy(int sampler, uint pname, float param)
        {
            _glSamplerParameterf_fnptr = (delegate* unmanaged<int, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterf");
            _glSamplerParameterf_fnptr(sampler, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glSamplerParameterfv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, float*, void> _glSamplerParameterfv_fnptr = &glSamplerParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glSamplerParameterfv_Lazy(int sampler, uint pname, float* param)
        {
            _glSamplerParameterfv_fnptr = (delegate* unmanaged<int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterfv");
            _glSamplerParameterfv_fnptr(sampler, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glSamplerParameteri</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glSamplerParameteri_fnptr = &glSamplerParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void glSamplerParameteri_Lazy(int sampler, uint pname, int param)
        {
            _glSamplerParameteri_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameteri");
            _glSamplerParameteri_fnptr(sampler, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glSamplerParameterIiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glSamplerParameterIiv_fnptr = &glSamplerParameterIiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glSamplerParameterIiv_Lazy(int sampler, uint pname, int* param)
        {
            _glSamplerParameterIiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterIiv");
            _glSamplerParameterIiv_fnptr(sampler, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glSamplerParameterIivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glSamplerParameterIivEXT_fnptr = &glSamplerParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSamplerParameterIivEXT_Lazy(int sampler, uint pname, int* param)
        {
            _glSamplerParameterIivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterIivEXT");
            _glSamplerParameterIivEXT_fnptr(sampler, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glSamplerParameterIivOES</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glSamplerParameterIivOES_fnptr = &glSamplerParameterIivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glSamplerParameterIivOES_Lazy(int sampler, uint pname, int* param)
        {
            _glSamplerParameterIivOES_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterIivOES");
            _glSamplerParameterIivOES_fnptr(sampler, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glSamplerParameterIuiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint*, void> _glSamplerParameterIuiv_fnptr = &glSamplerParameterIuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glSamplerParameterIuiv_Lazy(int sampler, uint pname, uint* param)
        {
            _glSamplerParameterIuiv_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterIuiv");
            _glSamplerParameterIuiv_fnptr(sampler, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glSamplerParameterIuivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint*, void> _glSamplerParameterIuivEXT_fnptr = &glSamplerParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSamplerParameterIuivEXT_Lazy(int sampler, uint pname, uint* param)
        {
            _glSamplerParameterIuivEXT_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterIuivEXT");
            _glSamplerParameterIuivEXT_fnptr(sampler, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glSamplerParameterIuivOES</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint*, void> _glSamplerParameterIuivOES_fnptr = &glSamplerParameterIuivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glSamplerParameterIuivOES_Lazy(int sampler, uint pname, uint* param)
        {
            _glSamplerParameterIuivOES_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterIuivOES");
            _glSamplerParameterIuivOES_fnptr(sampler, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glSamplerParameteriv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glSamplerParameteriv_fnptr = &glSamplerParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glSamplerParameteriv_Lazy(int sampler, uint pname, int* param)
        {
            _glSamplerParameteriv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameteriv");
            _glSamplerParameteriv_fnptr(sampler, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glScaled</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, void> _glScaled_fnptr = &glScaled_Lazy;
        [UnmanagedCallersOnly]
        private static void glScaled_Lazy(double x, double y, double z)
        {
            _glScaled_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glScaled");
            _glScaled_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glScalef</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glScalef_fnptr = &glScalef_Lazy;
        [UnmanagedCallersOnly]
        private static void glScalef_Lazy(float x, float y, float z)
        {
            _glScalef_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glScalef");
            _glScalef_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glScalex</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glScalex_fnptr = &glScalex_Lazy;
        [UnmanagedCallersOnly]
        private static void glScalex_Lazy(int x, int y, int z)
        {
            _glScalex_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glScalex");
            _glScalex_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glScalexOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glScalexOES_fnptr = &glScalexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glScalexOES_Lazy(int x, int y, int z)
        {
            _glScalexOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glScalexOES");
            _glScalexOES_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glScissor</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glScissor_fnptr = &glScissor_Lazy;
        [UnmanagedCallersOnly]
        private static void glScissor_Lazy(int x, int y, int width, int height)
        {
            _glScissor_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glScissor");
            _glScissor_fnptr(x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glScissorArrayv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, void> _glScissorArrayv_fnptr = &glScissorArrayv_Lazy;
        [UnmanagedCallersOnly]
        private static void glScissorArrayv_Lazy(uint first, int count, int* v)
        {
            _glScissorArrayv_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glScissorArrayv");
            _glScissorArrayv_fnptr(first, count, v);
        }
        
        /// <summary><b>[entry point: <c>glScissorArrayvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, void> _glScissorArrayvNV_fnptr = &glScissorArrayvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glScissorArrayvNV_Lazy(uint first, int count, int* v)
        {
            _glScissorArrayvNV_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glScissorArrayvNV");
            _glScissorArrayvNV_fnptr(first, count, v);
        }
        
        /// <summary><b>[entry point: <c>glScissorArrayvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, void> _glScissorArrayvOES_fnptr = &glScissorArrayvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glScissorArrayvOES_Lazy(uint first, int count, int* v)
        {
            _glScissorArrayvOES_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glScissorArrayvOES");
            _glScissorArrayvOES_fnptr(first, count, v);
        }
        
        /// <summary><b>[entry point: <c>glScissorExclusiveArrayvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, void> _glScissorExclusiveArrayvNV_fnptr = &glScissorExclusiveArrayvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glScissorExclusiveArrayvNV_Lazy(uint first, int count, int* v)
        {
            _glScissorExclusiveArrayvNV_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glScissorExclusiveArrayvNV");
            _glScissorExclusiveArrayvNV_fnptr(first, count, v);
        }
        
        /// <summary><b>[entry point: <c>glScissorExclusiveNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glScissorExclusiveNV_fnptr = &glScissorExclusiveNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glScissorExclusiveNV_Lazy(int x, int y, int width, int height)
        {
            _glScissorExclusiveNV_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glScissorExclusiveNV");
            _glScissorExclusiveNV_fnptr(x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glScissorIndexed</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, void> _glScissorIndexed_fnptr = &glScissorIndexed_Lazy;
        [UnmanagedCallersOnly]
        private static void glScissorIndexed_Lazy(uint index, int left, int bottom, int width, int height)
        {
            _glScissorIndexed_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glScissorIndexed");
            _glScissorIndexed_fnptr(index, left, bottom, width, height);
        }
        
        /// <summary><b>[entry point: <c>glScissorIndexedNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, void> _glScissorIndexedNV_fnptr = &glScissorIndexedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glScissorIndexedNV_Lazy(uint index, int left, int bottom, int width, int height)
        {
            _glScissorIndexedNV_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glScissorIndexedNV");
            _glScissorIndexedNV_fnptr(index, left, bottom, width, height);
        }
        
        /// <summary><b>[entry point: <c>glScissorIndexedOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, void> _glScissorIndexedOES_fnptr = &glScissorIndexedOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glScissorIndexedOES_Lazy(uint index, int left, int bottom, int width, int height)
        {
            _glScissorIndexedOES_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glScissorIndexedOES");
            _glScissorIndexedOES_fnptr(index, left, bottom, width, height);
        }
        
        /// <summary><b>[entry point: <c>glScissorIndexedv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glScissorIndexedv_fnptr = &glScissorIndexedv_Lazy;
        [UnmanagedCallersOnly]
        private static void glScissorIndexedv_Lazy(uint index, int* v)
        {
            _glScissorIndexedv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glScissorIndexedv");
            _glScissorIndexedv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glScissorIndexedvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glScissorIndexedvNV_fnptr = &glScissorIndexedvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glScissorIndexedvNV_Lazy(uint index, int* v)
        {
            _glScissorIndexedvNV_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glScissorIndexedvNV");
            _glScissorIndexedvNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glScissorIndexedvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glScissorIndexedvOES_fnptr = &glScissorIndexedvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glScissorIndexedvOES_Lazy(uint index, int* v)
        {
            _glScissorIndexedvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glScissorIndexedvOES");
            _glScissorIndexedvOES_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3b</c>]</b></summary>
        public static delegate* unmanaged<sbyte, sbyte, sbyte, void> _glSecondaryColor3b_fnptr = &glSecondaryColor3b_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3b_Lazy(sbyte red, sbyte green, sbyte blue)
        {
            _glSecondaryColor3b_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3b");
            _glSecondaryColor3b_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3bEXT</c>]</b></summary>
        public static delegate* unmanaged<sbyte, sbyte, sbyte, void> _glSecondaryColor3bEXT_fnptr = &glSecondaryColor3bEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3bEXT_Lazy(sbyte red, sbyte green, sbyte blue)
        {
            _glSecondaryColor3bEXT_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3bEXT");
            _glSecondaryColor3bEXT_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3bv</c>]</b></summary>
        public static delegate* unmanaged<sbyte*, void> _glSecondaryColor3bv_fnptr = &glSecondaryColor3bv_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3bv_Lazy(sbyte* v)
        {
            _glSecondaryColor3bv_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3bv");
            _glSecondaryColor3bv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3bvEXT</c>]</b></summary>
        public static delegate* unmanaged<sbyte*, void> _glSecondaryColor3bvEXT_fnptr = &glSecondaryColor3bvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3bvEXT_Lazy(sbyte* v)
        {
            _glSecondaryColor3bvEXT_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3bvEXT");
            _glSecondaryColor3bvEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3d</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, void> _glSecondaryColor3d_fnptr = &glSecondaryColor3d_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3d_Lazy(double red, double green, double blue)
        {
            _glSecondaryColor3d_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3d");
            _glSecondaryColor3d_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3dEXT</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, void> _glSecondaryColor3dEXT_fnptr = &glSecondaryColor3dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3dEXT_Lazy(double red, double green, double blue)
        {
            _glSecondaryColor3dEXT_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3dEXT");
            _glSecondaryColor3dEXT_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glSecondaryColor3dv_fnptr = &glSecondaryColor3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3dv_Lazy(double* v)
        {
            _glSecondaryColor3dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3dv");
            _glSecondaryColor3dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3dvEXT</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glSecondaryColor3dvEXT_fnptr = &glSecondaryColor3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3dvEXT_Lazy(double* v)
        {
            _glSecondaryColor3dvEXT_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3dvEXT");
            _glSecondaryColor3dvEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3f</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glSecondaryColor3f_fnptr = &glSecondaryColor3f_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3f_Lazy(float red, float green, float blue)
        {
            _glSecondaryColor3f_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3f");
            _glSecondaryColor3f_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3fEXT</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glSecondaryColor3fEXT_fnptr = &glSecondaryColor3fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3fEXT_Lazy(float red, float green, float blue)
        {
            _glSecondaryColor3fEXT_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3fEXT");
            _glSecondaryColor3fEXT_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glSecondaryColor3fv_fnptr = &glSecondaryColor3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3fv_Lazy(float* v)
        {
            _glSecondaryColor3fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3fv");
            _glSecondaryColor3fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3fvEXT</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glSecondaryColor3fvEXT_fnptr = &glSecondaryColor3fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3fvEXT_Lazy(float* v)
        {
            _glSecondaryColor3fvEXT_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3fvEXT");
            _glSecondaryColor3fvEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3hNV</c>]</b></summary>
        public static delegate* unmanaged<Half, Half, Half, void> _glSecondaryColor3hNV_fnptr = &glSecondaryColor3hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3hNV_Lazy(Half red, Half green, Half blue)
        {
            _glSecondaryColor3hNV_fnptr = (delegate* unmanaged<Half, Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3hNV");
            _glSecondaryColor3hNV_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3hvNV</c>]</b></summary>
        public static delegate* unmanaged<Half*, void> _glSecondaryColor3hvNV_fnptr = &glSecondaryColor3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3hvNV_Lazy(Half* v)
        {
            _glSecondaryColor3hvNV_fnptr = (delegate* unmanaged<Half*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3hvNV");
            _glSecondaryColor3hvNV_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glSecondaryColor3i_fnptr = &glSecondaryColor3i_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3i_Lazy(int red, int green, int blue)
        {
            _glSecondaryColor3i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3i");
            _glSecondaryColor3i_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3iEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glSecondaryColor3iEXT_fnptr = &glSecondaryColor3iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3iEXT_Lazy(int red, int green, int blue)
        {
            _glSecondaryColor3iEXT_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3iEXT");
            _glSecondaryColor3iEXT_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glSecondaryColor3iv_fnptr = &glSecondaryColor3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3iv_Lazy(int* v)
        {
            _glSecondaryColor3iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3iv");
            _glSecondaryColor3iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3ivEXT</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glSecondaryColor3ivEXT_fnptr = &glSecondaryColor3ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3ivEXT_Lazy(int* v)
        {
            _glSecondaryColor3ivEXT_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3ivEXT");
            _glSecondaryColor3ivEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3s</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, void> _glSecondaryColor3s_fnptr = &glSecondaryColor3s_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3s_Lazy(short red, short green, short blue)
        {
            _glSecondaryColor3s_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3s");
            _glSecondaryColor3s_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3sEXT</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, void> _glSecondaryColor3sEXT_fnptr = &glSecondaryColor3sEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3sEXT_Lazy(short red, short green, short blue)
        {
            _glSecondaryColor3sEXT_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3sEXT");
            _glSecondaryColor3sEXT_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glSecondaryColor3sv_fnptr = &glSecondaryColor3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3sv_Lazy(short* v)
        {
            _glSecondaryColor3sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3sv");
            _glSecondaryColor3sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3svEXT</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glSecondaryColor3svEXT_fnptr = &glSecondaryColor3svEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3svEXT_Lazy(short* v)
        {
            _glSecondaryColor3svEXT_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3svEXT");
            _glSecondaryColor3svEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3ub</c>]</b></summary>
        public static delegate* unmanaged<byte, byte, byte, void> _glSecondaryColor3ub_fnptr = &glSecondaryColor3ub_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3ub_Lazy(byte red, byte green, byte blue)
        {
            _glSecondaryColor3ub_fnptr = (delegate* unmanaged<byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3ub");
            _glSecondaryColor3ub_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3ubEXT</c>]</b></summary>
        public static delegate* unmanaged<byte, byte, byte, void> _glSecondaryColor3ubEXT_fnptr = &glSecondaryColor3ubEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3ubEXT_Lazy(byte red, byte green, byte blue)
        {
            _glSecondaryColor3ubEXT_fnptr = (delegate* unmanaged<byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3ubEXT");
            _glSecondaryColor3ubEXT_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3ubv</c>]</b></summary>
        public static delegate* unmanaged<byte*, void> _glSecondaryColor3ubv_fnptr = &glSecondaryColor3ubv_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3ubv_Lazy(byte* v)
        {
            _glSecondaryColor3ubv_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3ubv");
            _glSecondaryColor3ubv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3ubvEXT</c>]</b></summary>
        public static delegate* unmanaged<byte*, void> _glSecondaryColor3ubvEXT_fnptr = &glSecondaryColor3ubvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3ubvEXT_Lazy(byte* v)
        {
            _glSecondaryColor3ubvEXT_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3ubvEXT");
            _glSecondaryColor3ubvEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glSecondaryColor3ui_fnptr = &glSecondaryColor3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3ui_Lazy(uint red, uint green, uint blue)
        {
            _glSecondaryColor3ui_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3ui");
            _glSecondaryColor3ui_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3uiEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glSecondaryColor3uiEXT_fnptr = &glSecondaryColor3uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3uiEXT_Lazy(uint red, uint green, uint blue)
        {
            _glSecondaryColor3uiEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3uiEXT");
            _glSecondaryColor3uiEXT_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3uiv</c>]</b></summary>
        public static delegate* unmanaged<uint*, void> _glSecondaryColor3uiv_fnptr = &glSecondaryColor3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3uiv_Lazy(uint* v)
        {
            _glSecondaryColor3uiv_fnptr = (delegate* unmanaged<uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3uiv");
            _glSecondaryColor3uiv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3uivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint*, void> _glSecondaryColor3uivEXT_fnptr = &glSecondaryColor3uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3uivEXT_Lazy(uint* v)
        {
            _glSecondaryColor3uivEXT_fnptr = (delegate* unmanaged<uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3uivEXT");
            _glSecondaryColor3uivEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3us</c>]</b></summary>
        public static delegate* unmanaged<ushort, ushort, ushort, void> _glSecondaryColor3us_fnptr = &glSecondaryColor3us_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3us_Lazy(ushort red, ushort green, ushort blue)
        {
            _glSecondaryColor3us_fnptr = (delegate* unmanaged<ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3us");
            _glSecondaryColor3us_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3usEXT</c>]</b></summary>
        public static delegate* unmanaged<ushort, ushort, ushort, void> _glSecondaryColor3usEXT_fnptr = &glSecondaryColor3usEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3usEXT_Lazy(ushort red, ushort green, ushort blue)
        {
            _glSecondaryColor3usEXT_fnptr = (delegate* unmanaged<ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3usEXT");
            _glSecondaryColor3usEXT_fnptr(red, green, blue);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3usv</c>]</b></summary>
        public static delegate* unmanaged<ushort*, void> _glSecondaryColor3usv_fnptr = &glSecondaryColor3usv_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3usv_Lazy(ushort* v)
        {
            _glSecondaryColor3usv_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3usv");
            _glSecondaryColor3usv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColor3usvEXT</c>]</b></summary>
        public static delegate* unmanaged<ushort*, void> _glSecondaryColor3usvEXT_fnptr = &glSecondaryColor3usvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColor3usvEXT_Lazy(ushort* v)
        {
            _glSecondaryColor3usvEXT_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3usvEXT");
            _glSecondaryColor3usvEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColorFormatNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glSecondaryColorFormatNV_fnptr = &glSecondaryColorFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColorFormatNV_Lazy(int size, uint type, int stride)
        {
            _glSecondaryColorFormatNV_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColorFormatNV");
            _glSecondaryColorFormatNV_fnptr(size, type, stride);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColorP3ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glSecondaryColorP3ui_fnptr = &glSecondaryColorP3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColorP3ui_Lazy(uint type, uint color)
        {
            _glSecondaryColorP3ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColorP3ui");
            _glSecondaryColorP3ui_fnptr(type, color);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColorP3uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glSecondaryColorP3uiv_fnptr = &glSecondaryColorP3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColorP3uiv_Lazy(uint type, uint* color)
        {
            _glSecondaryColorP3uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColorP3uiv");
            _glSecondaryColorP3uiv_fnptr(type, color);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColorPointer</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void*, void> _glSecondaryColorPointer_fnptr = &glSecondaryColorPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColorPointer_Lazy(int size, uint type, int stride, void* pointer)
        {
            _glSecondaryColorPointer_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColorPointer");
            _glSecondaryColorPointer_fnptr(size, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColorPointerEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void*, void> _glSecondaryColorPointerEXT_fnptr = &glSecondaryColorPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColorPointerEXT_Lazy(int size, uint type, int stride, void* pointer)
        {
            _glSecondaryColorPointerEXT_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColorPointerEXT");
            _glSecondaryColorPointerEXT_fnptr(size, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glSecondaryColorPointerListIBM</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void**, int, void> _glSecondaryColorPointerListIBM_fnptr = &glSecondaryColorPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void glSecondaryColorPointerListIBM_Lazy(int size, uint type, int stride, void** pointer, int ptrstride)
        {
            _glSecondaryColorPointerListIBM_fnptr = (delegate* unmanaged<int, uint, int, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColorPointerListIBM");
            _glSecondaryColorPointerListIBM_fnptr(size, type, stride, pointer, ptrstride);
        }
        
        /// <summary><b>[entry point: <c>glSelectBuffer</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glSelectBuffer_fnptr = &glSelectBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glSelectBuffer_Lazy(int size, uint* buffer)
        {
            _glSelectBuffer_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSelectBuffer");
            _glSelectBuffer_fnptr(size, buffer);
        }
        
        /// <summary><b>[entry point: <c>glSelectPerfMonitorCountersAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, uint, int, uint*, void> _glSelectPerfMonitorCountersAMD_fnptr = &glSelectPerfMonitorCountersAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glSelectPerfMonitorCountersAMD_Lazy(uint monitor, byte enable, uint group, int numCounters, uint* counterList)
        {
            _glSelectPerfMonitorCountersAMD_fnptr = (delegate* unmanaged<uint, byte, uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSelectPerfMonitorCountersAMD");
            _glSelectPerfMonitorCountersAMD_fnptr(monitor, enable, group, numCounters, counterList);
        }
        
        /// <summary><b>[entry point: <c>glSemaphoreParameterivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glSemaphoreParameterivNV_fnptr = &glSemaphoreParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glSemaphoreParameterivNV_Lazy(uint semaphore, uint pname, int* parameters)
        {
            _glSemaphoreParameterivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glSemaphoreParameterivNV");
            _glSemaphoreParameterivNV_fnptr(semaphore, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glSemaphoreParameterui64vEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, ulong*, void> _glSemaphoreParameterui64vEXT_fnptr = &glSemaphoreParameterui64vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSemaphoreParameterui64vEXT_Lazy(uint semaphore, uint pname, ulong* parameters)
        {
            _glSemaphoreParameterui64vEXT_fnptr = (delegate* unmanaged<uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glSemaphoreParameterui64vEXT");
            _glSemaphoreParameterui64vEXT_fnptr(semaphore, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glSeparableFilter2D</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void*, void> _glSeparableFilter2D_fnptr = &glSeparableFilter2D_Lazy;
        [UnmanagedCallersOnly]
        private static void glSeparableFilter2D_Lazy(uint target, uint internalformat, int width, int height, uint format, uint type, void* row, void* column)
        {
            _glSeparableFilter2D_fnptr = (delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glSeparableFilter2D");
            _glSeparableFilter2D_fnptr(target, internalformat, width, height, format, type, row, column);
        }
        
        /// <summary><b>[entry point: <c>glSeparableFilter2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void*, void> _glSeparableFilter2DEXT_fnptr = &glSeparableFilter2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSeparableFilter2DEXT_Lazy(uint target, uint internalformat, int width, int height, uint format, uint type, void* row, void* column)
        {
            _glSeparableFilter2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glSeparableFilter2DEXT");
            _glSeparableFilter2DEXT_fnptr(target, internalformat, width, height, format, type, row, column);
        }
        
        /// <summary><b>[entry point: <c>glSetFenceAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glSetFenceAPPLE_fnptr = &glSetFenceAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glSetFenceAPPLE_Lazy(uint fence)
        {
            _glSetFenceAPPLE_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glSetFenceAPPLE");
            _glSetFenceAPPLE_fnptr(fence);
        }
        
        /// <summary><b>[entry point: <c>glSetFenceNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glSetFenceNV_fnptr = &glSetFenceNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glSetFenceNV_Lazy(uint fence, uint condition)
        {
            _glSetFenceNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSetFenceNV");
            _glSetFenceNV_fnptr(fence, condition);
        }
        
        /// <summary><b>[entry point: <c>glSetFragmentShaderConstantATI</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glSetFragmentShaderConstantATI_fnptr = &glSetFragmentShaderConstantATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glSetFragmentShaderConstantATI_Lazy(uint dst, float* value)
        {
            _glSetFragmentShaderConstantATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glSetFragmentShaderConstantATI");
            _glSetFragmentShaderConstantATI_fnptr(dst, value);
        }
        
        /// <summary><b>[entry point: <c>glSetInvariantEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, void> _glSetInvariantEXT_fnptr = &glSetInvariantEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSetInvariantEXT_Lazy(uint id, uint type, void* addr)
        {
            _glSetInvariantEXT_fnptr = (delegate* unmanaged<uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glSetInvariantEXT");
            _glSetInvariantEXT_fnptr(id, type, addr);
        }
        
        /// <summary><b>[entry point: <c>glSetLocalConstantEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void*, void> _glSetLocalConstantEXT_fnptr = &glSetLocalConstantEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSetLocalConstantEXT_Lazy(uint id, uint type, void* addr)
        {
            _glSetLocalConstantEXT_fnptr = (delegate* unmanaged<uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glSetLocalConstantEXT");
            _glSetLocalConstantEXT_fnptr(id, type, addr);
        }
        
        /// <summary><b>[entry point: <c>glSetMultisamplefvAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glSetMultisamplefvAMD_fnptr = &glSetMultisamplefvAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glSetMultisamplefvAMD_Lazy(uint pname, uint index, float* val)
        {
            _glSetMultisamplefvAMD_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glSetMultisamplefvAMD");
            _glSetMultisamplefvAMD_fnptr(pname, index, val);
        }
        
        /// <summary><b>[entry point: <c>glShadeModel</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glShadeModel_fnptr = &glShadeModel_Lazy;
        [UnmanagedCallersOnly]
        private static void glShadeModel_Lazy(uint mode)
        {
            _glShadeModel_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glShadeModel");
            _glShadeModel_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glShaderBinary</c>]</b></summary>
        public static delegate* unmanaged<int, int*, uint, void*, int, void> _glShaderBinary_fnptr = &glShaderBinary_Lazy;
        [UnmanagedCallersOnly]
        private static void glShaderBinary_Lazy(int count, int* shaders, uint binaryFormat, void* binary, int length)
        {
            _glShaderBinary_fnptr = (delegate* unmanaged<int, int*, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glShaderBinary");
            _glShaderBinary_fnptr(count, shaders, binaryFormat, binary, length);
        }
        
        /// <summary><b>[entry point: <c>glShaderOp1EXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glShaderOp1EXT_fnptr = &glShaderOp1EXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glShaderOp1EXT_Lazy(uint op, uint res, uint arg1)
        {
            _glShaderOp1EXT_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glShaderOp1EXT");
            _glShaderOp1EXT_fnptr(op, res, arg1);
        }
        
        /// <summary><b>[entry point: <c>glShaderOp2EXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, void> _glShaderOp2EXT_fnptr = &glShaderOp2EXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glShaderOp2EXT_Lazy(uint op, uint res, uint arg1, uint arg2)
        {
            _glShaderOp2EXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glShaderOp2EXT");
            _glShaderOp2EXT_fnptr(op, res, arg1, arg2);
        }
        
        /// <summary><b>[entry point: <c>glShaderOp3EXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, void> _glShaderOp3EXT_fnptr = &glShaderOp3EXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glShaderOp3EXT_Lazy(uint op, uint res, uint arg1, uint arg2, uint arg3)
        {
            _glShaderOp3EXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glShaderOp3EXT");
            _glShaderOp3EXT_fnptr(op, res, arg1, arg2, arg3);
        }
        
        /// <summary><b>[entry point: <c>glShaderSource</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte**, int*, void> _glShaderSource_fnptr = &glShaderSource_Lazy;
        [UnmanagedCallersOnly]
        private static void glShaderSource_Lazy(int shader, int count, byte** str, int* length)
        {
            _glShaderSource_fnptr = (delegate* unmanaged<int, int, byte**, int*, void>)GLLoader.BindingsContext.GetProcAddress("glShaderSource");
            _glShaderSource_fnptr(shader, count, str, length);
        }
        
        /// <summary><b>[entry point: <c>glShaderSourceARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, int, byte**, int*, void> _glShaderSourceARB_fnptr = &glShaderSourceARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glShaderSourceARB_Lazy(IntPtr shaderObj, int count, byte** str, int* length)
        {
            _glShaderSourceARB_fnptr = (delegate* unmanaged<IntPtr, int, byte**, int*, void>)GLLoader.BindingsContext.GetProcAddress("glShaderSourceARB");
            _glShaderSourceARB_fnptr(shaderObj, count, str, length);
        }
        
        /// <summary><b>[entry point: <c>glShaderStorageBlockBinding</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, void> _glShaderStorageBlockBinding_fnptr = &glShaderStorageBlockBinding_Lazy;
        [UnmanagedCallersOnly]
        private static void glShaderStorageBlockBinding_Lazy(int program, uint storageBlockIndex, uint storageBlockBinding)
        {
            _glShaderStorageBlockBinding_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glShaderStorageBlockBinding");
            _glShaderStorageBlockBinding_fnptr(program, storageBlockIndex, storageBlockBinding);
        }
        
        /// <summary><b>[entry point: <c>glShadingRateCombinerOpsEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glShadingRateCombinerOpsEXT_fnptr = &glShadingRateCombinerOpsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glShadingRateCombinerOpsEXT_Lazy(uint combinerOp0, uint combinerOp1)
        {
            _glShadingRateCombinerOpsEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glShadingRateCombinerOpsEXT");
            _glShadingRateCombinerOpsEXT_fnptr(combinerOp0, combinerOp1);
        }
        
        /// <summary><b>[entry point: <c>glShadingRateEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glShadingRateEXT_fnptr = &glShadingRateEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glShadingRateEXT_Lazy(uint rate)
        {
            _glShadingRateEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glShadingRateEXT");
            _glShadingRateEXT_fnptr(rate);
        }
        
        /// <summary><b>[entry point: <c>glShadingRateImageBarrierNV</c>]</b></summary>
        public static delegate* unmanaged<byte, void> _glShadingRateImageBarrierNV_fnptr = &glShadingRateImageBarrierNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glShadingRateImageBarrierNV_Lazy(byte synchronize)
        {
            _glShadingRateImageBarrierNV_fnptr = (delegate* unmanaged<byte, void>)GLLoader.BindingsContext.GetProcAddress("glShadingRateImageBarrierNV");
            _glShadingRateImageBarrierNV_fnptr(synchronize);
        }
        
        /// <summary><b>[entry point: <c>glShadingRateImagePaletteNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint*, void> _glShadingRateImagePaletteNV_fnptr = &glShadingRateImagePaletteNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glShadingRateImagePaletteNV_Lazy(uint viewport, uint first, int count, uint* rates)
        {
            _glShadingRateImagePaletteNV_fnptr = (delegate* unmanaged<uint, uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glShadingRateImagePaletteNV");
            _glShadingRateImagePaletteNV_fnptr(viewport, first, count, rates);
        }
        
        /// <summary><b>[entry point: <c>glShadingRateQCOM</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glShadingRateQCOM_fnptr = &glShadingRateQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glShadingRateQCOM_Lazy(uint rate)
        {
            _glShadingRateQCOM_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glShadingRateQCOM");
            _glShadingRateQCOM_fnptr(rate);
        }
        
        /// <summary><b>[entry point: <c>glShadingRateSampleOrderCustomNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glShadingRateSampleOrderCustomNV_fnptr = &glShadingRateSampleOrderCustomNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glShadingRateSampleOrderCustomNV_Lazy(uint rate, uint samples, int* locations)
        {
            _glShadingRateSampleOrderCustomNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glShadingRateSampleOrderCustomNV");
            _glShadingRateSampleOrderCustomNV_fnptr(rate, samples, locations);
        }
        
        /// <summary><b>[entry point: <c>glShadingRateSampleOrderNV</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glShadingRateSampleOrderNV_fnptr = &glShadingRateSampleOrderNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glShadingRateSampleOrderNV_Lazy(uint order)
        {
            _glShadingRateSampleOrderNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glShadingRateSampleOrderNV");
            _glShadingRateSampleOrderNV_fnptr(order);
        }
        
        /// <summary><b>[entry point: <c>glSharpenTexFuncSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glSharpenTexFuncSGIS_fnptr = &glSharpenTexFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glSharpenTexFuncSGIS_Lazy(uint target, int n, float* points)
        {
            _glSharpenTexFuncSGIS_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glSharpenTexFuncSGIS");
            _glSharpenTexFuncSGIS_fnptr(target, n, points);
        }
        
        /// <summary><b>[entry point: <c>glSignalSemaphoreEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, uint, int*, uint*, void> _glSignalSemaphoreEXT_fnptr = &glSignalSemaphoreEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSignalSemaphoreEXT_Lazy(uint semaphore, uint numBufferBarriers, int* buffers, uint numTextureBarriers, int* textures, uint* dstLayouts)
        {
            _glSignalSemaphoreEXT_fnptr = (delegate* unmanaged<uint, uint, int*, uint, int*, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSignalSemaphoreEXT");
            _glSignalSemaphoreEXT_fnptr(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
        }
        
        /// <summary><b>[entry point: <c>glSignalSemaphoreui64NVX</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, ulong*, void> _glSignalSemaphoreui64NVX_fnptr = &glSignalSemaphoreui64NVX_Lazy;
        [UnmanagedCallersOnly]
        private static void glSignalSemaphoreui64NVX_Lazy(uint signalGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray)
        {
            _glSignalSemaphoreui64NVX_fnptr = (delegate* unmanaged<uint, int, uint*, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glSignalSemaphoreui64NVX");
            _glSignalSemaphoreui64NVX_fnptr(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
        }
        
        /// <summary><b>[entry point: <c>glSignalVkFenceNV</c>]</b></summary>
        public static delegate* unmanaged<ulong, void> _glSignalVkFenceNV_fnptr = &glSignalVkFenceNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glSignalVkFenceNV_Lazy(ulong vkFence)
        {
            _glSignalVkFenceNV_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glSignalVkFenceNV");
            _glSignalVkFenceNV_fnptr(vkFence);
        }
        
        /// <summary><b>[entry point: <c>glSignalVkSemaphoreNV</c>]</b></summary>
        public static delegate* unmanaged<ulong, void> _glSignalVkSemaphoreNV_fnptr = &glSignalVkSemaphoreNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glSignalVkSemaphoreNV_Lazy(ulong vkSemaphore)
        {
            _glSignalVkSemaphoreNV_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glSignalVkSemaphoreNV");
            _glSignalVkSemaphoreNV_fnptr(vkSemaphore);
        }
        
        /// <summary><b>[entry point: <c>glSpecializeShader</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, uint, uint*, uint*, void> _glSpecializeShader_fnptr = &glSpecializeShader_Lazy;
        [UnmanagedCallersOnly]
        private static void glSpecializeShader_Lazy(int shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
        {
            _glSpecializeShader_fnptr = (delegate* unmanaged<int, byte*, uint, uint*, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSpecializeShader");
            _glSpecializeShader_fnptr(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        }
        
        /// <summary><b>[entry point: <c>glSpecializeShaderARB</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, uint, uint*, uint*, void> _glSpecializeShaderARB_fnptr = &glSpecializeShaderARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glSpecializeShaderARB_Lazy(int shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
        {
            _glSpecializeShaderARB_fnptr = (delegate* unmanaged<int, byte*, uint, uint*, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSpecializeShaderARB");
            _glSpecializeShaderARB_fnptr(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        }
        
        /// <summary><b>[entry point: <c>glSpriteParameterfSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glSpriteParameterfSGIX_fnptr = &glSpriteParameterfSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glSpriteParameterfSGIX_Lazy(uint pname, float param)
        {
            _glSpriteParameterfSGIX_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glSpriteParameterfSGIX");
            _glSpriteParameterfSGIX_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glSpriteParameterfvSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glSpriteParameterfvSGIX_fnptr = &glSpriteParameterfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glSpriteParameterfvSGIX_Lazy(uint pname, float* parameters)
        {
            _glSpriteParameterfvSGIX_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glSpriteParameterfvSGIX");
            _glSpriteParameterfvSGIX_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glSpriteParameteriSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glSpriteParameteriSGIX_fnptr = &glSpriteParameteriSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glSpriteParameteriSGIX_Lazy(uint pname, int param)
        {
            _glSpriteParameteriSGIX_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glSpriteParameteriSGIX");
            _glSpriteParameteriSGIX_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glSpriteParameterivSGIX</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glSpriteParameterivSGIX_fnptr = &glSpriteParameterivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glSpriteParameterivSGIX_Lazy(uint pname, int* parameters)
        {
            _glSpriteParameterivSGIX_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glSpriteParameterivSGIX");
            _glSpriteParameterivSGIX_fnptr(pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glStartInstrumentsSGIX</c>]</b></summary>
        public static delegate* unmanaged<void> _glStartInstrumentsSGIX_fnptr = &glStartInstrumentsSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glStartInstrumentsSGIX_Lazy()
        {
            _glStartInstrumentsSGIX_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glStartInstrumentsSGIX");
            _glStartInstrumentsSGIX_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glStartTilingQCOM</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, void> _glStartTilingQCOM_fnptr = &glStartTilingQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glStartTilingQCOM_Lazy(uint x, uint y, uint width, uint height, uint preserveMask)
        {
            _glStartTilingQCOM_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStartTilingQCOM");
            _glStartTilingQCOM_fnptr(x, y, width, height, preserveMask);
        }
        
        /// <summary><b>[entry point: <c>glStateCaptureNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glStateCaptureNV_fnptr = &glStateCaptureNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glStateCaptureNV_Lazy(uint state, uint mode)
        {
            _glStateCaptureNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStateCaptureNV");
            _glStateCaptureNV_fnptr(state, mode);
        }
        
        /// <summary><b>[entry point: <c>glStencilClearTagEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glStencilClearTagEXT_fnptr = &glStencilClearTagEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilClearTagEXT_Lazy(int stencilTagBits, uint stencilClearTag)
        {
            _glStencilClearTagEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilClearTagEXT");
            _glStencilClearTagEXT_fnptr(stencilTagBits, stencilClearTag);
        }
        
        /// <summary><b>[entry point: <c>glStencilFillPathInstancedNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void*, uint, uint, uint, uint, float*, void> _glStencilFillPathInstancedNV_fnptr = &glStencilFillPathInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilFillPathInstancedNV_Lazy(int numPaths, uint pathNameType, void* paths, uint pathBase, uint fillMode, uint mask, uint transformType, float* transformValues)
        {
            _glStencilFillPathInstancedNV_fnptr = (delegate* unmanaged<int, uint, void*, uint, uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glStencilFillPathInstancedNV");
            _glStencilFillPathInstancedNV_fnptr(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
        }
        
        /// <summary><b>[entry point: <c>glStencilFillPathNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glStencilFillPathNV_fnptr = &glStencilFillPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilFillPathNV_Lazy(uint path, uint fillMode, uint mask)
        {
            _glStencilFillPathNV_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilFillPathNV");
            _glStencilFillPathNV_fnptr(path, fillMode, mask);
        }
        
        /// <summary><b>[entry point: <c>glStencilFunc</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void> _glStencilFunc_fnptr = &glStencilFunc_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilFunc_Lazy(uint func, int reference, uint mask)
        {
            _glStencilFunc_fnptr = (delegate* unmanaged<uint, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilFunc");
            _glStencilFunc_fnptr(func, reference, mask);
        }
        
        /// <summary><b>[entry point: <c>glStencilFuncSeparate</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, void> _glStencilFuncSeparate_fnptr = &glStencilFuncSeparate_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilFuncSeparate_Lazy(uint face, uint func, int reference, uint mask)
        {
            _glStencilFuncSeparate_fnptr = (delegate* unmanaged<uint, uint, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilFuncSeparate");
            _glStencilFuncSeparate_fnptr(face, func, reference, mask);
        }
        
        /// <summary><b>[entry point: <c>glStencilFuncSeparateATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, uint, void> _glStencilFuncSeparateATI_fnptr = &glStencilFuncSeparateATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilFuncSeparateATI_Lazy(uint frontfunc, uint backfunc, int reference, uint mask)
        {
            _glStencilFuncSeparateATI_fnptr = (delegate* unmanaged<uint, uint, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilFuncSeparateATI");
            _glStencilFuncSeparateATI_fnptr(frontfunc, backfunc, reference, mask);
        }
        
        /// <summary><b>[entry point: <c>glStencilMask</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glStencilMask_fnptr = &glStencilMask_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilMask_Lazy(uint mask)
        {
            _glStencilMask_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilMask");
            _glStencilMask_fnptr(mask);
        }
        
        /// <summary><b>[entry point: <c>glStencilMaskSeparate</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glStencilMaskSeparate_fnptr = &glStencilMaskSeparate_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilMaskSeparate_Lazy(uint face, uint mask)
        {
            _glStencilMaskSeparate_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilMaskSeparate");
            _glStencilMaskSeparate_fnptr(face, mask);
        }
        
        /// <summary><b>[entry point: <c>glStencilOp</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glStencilOp_fnptr = &glStencilOp_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilOp_Lazy(uint fail, uint zfail, uint zpass)
        {
            _glStencilOp_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilOp");
            _glStencilOp_fnptr(fail, zfail, zpass);
        }
        
        /// <summary><b>[entry point: <c>glStencilOpSeparate</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, void> _glStencilOpSeparate_fnptr = &glStencilOpSeparate_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilOpSeparate_Lazy(uint face, uint sfail, uint dpfail, uint dppass)
        {
            _glStencilOpSeparate_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilOpSeparate");
            _glStencilOpSeparate_fnptr(face, sfail, dpfail, dppass);
        }
        
        /// <summary><b>[entry point: <c>glStencilOpSeparateATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, void> _glStencilOpSeparateATI_fnptr = &glStencilOpSeparateATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilOpSeparateATI_Lazy(uint face, uint sfail, uint dpfail, uint dppass)
        {
            _glStencilOpSeparateATI_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilOpSeparateATI");
            _glStencilOpSeparateATI_fnptr(face, sfail, dpfail, dppass);
        }
        
        /// <summary><b>[entry point: <c>glStencilOpValueAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glStencilOpValueAMD_fnptr = &glStencilOpValueAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilOpValueAMD_Lazy(uint face, uint value)
        {
            _glStencilOpValueAMD_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilOpValueAMD");
            _glStencilOpValueAMD_fnptr(face, value);
        }
        
        /// <summary><b>[entry point: <c>glStencilStrokePathInstancedNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void*, uint, int, uint, uint, float*, void> _glStencilStrokePathInstancedNV_fnptr = &glStencilStrokePathInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilStrokePathInstancedNV_Lazy(int numPaths, uint pathNameType, void* paths, uint pathBase, int reference, uint mask, uint transformType, float* transformValues)
        {
            _glStencilStrokePathInstancedNV_fnptr = (delegate* unmanaged<int, uint, void*, uint, int, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glStencilStrokePathInstancedNV");
            _glStencilStrokePathInstancedNV_fnptr(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
        }
        
        /// <summary><b>[entry point: <c>glStencilStrokePathNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, void> _glStencilStrokePathNV_fnptr = &glStencilStrokePathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilStrokePathNV_Lazy(uint path, int reference, uint mask)
        {
            _glStencilStrokePathNV_fnptr = (delegate* unmanaged<uint, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilStrokePathNV");
            _glStencilStrokePathNV_fnptr(path, reference, mask);
        }
        
        /// <summary><b>[entry point: <c>glStencilThenCoverFillPathInstancedNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void*, uint, uint, uint, uint, uint, float*, void> _glStencilThenCoverFillPathInstancedNV_fnptr = &glStencilThenCoverFillPathInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilThenCoverFillPathInstancedNV_Lazy(int numPaths, uint pathNameType, void* paths, uint pathBase, uint fillMode, uint mask, uint coverMode, uint transformType, float* transformValues)
        {
            _glStencilThenCoverFillPathInstancedNV_fnptr = (delegate* unmanaged<int, uint, void*, uint, uint, uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glStencilThenCoverFillPathInstancedNV");
            _glStencilThenCoverFillPathInstancedNV_fnptr(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
        }
        
        /// <summary><b>[entry point: <c>glStencilThenCoverFillPathNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, void> _glStencilThenCoverFillPathNV_fnptr = &glStencilThenCoverFillPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilThenCoverFillPathNV_Lazy(uint path, uint fillMode, uint mask, uint coverMode)
        {
            _glStencilThenCoverFillPathNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilThenCoverFillPathNV");
            _glStencilThenCoverFillPathNV_fnptr(path, fillMode, mask, coverMode);
        }
        
        /// <summary><b>[entry point: <c>glStencilThenCoverStrokePathInstancedNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void*, uint, int, uint, uint, uint, float*, void> _glStencilThenCoverStrokePathInstancedNV_fnptr = &glStencilThenCoverStrokePathInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilThenCoverStrokePathInstancedNV_Lazy(int numPaths, uint pathNameType, void* paths, uint pathBase, int reference, uint mask, uint coverMode, uint transformType, float* transformValues)
        {
            _glStencilThenCoverStrokePathInstancedNV_fnptr = (delegate* unmanaged<int, uint, void*, uint, int, uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glStencilThenCoverStrokePathInstancedNV");
            _glStencilThenCoverStrokePathInstancedNV_fnptr(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
        }
        
        /// <summary><b>[entry point: <c>glStencilThenCoverStrokePathNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, uint, void> _glStencilThenCoverStrokePathNV_fnptr = &glStencilThenCoverStrokePathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glStencilThenCoverStrokePathNV_Lazy(uint path, int reference, uint mask, uint coverMode)
        {
            _glStencilThenCoverStrokePathNV_fnptr = (delegate* unmanaged<uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilThenCoverStrokePathNV");
            _glStencilThenCoverStrokePathNV_fnptr(path, reference, mask, coverMode);
        }
        
        /// <summary><b>[entry point: <c>glStopInstrumentsSGIX</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glStopInstrumentsSGIX_fnptr = &glStopInstrumentsSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glStopInstrumentsSGIX_Lazy(int marker)
        {
            _glStopInstrumentsSGIX_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glStopInstrumentsSGIX");
            _glStopInstrumentsSGIX_fnptr(marker);
        }
        
        /// <summary><b>[entry point: <c>glStringMarkerGREMEDY</c>]</b></summary>
        public static delegate* unmanaged<int, void*, void> _glStringMarkerGREMEDY_fnptr = &glStringMarkerGREMEDY_Lazy;
        [UnmanagedCallersOnly]
        private static void glStringMarkerGREMEDY_Lazy(int len, void* str)
        {
            _glStringMarkerGREMEDY_fnptr = (delegate* unmanaged<int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glStringMarkerGREMEDY");
            _glStringMarkerGREMEDY_fnptr(len, str);
        }
        
        /// <summary><b>[entry point: <c>glSubpixelPrecisionBiasNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glSubpixelPrecisionBiasNV_fnptr = &glSubpixelPrecisionBiasNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glSubpixelPrecisionBiasNV_Lazy(uint xbits, uint ybits)
        {
            _glSubpixelPrecisionBiasNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSubpixelPrecisionBiasNV");
            _glSubpixelPrecisionBiasNV_fnptr(xbits, ybits);
        }
        
        /// <summary><b>[entry point: <c>glSwizzleEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, uint, void> _glSwizzleEXT_fnptr = &glSwizzleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glSwizzleEXT_Lazy(uint res, uint input, uint outX, uint outY, uint outZ, uint outW)
        {
            _glSwizzleEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSwizzleEXT");
            _glSwizzleEXT_fnptr(res, input, outX, outY, outZ, outW);
        }
        
        /// <summary><b>[entry point: <c>glSyncTextureINTEL</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glSyncTextureINTEL_fnptr = &glSyncTextureINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glSyncTextureINTEL_Lazy(int texture)
        {
            _glSyncTextureINTEL_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glSyncTextureINTEL");
            _glSyncTextureINTEL_fnptr(texture);
        }
        
        /// <summary><b>[entry point: <c>glTagSampleBufferSGIX</c>]</b></summary>
        public static delegate* unmanaged<void> _glTagSampleBufferSGIX_fnptr = &glTagSampleBufferSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void glTagSampleBufferSGIX_Lazy()
        {
            _glTagSampleBufferSGIX_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glTagSampleBufferSGIX");
            _glTagSampleBufferSGIX_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glTangent3bEXT</c>]</b></summary>
        public static delegate* unmanaged<sbyte, sbyte, sbyte, void> _glTangent3bEXT_fnptr = &glTangent3bEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTangent3bEXT_Lazy(sbyte tx, sbyte ty, sbyte tz)
        {
            _glTangent3bEXT_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3bEXT");
            _glTangent3bEXT_fnptr(tx, ty, tz);
        }
        
        /// <summary><b>[entry point: <c>glTangent3bvEXT</c>]</b></summary>
        public static delegate* unmanaged<sbyte*, void> _glTangent3bvEXT_fnptr = &glTangent3bvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTangent3bvEXT_Lazy(sbyte* v)
        {
            _glTangent3bvEXT_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3bvEXT");
            _glTangent3bvEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTangent3dEXT</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, void> _glTangent3dEXT_fnptr = &glTangent3dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTangent3dEXT_Lazy(double tx, double ty, double tz)
        {
            _glTangent3dEXT_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3dEXT");
            _glTangent3dEXT_fnptr(tx, ty, tz);
        }
        
        /// <summary><b>[entry point: <c>glTangent3dvEXT</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glTangent3dvEXT_fnptr = &glTangent3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTangent3dvEXT_Lazy(double* v)
        {
            _glTangent3dvEXT_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3dvEXT");
            _glTangent3dvEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTangent3fEXT</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glTangent3fEXT_fnptr = &glTangent3fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTangent3fEXT_Lazy(float tx, float ty, float tz)
        {
            _glTangent3fEXT_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3fEXT");
            _glTangent3fEXT_fnptr(tx, ty, tz);
        }
        
        /// <summary><b>[entry point: <c>glTangent3fvEXT</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glTangent3fvEXT_fnptr = &glTangent3fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTangent3fvEXT_Lazy(float* v)
        {
            _glTangent3fvEXT_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3fvEXT");
            _glTangent3fvEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTangent3iEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glTangent3iEXT_fnptr = &glTangent3iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTangent3iEXT_Lazy(int tx, int ty, int tz)
        {
            _glTangent3iEXT_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3iEXT");
            _glTangent3iEXT_fnptr(tx, ty, tz);
        }
        
        /// <summary><b>[entry point: <c>glTangent3ivEXT</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glTangent3ivEXT_fnptr = &glTangent3ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTangent3ivEXT_Lazy(int* v)
        {
            _glTangent3ivEXT_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3ivEXT");
            _glTangent3ivEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTangent3sEXT</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, void> _glTangent3sEXT_fnptr = &glTangent3sEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTangent3sEXT_Lazy(short tx, short ty, short tz)
        {
            _glTangent3sEXT_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3sEXT");
            _glTangent3sEXT_fnptr(tx, ty, tz);
        }
        
        /// <summary><b>[entry point: <c>glTangent3svEXT</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glTangent3svEXT_fnptr = &glTangent3svEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTangent3svEXT_Lazy(short* v)
        {
            _glTangent3svEXT_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3svEXT");
            _glTangent3svEXT_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTangentPointerEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void*, void> _glTangentPointerEXT_fnptr = &glTangentPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTangentPointerEXT_Lazy(uint type, int stride, void* pointer)
        {
            _glTangentPointerEXT_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTangentPointerEXT");
            _glTangentPointerEXT_fnptr(type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glTbufferMask3DFX</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glTbufferMask3DFX_fnptr = &glTbufferMask3DFX_Lazy;
        [UnmanagedCallersOnly]
        private static void glTbufferMask3DFX_Lazy(uint mask)
        {
            _glTbufferMask3DFX_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glTbufferMask3DFX");
            _glTbufferMask3DFX_fnptr(mask);
        }
        
        /// <summary><b>[entry point: <c>glTessellationFactorAMD</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glTessellationFactorAMD_fnptr = &glTessellationFactorAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glTessellationFactorAMD_Lazy(float factor)
        {
            _glTessellationFactorAMD_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glTessellationFactorAMD");
            _glTessellationFactorAMD_fnptr(factor);
        }
        
        /// <summary><b>[entry point: <c>glTessellationModeAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glTessellationModeAMD_fnptr = &glTessellationModeAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glTessellationModeAMD_Lazy(uint mode)
        {
            _glTessellationModeAMD_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glTessellationModeAMD");
            _glTessellationModeAMD_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glTestFenceAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glTestFenceAPPLE_fnptr = &glTestFenceAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static byte glTestFenceAPPLE_Lazy(uint fence)
        {
            _glTestFenceAPPLE_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glTestFenceAPPLE");
            return _glTestFenceAPPLE_fnptr(fence);
        }
        
        /// <summary><b>[entry point: <c>glTestFenceNV</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glTestFenceNV_fnptr = &glTestFenceNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glTestFenceNV_Lazy(uint fence)
        {
            _glTestFenceNV_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glTestFenceNV");
            return _glTestFenceNV_fnptr(fence);
        }
        
        /// <summary><b>[entry point: <c>glTestObjectAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte> _glTestObjectAPPLE_fnptr = &glTestObjectAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static byte glTestObjectAPPLE_Lazy(uint obj, uint name)
        {
            _glTestObjectAPPLE_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glTestObjectAPPLE");
            return _glTestObjectAPPLE_fnptr(obj, name);
        }
        
        /// <summary><b>[entry point: <c>glTexAttachMemoryNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, ulong, void> _glTexAttachMemoryNV_fnptr = &glTexAttachMemoryNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexAttachMemoryNV_Lazy(uint target, uint memory, ulong offset)
        {
            _glTexAttachMemoryNV_fnptr = (delegate* unmanaged<uint, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTexAttachMemoryNV");
            _glTexAttachMemoryNV_fnptr(target, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glTexBuffer</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glTexBuffer_fnptr = &glTexBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexBuffer_Lazy(uint target, uint internalformat, int buffer)
        {
            _glTexBuffer_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexBuffer");
            _glTexBuffer_fnptr(target, internalformat, buffer);
        }
        
        /// <summary><b>[entry point: <c>glTexBufferARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glTexBufferARB_fnptr = &glTexBufferARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexBufferARB_Lazy(uint target, uint internalformat, int buffer)
        {
            _glTexBufferARB_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexBufferARB");
            _glTexBufferARB_fnptr(target, internalformat, buffer);
        }
        
        /// <summary><b>[entry point: <c>glTexBufferEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glTexBufferEXT_fnptr = &glTexBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexBufferEXT_Lazy(uint target, uint internalformat, int buffer)
        {
            _glTexBufferEXT_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexBufferEXT");
            _glTexBufferEXT_fnptr(target, internalformat, buffer);
        }
        
        /// <summary><b>[entry point: <c>glTexBufferOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glTexBufferOES_fnptr = &glTexBufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexBufferOES_Lazy(uint target, uint internalformat, int buffer)
        {
            _glTexBufferOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexBufferOES");
            _glTexBufferOES_fnptr(target, internalformat, buffer);
        }
        
        /// <summary><b>[entry point: <c>glTexBufferRange</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, IntPtr, nint, void> _glTexBufferRange_fnptr = &glTexBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexBufferRange_Lazy(uint target, uint internalformat, int buffer, IntPtr offset, nint size)
        {
            _glTexBufferRange_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glTexBufferRange");
            _glTexBufferRange_fnptr(target, internalformat, buffer, offset, size);
        }
        
        /// <summary><b>[entry point: <c>glTexBufferRangeEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, IntPtr, nint, void> _glTexBufferRangeEXT_fnptr = &glTexBufferRangeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexBufferRangeEXT_Lazy(uint target, uint internalformat, int buffer, IntPtr offset, nint size)
        {
            _glTexBufferRangeEXT_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glTexBufferRangeEXT");
            _glTexBufferRangeEXT_fnptr(target, internalformat, buffer, offset, size);
        }
        
        /// <summary><b>[entry point: <c>glTexBufferRangeOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, IntPtr, nint, void> _glTexBufferRangeOES_fnptr = &glTexBufferRangeOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexBufferRangeOES_Lazy(uint target, uint internalformat, int buffer, IntPtr offset, nint size)
        {
            _glTexBufferRangeOES_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glTexBufferRangeOES");
            _glTexBufferRangeOES_fnptr(target, internalformat, buffer, offset, size);
        }
        
        /// <summary><b>[entry point: <c>glTexBumpParameterfvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glTexBumpParameterfvATI_fnptr = &glTexBumpParameterfvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexBumpParameterfvATI_Lazy(uint pname, float* param)
        {
            _glTexBumpParameterfvATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexBumpParameterfvATI");
            _glTexBumpParameterfvATI_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexBumpParameterivATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glTexBumpParameterivATI_fnptr = &glTexBumpParameterivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexBumpParameterivATI_Lazy(uint pname, int* param)
        {
            _glTexBumpParameterivATI_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexBumpParameterivATI");
            _glTexBumpParameterivATI_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord1bOES</c>]</b></summary>
        public static delegate* unmanaged<sbyte, void> _glTexCoord1bOES_fnptr = &glTexCoord1bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord1bOES_Lazy(sbyte s)
        {
            _glTexCoord1bOES_fnptr = (delegate* unmanaged<sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1bOES");
            _glTexCoord1bOES_fnptr(s);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord1bvOES</c>]</b></summary>
        public static delegate* unmanaged<sbyte*, void> _glTexCoord1bvOES_fnptr = &glTexCoord1bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord1bvOES_Lazy(sbyte* coords)
        {
            _glTexCoord1bvOES_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1bvOES");
            _glTexCoord1bvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord1d</c>]</b></summary>
        public static delegate* unmanaged<double, void> _glTexCoord1d_fnptr = &glTexCoord1d_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord1d_Lazy(double s)
        {
            _glTexCoord1d_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1d");
            _glTexCoord1d_fnptr(s);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord1dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glTexCoord1dv_fnptr = &glTexCoord1dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord1dv_Lazy(double* v)
        {
            _glTexCoord1dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1dv");
            _glTexCoord1dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord1f</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glTexCoord1f_fnptr = &glTexCoord1f_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord1f_Lazy(float s)
        {
            _glTexCoord1f_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1f");
            _glTexCoord1f_fnptr(s);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord1fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glTexCoord1fv_fnptr = &glTexCoord1fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord1fv_Lazy(float* v)
        {
            _glTexCoord1fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1fv");
            _glTexCoord1fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord1hNV</c>]</b></summary>
        public static delegate* unmanaged<Half, void> _glTexCoord1hNV_fnptr = &glTexCoord1hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord1hNV_Lazy(Half s)
        {
            _glTexCoord1hNV_fnptr = (delegate* unmanaged<Half, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1hNV");
            _glTexCoord1hNV_fnptr(s);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord1hvNV</c>]</b></summary>
        public static delegate* unmanaged<Half*, void> _glTexCoord1hvNV_fnptr = &glTexCoord1hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord1hvNV_Lazy(Half* v)
        {
            _glTexCoord1hvNV_fnptr = (delegate* unmanaged<Half*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1hvNV");
            _glTexCoord1hvNV_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord1i</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glTexCoord1i_fnptr = &glTexCoord1i_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord1i_Lazy(int s)
        {
            _glTexCoord1i_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1i");
            _glTexCoord1i_fnptr(s);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord1iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glTexCoord1iv_fnptr = &glTexCoord1iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord1iv_Lazy(int* v)
        {
            _glTexCoord1iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1iv");
            _glTexCoord1iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord1s</c>]</b></summary>
        public static delegate* unmanaged<short, void> _glTexCoord1s_fnptr = &glTexCoord1s_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord1s_Lazy(short s)
        {
            _glTexCoord1s_fnptr = (delegate* unmanaged<short, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1s");
            _glTexCoord1s_fnptr(s);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord1sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glTexCoord1sv_fnptr = &glTexCoord1sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord1sv_Lazy(short* v)
        {
            _glTexCoord1sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1sv");
            _glTexCoord1sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord1xOES</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glTexCoord1xOES_fnptr = &glTexCoord1xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord1xOES_Lazy(int s)
        {
            _glTexCoord1xOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1xOES");
            _glTexCoord1xOES_fnptr(s);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord1xvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glTexCoord1xvOES_fnptr = &glTexCoord1xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord1xvOES_Lazy(int* coords)
        {
            _glTexCoord1xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1xvOES");
            _glTexCoord1xvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2bOES</c>]</b></summary>
        public static delegate* unmanaged<sbyte, sbyte, void> _glTexCoord2bOES_fnptr = &glTexCoord2bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2bOES_Lazy(sbyte s, sbyte t)
        {
            _glTexCoord2bOES_fnptr = (delegate* unmanaged<sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2bOES");
            _glTexCoord2bOES_fnptr(s, t);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2bvOES</c>]</b></summary>
        public static delegate* unmanaged<sbyte*, void> _glTexCoord2bvOES_fnptr = &glTexCoord2bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2bvOES_Lazy(sbyte* coords)
        {
            _glTexCoord2bvOES_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2bvOES");
            _glTexCoord2bvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2d</c>]</b></summary>
        public static delegate* unmanaged<double, double, void> _glTexCoord2d_fnptr = &glTexCoord2d_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2d_Lazy(double s, double t)
        {
            _glTexCoord2d_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2d");
            _glTexCoord2d_fnptr(s, t);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glTexCoord2dv_fnptr = &glTexCoord2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2dv_Lazy(double* v)
        {
            _glTexCoord2dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2dv");
            _glTexCoord2dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2f</c>]</b></summary>
        public static delegate* unmanaged<float, float, void> _glTexCoord2f_fnptr = &glTexCoord2f_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2f_Lazy(float s, float t)
        {
            _glTexCoord2f_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2f");
            _glTexCoord2f_fnptr(s, t);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2fColor3fVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, float, float, void> _glTexCoord2fColor3fVertex3fSUN_fnptr = &glTexCoord2fColor3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2fColor3fVertex3fSUN_Lazy(float s, float t, float r, float g, float b, float x, float y, float z)
        {
            _glTexCoord2fColor3fVertex3fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fColor3fVertex3fSUN");
            _glTexCoord2fColor3fVertex3fSUN_fnptr(s, t, r, g, b, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2fColor3fVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<float*, float*, float*, void> _glTexCoord2fColor3fVertex3fvSUN_fnptr = &glTexCoord2fColor3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2fColor3fVertex3fvSUN_Lazy(float* tc, float* c, float* v)
        {
            _glTexCoord2fColor3fVertex3fvSUN_fnptr = (delegate* unmanaged<float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fColor3fVertex3fvSUN");
            _glTexCoord2fColor3fVertex3fvSUN_fnptr(tc, c, v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2fColor4fNormal3fVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, float, float, void> _glTexCoord2fColor4fNormal3fVertex3fSUN_fnptr = &glTexCoord2fColor4fNormal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2fColor4fNormal3fVertex3fSUN_Lazy(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            _glTexCoord2fColor4fNormal3fVertex3fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fColor4fNormal3fVertex3fSUN");
            _glTexCoord2fColor4fNormal3fVertex3fSUN_fnptr(s, t, r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2fColor4fNormal3fVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<float*, float*, float*, float*, void> _glTexCoord2fColor4fNormal3fVertex3fvSUN_fnptr = &glTexCoord2fColor4fNormal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2fColor4fNormal3fVertex3fvSUN_Lazy(float* tc, float* c, float* n, float* v)
        {
            _glTexCoord2fColor4fNormal3fVertex3fvSUN_fnptr = (delegate* unmanaged<float*, float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fColor4fNormal3fVertex3fvSUN");
            _glTexCoord2fColor4fNormal3fVertex3fvSUN_fnptr(tc, c, n, v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2fColor4ubVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<float, float, byte, byte, byte, byte, float, float, float, void> _glTexCoord2fColor4ubVertex3fSUN_fnptr = &glTexCoord2fColor4ubVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2fColor4ubVertex3fSUN_Lazy(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z)
        {
            _glTexCoord2fColor4ubVertex3fSUN_fnptr = (delegate* unmanaged<float, float, byte, byte, byte, byte, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fColor4ubVertex3fSUN");
            _glTexCoord2fColor4ubVertex3fSUN_fnptr(s, t, r, g, b, a, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2fColor4ubVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<float*, byte*, float*, void> _glTexCoord2fColor4ubVertex3fvSUN_fnptr = &glTexCoord2fColor4ubVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2fColor4ubVertex3fvSUN_Lazy(float* tc, byte* c, float* v)
        {
            _glTexCoord2fColor4ubVertex3fvSUN_fnptr = (delegate* unmanaged<float*, byte*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fColor4ubVertex3fvSUN");
            _glTexCoord2fColor4ubVertex3fvSUN_fnptr(tc, c, v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2fNormal3fVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, float, float, void> _glTexCoord2fNormal3fVertex3fSUN_fnptr = &glTexCoord2fNormal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2fNormal3fVertex3fSUN_Lazy(float s, float t, float nx, float ny, float nz, float x, float y, float z)
        {
            _glTexCoord2fNormal3fVertex3fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fNormal3fVertex3fSUN");
            _glTexCoord2fNormal3fVertex3fSUN_fnptr(s, t, nx, ny, nz, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2fNormal3fVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<float*, float*, float*, void> _glTexCoord2fNormal3fVertex3fvSUN_fnptr = &glTexCoord2fNormal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2fNormal3fVertex3fvSUN_Lazy(float* tc, float* n, float* v)
        {
            _glTexCoord2fNormal3fVertex3fvSUN_fnptr = (delegate* unmanaged<float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fNormal3fVertex3fvSUN");
            _glTexCoord2fNormal3fVertex3fvSUN_fnptr(tc, n, v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glTexCoord2fv_fnptr = &glTexCoord2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2fv_Lazy(float* v)
        {
            _glTexCoord2fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fv");
            _glTexCoord2fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2fVertex3fSUN</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, void> _glTexCoord2fVertex3fSUN_fnptr = &glTexCoord2fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2fVertex3fSUN_Lazy(float s, float t, float x, float y, float z)
        {
            _glTexCoord2fVertex3fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fVertex3fSUN");
            _glTexCoord2fVertex3fSUN_fnptr(s, t, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2fVertex3fvSUN</c>]</b></summary>
        public static delegate* unmanaged<float*, float*, void> _glTexCoord2fVertex3fvSUN_fnptr = &glTexCoord2fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2fVertex3fvSUN_Lazy(float* tc, float* v)
        {
            _glTexCoord2fVertex3fvSUN_fnptr = (delegate* unmanaged<float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fVertex3fvSUN");
            _glTexCoord2fVertex3fvSUN_fnptr(tc, v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2hNV</c>]</b></summary>
        public static delegate* unmanaged<Half, Half, void> _glTexCoord2hNV_fnptr = &glTexCoord2hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2hNV_Lazy(Half s, Half t)
        {
            _glTexCoord2hNV_fnptr = (delegate* unmanaged<Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2hNV");
            _glTexCoord2hNV_fnptr(s, t);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2hvNV</c>]</b></summary>
        public static delegate* unmanaged<Half*, void> _glTexCoord2hvNV_fnptr = &glTexCoord2hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2hvNV_Lazy(Half* v)
        {
            _glTexCoord2hvNV_fnptr = (delegate* unmanaged<Half*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2hvNV");
            _glTexCoord2hvNV_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2i</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glTexCoord2i_fnptr = &glTexCoord2i_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2i_Lazy(int s, int t)
        {
            _glTexCoord2i_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2i");
            _glTexCoord2i_fnptr(s, t);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glTexCoord2iv_fnptr = &glTexCoord2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2iv_Lazy(int* v)
        {
            _glTexCoord2iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2iv");
            _glTexCoord2iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2s</c>]</b></summary>
        public static delegate* unmanaged<short, short, void> _glTexCoord2s_fnptr = &glTexCoord2s_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2s_Lazy(short s, short t)
        {
            _glTexCoord2s_fnptr = (delegate* unmanaged<short, short, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2s");
            _glTexCoord2s_fnptr(s, t);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glTexCoord2sv_fnptr = &glTexCoord2sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2sv_Lazy(short* v)
        {
            _glTexCoord2sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2sv");
            _glTexCoord2sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2xOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glTexCoord2xOES_fnptr = &glTexCoord2xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2xOES_Lazy(int s, int t)
        {
            _glTexCoord2xOES_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2xOES");
            _glTexCoord2xOES_fnptr(s, t);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord2xvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glTexCoord2xvOES_fnptr = &glTexCoord2xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord2xvOES_Lazy(int* coords)
        {
            _glTexCoord2xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2xvOES");
            _glTexCoord2xvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord3bOES</c>]</b></summary>
        public static delegate* unmanaged<sbyte, sbyte, sbyte, void> _glTexCoord3bOES_fnptr = &glTexCoord3bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord3bOES_Lazy(sbyte s, sbyte t, sbyte r)
        {
            _glTexCoord3bOES_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3bOES");
            _glTexCoord3bOES_fnptr(s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord3bvOES</c>]</b></summary>
        public static delegate* unmanaged<sbyte*, void> _glTexCoord3bvOES_fnptr = &glTexCoord3bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord3bvOES_Lazy(sbyte* coords)
        {
            _glTexCoord3bvOES_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3bvOES");
            _glTexCoord3bvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord3d</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, void> _glTexCoord3d_fnptr = &glTexCoord3d_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord3d_Lazy(double s, double t, double r)
        {
            _glTexCoord3d_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3d");
            _glTexCoord3d_fnptr(s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord3dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glTexCoord3dv_fnptr = &glTexCoord3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord3dv_Lazy(double* v)
        {
            _glTexCoord3dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3dv");
            _glTexCoord3dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord3f</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glTexCoord3f_fnptr = &glTexCoord3f_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord3f_Lazy(float s, float t, float r)
        {
            _glTexCoord3f_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3f");
            _glTexCoord3f_fnptr(s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord3fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glTexCoord3fv_fnptr = &glTexCoord3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord3fv_Lazy(float* v)
        {
            _glTexCoord3fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3fv");
            _glTexCoord3fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord3hNV</c>]</b></summary>
        public static delegate* unmanaged<Half, Half, Half, void> _glTexCoord3hNV_fnptr = &glTexCoord3hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord3hNV_Lazy(Half s, Half t, Half r)
        {
            _glTexCoord3hNV_fnptr = (delegate* unmanaged<Half, Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3hNV");
            _glTexCoord3hNV_fnptr(s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord3hvNV</c>]</b></summary>
        public static delegate* unmanaged<Half*, void> _glTexCoord3hvNV_fnptr = &glTexCoord3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord3hvNV_Lazy(Half* v)
        {
            _glTexCoord3hvNV_fnptr = (delegate* unmanaged<Half*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3hvNV");
            _glTexCoord3hvNV_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord3i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glTexCoord3i_fnptr = &glTexCoord3i_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord3i_Lazy(int s, int t, int r)
        {
            _glTexCoord3i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3i");
            _glTexCoord3i_fnptr(s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord3iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glTexCoord3iv_fnptr = &glTexCoord3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord3iv_Lazy(int* v)
        {
            _glTexCoord3iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3iv");
            _glTexCoord3iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord3s</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, void> _glTexCoord3s_fnptr = &glTexCoord3s_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord3s_Lazy(short s, short t, short r)
        {
            _glTexCoord3s_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3s");
            _glTexCoord3s_fnptr(s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord3sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glTexCoord3sv_fnptr = &glTexCoord3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord3sv_Lazy(short* v)
        {
            _glTexCoord3sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3sv");
            _glTexCoord3sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord3xOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glTexCoord3xOES_fnptr = &glTexCoord3xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord3xOES_Lazy(int s, int t, int r)
        {
            _glTexCoord3xOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3xOES");
            _glTexCoord3xOES_fnptr(s, t, r);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord3xvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glTexCoord3xvOES_fnptr = &glTexCoord3xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord3xvOES_Lazy(int* coords)
        {
            _glTexCoord3xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3xvOES");
            _glTexCoord3xvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4bOES</c>]</b></summary>
        public static delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void> _glTexCoord4bOES_fnptr = &glTexCoord4bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4bOES_Lazy(sbyte s, sbyte t, sbyte r, sbyte q)
        {
            _glTexCoord4bOES_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4bOES");
            _glTexCoord4bOES_fnptr(s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4bvOES</c>]</b></summary>
        public static delegate* unmanaged<sbyte*, void> _glTexCoord4bvOES_fnptr = &glTexCoord4bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4bvOES_Lazy(sbyte* coords)
        {
            _glTexCoord4bvOES_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4bvOES");
            _glTexCoord4bvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4d</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, double, void> _glTexCoord4d_fnptr = &glTexCoord4d_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4d_Lazy(double s, double t, double r, double q)
        {
            _glTexCoord4d_fnptr = (delegate* unmanaged<double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4d");
            _glTexCoord4d_fnptr(s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glTexCoord4dv_fnptr = &glTexCoord4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4dv_Lazy(double* v)
        {
            _glTexCoord4dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4dv");
            _glTexCoord4dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4f</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, void> _glTexCoord4f_fnptr = &glTexCoord4f_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4f_Lazy(float s, float t, float r, float q)
        {
            _glTexCoord4f_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4f");
            _glTexCoord4f_fnptr(s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4fColor4fNormal3fVertex4fSUN</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, void> _glTexCoord4fColor4fNormal3fVertex4fSUN_fnptr = &glTexCoord4fColor4fNormal3fVertex4fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4fColor4fNormal3fVertex4fSUN_Lazy(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w)
        {
            _glTexCoord4fColor4fNormal3fVertex4fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4fColor4fNormal3fVertex4fSUN");
            _glTexCoord4fColor4fNormal3fVertex4fSUN_fnptr(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4fColor4fNormal3fVertex4fvSUN</c>]</b></summary>
        public static delegate* unmanaged<float*, float*, float*, float*, void> _glTexCoord4fColor4fNormal3fVertex4fvSUN_fnptr = &glTexCoord4fColor4fNormal3fVertex4fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4fColor4fNormal3fVertex4fvSUN_Lazy(float* tc, float* c, float* n, float* v)
        {
            _glTexCoord4fColor4fNormal3fVertex4fvSUN_fnptr = (delegate* unmanaged<float*, float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4fColor4fNormal3fVertex4fvSUN");
            _glTexCoord4fColor4fNormal3fVertex4fvSUN_fnptr(tc, c, n, v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glTexCoord4fv_fnptr = &glTexCoord4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4fv_Lazy(float* v)
        {
            _glTexCoord4fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4fv");
            _glTexCoord4fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4fVertex4fSUN</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, float, float, float, float, void> _glTexCoord4fVertex4fSUN_fnptr = &glTexCoord4fVertex4fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4fVertex4fSUN_Lazy(float s, float t, float p, float q, float x, float y, float z, float w)
        {
            _glTexCoord4fVertex4fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4fVertex4fSUN");
            _glTexCoord4fVertex4fSUN_fnptr(s, t, p, q, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4fVertex4fvSUN</c>]</b></summary>
        public static delegate* unmanaged<float*, float*, void> _glTexCoord4fVertex4fvSUN_fnptr = &glTexCoord4fVertex4fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4fVertex4fvSUN_Lazy(float* tc, float* v)
        {
            _glTexCoord4fVertex4fvSUN_fnptr = (delegate* unmanaged<float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4fVertex4fvSUN");
            _glTexCoord4fVertex4fvSUN_fnptr(tc, v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4hNV</c>]</b></summary>
        public static delegate* unmanaged<Half, Half, Half, Half, void> _glTexCoord4hNV_fnptr = &glTexCoord4hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4hNV_Lazy(Half s, Half t, Half r, Half q)
        {
            _glTexCoord4hNV_fnptr = (delegate* unmanaged<Half, Half, Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4hNV");
            _glTexCoord4hNV_fnptr(s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4hvNV</c>]</b></summary>
        public static delegate* unmanaged<Half*, void> _glTexCoord4hvNV_fnptr = &glTexCoord4hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4hvNV_Lazy(Half* v)
        {
            _glTexCoord4hvNV_fnptr = (delegate* unmanaged<Half*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4hvNV");
            _glTexCoord4hvNV_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glTexCoord4i_fnptr = &glTexCoord4i_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4i_Lazy(int s, int t, int r, int q)
        {
            _glTexCoord4i_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4i");
            _glTexCoord4i_fnptr(s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glTexCoord4iv_fnptr = &glTexCoord4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4iv_Lazy(int* v)
        {
            _glTexCoord4iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4iv");
            _glTexCoord4iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4s</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, short, void> _glTexCoord4s_fnptr = &glTexCoord4s_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4s_Lazy(short s, short t, short r, short q)
        {
            _glTexCoord4s_fnptr = (delegate* unmanaged<short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4s");
            _glTexCoord4s_fnptr(s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glTexCoord4sv_fnptr = &glTexCoord4sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4sv_Lazy(short* v)
        {
            _glTexCoord4sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4sv");
            _glTexCoord4sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4xOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glTexCoord4xOES_fnptr = &glTexCoord4xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4xOES_Lazy(int s, int t, int r, int q)
        {
            _glTexCoord4xOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4xOES");
            _glTexCoord4xOES_fnptr(s, t, r, q);
        }
        
        /// <summary><b>[entry point: <c>glTexCoord4xvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glTexCoord4xvOES_fnptr = &glTexCoord4xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoord4xvOES_Lazy(int* coords)
        {
            _glTexCoord4xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4xvOES");
            _glTexCoord4xvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoordFormatNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glTexCoordFormatNV_fnptr = &glTexCoordFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoordFormatNV_Lazy(int size, uint type, int stride)
        {
            _glTexCoordFormatNV_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordFormatNV");
            _glTexCoordFormatNV_fnptr(size, type, stride);
        }
        
        /// <summary><b>[entry point: <c>glTexCoordP1ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glTexCoordP1ui_fnptr = &glTexCoordP1ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoordP1ui_Lazy(uint type, uint coords)
        {
            _glTexCoordP1ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP1ui");
            _glTexCoordP1ui_fnptr(type, coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoordP1uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glTexCoordP1uiv_fnptr = &glTexCoordP1uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoordP1uiv_Lazy(uint type, uint* coords)
        {
            _glTexCoordP1uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP1uiv");
            _glTexCoordP1uiv_fnptr(type, coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoordP2ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glTexCoordP2ui_fnptr = &glTexCoordP2ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoordP2ui_Lazy(uint type, uint coords)
        {
            _glTexCoordP2ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP2ui");
            _glTexCoordP2ui_fnptr(type, coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoordP2uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glTexCoordP2uiv_fnptr = &glTexCoordP2uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoordP2uiv_Lazy(uint type, uint* coords)
        {
            _glTexCoordP2uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP2uiv");
            _glTexCoordP2uiv_fnptr(type, coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoordP3ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glTexCoordP3ui_fnptr = &glTexCoordP3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoordP3ui_Lazy(uint type, uint coords)
        {
            _glTexCoordP3ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP3ui");
            _glTexCoordP3ui_fnptr(type, coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoordP3uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glTexCoordP3uiv_fnptr = &glTexCoordP3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoordP3uiv_Lazy(uint type, uint* coords)
        {
            _glTexCoordP3uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP3uiv");
            _glTexCoordP3uiv_fnptr(type, coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoordP4ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glTexCoordP4ui_fnptr = &glTexCoordP4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoordP4ui_Lazy(uint type, uint coords)
        {
            _glTexCoordP4ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP4ui");
            _glTexCoordP4ui_fnptr(type, coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoordP4uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glTexCoordP4uiv_fnptr = &glTexCoordP4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoordP4uiv_Lazy(uint type, uint* coords)
        {
            _glTexCoordP4uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP4uiv");
            _glTexCoordP4uiv_fnptr(type, coords);
        }
        
        /// <summary><b>[entry point: <c>glTexCoordPointer</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void*, void> _glTexCoordPointer_fnptr = &glTexCoordPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoordPointer_Lazy(int size, uint type, int stride, void* pointer)
        {
            _glTexCoordPointer_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordPointer");
            _glTexCoordPointer_fnptr(size, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glTexCoordPointerEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, void*, void> _glTexCoordPointerEXT_fnptr = &glTexCoordPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoordPointerEXT_Lazy(int size, uint type, int stride, int count, void* pointer)
        {
            _glTexCoordPointerEXT_fnptr = (delegate* unmanaged<int, uint, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordPointerEXT");
            _glTexCoordPointerEXT_fnptr(size, type, stride, count, pointer);
        }
        
        /// <summary><b>[entry point: <c>glTexCoordPointerListIBM</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void**, int, void> _glTexCoordPointerListIBM_fnptr = &glTexCoordPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoordPointerListIBM_Lazy(int size, uint type, int stride, void** pointer, int ptrstride)
        {
            _glTexCoordPointerListIBM_fnptr = (delegate* unmanaged<int, uint, int, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordPointerListIBM");
            _glTexCoordPointerListIBM_fnptr(size, type, stride, pointer, ptrstride);
        }
        
        /// <summary><b>[entry point: <c>glTexCoordPointervINTEL</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void**, void> _glTexCoordPointervINTEL_fnptr = &glTexCoordPointervINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexCoordPointervINTEL_Lazy(int size, uint type, void** pointer)
        {
            _glTexCoordPointervINTEL_fnptr = (delegate* unmanaged<int, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordPointervINTEL");
            _glTexCoordPointervINTEL_fnptr(size, type, pointer);
        }
        
        /// <summary><b>[entry point: <c>glTexEnvf</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, void> _glTexEnvf_fnptr = &glTexEnvf_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexEnvf_Lazy(uint target, uint pname, float param)
        {
            _glTexEnvf_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnvf");
            _glTexEnvf_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexEnvfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glTexEnvfv_fnptr = &glTexEnvfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexEnvfv_Lazy(uint target, uint pname, float* parameters)
        {
            _glTexEnvfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnvfv");
            _glTexEnvfv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexEnvi</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glTexEnvi_fnptr = &glTexEnvi_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexEnvi_Lazy(uint target, uint pname, int param)
        {
            _glTexEnvi_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnvi");
            _glTexEnvi_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexEnviv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glTexEnviv_fnptr = &glTexEnviv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexEnviv_Lazy(uint target, uint pname, int* parameters)
        {
            _glTexEnviv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnviv");
            _glTexEnviv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexEnvx</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glTexEnvx_fnptr = &glTexEnvx_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexEnvx_Lazy(uint target, uint pname, int param)
        {
            _glTexEnvx_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnvx");
            _glTexEnvx_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexEnvxOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glTexEnvxOES_fnptr = &glTexEnvxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexEnvxOES_Lazy(uint target, uint pname, int param)
        {
            _glTexEnvxOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnvxOES");
            _glTexEnvxOES_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexEnvxv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glTexEnvxv_fnptr = &glTexEnvxv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexEnvxv_Lazy(uint target, uint pname, int* parameters)
        {
            _glTexEnvxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnvxv");
            _glTexEnvxv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexEnvxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glTexEnvxvOES_fnptr = &glTexEnvxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexEnvxvOES_Lazy(uint target, uint pname, int* parameters)
        {
            _glTexEnvxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnvxvOES");
            _glTexEnvxvOES_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexEstimateMotionQCOM</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glTexEstimateMotionQCOM_fnptr = &glTexEstimateMotionQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexEstimateMotionQCOM_Lazy(int reference, int target, int output)
        {
            _glTexEstimateMotionQCOM_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexEstimateMotionQCOM");
            _glTexEstimateMotionQCOM_fnptr(reference, target, output);
        }
        
        /// <summary><b>[entry point: <c>glTexEstimateMotionRegionsQCOM</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glTexEstimateMotionRegionsQCOM_fnptr = &glTexEstimateMotionRegionsQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexEstimateMotionRegionsQCOM_Lazy(int reference, int target, int output, int mask)
        {
            _glTexEstimateMotionRegionsQCOM_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexEstimateMotionRegionsQCOM");
            _glTexEstimateMotionRegionsQCOM_fnptr(reference, target, output, mask);
        }
        
        /// <summary><b>[entry point: <c>glTexFilterFuncSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, float*, void> _glTexFilterFuncSGIS_fnptr = &glTexFilterFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexFilterFuncSGIS_Lazy(uint target, uint filter, int n, float* weights)
        {
            _glTexFilterFuncSGIS_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexFilterFuncSGIS");
            _glTexFilterFuncSGIS_fnptr(target, filter, n, weights);
        }
        
        /// <summary><b>[entry point: <c>glTexGend</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double, void> _glTexGend_fnptr = &glTexGend_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexGend_Lazy(uint coord, uint pname, double param)
        {
            _glTexGend_fnptr = (delegate* unmanaged<uint, uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glTexGend");
            _glTexGend_fnptr(coord, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexGendv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, double*, void> _glTexGendv_fnptr = &glTexGendv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexGendv_Lazy(uint coord, uint pname, double* parameters)
        {
            _glTexGendv_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glTexGendv");
            _glTexGendv_fnptr(coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexGenf</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, void> _glTexGenf_fnptr = &glTexGenf_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexGenf_Lazy(uint coord, uint pname, float param)
        {
            _glTexGenf_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexGenf");
            _glTexGenf_fnptr(coord, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexGenfOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, void> _glTexGenfOES_fnptr = &glTexGenfOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexGenfOES_Lazy(uint coord, uint pname, float param)
        {
            _glTexGenfOES_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexGenfOES");
            _glTexGenfOES_fnptr(coord, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexGenfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glTexGenfv_fnptr = &glTexGenfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexGenfv_Lazy(uint coord, uint pname, float* parameters)
        {
            _glTexGenfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexGenfv");
            _glTexGenfv_fnptr(coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexGenfvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glTexGenfvOES_fnptr = &glTexGenfvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexGenfvOES_Lazy(uint coord, uint pname, float* parameters)
        {
            _glTexGenfvOES_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexGenfvOES");
            _glTexGenfvOES_fnptr(coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexGeni</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glTexGeni_fnptr = &glTexGeni_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexGeni_Lazy(uint coord, uint pname, int param)
        {
            _glTexGeni_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexGeni");
            _glTexGeni_fnptr(coord, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexGeniOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glTexGeniOES_fnptr = &glTexGeniOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexGeniOES_Lazy(uint coord, uint pname, int param)
        {
            _glTexGeniOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexGeniOES");
            _glTexGeniOES_fnptr(coord, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexGeniv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glTexGeniv_fnptr = &glTexGeniv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexGeniv_Lazy(uint coord, uint pname, int* parameters)
        {
            _glTexGeniv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexGeniv");
            _glTexGeniv_fnptr(coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexGenivOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glTexGenivOES_fnptr = &glTexGenivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexGenivOES_Lazy(uint coord, uint pname, int* parameters)
        {
            _glTexGenivOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexGenivOES");
            _glTexGenivOES_fnptr(coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexGenxOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glTexGenxOES_fnptr = &glTexGenxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexGenxOES_Lazy(uint coord, uint pname, int param)
        {
            _glTexGenxOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexGenxOES");
            _glTexGenxOES_fnptr(coord, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexGenxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glTexGenxvOES_fnptr = &glTexGenxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexGenxvOES_Lazy(uint coord, uint pname, int* parameters)
        {
            _glTexGenxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexGenxvOES");
            _glTexGenxvOES_fnptr(coord, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexImage1D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, uint, uint, void*, void> _glTexImage1D_fnptr = &glTexImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexImage1D_Lazy(uint target, int level, int internalformat, int width, int border, uint format, uint type, void* pixels)
        {
            _glTexImage1D_fnptr = (delegate* unmanaged<uint, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage1D");
            _glTexImage1D_fnptr(target, level, internalformat, width, border, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTexImage2D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void> _glTexImage2D_fnptr = &glTexImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexImage2D_Lazy(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, void* pixels)
        {
            _glTexImage2D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage2D");
            _glTexImage2D_fnptr(target, level, internalformat, width, height, border, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTexImage2DMultisample</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, byte, void> _glTexImage2DMultisample_fnptr = &glTexImage2DMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexImage2DMultisample_Lazy(uint target, int samples, uint internalformat, int width, int height, byte fixedsamplelocations)
        {
            _glTexImage2DMultisample_fnptr = (delegate* unmanaged<uint, int, uint, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage2DMultisample");
            _glTexImage2DMultisample_fnptr(target, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        /// <summary><b>[entry point: <c>glTexImage2DMultisampleCoverageNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, byte, void> _glTexImage2DMultisampleCoverageNV_fnptr = &glTexImage2DMultisampleCoverageNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexImage2DMultisampleCoverageNV_Lazy(uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, byte fixedSampleLocations)
        {
            _glTexImage2DMultisampleCoverageNV_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage2DMultisampleCoverageNV");
            _glTexImage2DMultisampleCoverageNV_fnptr(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        }
        
        /// <summary><b>[entry point: <c>glTexImage3D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, uint, uint, void*, void> _glTexImage3D_fnptr = &glTexImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexImage3D_Lazy(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels)
        {
            _glTexImage3D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage3D");
            _glTexImage3D_fnptr(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTexImage3DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, int, uint, uint, void*, void> _glTexImage3DEXT_fnptr = &glTexImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexImage3DEXT_Lazy(uint target, int level, uint internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels)
        {
            _glTexImage3DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage3DEXT");
            _glTexImage3DEXT_fnptr(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTexImage3DMultisample</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, byte, void> _glTexImage3DMultisample_fnptr = &glTexImage3DMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexImage3DMultisample_Lazy(uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _glTexImage3DMultisample_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage3DMultisample");
            _glTexImage3DMultisample_fnptr(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        /// <summary><b>[entry point: <c>glTexImage3DMultisampleCoverageNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, byte, void> _glTexImage3DMultisampleCoverageNV_fnptr = &glTexImage3DMultisampleCoverageNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexImage3DMultisampleCoverageNV_Lazy(uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations)
        {
            _glTexImage3DMultisampleCoverageNV_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage3DMultisampleCoverageNV");
            _glTexImage3DMultisampleCoverageNV_fnptr(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        }
        
        /// <summary><b>[entry point: <c>glTexImage3DOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, int, uint, uint, void*, void> _glTexImage3DOES_fnptr = &glTexImage3DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexImage3DOES_Lazy(uint target, int level, uint internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels)
        {
            _glTexImage3DOES_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage3DOES");
            _glTexImage3DOES_fnptr(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTexImage4DSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, int, int, uint, uint, void*, void> _glTexImage4DSGIS_fnptr = &glTexImage4DSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexImage4DSGIS_Lazy(uint target, int level, uint internalformat, int width, int height, int depth, int size4d, int border, uint format, uint type, void* pixels)
        {
            _glTexImage4DSGIS_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage4DSGIS");
            _glTexImage4DSGIS_fnptr(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTexPageCommitmentARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, byte, void> _glTexPageCommitmentARB_fnptr = &glTexPageCommitmentARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexPageCommitmentARB_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit)
        {
            _glTexPageCommitmentARB_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexPageCommitmentARB");
            _glTexPageCommitmentARB_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        }
        
        /// <summary><b>[entry point: <c>glTexPageCommitmentEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, byte, void> _glTexPageCommitmentEXT_fnptr = &glTexPageCommitmentEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexPageCommitmentEXT_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit)
        {
            _glTexPageCommitmentEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexPageCommitmentEXT");
            _glTexPageCommitmentEXT_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        }
        
        /// <summary><b>[entry point: <c>glTexPageCommitmentMemNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, uint, ulong, byte, void> _glTexPageCommitmentMemNV_fnptr = &glTexPageCommitmentMemNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexPageCommitmentMemNV_Lazy(uint target, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, byte commit)
        {
            _glTexPageCommitmentMemNV_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, uint, ulong, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexPageCommitmentMemNV");
            _glTexPageCommitmentMemNV_fnptr(target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
        }
        
        /// <summary><b>[entry point: <c>glTexParameterf</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float, void> _glTexParameterf_fnptr = &glTexParameterf_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexParameterf_Lazy(uint target, uint pname, float param)
        {
            _glTexParameterf_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterf");
            _glTexParameterf_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexParameterfv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, float*, void> _glTexParameterfv_fnptr = &glTexParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _glTexParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterfv");
            _glTexParameterfv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexParameteri</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glTexParameteri_fnptr = &glTexParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexParameteri_Lazy(uint target, uint pname, int param)
        {
            _glTexParameteri_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameteri");
            _glTexParameteri_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexParameterIiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glTexParameterIiv_fnptr = &glTexParameterIiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexParameterIiv_Lazy(uint target, uint pname, int* parameters)
        {
            _glTexParameterIiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterIiv");
            _glTexParameterIiv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexParameterIivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glTexParameterIivEXT_fnptr = &glTexParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexParameterIivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _glTexParameterIivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterIivEXT");
            _glTexParameterIivEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexParameterIivOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glTexParameterIivOES_fnptr = &glTexParameterIivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexParameterIivOES_Lazy(uint target, uint pname, int* parameters)
        {
            _glTexParameterIivOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterIivOES");
            _glTexParameterIivOES_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexParameterIuiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glTexParameterIuiv_fnptr = &glTexParameterIuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexParameterIuiv_Lazy(uint target, uint pname, uint* parameters)
        {
            _glTexParameterIuiv_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterIuiv");
            _glTexParameterIuiv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexParameterIuivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glTexParameterIuivEXT_fnptr = &glTexParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexParameterIuivEXT_Lazy(uint target, uint pname, uint* parameters)
        {
            _glTexParameterIuivEXT_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterIuivEXT");
            _glTexParameterIuivEXT_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexParameterIuivOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint*, void> _glTexParameterIuivOES_fnptr = &glTexParameterIuivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexParameterIuivOES_Lazy(uint target, uint pname, uint* parameters)
        {
            _glTexParameterIuivOES_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterIuivOES");
            _glTexParameterIuivOES_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexParameteriv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glTexParameteriv_fnptr = &glTexParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _glTexParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameteriv");
            _glTexParameteriv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexParameterx</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glTexParameterx_fnptr = &glTexParameterx_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexParameterx_Lazy(uint target, uint pname, int param)
        {
            _glTexParameterx_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterx");
            _glTexParameterx_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexParameterxOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glTexParameterxOES_fnptr = &glTexParameterxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexParameterxOES_Lazy(uint target, uint pname, int param)
        {
            _glTexParameterxOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterxOES");
            _glTexParameterxOES_fnptr(target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTexParameterxv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glTexParameterxv_fnptr = &glTexParameterxv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexParameterxv_Lazy(uint target, uint pname, int* parameters)
        {
            _glTexParameterxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterxv");
            _glTexParameterxv_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexParameterxvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, void> _glTexParameterxvOES_fnptr = &glTexParameterxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexParameterxvOES_Lazy(uint target, uint pname, int* parameters)
        {
            _glTexParameterxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterxvOES");
            _glTexParameterxvOES_fnptr(target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTexRenderbufferNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glTexRenderbufferNV_fnptr = &glTexRenderbufferNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexRenderbufferNV_Lazy(uint target, int renderbuffer)
        {
            _glTexRenderbufferNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexRenderbufferNV");
            _glTexRenderbufferNV_fnptr(target, renderbuffer);
        }
        
        /// <summary><b>[entry point: <c>glTexStorage1D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, void> _glTexStorage1D_fnptr = &glTexStorage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorage1D_Lazy(uint target, int levels, uint internalformat, int width)
        {
            _glTexStorage1D_fnptr = (delegate* unmanaged<uint, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage1D");
            _glTexStorage1D_fnptr(target, levels, internalformat, width);
        }
        
        /// <summary><b>[entry point: <c>glTexStorage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, void> _glTexStorage1DEXT_fnptr = &glTexStorage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorage1DEXT_Lazy(uint target, int levels, uint internalformat, int width)
        {
            _glTexStorage1DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage1DEXT");
            _glTexStorage1DEXT_fnptr(target, levels, internalformat, width);
        }
        
        /// <summary><b>[entry point: <c>glTexStorage2D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, void> _glTexStorage2D_fnptr = &glTexStorage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorage2D_Lazy(uint target, int levels, uint internalformat, int width, int height)
        {
            _glTexStorage2D_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage2D");
            _glTexStorage2D_fnptr(target, levels, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glTexStorage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, void> _glTexStorage2DEXT_fnptr = &glTexStorage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorage2DEXT_Lazy(uint target, int levels, uint internalformat, int width, int height)
        {
            _glTexStorage2DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage2DEXT");
            _glTexStorage2DEXT_fnptr(target, levels, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glTexStorage2DMultisample</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, byte, void> _glTexStorage2DMultisample_fnptr = &glTexStorage2DMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorage2DMultisample_Lazy(uint target, int samples, uint internalformat, int width, int height, byte fixedsamplelocations)
        {
            _glTexStorage2DMultisample_fnptr = (delegate* unmanaged<uint, int, uint, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage2DMultisample");
            _glTexStorage2DMultisample_fnptr(target, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        /// <summary><b>[entry point: <c>glTexStorage3D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, void> _glTexStorage3D_fnptr = &glTexStorage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorage3D_Lazy(uint target, int levels, uint internalformat, int width, int height, int depth)
        {
            _glTexStorage3D_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage3D");
            _glTexStorage3D_fnptr(target, levels, internalformat, width, height, depth);
        }
        
        /// <summary><b>[entry point: <c>glTexStorage3DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, void> _glTexStorage3DEXT_fnptr = &glTexStorage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorage3DEXT_Lazy(uint target, int levels, uint internalformat, int width, int height, int depth)
        {
            _glTexStorage3DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage3DEXT");
            _glTexStorage3DEXT_fnptr(target, levels, internalformat, width, height, depth);
        }
        
        /// <summary><b>[entry point: <c>glTexStorage3DMultisample</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, byte, void> _glTexStorage3DMultisample_fnptr = &glTexStorage3DMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorage3DMultisample_Lazy(uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _glTexStorage3DMultisample_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage3DMultisample");
            _glTexStorage3DMultisample_fnptr(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        /// <summary><b>[entry point: <c>glTexStorage3DMultisampleOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, byte, void> _glTexStorage3DMultisampleOES_fnptr = &glTexStorage3DMultisampleOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorage3DMultisampleOES_Lazy(uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _glTexStorage3DMultisampleOES_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage3DMultisampleOES");
            _glTexStorage3DMultisampleOES_fnptr(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        /// <summary><b>[entry point: <c>glTexStorageAttribs2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int*, void> _glTexStorageAttribs2DEXT_fnptr = &glTexStorageAttribs2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorageAttribs2DEXT_Lazy(uint target, int levels, uint internalformat, int width, int height, int* attrib_list)
        {
            _glTexStorageAttribs2DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageAttribs2DEXT");
            _glTexStorageAttribs2DEXT_fnptr(target, levels, internalformat, width, height, attrib_list);
        }
        
        /// <summary><b>[entry point: <c>glTexStorageAttribs3DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, int*, void> _glTexStorageAttribs3DEXT_fnptr = &glTexStorageAttribs3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorageAttribs3DEXT_Lazy(uint target, int levels, uint internalformat, int width, int height, int depth, int* attrib_list)
        {
            _glTexStorageAttribs3DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageAttribs3DEXT");
            _glTexStorageAttribs3DEXT_fnptr(target, levels, internalformat, width, height, depth, attrib_list);
        }
        
        /// <summary><b>[entry point: <c>glTexStorageMem1DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, uint, ulong, void> _glTexStorageMem1DEXT_fnptr = &glTexStorageMem1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorageMem1DEXT_Lazy(uint target, int levels, uint internalFormat, int width, uint memory, ulong offset)
        {
            _glTexStorageMem1DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageMem1DEXT");
            _glTexStorageMem1DEXT_fnptr(target, levels, internalFormat, width, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glTexStorageMem2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, uint, ulong, void> _glTexStorageMem2DEXT_fnptr = &glTexStorageMem2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorageMem2DEXT_Lazy(uint target, int levels, uint internalFormat, int width, int height, uint memory, ulong offset)
        {
            _glTexStorageMem2DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageMem2DEXT");
            _glTexStorageMem2DEXT_fnptr(target, levels, internalFormat, width, height, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glTexStorageMem2DMultisampleEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, byte, uint, ulong, void> _glTexStorageMem2DMultisampleEXT_fnptr = &glTexStorageMem2DMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorageMem2DMultisampleEXT_Lazy(uint target, int samples, uint internalFormat, int width, int height, byte fixedSampleLocations, uint memory, ulong offset)
        {
            _glTexStorageMem2DMultisampleEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, byte, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageMem2DMultisampleEXT");
            _glTexStorageMem2DMultisampleEXT_fnptr(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glTexStorageMem3DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, uint, ulong, void> _glTexStorageMem3DEXT_fnptr = &glTexStorageMem3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorageMem3DEXT_Lazy(uint target, int levels, uint internalFormat, int width, int height, int depth, uint memory, ulong offset)
        {
            _glTexStorageMem3DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageMem3DEXT");
            _glTexStorageMem3DEXT_fnptr(target, levels, internalFormat, width, height, depth, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glTexStorageMem3DMultisampleEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, int, int, byte, uint, ulong, void> _glTexStorageMem3DMultisampleEXT_fnptr = &glTexStorageMem3DMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorageMem3DMultisampleEXT_Lazy(uint target, int samples, uint internalFormat, int width, int height, int depth, byte fixedSampleLocations, uint memory, ulong offset)
        {
            _glTexStorageMem3DMultisampleEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, byte, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageMem3DMultisampleEXT");
            _glTexStorageMem3DMultisampleEXT_fnptr(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glTexStorageSparseAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, int, int, uint, void> _glTexStorageSparseAMD_fnptr = &glTexStorageSparseAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexStorageSparseAMD_Lazy(uint target, uint internalFormat, int width, int height, int depth, int layers, uint flags)
        {
            _glTexStorageSparseAMD_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageSparseAMD");
            _glTexStorageSparseAMD_fnptr(target, internalFormat, width, height, depth, layers, flags);
        }
        
        /// <summary><b>[entry point: <c>glTexSubImage1D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, uint, uint, void*, void> _glTexSubImage1D_fnptr = &glTexSubImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexSubImage1D_Lazy(uint target, int level, int xoffset, int width, uint format, uint type, void* pixels)
        {
            _glTexSubImage1D_fnptr = (delegate* unmanaged<uint, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage1D");
            _glTexSubImage1D_fnptr(target, level, xoffset, width, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTexSubImage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, uint, uint, void*, void> _glTexSubImage1DEXT_fnptr = &glTexSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexSubImage1DEXT_Lazy(uint target, int level, int xoffset, int width, uint format, uint type, void* pixels)
        {
            _glTexSubImage1DEXT_fnptr = (delegate* unmanaged<uint, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage1DEXT");
            _glTexSubImage1DEXT_fnptr(target, level, xoffset, width, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTexSubImage2D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void> _glTexSubImage2D_fnptr = &glTexSubImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexSubImage2D_Lazy(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels)
        {
            _glTexSubImage2D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage2D");
            _glTexSubImage2D_fnptr(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTexSubImage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void> _glTexSubImage2DEXT_fnptr = &glTexSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexSubImage2DEXT_Lazy(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels)
        {
            _glTexSubImage2DEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage2DEXT");
            _glTexSubImage2DEXT_fnptr(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTexSubImage3D</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void> _glTexSubImage3D_fnptr = &glTexSubImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexSubImage3D_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels)
        {
            _glTexSubImage3D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage3D");
            _glTexSubImage3D_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTexSubImage3DEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void> _glTexSubImage3DEXT_fnptr = &glTexSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexSubImage3DEXT_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels)
        {
            _glTexSubImage3DEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage3DEXT");
            _glTexSubImage3DEXT_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTexSubImage3DOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void> _glTexSubImage3DOES_fnptr = &glTexSubImage3DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexSubImage3DOES_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels)
        {
            _glTexSubImage3DOES_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage3DOES");
            _glTexSubImage3DOES_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTexSubImage4DSGIS</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, uint, uint, void*, void> _glTexSubImage4DSGIS_fnptr = &glTexSubImage4DSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexSubImage4DSGIS_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, uint format, uint type, void* pixels)
        {
            _glTexSubImage4DSGIS_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage4DSGIS");
            _glTexSubImage4DSGIS_fnptr(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTextureAttachMemoryNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, ulong, void> _glTextureAttachMemoryNV_fnptr = &glTextureAttachMemoryNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureAttachMemoryNV_Lazy(int texture, uint memory, ulong offset)
        {
            _glTextureAttachMemoryNV_fnptr = (delegate* unmanaged<int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTextureAttachMemoryNV");
            _glTextureAttachMemoryNV_fnptr(texture, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glTextureBarrier</c>]</b></summary>
        public static delegate* unmanaged<void> _glTextureBarrier_fnptr = &glTextureBarrier_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureBarrier_Lazy()
        {
            _glTextureBarrier_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glTextureBarrier");
            _glTextureBarrier_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glTextureBarrierNV</c>]</b></summary>
        public static delegate* unmanaged<void> _glTextureBarrierNV_fnptr = &glTextureBarrierNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureBarrierNV_Lazy()
        {
            _glTextureBarrierNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glTextureBarrierNV");
            _glTextureBarrierNV_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glTextureBuffer</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glTextureBuffer_fnptr = &glTextureBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureBuffer_Lazy(int texture, uint internalformat, int buffer)
        {
            _glTextureBuffer_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureBuffer");
            _glTextureBuffer_fnptr(texture, internalformat, buffer);
        }
        
        /// <summary><b>[entry point: <c>glTextureBufferEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, void> _glTextureBufferEXT_fnptr = &glTextureBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureBufferEXT_Lazy(int texture, uint target, uint internalformat, int buffer)
        {
            _glTextureBufferEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureBufferEXT");
            _glTextureBufferEXT_fnptr(texture, target, internalformat, buffer);
        }
        
        /// <summary><b>[entry point: <c>glTextureBufferRange</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, IntPtr, nint, void> _glTextureBufferRange_fnptr = &glTextureBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureBufferRange_Lazy(int texture, uint internalformat, int buffer, IntPtr offset, nint size)
        {
            _glTextureBufferRange_fnptr = (delegate* unmanaged<int, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureBufferRange");
            _glTextureBufferRange_fnptr(texture, internalformat, buffer, offset, size);
        }
        
        /// <summary><b>[entry point: <c>glTextureBufferRangeEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, IntPtr, nint, void> _glTextureBufferRangeEXT_fnptr = &glTextureBufferRangeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureBufferRangeEXT_Lazy(int texture, uint target, uint internalformat, int buffer, IntPtr offset, nint size)
        {
            _glTextureBufferRangeEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureBufferRangeEXT");
            _glTextureBufferRangeEXT_fnptr(texture, target, internalformat, buffer, offset, size);
        }
        
        /// <summary><b>[entry point: <c>glTextureColorMaskSGIS</c>]</b></summary>
        public static delegate* unmanaged<byte, byte, byte, byte, void> _glTextureColorMaskSGIS_fnptr = &glTextureColorMaskSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureColorMaskSGIS_Lazy(byte red, byte green, byte blue, byte alpha)
        {
            _glTextureColorMaskSGIS_fnptr = (delegate* unmanaged<byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureColorMaskSGIS");
            _glTextureColorMaskSGIS_fnptr(red, green, blue, alpha);
        }
        
        /// <summary><b>[entry point: <c>glTextureFoveationParametersQCOM</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, float, float, float, float, float, void> _glTextureFoveationParametersQCOM_fnptr = &glTextureFoveationParametersQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureFoveationParametersQCOM_Lazy(int texture, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea)
        {
            _glTextureFoveationParametersQCOM_fnptr = (delegate* unmanaged<int, uint, uint, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTextureFoveationParametersQCOM");
            _glTextureFoveationParametersQCOM_fnptr(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
        }
        
        /// <summary><b>[entry point: <c>glTextureImage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, int, uint, uint, void*, void> _glTextureImage1DEXT_fnptr = &glTextureImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureImage1DEXT_Lazy(int texture, uint target, int level, int internalformat, int width, int border, uint format, uint type, void* pixels)
        {
            _glTextureImage1DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureImage1DEXT");
            _glTextureImage1DEXT_fnptr(texture, target, level, internalformat, width, border, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTextureImage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, int, int, uint, uint, void*, void> _glTextureImage2DEXT_fnptr = &glTextureImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureImage2DEXT_Lazy(int texture, uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, void* pixels)
        {
            _glTextureImage2DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureImage2DEXT");
            _glTextureImage2DEXT_fnptr(texture, target, level, internalformat, width, height, border, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTextureImage2DMultisampleCoverageNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, int, int, byte, void> _glTextureImage2DMultisampleCoverageNV_fnptr = &glTextureImage2DMultisampleCoverageNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureImage2DMultisampleCoverageNV_Lazy(int texture, uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, byte fixedSampleLocations)
        {
            _glTextureImage2DMultisampleCoverageNV_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureImage2DMultisampleCoverageNV");
            _glTextureImage2DMultisampleCoverageNV_fnptr(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        }
        
        /// <summary><b>[entry point: <c>glTextureImage2DMultisampleNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, int, byte, void> _glTextureImage2DMultisampleNV_fnptr = &glTextureImage2DMultisampleNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureImage2DMultisampleNV_Lazy(int texture, uint target, int samples, int internalFormat, int width, int height, byte fixedSampleLocations)
        {
            _glTextureImage2DMultisampleNV_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureImage2DMultisampleNV");
            _glTextureImage2DMultisampleNV_fnptr(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
        }
        
        /// <summary><b>[entry point: <c>glTextureImage3DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, int, int, int, uint, uint, void*, void> _glTextureImage3DEXT_fnptr = &glTextureImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureImage3DEXT_Lazy(int texture, uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels)
        {
            _glTextureImage3DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureImage3DEXT");
            _glTextureImage3DEXT_fnptr(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTextureImage3DMultisampleCoverageNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, int, int, int, byte, void> _glTextureImage3DMultisampleCoverageNV_fnptr = &glTextureImage3DMultisampleCoverageNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureImage3DMultisampleCoverageNV_Lazy(int texture, uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations)
        {
            _glTextureImage3DMultisampleCoverageNV_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureImage3DMultisampleCoverageNV");
            _glTextureImage3DMultisampleCoverageNV_fnptr(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        }
        
        /// <summary><b>[entry point: <c>glTextureImage3DMultisampleNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, int, int, byte, void> _glTextureImage3DMultisampleNV_fnptr = &glTextureImage3DMultisampleNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureImage3DMultisampleNV_Lazy(int texture, uint target, int samples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations)
        {
            _glTextureImage3DMultisampleNV_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureImage3DMultisampleNV");
            _glTextureImage3DMultisampleNV_fnptr(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
        }
        
        /// <summary><b>[entry point: <c>glTextureLightEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glTextureLightEXT_fnptr = &glTextureLightEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureLightEXT_Lazy(uint pname)
        {
            _glTextureLightEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureLightEXT");
            _glTextureLightEXT_fnptr(pname);
        }
        
        /// <summary><b>[entry point: <c>glTextureMaterialEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glTextureMaterialEXT_fnptr = &glTextureMaterialEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureMaterialEXT_Lazy(uint face, uint mode)
        {
            _glTextureMaterialEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureMaterialEXT");
            _glTextureMaterialEXT_fnptr(face, mode);
        }
        
        /// <summary><b>[entry point: <c>glTextureNormalEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glTextureNormalEXT_fnptr = &glTextureNormalEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureNormalEXT_Lazy(uint mode)
        {
            _glTextureNormalEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureNormalEXT");
            _glTextureNormalEXT_fnptr(mode);
        }
        
        /// <summary><b>[entry point: <c>glTexturePageCommitmentEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, byte, void> _glTexturePageCommitmentEXT_fnptr = &glTexturePageCommitmentEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexturePageCommitmentEXT_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit)
        {
            _glTexturePageCommitmentEXT_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexturePageCommitmentEXT");
            _glTexturePageCommitmentEXT_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        }
        
        /// <summary><b>[entry point: <c>glTexturePageCommitmentMemNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, int, uint, ulong, byte, void> _glTexturePageCommitmentMemNV_fnptr = &glTexturePageCommitmentMemNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTexturePageCommitmentMemNV_Lazy(int texture, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, byte commit)
        {
            _glTexturePageCommitmentMemNV_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, uint, ulong, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexturePageCommitmentMemNV");
            _glTexturePageCommitmentMemNV_fnptr(texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
        }
        
        /// <summary><b>[entry point: <c>glTextureParameterf</c>]</b></summary>
        public static delegate* unmanaged<int, uint, float, void> _glTextureParameterf_fnptr = &glTextureParameterf_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureParameterf_Lazy(int texture, uint pname, float param)
        {
            _glTextureParameterf_fnptr = (delegate* unmanaged<int, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterf");
            _glTextureParameterf_fnptr(texture, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTextureParameterfEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, float, void> _glTextureParameterfEXT_fnptr = &glTextureParameterfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureParameterfEXT_Lazy(int texture, uint target, uint pname, float param)
        {
            _glTextureParameterfEXT_fnptr = (delegate* unmanaged<int, uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterfEXT");
            _glTextureParameterfEXT_fnptr(texture, target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTextureParameterfv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, float*, void> _glTextureParameterfv_fnptr = &glTextureParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureParameterfv_Lazy(int texture, uint pname, float* param)
        {
            _glTextureParameterfv_fnptr = (delegate* unmanaged<int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterfv");
            _glTextureParameterfv_fnptr(texture, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTextureParameterfvEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, float*, void> _glTextureParameterfvEXT_fnptr = &glTextureParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureParameterfvEXT_Lazy(int texture, uint target, uint pname, float* parameters)
        {
            _glTextureParameterfvEXT_fnptr = (delegate* unmanaged<int, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterfvEXT");
            _glTextureParameterfvEXT_fnptr(texture, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTextureParameteri</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glTextureParameteri_fnptr = &glTextureParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureParameteri_Lazy(int texture, uint pname, int param)
        {
            _glTextureParameteri_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameteri");
            _glTextureParameteri_fnptr(texture, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTextureParameteriEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, void> _glTextureParameteriEXT_fnptr = &glTextureParameteriEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureParameteriEXT_Lazy(int texture, uint target, uint pname, int param)
        {
            _glTextureParameteriEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameteriEXT");
            _glTextureParameteriEXT_fnptr(texture, target, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTextureParameterIiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glTextureParameterIiv_fnptr = &glTextureParameterIiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureParameterIiv_Lazy(int texture, uint pname, int* parameters)
        {
            _glTextureParameterIiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterIiv");
            _glTextureParameterIiv_fnptr(texture, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTextureParameterIivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glTextureParameterIivEXT_fnptr = &glTextureParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureParameterIivEXT_Lazy(int texture, uint target, uint pname, int* parameters)
        {
            _glTextureParameterIivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterIivEXT");
            _glTextureParameterIivEXT_fnptr(texture, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTextureParameterIuiv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint*, void> _glTextureParameterIuiv_fnptr = &glTextureParameterIuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureParameterIuiv_Lazy(int texture, uint pname, uint* parameters)
        {
            _glTextureParameterIuiv_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterIuiv");
            _glTextureParameterIuiv_fnptr(texture, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTextureParameterIuivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, uint*, void> _glTextureParameterIuivEXT_fnptr = &glTextureParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureParameterIuivEXT_Lazy(int texture, uint target, uint pname, uint* parameters)
        {
            _glTextureParameterIuivEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterIuivEXT");
            _glTextureParameterIuivEXT_fnptr(texture, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTextureParameteriv</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int*, void> _glTextureParameteriv_fnptr = &glTextureParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureParameteriv_Lazy(int texture, uint pname, int* param)
        {
            _glTextureParameteriv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameteriv");
            _glTextureParameteriv_fnptr(texture, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glTextureParameterivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int*, void> _glTextureParameterivEXT_fnptr = &glTextureParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureParameterivEXT_Lazy(int texture, uint target, uint pname, int* parameters)
        {
            _glTextureParameterivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterivEXT");
            _glTextureParameterivEXT_fnptr(texture, target, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glTextureRangeAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void*, void> _glTextureRangeAPPLE_fnptr = &glTextureRangeAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureRangeAPPLE_Lazy(uint target, int length, void* pointer)
        {
            _glTextureRangeAPPLE_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureRangeAPPLE");
            _glTextureRangeAPPLE_fnptr(target, length, pointer);
        }
        
        /// <summary><b>[entry point: <c>glTextureRenderbufferEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glTextureRenderbufferEXT_fnptr = &glTextureRenderbufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureRenderbufferEXT_Lazy(int texture, uint target, int renderbuffer)
        {
            _glTextureRenderbufferEXT_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureRenderbufferEXT");
            _glTextureRenderbufferEXT_fnptr(texture, target, renderbuffer);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorage1D</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, void> _glTextureStorage1D_fnptr = &glTextureStorage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorage1D_Lazy(int texture, int levels, uint internalformat, int width)
        {
            _glTextureStorage1D_fnptr = (delegate* unmanaged<int, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage1D");
            _glTextureStorage1D_fnptr(texture, levels, internalformat, width);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, int, void> _glTextureStorage1DEXT_fnptr = &glTextureStorage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorage1DEXT_Lazy(int texture, uint target, int levels, uint internalformat, int width)
        {
            _glTextureStorage1DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage1DEXT");
            _glTextureStorage1DEXT_fnptr(texture, target, levels, internalformat, width);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorage2D</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, int, void> _glTextureStorage2D_fnptr = &glTextureStorage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorage2D_Lazy(int texture, int levels, uint internalformat, int width, int height)
        {
            _glTextureStorage2D_fnptr = (delegate* unmanaged<int, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage2D");
            _glTextureStorage2D_fnptr(texture, levels, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, int, int, void> _glTextureStorage2DEXT_fnptr = &glTextureStorage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorage2DEXT_Lazy(int texture, uint target, int levels, uint internalformat, int width, int height)
        {
            _glTextureStorage2DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage2DEXT");
            _glTextureStorage2DEXT_fnptr(texture, target, levels, internalformat, width, height);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorage2DMultisample</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, int, byte, void> _glTextureStorage2DMultisample_fnptr = &glTextureStorage2DMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorage2DMultisample_Lazy(int texture, int samples, uint internalformat, int width, int height, byte fixedsamplelocations)
        {
            _glTextureStorage2DMultisample_fnptr = (delegate* unmanaged<int, int, uint, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage2DMultisample");
            _glTextureStorage2DMultisample_fnptr(texture, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorage2DMultisampleEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, int, int, byte, void> _glTextureStorage2DMultisampleEXT_fnptr = &glTextureStorage2DMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorage2DMultisampleEXT_Lazy(int texture, uint target, int samples, uint internalformat, int width, int height, byte fixedsamplelocations)
        {
            _glTextureStorage2DMultisampleEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage2DMultisampleEXT");
            _glTextureStorage2DMultisampleEXT_fnptr(texture, target, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorage3D</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, int, int, void> _glTextureStorage3D_fnptr = &glTextureStorage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorage3D_Lazy(int texture, int levels, uint internalformat, int width, int height, int depth)
        {
            _glTextureStorage3D_fnptr = (delegate* unmanaged<int, int, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage3D");
            _glTextureStorage3D_fnptr(texture, levels, internalformat, width, height, depth);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorage3DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, int, int, int, void> _glTextureStorage3DEXT_fnptr = &glTextureStorage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorage3DEXT_Lazy(int texture, uint target, int levels, uint internalformat, int width, int height, int depth)
        {
            _glTextureStorage3DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage3DEXT");
            _glTextureStorage3DEXT_fnptr(texture, target, levels, internalformat, width, height, depth);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorage3DMultisample</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, int, int, byte, void> _glTextureStorage3DMultisample_fnptr = &glTextureStorage3DMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorage3DMultisample_Lazy(int texture, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _glTextureStorage3DMultisample_fnptr = (delegate* unmanaged<int, int, uint, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage3DMultisample");
            _glTextureStorage3DMultisample_fnptr(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorage3DMultisampleEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, int, int, int, byte, void> _glTextureStorage3DMultisampleEXT_fnptr = &glTextureStorage3DMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorage3DMultisampleEXT_Lazy(int texture, uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _glTextureStorage3DMultisampleEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage3DMultisampleEXT");
            _glTextureStorage3DMultisampleEXT_fnptr(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorageMem1DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, uint, ulong, void> _glTextureStorageMem1DEXT_fnptr = &glTextureStorageMem1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorageMem1DEXT_Lazy(int texture, int levels, uint internalFormat, int width, uint memory, ulong offset)
        {
            _glTextureStorageMem1DEXT_fnptr = (delegate* unmanaged<int, int, uint, int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorageMem1DEXT");
            _glTextureStorageMem1DEXT_fnptr(texture, levels, internalFormat, width, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorageMem2DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, int, uint, ulong, void> _glTextureStorageMem2DEXT_fnptr = &glTextureStorageMem2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorageMem2DEXT_Lazy(int texture, int levels, uint internalFormat, int width, int height, uint memory, ulong offset)
        {
            _glTextureStorageMem2DEXT_fnptr = (delegate* unmanaged<int, int, uint, int, int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorageMem2DEXT");
            _glTextureStorageMem2DEXT_fnptr(texture, levels, internalFormat, width, height, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorageMem2DMultisampleEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, int, byte, uint, ulong, void> _glTextureStorageMem2DMultisampleEXT_fnptr = &glTextureStorageMem2DMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorageMem2DMultisampleEXT_Lazy(int texture, int samples, uint internalFormat, int width, int height, byte fixedSampleLocations, uint memory, ulong offset)
        {
            _glTextureStorageMem2DMultisampleEXT_fnptr = (delegate* unmanaged<int, int, uint, int, int, byte, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorageMem2DMultisampleEXT");
            _glTextureStorageMem2DMultisampleEXT_fnptr(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorageMem3DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, int, int, uint, ulong, void> _glTextureStorageMem3DEXT_fnptr = &glTextureStorageMem3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorageMem3DEXT_Lazy(int texture, int levels, uint internalFormat, int width, int height, int depth, uint memory, ulong offset)
        {
            _glTextureStorageMem3DEXT_fnptr = (delegate* unmanaged<int, int, uint, int, int, int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorageMem3DEXT");
            _glTextureStorageMem3DEXT_fnptr(texture, levels, internalFormat, width, height, depth, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorageMem3DMultisampleEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, int, int, byte, uint, ulong, void> _glTextureStorageMem3DMultisampleEXT_fnptr = &glTextureStorageMem3DMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorageMem3DMultisampleEXT_Lazy(int texture, int samples, uint internalFormat, int width, int height, int depth, byte fixedSampleLocations, uint memory, ulong offset)
        {
            _glTextureStorageMem3DMultisampleEXT_fnptr = (delegate* unmanaged<int, int, uint, int, int, int, byte, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorageMem3DMultisampleEXT");
            _glTextureStorageMem3DMultisampleEXT_fnptr(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        }
        
        /// <summary><b>[entry point: <c>glTextureStorageSparseAMD</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, int, int, int, int, uint, void> _glTextureStorageSparseAMD_fnptr = &glTextureStorageSparseAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureStorageSparseAMD_Lazy(int texture, uint target, uint internalFormat, int width, int height, int depth, int layers, uint flags)
        {
            _glTextureStorageSparseAMD_fnptr = (delegate* unmanaged<int, uint, uint, int, int, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorageSparseAMD");
            _glTextureStorageSparseAMD_fnptr(texture, target, internalFormat, width, height, depth, layers, flags);
        }
        
        /// <summary><b>[entry point: <c>glTextureSubImage1D</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, uint, uint, void*, void> _glTextureSubImage1D_fnptr = &glTextureSubImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureSubImage1D_Lazy(int texture, int level, int xoffset, int width, uint format, uint type, void* pixels)
        {
            _glTextureSubImage1D_fnptr = (delegate* unmanaged<int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureSubImage1D");
            _glTextureSubImage1D_fnptr(texture, level, xoffset, width, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTextureSubImage1DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, uint, uint, void*, void> _glTextureSubImage1DEXT_fnptr = &glTextureSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureSubImage1DEXT_Lazy(int texture, uint target, int level, int xoffset, int width, uint format, uint type, void* pixels)
        {
            _glTextureSubImage1DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureSubImage1DEXT");
            _glTextureSubImage1DEXT_fnptr(texture, target, level, xoffset, width, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTextureSubImage2D</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, uint, uint, void*, void> _glTextureSubImage2D_fnptr = &glTextureSubImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureSubImage2D_Lazy(int texture, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels)
        {
            _glTextureSubImage2D_fnptr = (delegate* unmanaged<int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureSubImage2D");
            _glTextureSubImage2D_fnptr(texture, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTextureSubImage2DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, int, int, uint, uint, void*, void> _glTextureSubImage2DEXT_fnptr = &glTextureSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureSubImage2DEXT_Lazy(int texture, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels)
        {
            _glTextureSubImage2DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureSubImage2DEXT");
            _glTextureSubImage2DEXT_fnptr(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTextureSubImage3D</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void*, void> _glTextureSubImage3D_fnptr = &glTextureSubImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureSubImage3D_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels)
        {
            _glTextureSubImage3D_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureSubImage3D");
            _glTextureSubImage3D_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTextureSubImage3DEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, int, int, int, int, int, uint, uint, void*, void> _glTextureSubImage3DEXT_fnptr = &glTextureSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureSubImage3DEXT_Lazy(int texture, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels)
        {
            _glTextureSubImage3DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureSubImage3DEXT");
            _glTextureSubImage3DEXT_fnptr(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        /// <summary><b>[entry point: <c>glTextureView</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, uint, uint, uint, uint, void> _glTextureView_fnptr = &glTextureView_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureView_Lazy(int texture, uint target, int origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            _glTextureView_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureView");
            _glTextureView_fnptr(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        
        /// <summary><b>[entry point: <c>glTextureViewEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, uint, uint, uint, uint, void> _glTextureViewEXT_fnptr = &glTextureViewEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureViewEXT_Lazy(int texture, uint target, int origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            _glTextureViewEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureViewEXT");
            _glTextureViewEXT_fnptr(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        
        /// <summary><b>[entry point: <c>glTextureViewOES</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, uint, uint, uint, uint, void> _glTextureViewOES_fnptr = &glTextureViewOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTextureViewOES_Lazy(int texture, uint target, int origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            _glTextureViewOES_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureViewOES");
            _glTextureViewOES_fnptr(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        
        /// <summary><b>[entry point: <c>glTrackMatrixNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, void> _glTrackMatrixNV_fnptr = &glTrackMatrixNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTrackMatrixNV_Lazy(uint target, uint address, uint matrix, uint transform)
        {
            _glTrackMatrixNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTrackMatrixNV");
            _glTrackMatrixNV_fnptr(target, address, matrix, transform);
        }
        
        /// <summary><b>[entry point: <c>glTransformFeedbackAttribsNV</c>]</b></summary>
        public static delegate* unmanaged<int, int*, uint, void> _glTransformFeedbackAttribsNV_fnptr = &glTransformFeedbackAttribsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTransformFeedbackAttribsNV_Lazy(int count, int* attribs, uint bufferMode)
        {
            _glTransformFeedbackAttribsNV_fnptr = (delegate* unmanaged<int, int*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTransformFeedbackAttribsNV");
            _glTransformFeedbackAttribsNV_fnptr(count, attribs, bufferMode);
        }
        
        /// <summary><b>[entry point: <c>glTransformFeedbackBufferBase</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glTransformFeedbackBufferBase_fnptr = &glTransformFeedbackBufferBase_Lazy;
        [UnmanagedCallersOnly]
        private static void glTransformFeedbackBufferBase_Lazy(int xfb, uint index, int buffer)
        {
            _glTransformFeedbackBufferBase_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTransformFeedbackBufferBase");
            _glTransformFeedbackBufferBase_fnptr(xfb, index, buffer);
        }
        
        /// <summary><b>[entry point: <c>glTransformFeedbackBufferRange</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, IntPtr, nint, void> _glTransformFeedbackBufferRange_fnptr = &glTransformFeedbackBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void glTransformFeedbackBufferRange_Lazy(int xfb, uint index, int buffer, IntPtr offset, nint size)
        {
            _glTransformFeedbackBufferRange_fnptr = (delegate* unmanaged<int, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glTransformFeedbackBufferRange");
            _glTransformFeedbackBufferRange_fnptr(xfb, index, buffer, offset, size);
        }
        
        /// <summary><b>[entry point: <c>glTransformFeedbackStreamAttribsNV</c>]</b></summary>
        public static delegate* unmanaged<int, int*, int, int*, uint, void> _glTransformFeedbackStreamAttribsNV_fnptr = &glTransformFeedbackStreamAttribsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTransformFeedbackStreamAttribsNV_Lazy(int count, int* attribs, int nbuffers, int* bufstreams, uint bufferMode)
        {
            _glTransformFeedbackStreamAttribsNV_fnptr = (delegate* unmanaged<int, int*, int, int*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTransformFeedbackStreamAttribsNV");
            _glTransformFeedbackStreamAttribsNV_fnptr(count, attribs, nbuffers, bufstreams, bufferMode);
        }
        
        /// <summary><b>[entry point: <c>glTransformFeedbackVaryings</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte**, uint, void> _glTransformFeedbackVaryings_fnptr = &glTransformFeedbackVaryings_Lazy;
        [UnmanagedCallersOnly]
        private static void glTransformFeedbackVaryings_Lazy(int program, int count, byte** varyings, uint bufferMode)
        {
            _glTransformFeedbackVaryings_fnptr = (delegate* unmanaged<int, int, byte**, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTransformFeedbackVaryings");
            _glTransformFeedbackVaryings_fnptr(program, count, varyings, bufferMode);
        }
        
        /// <summary><b>[entry point: <c>glTransformFeedbackVaryingsEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte**, uint, void> _glTransformFeedbackVaryingsEXT_fnptr = &glTransformFeedbackVaryingsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glTransformFeedbackVaryingsEXT_Lazy(int program, int count, byte** varyings, uint bufferMode)
        {
            _glTransformFeedbackVaryingsEXT_fnptr = (delegate* unmanaged<int, int, byte**, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTransformFeedbackVaryingsEXT");
            _glTransformFeedbackVaryingsEXT_fnptr(program, count, varyings, bufferMode);
        }
        
        /// <summary><b>[entry point: <c>glTransformFeedbackVaryingsNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, uint, void> _glTransformFeedbackVaryingsNV_fnptr = &glTransformFeedbackVaryingsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTransformFeedbackVaryingsNV_Lazy(int program, int count, int* locations, uint bufferMode)
        {
            _glTransformFeedbackVaryingsNV_fnptr = (delegate* unmanaged<int, int, int*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTransformFeedbackVaryingsNV");
            _glTransformFeedbackVaryingsNV_fnptr(program, count, locations, bufferMode);
        }
        
        /// <summary><b>[entry point: <c>glTransformPathNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float*, void> _glTransformPathNV_fnptr = &glTransformPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glTransformPathNV_Lazy(uint resultPath, uint srcPath, uint transformType, float* transformValues)
        {
            _glTransformPathNV_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTransformPathNV");
            _glTransformPathNV_fnptr(resultPath, srcPath, transformType, transformValues);
        }
        
        /// <summary><b>[entry point: <c>glTranslated</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, void> _glTranslated_fnptr = &glTranslated_Lazy;
        [UnmanagedCallersOnly]
        private static void glTranslated_Lazy(double x, double y, double z)
        {
            _glTranslated_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glTranslated");
            _glTranslated_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glTranslatef</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glTranslatef_fnptr = &glTranslatef_Lazy;
        [UnmanagedCallersOnly]
        private static void glTranslatef_Lazy(float x, float y, float z)
        {
            _glTranslatef_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTranslatef");
            _glTranslatef_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glTranslatex</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glTranslatex_fnptr = &glTranslatex_Lazy;
        [UnmanagedCallersOnly]
        private static void glTranslatex_Lazy(int x, int y, int z)
        {
            _glTranslatex_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTranslatex");
            _glTranslatex_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glTranslatexOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glTranslatexOES_fnptr = &glTranslatexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glTranslatexOES_Lazy(int x, int y, int z)
        {
            _glTranslatexOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTranslatexOES");
            _glTranslatexOES_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glUniform1d</c>]</b></summary>
        public static delegate* unmanaged<int, double, void> _glUniform1d_fnptr = &glUniform1d_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1d_Lazy(int location, double x)
        {
            _glUniform1d_fnptr = (delegate* unmanaged<int, double, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1d");
            _glUniform1d_fnptr(location, x);
        }
        
        /// <summary><b>[entry point: <c>glUniform1dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, double*, void> _glUniform1dv_fnptr = &glUniform1dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1dv_Lazy(int location, int count, double* value)
        {
            _glUniform1dv_fnptr = (delegate* unmanaged<int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1dv");
            _glUniform1dv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform1f</c>]</b></summary>
        public static delegate* unmanaged<int, float, void> _glUniform1f_fnptr = &glUniform1f_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1f_Lazy(int location, float v0)
        {
            _glUniform1f_fnptr = (delegate* unmanaged<int, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1f");
            _glUniform1f_fnptr(location, v0);
        }
        
        /// <summary><b>[entry point: <c>glUniform1fARB</c>]</b></summary>
        public static delegate* unmanaged<int, float, void> _glUniform1fARB_fnptr = &glUniform1fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1fARB_Lazy(int location, float v0)
        {
            _glUniform1fARB_fnptr = (delegate* unmanaged<int, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1fARB");
            _glUniform1fARB_fnptr(location, v0);
        }
        
        /// <summary><b>[entry point: <c>glUniform1fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, float*, void> _glUniform1fv_fnptr = &glUniform1fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1fv_Lazy(int location, int count, float* value)
        {
            _glUniform1fv_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1fv");
            _glUniform1fv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform1fvARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, float*, void> _glUniform1fvARB_fnptr = &glUniform1fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1fvARB_Lazy(int location, int count, float* value)
        {
            _glUniform1fvARB_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1fvARB");
            _glUniform1fvARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform1i</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glUniform1i_fnptr = &glUniform1i_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1i_Lazy(int location, int v0)
        {
            _glUniform1i_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1i");
            _glUniform1i_fnptr(location, v0);
        }
        
        /// <summary><b>[entry point: <c>glUniform1i64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, long, void> _glUniform1i64ARB_fnptr = &glUniform1i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1i64ARB_Lazy(int location, long x)
        {
            _glUniform1i64ARB_fnptr = (delegate* unmanaged<int, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1i64ARB");
            _glUniform1i64ARB_fnptr(location, x);
        }
        
        /// <summary><b>[entry point: <c>glUniform1i64NV</c>]</b></summary>
        public static delegate* unmanaged<int, long, void> _glUniform1i64NV_fnptr = &glUniform1i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1i64NV_Lazy(int location, long x)
        {
            _glUniform1i64NV_fnptr = (delegate* unmanaged<int, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1i64NV");
            _glUniform1i64NV_fnptr(location, x);
        }
        
        /// <summary><b>[entry point: <c>glUniform1i64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, long*, void> _glUniform1i64vARB_fnptr = &glUniform1i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1i64vARB_Lazy(int location, int count, long* value)
        {
            _glUniform1i64vARB_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1i64vARB");
            _glUniform1i64vARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform1i64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, long*, void> _glUniform1i64vNV_fnptr = &glUniform1i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1i64vNV_Lazy(int location, int count, long* value)
        {
            _glUniform1i64vNV_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1i64vNV");
            _glUniform1i64vNV_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform1iARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glUniform1iARB_fnptr = &glUniform1iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1iARB_Lazy(int location, int v0)
        {
            _glUniform1iARB_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1iARB");
            _glUniform1iARB_fnptr(location, v0);
        }
        
        /// <summary><b>[entry point: <c>glUniform1iv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, void> _glUniform1iv_fnptr = &glUniform1iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1iv_Lazy(int location, int count, int* value)
        {
            _glUniform1iv_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1iv");
            _glUniform1iv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform1ivARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, void> _glUniform1ivARB_fnptr = &glUniform1ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1ivARB_Lazy(int location, int count, int* value)
        {
            _glUniform1ivARB_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1ivARB");
            _glUniform1ivARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform1ui</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glUniform1ui_fnptr = &glUniform1ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1ui_Lazy(int location, uint v0)
        {
            _glUniform1ui_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1ui");
            _glUniform1ui_fnptr(location, v0);
        }
        
        /// <summary><b>[entry point: <c>glUniform1ui64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, ulong, void> _glUniform1ui64ARB_fnptr = &glUniform1ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1ui64ARB_Lazy(int location, ulong x)
        {
            _glUniform1ui64ARB_fnptr = (delegate* unmanaged<int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1ui64ARB");
            _glUniform1ui64ARB_fnptr(location, x);
        }
        
        /// <summary><b>[entry point: <c>glUniform1ui64NV</c>]</b></summary>
        public static delegate* unmanaged<int, ulong, void> _glUniform1ui64NV_fnptr = &glUniform1ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1ui64NV_Lazy(int location, ulong x)
        {
            _glUniform1ui64NV_fnptr = (delegate* unmanaged<int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1ui64NV");
            _glUniform1ui64NV_fnptr(location, x);
        }
        
        /// <summary><b>[entry point: <c>glUniform1ui64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong*, void> _glUniform1ui64vARB_fnptr = &glUniform1ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1ui64vARB_Lazy(int location, int count, ulong* value)
        {
            _glUniform1ui64vARB_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1ui64vARB");
            _glUniform1ui64vARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform1ui64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong*, void> _glUniform1ui64vNV_fnptr = &glUniform1ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1ui64vNV_Lazy(int location, int count, ulong* value)
        {
            _glUniform1ui64vNV_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1ui64vNV");
            _glUniform1ui64vNV_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform1uiEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void> _glUniform1uiEXT_fnptr = &glUniform1uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1uiEXT_Lazy(int location, uint v0)
        {
            _glUniform1uiEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1uiEXT");
            _glUniform1uiEXT_fnptr(location, v0);
        }
        
        /// <summary><b>[entry point: <c>glUniform1uiv</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, void> _glUniform1uiv_fnptr = &glUniform1uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1uiv_Lazy(int location, int count, uint* value)
        {
            _glUniform1uiv_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1uiv");
            _glUniform1uiv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform1uivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, void> _glUniform1uivEXT_fnptr = &glUniform1uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform1uivEXT_Lazy(int location, int count, uint* value)
        {
            _glUniform1uivEXT_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1uivEXT");
            _glUniform1uivEXT_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform2d</c>]</b></summary>
        public static delegate* unmanaged<int, double, double, void> _glUniform2d_fnptr = &glUniform2d_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2d_Lazy(int location, double x, double y)
        {
            _glUniform2d_fnptr = (delegate* unmanaged<int, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2d");
            _glUniform2d_fnptr(location, x, y);
        }
        
        /// <summary><b>[entry point: <c>glUniform2dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, double*, void> _glUniform2dv_fnptr = &glUniform2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2dv_Lazy(int location, int count, double* value)
        {
            _glUniform2dv_fnptr = (delegate* unmanaged<int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2dv");
            _glUniform2dv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform2f</c>]</b></summary>
        public static delegate* unmanaged<int, float, float, void> _glUniform2f_fnptr = &glUniform2f_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2f_Lazy(int location, float v0, float v1)
        {
            _glUniform2f_fnptr = (delegate* unmanaged<int, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2f");
            _glUniform2f_fnptr(location, v0, v1);
        }
        
        /// <summary><b>[entry point: <c>glUniform2fARB</c>]</b></summary>
        public static delegate* unmanaged<int, float, float, void> _glUniform2fARB_fnptr = &glUniform2fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2fARB_Lazy(int location, float v0, float v1)
        {
            _glUniform2fARB_fnptr = (delegate* unmanaged<int, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2fARB");
            _glUniform2fARB_fnptr(location, v0, v1);
        }
        
        /// <summary><b>[entry point: <c>glUniform2fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, float*, void> _glUniform2fv_fnptr = &glUniform2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2fv_Lazy(int location, int count, float* value)
        {
            _glUniform2fv_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2fv");
            _glUniform2fv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform2fvARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, float*, void> _glUniform2fvARB_fnptr = &glUniform2fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2fvARB_Lazy(int location, int count, float* value)
        {
            _glUniform2fvARB_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2fvARB");
            _glUniform2fvARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform2i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glUniform2i_fnptr = &glUniform2i_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2i_Lazy(int location, int v0, int v1)
        {
            _glUniform2i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2i");
            _glUniform2i_fnptr(location, v0, v1);
        }
        
        /// <summary><b>[entry point: <c>glUniform2i64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, long, long, void> _glUniform2i64ARB_fnptr = &glUniform2i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2i64ARB_Lazy(int location, long x, long y)
        {
            _glUniform2i64ARB_fnptr = (delegate* unmanaged<int, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2i64ARB");
            _glUniform2i64ARB_fnptr(location, x, y);
        }
        
        /// <summary><b>[entry point: <c>glUniform2i64NV</c>]</b></summary>
        public static delegate* unmanaged<int, long, long, void> _glUniform2i64NV_fnptr = &glUniform2i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2i64NV_Lazy(int location, long x, long y)
        {
            _glUniform2i64NV_fnptr = (delegate* unmanaged<int, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2i64NV");
            _glUniform2i64NV_fnptr(location, x, y);
        }
        
        /// <summary><b>[entry point: <c>glUniform2i64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, long*, void> _glUniform2i64vARB_fnptr = &glUniform2i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2i64vARB_Lazy(int location, int count, long* value)
        {
            _glUniform2i64vARB_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2i64vARB");
            _glUniform2i64vARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform2i64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, long*, void> _glUniform2i64vNV_fnptr = &glUniform2i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2i64vNV_Lazy(int location, int count, long* value)
        {
            _glUniform2i64vNV_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2i64vNV");
            _glUniform2i64vNV_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform2iARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glUniform2iARB_fnptr = &glUniform2iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2iARB_Lazy(int location, int v0, int v1)
        {
            _glUniform2iARB_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2iARB");
            _glUniform2iARB_fnptr(location, v0, v1);
        }
        
        /// <summary><b>[entry point: <c>glUniform2iv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, void> _glUniform2iv_fnptr = &glUniform2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2iv_Lazy(int location, int count, int* value)
        {
            _glUniform2iv_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2iv");
            _glUniform2iv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform2ivARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, void> _glUniform2ivARB_fnptr = &glUniform2ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2ivARB_Lazy(int location, int count, int* value)
        {
            _glUniform2ivARB_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2ivARB");
            _glUniform2ivARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform2ui</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, void> _glUniform2ui_fnptr = &glUniform2ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2ui_Lazy(int location, uint v0, uint v1)
        {
            _glUniform2ui_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2ui");
            _glUniform2ui_fnptr(location, v0, v1);
        }
        
        /// <summary><b>[entry point: <c>glUniform2ui64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, ulong, ulong, void> _glUniform2ui64ARB_fnptr = &glUniform2ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2ui64ARB_Lazy(int location, ulong x, ulong y)
        {
            _glUniform2ui64ARB_fnptr = (delegate* unmanaged<int, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2ui64ARB");
            _glUniform2ui64ARB_fnptr(location, x, y);
        }
        
        /// <summary><b>[entry point: <c>glUniform2ui64NV</c>]</b></summary>
        public static delegate* unmanaged<int, ulong, ulong, void> _glUniform2ui64NV_fnptr = &glUniform2ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2ui64NV_Lazy(int location, ulong x, ulong y)
        {
            _glUniform2ui64NV_fnptr = (delegate* unmanaged<int, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2ui64NV");
            _glUniform2ui64NV_fnptr(location, x, y);
        }
        
        /// <summary><b>[entry point: <c>glUniform2ui64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong*, void> _glUniform2ui64vARB_fnptr = &glUniform2ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2ui64vARB_Lazy(int location, int count, ulong* value)
        {
            _glUniform2ui64vARB_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2ui64vARB");
            _glUniform2ui64vARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform2ui64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong*, void> _glUniform2ui64vNV_fnptr = &glUniform2ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2ui64vNV_Lazy(int location, int count, ulong* value)
        {
            _glUniform2ui64vNV_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2ui64vNV");
            _glUniform2ui64vNV_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform2uiEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, void> _glUniform2uiEXT_fnptr = &glUniform2uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2uiEXT_Lazy(int location, uint v0, uint v1)
        {
            _glUniform2uiEXT_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2uiEXT");
            _glUniform2uiEXT_fnptr(location, v0, v1);
        }
        
        /// <summary><b>[entry point: <c>glUniform2uiv</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, void> _glUniform2uiv_fnptr = &glUniform2uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2uiv_Lazy(int location, int count, uint* value)
        {
            _glUniform2uiv_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2uiv");
            _glUniform2uiv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform2uivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, void> _glUniform2uivEXT_fnptr = &glUniform2uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform2uivEXT_Lazy(int location, int count, uint* value)
        {
            _glUniform2uivEXT_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2uivEXT");
            _glUniform2uivEXT_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform3d</c>]</b></summary>
        public static delegate* unmanaged<int, double, double, double, void> _glUniform3d_fnptr = &glUniform3d_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3d_Lazy(int location, double x, double y, double z)
        {
            _glUniform3d_fnptr = (delegate* unmanaged<int, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3d");
            _glUniform3d_fnptr(location, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glUniform3dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, double*, void> _glUniform3dv_fnptr = &glUniform3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3dv_Lazy(int location, int count, double* value)
        {
            _glUniform3dv_fnptr = (delegate* unmanaged<int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3dv");
            _glUniform3dv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform3f</c>]</b></summary>
        public static delegate* unmanaged<int, float, float, float, void> _glUniform3f_fnptr = &glUniform3f_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3f_Lazy(int location, float v0, float v1, float v2)
        {
            _glUniform3f_fnptr = (delegate* unmanaged<int, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3f");
            _glUniform3f_fnptr(location, v0, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glUniform3fARB</c>]</b></summary>
        public static delegate* unmanaged<int, float, float, float, void> _glUniform3fARB_fnptr = &glUniform3fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3fARB_Lazy(int location, float v0, float v1, float v2)
        {
            _glUniform3fARB_fnptr = (delegate* unmanaged<int, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3fARB");
            _glUniform3fARB_fnptr(location, v0, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glUniform3fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, float*, void> _glUniform3fv_fnptr = &glUniform3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3fv_Lazy(int location, int count, float* value)
        {
            _glUniform3fv_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3fv");
            _glUniform3fv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform3fvARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, float*, void> _glUniform3fvARB_fnptr = &glUniform3fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3fvARB_Lazy(int location, int count, float* value)
        {
            _glUniform3fvARB_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3fvARB");
            _glUniform3fvARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform3i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glUniform3i_fnptr = &glUniform3i_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3i_Lazy(int location, int v0, int v1, int v2)
        {
            _glUniform3i_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3i");
            _glUniform3i_fnptr(location, v0, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glUniform3i64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, long, long, long, void> _glUniform3i64ARB_fnptr = &glUniform3i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3i64ARB_Lazy(int location, long x, long y, long z)
        {
            _glUniform3i64ARB_fnptr = (delegate* unmanaged<int, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3i64ARB");
            _glUniform3i64ARB_fnptr(location, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glUniform3i64NV</c>]</b></summary>
        public static delegate* unmanaged<int, long, long, long, void> _glUniform3i64NV_fnptr = &glUniform3i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3i64NV_Lazy(int location, long x, long y, long z)
        {
            _glUniform3i64NV_fnptr = (delegate* unmanaged<int, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3i64NV");
            _glUniform3i64NV_fnptr(location, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glUniform3i64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, long*, void> _glUniform3i64vARB_fnptr = &glUniform3i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3i64vARB_Lazy(int location, int count, long* value)
        {
            _glUniform3i64vARB_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3i64vARB");
            _glUniform3i64vARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform3i64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, long*, void> _glUniform3i64vNV_fnptr = &glUniform3i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3i64vNV_Lazy(int location, int count, long* value)
        {
            _glUniform3i64vNV_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3i64vNV");
            _glUniform3i64vNV_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform3iARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glUniform3iARB_fnptr = &glUniform3iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3iARB_Lazy(int location, int v0, int v1, int v2)
        {
            _glUniform3iARB_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3iARB");
            _glUniform3iARB_fnptr(location, v0, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glUniform3iv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, void> _glUniform3iv_fnptr = &glUniform3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3iv_Lazy(int location, int count, int* value)
        {
            _glUniform3iv_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3iv");
            _glUniform3iv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform3ivARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, void> _glUniform3ivARB_fnptr = &glUniform3ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3ivARB_Lazy(int location, int count, int* value)
        {
            _glUniform3ivARB_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3ivARB");
            _glUniform3ivARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform3ui</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, uint, void> _glUniform3ui_fnptr = &glUniform3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3ui_Lazy(int location, uint v0, uint v1, uint v2)
        {
            _glUniform3ui_fnptr = (delegate* unmanaged<int, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3ui");
            _glUniform3ui_fnptr(location, v0, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glUniform3ui64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, ulong, ulong, ulong, void> _glUniform3ui64ARB_fnptr = &glUniform3ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3ui64ARB_Lazy(int location, ulong x, ulong y, ulong z)
        {
            _glUniform3ui64ARB_fnptr = (delegate* unmanaged<int, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3ui64ARB");
            _glUniform3ui64ARB_fnptr(location, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glUniform3ui64NV</c>]</b></summary>
        public static delegate* unmanaged<int, ulong, ulong, ulong, void> _glUniform3ui64NV_fnptr = &glUniform3ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3ui64NV_Lazy(int location, ulong x, ulong y, ulong z)
        {
            _glUniform3ui64NV_fnptr = (delegate* unmanaged<int, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3ui64NV");
            _glUniform3ui64NV_fnptr(location, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glUniform3ui64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong*, void> _glUniform3ui64vARB_fnptr = &glUniform3ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3ui64vARB_Lazy(int location, int count, ulong* value)
        {
            _glUniform3ui64vARB_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3ui64vARB");
            _glUniform3ui64vARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform3ui64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong*, void> _glUniform3ui64vNV_fnptr = &glUniform3ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3ui64vNV_Lazy(int location, int count, ulong* value)
        {
            _glUniform3ui64vNV_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3ui64vNV");
            _glUniform3ui64vNV_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform3uiEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, uint, void> _glUniform3uiEXT_fnptr = &glUniform3uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3uiEXT_Lazy(int location, uint v0, uint v1, uint v2)
        {
            _glUniform3uiEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3uiEXT");
            _glUniform3uiEXT_fnptr(location, v0, v1, v2);
        }
        
        /// <summary><b>[entry point: <c>glUniform3uiv</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, void> _glUniform3uiv_fnptr = &glUniform3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3uiv_Lazy(int location, int count, uint* value)
        {
            _glUniform3uiv_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3uiv");
            _glUniform3uiv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform3uivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, void> _glUniform3uivEXT_fnptr = &glUniform3uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform3uivEXT_Lazy(int location, int count, uint* value)
        {
            _glUniform3uivEXT_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3uivEXT");
            _glUniform3uivEXT_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform4d</c>]</b></summary>
        public static delegate* unmanaged<int, double, double, double, double, void> _glUniform4d_fnptr = &glUniform4d_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4d_Lazy(int location, double x, double y, double z, double w)
        {
            _glUniform4d_fnptr = (delegate* unmanaged<int, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4d");
            _glUniform4d_fnptr(location, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glUniform4dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, double*, void> _glUniform4dv_fnptr = &glUniform4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4dv_Lazy(int location, int count, double* value)
        {
            _glUniform4dv_fnptr = (delegate* unmanaged<int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4dv");
            _glUniform4dv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform4f</c>]</b></summary>
        public static delegate* unmanaged<int, float, float, float, float, void> _glUniform4f_fnptr = &glUniform4f_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4f_Lazy(int location, float v0, float v1, float v2, float v3)
        {
            _glUniform4f_fnptr = (delegate* unmanaged<int, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4f");
            _glUniform4f_fnptr(location, v0, v1, v2, v3);
        }
        
        /// <summary><b>[entry point: <c>glUniform4fARB</c>]</b></summary>
        public static delegate* unmanaged<int, float, float, float, float, void> _glUniform4fARB_fnptr = &glUniform4fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4fARB_Lazy(int location, float v0, float v1, float v2, float v3)
        {
            _glUniform4fARB_fnptr = (delegate* unmanaged<int, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4fARB");
            _glUniform4fARB_fnptr(location, v0, v1, v2, v3);
        }
        
        /// <summary><b>[entry point: <c>glUniform4fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, float*, void> _glUniform4fv_fnptr = &glUniform4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4fv_Lazy(int location, int count, float* value)
        {
            _glUniform4fv_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4fv");
            _glUniform4fv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform4fvARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, float*, void> _glUniform4fvARB_fnptr = &glUniform4fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4fvARB_Lazy(int location, int count, float* value)
        {
            _glUniform4fvARB_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4fvARB");
            _glUniform4fvARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform4i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, void> _glUniform4i_fnptr = &glUniform4i_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4i_Lazy(int location, int v0, int v1, int v2, int v3)
        {
            _glUniform4i_fnptr = (delegate* unmanaged<int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4i");
            _glUniform4i_fnptr(location, v0, v1, v2, v3);
        }
        
        /// <summary><b>[entry point: <c>glUniform4i64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, long, long, long, long, void> _glUniform4i64ARB_fnptr = &glUniform4i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4i64ARB_Lazy(int location, long x, long y, long z, long w)
        {
            _glUniform4i64ARB_fnptr = (delegate* unmanaged<int, long, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4i64ARB");
            _glUniform4i64ARB_fnptr(location, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glUniform4i64NV</c>]</b></summary>
        public static delegate* unmanaged<int, long, long, long, long, void> _glUniform4i64NV_fnptr = &glUniform4i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4i64NV_Lazy(int location, long x, long y, long z, long w)
        {
            _glUniform4i64NV_fnptr = (delegate* unmanaged<int, long, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4i64NV");
            _glUniform4i64NV_fnptr(location, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glUniform4i64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, long*, void> _glUniform4i64vARB_fnptr = &glUniform4i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4i64vARB_Lazy(int location, int count, long* value)
        {
            _glUniform4i64vARB_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4i64vARB");
            _glUniform4i64vARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform4i64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, long*, void> _glUniform4i64vNV_fnptr = &glUniform4i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4i64vNV_Lazy(int location, int count, long* value)
        {
            _glUniform4i64vNV_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4i64vNV");
            _glUniform4i64vNV_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform4iARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, int, void> _glUniform4iARB_fnptr = &glUniform4iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4iARB_Lazy(int location, int v0, int v1, int v2, int v3)
        {
            _glUniform4iARB_fnptr = (delegate* unmanaged<int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4iARB");
            _glUniform4iARB_fnptr(location, v0, v1, v2, v3);
        }
        
        /// <summary><b>[entry point: <c>glUniform4iv</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, void> _glUniform4iv_fnptr = &glUniform4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4iv_Lazy(int location, int count, int* value)
        {
            _glUniform4iv_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4iv");
            _glUniform4iv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform4ivARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int*, void> _glUniform4ivARB_fnptr = &glUniform4ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4ivARB_Lazy(int location, int count, int* value)
        {
            _glUniform4ivARB_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4ivARB");
            _glUniform4ivARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform4ui</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, uint, uint, void> _glUniform4ui_fnptr = &glUniform4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4ui_Lazy(int location, uint v0, uint v1, uint v2, uint v3)
        {
            _glUniform4ui_fnptr = (delegate* unmanaged<int, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4ui");
            _glUniform4ui_fnptr(location, v0, v1, v2, v3);
        }
        
        /// <summary><b>[entry point: <c>glUniform4ui64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, ulong, ulong, ulong, ulong, void> _glUniform4ui64ARB_fnptr = &glUniform4ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4ui64ARB_Lazy(int location, ulong x, ulong y, ulong z, ulong w)
        {
            _glUniform4ui64ARB_fnptr = (delegate* unmanaged<int, ulong, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4ui64ARB");
            _glUniform4ui64ARB_fnptr(location, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glUniform4ui64NV</c>]</b></summary>
        public static delegate* unmanaged<int, ulong, ulong, ulong, ulong, void> _glUniform4ui64NV_fnptr = &glUniform4ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4ui64NV_Lazy(int location, ulong x, ulong y, ulong z, ulong w)
        {
            _glUniform4ui64NV_fnptr = (delegate* unmanaged<int, ulong, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4ui64NV");
            _glUniform4ui64NV_fnptr(location, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glUniform4ui64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong*, void> _glUniform4ui64vARB_fnptr = &glUniform4ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4ui64vARB_Lazy(int location, int count, ulong* value)
        {
            _glUniform4ui64vARB_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4ui64vARB");
            _glUniform4ui64vARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform4ui64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong*, void> _glUniform4ui64vNV_fnptr = &glUniform4ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4ui64vNV_Lazy(int location, int count, ulong* value)
        {
            _glUniform4ui64vNV_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4ui64vNV");
            _glUniform4ui64vNV_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform4uiEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, uint, uint, void> _glUniform4uiEXT_fnptr = &glUniform4uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4uiEXT_Lazy(int location, uint v0, uint v1, uint v2, uint v3)
        {
            _glUniform4uiEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4uiEXT");
            _glUniform4uiEXT_fnptr(location, v0, v1, v2, v3);
        }
        
        /// <summary><b>[entry point: <c>glUniform4uiv</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, void> _glUniform4uiv_fnptr = &glUniform4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4uiv_Lazy(int location, int count, uint* value)
        {
            _glUniform4uiv_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4uiv");
            _glUniform4uiv_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniform4uivEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint*, void> _glUniform4uivEXT_fnptr = &glUniform4uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniform4uivEXT_Lazy(int location, int count, uint* value)
        {
            _glUniform4uivEXT_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4uivEXT");
            _glUniform4uivEXT_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformBlockBinding</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, void> _glUniformBlockBinding_fnptr = &glUniformBlockBinding_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformBlockBinding_Lazy(int program, uint uniformBlockIndex, uint uniformBlockBinding)
        {
            _glUniformBlockBinding_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniformBlockBinding");
            _glUniformBlockBinding_fnptr(program, uniformBlockIndex, uniformBlockBinding);
        }
        
        /// <summary><b>[entry point: <c>glUniformBufferEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glUniformBufferEXT_fnptr = &glUniformBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformBufferEXT_Lazy(int program, int location, int buffer)
        {
            _glUniformBufferEXT_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniformBufferEXT");
            _glUniformBufferEXT_fnptr(program, location, buffer);
        }
        
        /// <summary><b>[entry point: <c>glUniformHandleui64ARB</c>]</b></summary>
        public static delegate* unmanaged<int, ulong, void> _glUniformHandleui64ARB_fnptr = &glUniformHandleui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformHandleui64ARB_Lazy(int location, ulong value)
        {
            _glUniformHandleui64ARB_fnptr = (delegate* unmanaged<int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniformHandleui64ARB");
            _glUniformHandleui64ARB_fnptr(location, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformHandleui64IMG</c>]</b></summary>
        public static delegate* unmanaged<int, ulong, void> _glUniformHandleui64IMG_fnptr = &glUniformHandleui64IMG_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformHandleui64IMG_Lazy(int location, ulong value)
        {
            _glUniformHandleui64IMG_fnptr = (delegate* unmanaged<int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniformHandleui64IMG");
            _glUniformHandleui64IMG_fnptr(location, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformHandleui64NV</c>]</b></summary>
        public static delegate* unmanaged<int, ulong, void> _glUniformHandleui64NV_fnptr = &glUniformHandleui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformHandleui64NV_Lazy(int location, ulong value)
        {
            _glUniformHandleui64NV_fnptr = (delegate* unmanaged<int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniformHandleui64NV");
            _glUniformHandleui64NV_fnptr(location, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformHandleui64vARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong*, void> _glUniformHandleui64vARB_fnptr = &glUniformHandleui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformHandleui64vARB_Lazy(int location, int count, ulong* value)
        {
            _glUniformHandleui64vARB_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformHandleui64vARB");
            _glUniformHandleui64vARB_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformHandleui64vIMG</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong*, void> _glUniformHandleui64vIMG_fnptr = &glUniformHandleui64vIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformHandleui64vIMG_Lazy(int location, int count, ulong* value)
        {
            _glUniformHandleui64vIMG_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformHandleui64vIMG");
            _glUniformHandleui64vIMG_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformHandleui64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong*, void> _glUniformHandleui64vNV_fnptr = &glUniformHandleui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformHandleui64vNV_Lazy(int location, int count, ulong* value)
        {
            _glUniformHandleui64vNV_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformHandleui64vNV");
            _glUniformHandleui64vNV_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix2dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, double*, void> _glUniformMatrix2dv_fnptr = &glUniformMatrix2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix2dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _glUniformMatrix2dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2dv");
            _glUniformMatrix2dv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix2fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix2fv_fnptr = &glUniformMatrix2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix2fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix2fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2fv");
            _glUniformMatrix2fv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix2fvARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix2fvARB_fnptr = &glUniformMatrix2fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix2fvARB_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix2fvARB_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2fvARB");
            _glUniformMatrix2fvARB_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix2x3dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, double*, void> _glUniformMatrix2x3dv_fnptr = &glUniformMatrix2x3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix2x3dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _glUniformMatrix2x3dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2x3dv");
            _glUniformMatrix2x3dv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix2x3fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix2x3fv_fnptr = &glUniformMatrix2x3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix2x3fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix2x3fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2x3fv");
            _glUniformMatrix2x3fv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix2x3fvNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix2x3fvNV_fnptr = &glUniformMatrix2x3fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix2x3fvNV_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix2x3fvNV_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2x3fvNV");
            _glUniformMatrix2x3fvNV_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix2x4dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, double*, void> _glUniformMatrix2x4dv_fnptr = &glUniformMatrix2x4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix2x4dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _glUniformMatrix2x4dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2x4dv");
            _glUniformMatrix2x4dv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix2x4fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix2x4fv_fnptr = &glUniformMatrix2x4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix2x4fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix2x4fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2x4fv");
            _glUniformMatrix2x4fv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix2x4fvNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix2x4fvNV_fnptr = &glUniformMatrix2x4fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix2x4fvNV_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix2x4fvNV_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2x4fvNV");
            _glUniformMatrix2x4fvNV_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix3dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, double*, void> _glUniformMatrix3dv_fnptr = &glUniformMatrix3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix3dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _glUniformMatrix3dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3dv");
            _glUniformMatrix3dv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix3fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix3fv_fnptr = &glUniformMatrix3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix3fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix3fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3fv");
            _glUniformMatrix3fv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix3fvARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix3fvARB_fnptr = &glUniformMatrix3fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix3fvARB_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix3fvARB_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3fvARB");
            _glUniformMatrix3fvARB_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix3x2dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, double*, void> _glUniformMatrix3x2dv_fnptr = &glUniformMatrix3x2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix3x2dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _glUniformMatrix3x2dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3x2dv");
            _glUniformMatrix3x2dv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix3x2fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix3x2fv_fnptr = &glUniformMatrix3x2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix3x2fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix3x2fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3x2fv");
            _glUniformMatrix3x2fv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix3x2fvNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix3x2fvNV_fnptr = &glUniformMatrix3x2fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix3x2fvNV_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix3x2fvNV_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3x2fvNV");
            _glUniformMatrix3x2fvNV_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix3x4dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, double*, void> _glUniformMatrix3x4dv_fnptr = &glUniformMatrix3x4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix3x4dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _glUniformMatrix3x4dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3x4dv");
            _glUniformMatrix3x4dv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix3x4fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix3x4fv_fnptr = &glUniformMatrix3x4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix3x4fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix3x4fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3x4fv");
            _glUniformMatrix3x4fv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix3x4fvNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix3x4fvNV_fnptr = &glUniformMatrix3x4fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix3x4fvNV_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix3x4fvNV_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3x4fvNV");
            _glUniformMatrix3x4fvNV_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix4dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, double*, void> _glUniformMatrix4dv_fnptr = &glUniformMatrix4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix4dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _glUniformMatrix4dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4dv");
            _glUniformMatrix4dv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix4fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix4fv_fnptr = &glUniformMatrix4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix4fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix4fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4fv");
            _glUniformMatrix4fv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix4fvARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix4fvARB_fnptr = &glUniformMatrix4fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix4fvARB_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix4fvARB_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4fvARB");
            _glUniformMatrix4fvARB_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix4x2dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, double*, void> _glUniformMatrix4x2dv_fnptr = &glUniformMatrix4x2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix4x2dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _glUniformMatrix4x2dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4x2dv");
            _glUniformMatrix4x2dv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix4x2fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix4x2fv_fnptr = &glUniformMatrix4x2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix4x2fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix4x2fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4x2fv");
            _glUniformMatrix4x2fv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix4x2fvNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix4x2fvNV_fnptr = &glUniformMatrix4x2fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix4x2fvNV_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix4x2fvNV_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4x2fvNV");
            _glUniformMatrix4x2fvNV_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix4x3dv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, double*, void> _glUniformMatrix4x3dv_fnptr = &glUniformMatrix4x3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix4x3dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _glUniformMatrix4x3dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4x3dv");
            _glUniformMatrix4x3dv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix4x3fv</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix4x3fv_fnptr = &glUniformMatrix4x3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix4x3fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix4x3fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4x3fv");
            _glUniformMatrix4x3fv_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformMatrix4x3fvNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, byte, float*, void> _glUniformMatrix4x3fvNV_fnptr = &glUniformMatrix4x3fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformMatrix4x3fvNV_Lazy(int location, int count, byte transpose, float* value)
        {
            _glUniformMatrix4x3fvNV_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4x3fvNV");
            _glUniformMatrix4x3fvNV_fnptr(location, count, transpose, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformSubroutinesuiv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, void> _glUniformSubroutinesuiv_fnptr = &glUniformSubroutinesuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformSubroutinesuiv_Lazy(uint shadertype, int count, uint* indices)
        {
            _glUniformSubroutinesuiv_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformSubroutinesuiv");
            _glUniformSubroutinesuiv_fnptr(shadertype, count, indices);
        }
        
        /// <summary><b>[entry point: <c>glUniformui64NV</c>]</b></summary>
        public static delegate* unmanaged<int, ulong, void> _glUniformui64NV_fnptr = &glUniformui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformui64NV_Lazy(int location, ulong value)
        {
            _glUniformui64NV_fnptr = (delegate* unmanaged<int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniformui64NV");
            _glUniformui64NV_fnptr(location, value);
        }
        
        /// <summary><b>[entry point: <c>glUniformui64vNV</c>]</b></summary>
        public static delegate* unmanaged<int, int, ulong*, void> _glUniformui64vNV_fnptr = &glUniformui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glUniformui64vNV_Lazy(int location, int count, ulong* value)
        {
            _glUniformui64vNV_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformui64vNV");
            _glUniformui64vNV_fnptr(location, count, value);
        }
        
        /// <summary><b>[entry point: <c>glUnlockArraysEXT</c>]</b></summary>
        public static delegate* unmanaged<void> _glUnlockArraysEXT_fnptr = &glUnlockArraysEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glUnlockArraysEXT_Lazy()
        {
            _glUnlockArraysEXT_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glUnlockArraysEXT");
            _glUnlockArraysEXT_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glUnmapBuffer</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glUnmapBuffer_fnptr = &glUnmapBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static byte glUnmapBuffer_Lazy(uint target)
        {
            _glUnmapBuffer_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glUnmapBuffer");
            return _glUnmapBuffer_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glUnmapBufferARB</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glUnmapBufferARB_fnptr = &glUnmapBufferARB_Lazy;
        [UnmanagedCallersOnly]
        private static byte glUnmapBufferARB_Lazy(uint target)
        {
            _glUnmapBufferARB_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glUnmapBufferARB");
            return _glUnmapBufferARB_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glUnmapBufferOES</c>]</b></summary>
        public static delegate* unmanaged<uint, byte> _glUnmapBufferOES_fnptr = &glUnmapBufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static byte glUnmapBufferOES_Lazy(uint target)
        {
            _glUnmapBufferOES_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glUnmapBufferOES");
            return _glUnmapBufferOES_fnptr(target);
        }
        
        /// <summary><b>[entry point: <c>glUnmapNamedBuffer</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glUnmapNamedBuffer_fnptr = &glUnmapNamedBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static byte glUnmapNamedBuffer_Lazy(int buffer)
        {
            _glUnmapNamedBuffer_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glUnmapNamedBuffer");
            return _glUnmapNamedBuffer_fnptr(buffer);
        }
        
        /// <summary><b>[entry point: <c>glUnmapNamedBufferEXT</c>]</b></summary>
        public static delegate* unmanaged<int, byte> _glUnmapNamedBufferEXT_fnptr = &glUnmapNamedBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte glUnmapNamedBufferEXT_Lazy(int buffer)
        {
            _glUnmapNamedBufferEXT_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glUnmapNamedBufferEXT");
            return _glUnmapNamedBufferEXT_fnptr(buffer);
        }
        
        /// <summary><b>[entry point: <c>glUnmapObjectBufferATI</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glUnmapObjectBufferATI_fnptr = &glUnmapObjectBufferATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glUnmapObjectBufferATI_Lazy(int buffer)
        {
            _glUnmapObjectBufferATI_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glUnmapObjectBufferATI");
            _glUnmapObjectBufferATI_fnptr(buffer);
        }
        
        /// <summary><b>[entry point: <c>glUnmapTexture2DINTEL</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glUnmapTexture2DINTEL_fnptr = &glUnmapTexture2DINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glUnmapTexture2DINTEL_Lazy(int texture, int level)
        {
            _glUnmapTexture2DINTEL_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUnmapTexture2DINTEL");
            _glUnmapTexture2DINTEL_fnptr(texture, level);
        }
        
        /// <summary><b>[entry point: <c>glUpdateObjectBufferATI</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void*, uint, void> _glUpdateObjectBufferATI_fnptr = &glUpdateObjectBufferATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glUpdateObjectBufferATI_Lazy(int buffer, uint offset, int size, void* pointer, uint preserve)
        {
            _glUpdateObjectBufferATI_fnptr = (delegate* unmanaged<int, uint, int, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUpdateObjectBufferATI");
            _glUpdateObjectBufferATI_fnptr(buffer, offset, size, pointer, preserve);
        }
        
        /// <summary><b>[entry point: <c>glUploadGpuMaskNVX</c>]</b></summary>
        public static delegate* unmanaged<uint, void> _glUploadGpuMaskNVX_fnptr = &glUploadGpuMaskNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void glUploadGpuMaskNVX_Lazy(uint mask)
        {
            _glUploadGpuMaskNVX_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glUploadGpuMaskNVX");
            _glUploadGpuMaskNVX_fnptr(mask);
        }
        
        /// <summary><b>[entry point: <c>glUseProgram</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glUseProgram_fnptr = &glUseProgram_Lazy;
        [UnmanagedCallersOnly]
        private static void glUseProgram_Lazy(int program)
        {
            _glUseProgram_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glUseProgram");
            _glUseProgram_fnptr(program);
        }
        
        /// <summary><b>[entry point: <c>glUseProgramObjectARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, void> _glUseProgramObjectARB_fnptr = &glUseProgramObjectARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glUseProgramObjectARB_Lazy(IntPtr programObj)
        {
            _glUseProgramObjectARB_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glUseProgramObjectARB");
            _glUseProgramObjectARB_fnptr(programObj);
        }
        
        /// <summary><b>[entry point: <c>glUseProgramStages</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glUseProgramStages_fnptr = &glUseProgramStages_Lazy;
        [UnmanagedCallersOnly]
        private static void glUseProgramStages_Lazy(int pipeline, uint stages, int program)
        {
            _glUseProgramStages_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glUseProgramStages");
            _glUseProgramStages_fnptr(pipeline, stages, program);
        }
        
        /// <summary><b>[entry point: <c>glUseProgramStagesEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glUseProgramStagesEXT_fnptr = &glUseProgramStagesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glUseProgramStagesEXT_Lazy(int pipeline, uint stages, int program)
        {
            _glUseProgramStagesEXT_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glUseProgramStagesEXT");
            _glUseProgramStagesEXT_fnptr(pipeline, stages, program);
        }
        
        /// <summary><b>[entry point: <c>glUseShaderProgramEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glUseShaderProgramEXT_fnptr = &glUseShaderProgramEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glUseShaderProgramEXT_Lazy(uint type, int program)
        {
            _glUseShaderProgramEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glUseShaderProgramEXT");
            _glUseShaderProgramEXT_fnptr(type, program);
        }
        
        /// <summary><b>[entry point: <c>glValidateProgram</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glValidateProgram_fnptr = &glValidateProgram_Lazy;
        [UnmanagedCallersOnly]
        private static void glValidateProgram_Lazy(int program)
        {
            _glValidateProgram_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glValidateProgram");
            _glValidateProgram_fnptr(program);
        }
        
        /// <summary><b>[entry point: <c>glValidateProgramARB</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, void> _glValidateProgramARB_fnptr = &glValidateProgramARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glValidateProgramARB_Lazy(IntPtr programObj)
        {
            _glValidateProgramARB_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glValidateProgramARB");
            _glValidateProgramARB_fnptr(programObj);
        }
        
        /// <summary><b>[entry point: <c>glValidateProgramPipeline</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glValidateProgramPipeline_fnptr = &glValidateProgramPipeline_Lazy;
        [UnmanagedCallersOnly]
        private static void glValidateProgramPipeline_Lazy(int pipeline)
        {
            _glValidateProgramPipeline_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glValidateProgramPipeline");
            _glValidateProgramPipeline_fnptr(pipeline);
        }
        
        /// <summary><b>[entry point: <c>glValidateProgramPipelineEXT</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glValidateProgramPipelineEXT_fnptr = &glValidateProgramPipelineEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glValidateProgramPipelineEXT_Lazy(int pipeline)
        {
            _glValidateProgramPipelineEXT_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glValidateProgramPipelineEXT");
            _glValidateProgramPipelineEXT_fnptr(pipeline);
        }
        
        /// <summary><b>[entry point: <c>glVariantArrayObjectATI</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, int, uint, void> _glVariantArrayObjectATI_fnptr = &glVariantArrayObjectATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVariantArrayObjectATI_Lazy(uint id, uint type, int stride, int buffer, uint offset)
        {
            _glVariantArrayObjectATI_fnptr = (delegate* unmanaged<uint, uint, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVariantArrayObjectATI");
            _glVariantArrayObjectATI_fnptr(id, type, stride, buffer, offset);
        }
        
        /// <summary><b>[entry point: <c>glVariantbvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte*, void> _glVariantbvEXT_fnptr = &glVariantbvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVariantbvEXT_Lazy(uint id, sbyte* addr)
        {
            _glVariantbvEXT_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantbvEXT");
            _glVariantbvEXT_fnptr(id, addr);
        }
        
        /// <summary><b>[entry point: <c>glVariantdvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVariantdvEXT_fnptr = &glVariantdvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVariantdvEXT_Lazy(uint id, double* addr)
        {
            _glVariantdvEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantdvEXT");
            _glVariantdvEXT_fnptr(id, addr);
        }
        
        /// <summary><b>[entry point: <c>glVariantfvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVariantfvEXT_fnptr = &glVariantfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVariantfvEXT_Lazy(uint id, float* addr)
        {
            _glVariantfvEXT_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantfvEXT");
            _glVariantfvEXT_fnptr(id, addr);
        }
        
        /// <summary><b>[entry point: <c>glVariantivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVariantivEXT_fnptr = &glVariantivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVariantivEXT_Lazy(uint id, int* addr)
        {
            _glVariantivEXT_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantivEXT");
            _glVariantivEXT_fnptr(id, addr);
        }
        
        /// <summary><b>[entry point: <c>glVariantPointerEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void*, void> _glVariantPointerEXT_fnptr = &glVariantPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVariantPointerEXT_Lazy(uint id, uint type, uint stride, void* addr)
        {
            _glVariantPointerEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantPointerEXT");
            _glVariantPointerEXT_fnptr(id, type, stride, addr);
        }
        
        /// <summary><b>[entry point: <c>glVariantsvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVariantsvEXT_fnptr = &glVariantsvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVariantsvEXT_Lazy(uint id, short* addr)
        {
            _glVariantsvEXT_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantsvEXT");
            _glVariantsvEXT_fnptr(id, addr);
        }
        
        /// <summary><b>[entry point: <c>glVariantubvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, byte*, void> _glVariantubvEXT_fnptr = &glVariantubvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVariantubvEXT_Lazy(uint id, byte* addr)
        {
            _glVariantubvEXT_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantubvEXT");
            _glVariantubvEXT_fnptr(id, addr);
        }
        
        /// <summary><b>[entry point: <c>glVariantuivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVariantuivEXT_fnptr = &glVariantuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVariantuivEXT_Lazy(uint id, uint* addr)
        {
            _glVariantuivEXT_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantuivEXT");
            _glVariantuivEXT_fnptr(id, addr);
        }
        
        /// <summary><b>[entry point: <c>glVariantusvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, ushort*, void> _glVariantusvEXT_fnptr = &glVariantusvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVariantusvEXT_Lazy(uint id, ushort* addr)
        {
            _glVariantusvEXT_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantusvEXT");
            _glVariantusvEXT_fnptr(id, addr);
        }
        
        /// <summary><b>[entry point: <c>glVDPAUFiniNV</c>]</b></summary>
        public static delegate* unmanaged<void> _glVDPAUFiniNV_fnptr = &glVDPAUFiniNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVDPAUFiniNV_Lazy()
        {
            _glVDPAUFiniNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glVDPAUFiniNV");
            _glVDPAUFiniNV_fnptr();
        }
        
        /// <summary><b>[entry point: <c>glVDPAUGetSurfaceivNV</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, uint, int, int*, int*, void> _glVDPAUGetSurfaceivNV_fnptr = &glVDPAUGetSurfaceivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVDPAUGetSurfaceivNV_Lazy(IntPtr surface, uint pname, int count, int* length, int* values)
        {
            _glVDPAUGetSurfaceivNV_fnptr = (delegate* unmanaged<IntPtr, uint, int, int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVDPAUGetSurfaceivNV");
            _glVDPAUGetSurfaceivNV_fnptr(surface, pname, count, length, values);
        }
        
        /// <summary><b>[entry point: <c>glVDPAUInitNV</c>]</b></summary>
        public static delegate* unmanaged<void*, void*, void> _glVDPAUInitNV_fnptr = &glVDPAUInitNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVDPAUInitNV_Lazy(void* vdpDevice, void* getProcAddress)
        {
            _glVDPAUInitNV_fnptr = (delegate* unmanaged<void*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVDPAUInitNV");
            _glVDPAUInitNV_fnptr(vdpDevice, getProcAddress);
        }
        
        /// <summary><b>[entry point: <c>glVDPAUIsSurfaceNV</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, byte> _glVDPAUIsSurfaceNV_fnptr = &glVDPAUIsSurfaceNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte glVDPAUIsSurfaceNV_Lazy(IntPtr surface)
        {
            _glVDPAUIsSurfaceNV_fnptr = (delegate* unmanaged<IntPtr, byte>)GLLoader.BindingsContext.GetProcAddress("glVDPAUIsSurfaceNV");
            return _glVDPAUIsSurfaceNV_fnptr(surface);
        }
        
        /// <summary><b>[entry point: <c>glVDPAUMapSurfacesNV</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr*, void> _glVDPAUMapSurfacesNV_fnptr = &glVDPAUMapSurfacesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVDPAUMapSurfacesNV_Lazy(int numSurfaces, IntPtr* surfaces)
        {
            _glVDPAUMapSurfacesNV_fnptr = (delegate* unmanaged<int, IntPtr*, void>)GLLoader.BindingsContext.GetProcAddress("glVDPAUMapSurfacesNV");
            _glVDPAUMapSurfacesNV_fnptr(numSurfaces, surfaces);
        }
        
        /// <summary><b>[entry point: <c>glVDPAURegisterOutputSurfaceNV</c>]</b></summary>
        public static delegate* unmanaged<void*, uint, int, uint*, IntPtr> _glVDPAURegisterOutputSurfaceNV_fnptr = &glVDPAURegisterOutputSurfaceNV_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr glVDPAURegisterOutputSurfaceNV_Lazy(void* vdpSurface, uint target, int numTextureNames, uint* textureNames)
        {
            _glVDPAURegisterOutputSurfaceNV_fnptr = (delegate* unmanaged<void*, uint, int, uint*, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glVDPAURegisterOutputSurfaceNV");
            return _glVDPAURegisterOutputSurfaceNV_fnptr(vdpSurface, target, numTextureNames, textureNames);
        }
        
        /// <summary><b>[entry point: <c>glVDPAURegisterVideoSurfaceNV</c>]</b></summary>
        public static delegate* unmanaged<void*, uint, int, uint*, IntPtr> _glVDPAURegisterVideoSurfaceNV_fnptr = &glVDPAURegisterVideoSurfaceNV_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr glVDPAURegisterVideoSurfaceNV_Lazy(void* vdpSurface, uint target, int numTextureNames, uint* textureNames)
        {
            _glVDPAURegisterVideoSurfaceNV_fnptr = (delegate* unmanaged<void*, uint, int, uint*, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glVDPAURegisterVideoSurfaceNV");
            return _glVDPAURegisterVideoSurfaceNV_fnptr(vdpSurface, target, numTextureNames, textureNames);
        }
        
        /// <summary><b>[entry point: <c>glVDPAURegisterVideoSurfaceWithPictureStructureNV</c>]</b></summary>
        public static delegate* unmanaged<void*, uint, int, uint*, byte, IntPtr> _glVDPAURegisterVideoSurfaceWithPictureStructureNV_fnptr = &glVDPAURegisterVideoSurfaceWithPictureStructureNV_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr glVDPAURegisterVideoSurfaceWithPictureStructureNV_Lazy(void* vdpSurface, uint target, int numTextureNames, uint* textureNames, byte isFrameStructure)
        {
            _glVDPAURegisterVideoSurfaceWithPictureStructureNV_fnptr = (delegate* unmanaged<void*, uint, int, uint*, byte, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glVDPAURegisterVideoSurfaceWithPictureStructureNV");
            return _glVDPAURegisterVideoSurfaceWithPictureStructureNV_fnptr(vdpSurface, target, numTextureNames, textureNames, isFrameStructure);
        }
        
        /// <summary><b>[entry point: <c>glVDPAUSurfaceAccessNV</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, uint, void> _glVDPAUSurfaceAccessNV_fnptr = &glVDPAUSurfaceAccessNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVDPAUSurfaceAccessNV_Lazy(IntPtr surface, uint access)
        {
            _glVDPAUSurfaceAccessNV_fnptr = (delegate* unmanaged<IntPtr, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVDPAUSurfaceAccessNV");
            _glVDPAUSurfaceAccessNV_fnptr(surface, access);
        }
        
        /// <summary><b>[entry point: <c>glVDPAUUnmapSurfacesNV</c>]</b></summary>
        public static delegate* unmanaged<int, IntPtr*, void> _glVDPAUUnmapSurfacesNV_fnptr = &glVDPAUUnmapSurfacesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVDPAUUnmapSurfacesNV_Lazy(int numSurface, IntPtr* surfaces)
        {
            _glVDPAUUnmapSurfacesNV_fnptr = (delegate* unmanaged<int, IntPtr*, void>)GLLoader.BindingsContext.GetProcAddress("glVDPAUUnmapSurfacesNV");
            _glVDPAUUnmapSurfacesNV_fnptr(numSurface, surfaces);
        }
        
        /// <summary><b>[entry point: <c>glVDPAUUnregisterSurfaceNV</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, void> _glVDPAUUnregisterSurfaceNV_fnptr = &glVDPAUUnregisterSurfaceNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVDPAUUnregisterSurfaceNV_Lazy(IntPtr surface)
        {
            _glVDPAUUnregisterSurfaceNV_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVDPAUUnregisterSurfaceNV");
            _glVDPAUUnregisterSurfaceNV_fnptr(surface);
        }
        
        /// <summary><b>[entry point: <c>glVertex2bOES</c>]</b></summary>
        public static delegate* unmanaged<sbyte, sbyte, void> _glVertex2bOES_fnptr = &glVertex2bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex2bOES_Lazy(sbyte x, sbyte y)
        {
            _glVertex2bOES_fnptr = (delegate* unmanaged<sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2bOES");
            _glVertex2bOES_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertex2bvOES</c>]</b></summary>
        public static delegate* unmanaged<sbyte*, void> _glVertex2bvOES_fnptr = &glVertex2bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex2bvOES_Lazy(sbyte* coords)
        {
            _glVertex2bvOES_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2bvOES");
            _glVertex2bvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glVertex2d</c>]</b></summary>
        public static delegate* unmanaged<double, double, void> _glVertex2d_fnptr = &glVertex2d_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex2d_Lazy(double x, double y)
        {
            _glVertex2d_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2d");
            _glVertex2d_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertex2dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glVertex2dv_fnptr = &glVertex2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex2dv_Lazy(double* v)
        {
            _glVertex2dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2dv");
            _glVertex2dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glVertex2f</c>]</b></summary>
        public static delegate* unmanaged<float, float, void> _glVertex2f_fnptr = &glVertex2f_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex2f_Lazy(float x, float y)
        {
            _glVertex2f_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2f");
            _glVertex2f_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertex2fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glVertex2fv_fnptr = &glVertex2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex2fv_Lazy(float* v)
        {
            _glVertex2fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2fv");
            _glVertex2fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glVertex2hNV</c>]</b></summary>
        public static delegate* unmanaged<Half, Half, void> _glVertex2hNV_fnptr = &glVertex2hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex2hNV_Lazy(Half x, Half y)
        {
            _glVertex2hNV_fnptr = (delegate* unmanaged<Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2hNV");
            _glVertex2hNV_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertex2hvNV</c>]</b></summary>
        public static delegate* unmanaged<Half*, void> _glVertex2hvNV_fnptr = &glVertex2hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex2hvNV_Lazy(Half* v)
        {
            _glVertex2hvNV_fnptr = (delegate* unmanaged<Half*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2hvNV");
            _glVertex2hvNV_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glVertex2i</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glVertex2i_fnptr = &glVertex2i_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex2i_Lazy(int x, int y)
        {
            _glVertex2i_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2i");
            _glVertex2i_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertex2iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glVertex2iv_fnptr = &glVertex2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex2iv_Lazy(int* v)
        {
            _glVertex2iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2iv");
            _glVertex2iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glVertex2s</c>]</b></summary>
        public static delegate* unmanaged<short, short, void> _glVertex2s_fnptr = &glVertex2s_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex2s_Lazy(short x, short y)
        {
            _glVertex2s_fnptr = (delegate* unmanaged<short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2s");
            _glVertex2s_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertex2sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glVertex2sv_fnptr = &glVertex2sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex2sv_Lazy(short* v)
        {
            _glVertex2sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2sv");
            _glVertex2sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glVertex2xOES</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glVertex2xOES_fnptr = &glVertex2xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex2xOES_Lazy(int x)
        {
            _glVertex2xOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2xOES");
            _glVertex2xOES_fnptr(x);
        }
        
        /// <summary><b>[entry point: <c>glVertex2xvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glVertex2xvOES_fnptr = &glVertex2xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex2xvOES_Lazy(int* coords)
        {
            _glVertex2xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2xvOES");
            _glVertex2xvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glVertex3bOES</c>]</b></summary>
        public static delegate* unmanaged<sbyte, sbyte, sbyte, void> _glVertex3bOES_fnptr = &glVertex3bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex3bOES_Lazy(sbyte x, sbyte y, sbyte z)
        {
            _glVertex3bOES_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3bOES");
            _glVertex3bOES_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertex3bvOES</c>]</b></summary>
        public static delegate* unmanaged<sbyte*, void> _glVertex3bvOES_fnptr = &glVertex3bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex3bvOES_Lazy(sbyte* coords)
        {
            _glVertex3bvOES_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3bvOES");
            _glVertex3bvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glVertex3d</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, void> _glVertex3d_fnptr = &glVertex3d_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex3d_Lazy(double x, double y, double z)
        {
            _glVertex3d_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3d");
            _glVertex3d_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertex3dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glVertex3dv_fnptr = &glVertex3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex3dv_Lazy(double* v)
        {
            _glVertex3dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3dv");
            _glVertex3dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glVertex3f</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glVertex3f_fnptr = &glVertex3f_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex3f_Lazy(float x, float y, float z)
        {
            _glVertex3f_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3f");
            _glVertex3f_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertex3fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glVertex3fv_fnptr = &glVertex3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex3fv_Lazy(float* v)
        {
            _glVertex3fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3fv");
            _glVertex3fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glVertex3hNV</c>]</b></summary>
        public static delegate* unmanaged<Half, Half, Half, void> _glVertex3hNV_fnptr = &glVertex3hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex3hNV_Lazy(Half x, Half y, Half z)
        {
            _glVertex3hNV_fnptr = (delegate* unmanaged<Half, Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3hNV");
            _glVertex3hNV_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertex3hvNV</c>]</b></summary>
        public static delegate* unmanaged<Half*, void> _glVertex3hvNV_fnptr = &glVertex3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex3hvNV_Lazy(Half* v)
        {
            _glVertex3hvNV_fnptr = (delegate* unmanaged<Half*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3hvNV");
            _glVertex3hvNV_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glVertex3i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glVertex3i_fnptr = &glVertex3i_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex3i_Lazy(int x, int y, int z)
        {
            _glVertex3i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3i");
            _glVertex3i_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertex3iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glVertex3iv_fnptr = &glVertex3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex3iv_Lazy(int* v)
        {
            _glVertex3iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3iv");
            _glVertex3iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glVertex3s</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, void> _glVertex3s_fnptr = &glVertex3s_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex3s_Lazy(short x, short y, short z)
        {
            _glVertex3s_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3s");
            _glVertex3s_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertex3sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glVertex3sv_fnptr = &glVertex3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex3sv_Lazy(short* v)
        {
            _glVertex3sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3sv");
            _glVertex3sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glVertex3xOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glVertex3xOES_fnptr = &glVertex3xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex3xOES_Lazy(int x, int y)
        {
            _glVertex3xOES_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3xOES");
            _glVertex3xOES_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertex3xvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glVertex3xvOES_fnptr = &glVertex3xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex3xvOES_Lazy(int* coords)
        {
            _glVertex3xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3xvOES");
            _glVertex3xvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glVertex4bOES</c>]</b></summary>
        public static delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void> _glVertex4bOES_fnptr = &glVertex4bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex4bOES_Lazy(sbyte x, sbyte y, sbyte z, sbyte w)
        {
            _glVertex4bOES_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4bOES");
            _glVertex4bOES_fnptr(x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertex4bvOES</c>]</b></summary>
        public static delegate* unmanaged<sbyte*, void> _glVertex4bvOES_fnptr = &glVertex4bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex4bvOES_Lazy(sbyte* coords)
        {
            _glVertex4bvOES_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4bvOES");
            _glVertex4bvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glVertex4d</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, double, void> _glVertex4d_fnptr = &glVertex4d_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex4d_Lazy(double x, double y, double z, double w)
        {
            _glVertex4d_fnptr = (delegate* unmanaged<double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4d");
            _glVertex4d_fnptr(x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertex4dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glVertex4dv_fnptr = &glVertex4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex4dv_Lazy(double* v)
        {
            _glVertex4dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4dv");
            _glVertex4dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glVertex4f</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, void> _glVertex4f_fnptr = &glVertex4f_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex4f_Lazy(float x, float y, float z, float w)
        {
            _glVertex4f_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4f");
            _glVertex4f_fnptr(x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertex4fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glVertex4fv_fnptr = &glVertex4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex4fv_Lazy(float* v)
        {
            _glVertex4fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4fv");
            _glVertex4fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glVertex4hNV</c>]</b></summary>
        public static delegate* unmanaged<Half, Half, Half, Half, void> _glVertex4hNV_fnptr = &glVertex4hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex4hNV_Lazy(Half x, Half y, Half z, Half w)
        {
            _glVertex4hNV_fnptr = (delegate* unmanaged<Half, Half, Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4hNV");
            _glVertex4hNV_fnptr(x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertex4hvNV</c>]</b></summary>
        public static delegate* unmanaged<Half*, void> _glVertex4hvNV_fnptr = &glVertex4hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex4hvNV_Lazy(Half* v)
        {
            _glVertex4hvNV_fnptr = (delegate* unmanaged<Half*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4hvNV");
            _glVertex4hvNV_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glVertex4i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glVertex4i_fnptr = &glVertex4i_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex4i_Lazy(int x, int y, int z, int w)
        {
            _glVertex4i_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4i");
            _glVertex4i_fnptr(x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertex4iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glVertex4iv_fnptr = &glVertex4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex4iv_Lazy(int* v)
        {
            _glVertex4iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4iv");
            _glVertex4iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glVertex4s</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, short, void> _glVertex4s_fnptr = &glVertex4s_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex4s_Lazy(short x, short y, short z, short w)
        {
            _glVertex4s_fnptr = (delegate* unmanaged<short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4s");
            _glVertex4s_fnptr(x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertex4sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glVertex4sv_fnptr = &glVertex4sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex4sv_Lazy(short* v)
        {
            _glVertex4sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4sv");
            _glVertex4sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glVertex4xOES</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glVertex4xOES_fnptr = &glVertex4xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex4xOES_Lazy(int x, int y, int z)
        {
            _glVertex4xOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4xOES");
            _glVertex4xOES_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertex4xvOES</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glVertex4xvOES_fnptr = &glVertex4xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertex4xvOES_Lazy(int* coords)
        {
            _glVertex4xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4xvOES");
            _glVertex4xvOES_fnptr(coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayAttribBinding</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, void> _glVertexArrayAttribBinding_fnptr = &glVertexArrayAttribBinding_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayAttribBinding_Lazy(int vaobj, uint attribindex, uint bindingindex)
        {
            _glVertexArrayAttribBinding_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayAttribBinding");
            _glVertexArrayAttribBinding_fnptr(vaobj, attribindex, bindingindex);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayAttribFormat</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, byte, uint, void> _glVertexArrayAttribFormat_fnptr = &glVertexArrayAttribFormat_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayAttribFormat_Lazy(int vaobj, uint attribindex, int size, uint type, byte normalized, uint relativeoffset)
        {
            _glVertexArrayAttribFormat_fnptr = (delegate* unmanaged<int, uint, int, uint, byte, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayAttribFormat");
            _glVertexArrayAttribFormat_fnptr(vaobj, attribindex, size, type, normalized, relativeoffset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayAttribIFormat</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, uint, void> _glVertexArrayAttribIFormat_fnptr = &glVertexArrayAttribIFormat_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayAttribIFormat_Lazy(int vaobj, uint attribindex, int size, uint type, uint relativeoffset)
        {
            _glVertexArrayAttribIFormat_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayAttribIFormat");
            _glVertexArrayAttribIFormat_fnptr(vaobj, attribindex, size, type, relativeoffset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayAttribLFormat</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, uint, void> _glVertexArrayAttribLFormat_fnptr = &glVertexArrayAttribLFormat_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayAttribLFormat_Lazy(int vaobj, uint attribindex, int size, uint type, uint relativeoffset)
        {
            _glVertexArrayAttribLFormat_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayAttribLFormat");
            _glVertexArrayAttribLFormat_fnptr(vaobj, attribindex, size, type, relativeoffset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayBindingDivisor</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, void> _glVertexArrayBindingDivisor_fnptr = &glVertexArrayBindingDivisor_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayBindingDivisor_Lazy(int vaobj, uint bindingindex, uint divisor)
        {
            _glVertexArrayBindingDivisor_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayBindingDivisor");
            _glVertexArrayBindingDivisor_fnptr(vaobj, bindingindex, divisor);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayBindVertexBufferEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, IntPtr, int, void> _glVertexArrayBindVertexBufferEXT_fnptr = &glVertexArrayBindVertexBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayBindVertexBufferEXT_Lazy(int vaobj, uint bindingindex, int buffer, IntPtr offset, int stride)
        {
            _glVertexArrayBindVertexBufferEXT_fnptr = (delegate* unmanaged<int, uint, int, IntPtr, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayBindVertexBufferEXT");
            _glVertexArrayBindVertexBufferEXT_fnptr(vaobj, bindingindex, buffer, offset, stride);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayColorOffsetEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint, int, IntPtr, void> _glVertexArrayColorOffsetEXT_fnptr = &glVertexArrayColorOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayColorOffsetEXT_Lazy(int vaobj, int buffer, int size, uint type, int stride, IntPtr offset)
        {
            _glVertexArrayColorOffsetEXT_fnptr = (delegate* unmanaged<int, int, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayColorOffsetEXT");
            _glVertexArrayColorOffsetEXT_fnptr(vaobj, buffer, size, type, stride, offset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayEdgeFlagOffsetEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, IntPtr, void> _glVertexArrayEdgeFlagOffsetEXT_fnptr = &glVertexArrayEdgeFlagOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayEdgeFlagOffsetEXT_Lazy(int vaobj, int buffer, int stride, IntPtr offset)
        {
            _glVertexArrayEdgeFlagOffsetEXT_fnptr = (delegate* unmanaged<int, int, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayEdgeFlagOffsetEXT");
            _glVertexArrayEdgeFlagOffsetEXT_fnptr(vaobj, buffer, stride, offset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayElementBuffer</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glVertexArrayElementBuffer_fnptr = &glVertexArrayElementBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayElementBuffer_Lazy(int vaobj, int buffer)
        {
            _glVertexArrayElementBuffer_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayElementBuffer");
            _glVertexArrayElementBuffer_fnptr(vaobj, buffer);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayFogCoordOffsetEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, IntPtr, void> _glVertexArrayFogCoordOffsetEXT_fnptr = &glVertexArrayFogCoordOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayFogCoordOffsetEXT_Lazy(int vaobj, int buffer, uint type, int stride, IntPtr offset)
        {
            _glVertexArrayFogCoordOffsetEXT_fnptr = (delegate* unmanaged<int, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayFogCoordOffsetEXT");
            _glVertexArrayFogCoordOffsetEXT_fnptr(vaobj, buffer, type, stride, offset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayIndexOffsetEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, IntPtr, void> _glVertexArrayIndexOffsetEXT_fnptr = &glVertexArrayIndexOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayIndexOffsetEXT_Lazy(int vaobj, int buffer, uint type, int stride, IntPtr offset)
        {
            _glVertexArrayIndexOffsetEXT_fnptr = (delegate* unmanaged<int, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayIndexOffsetEXT");
            _glVertexArrayIndexOffsetEXT_fnptr(vaobj, buffer, type, stride, offset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayMultiTexCoordOffsetEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, uint, int, IntPtr, void> _glVertexArrayMultiTexCoordOffsetEXT_fnptr = &glVertexArrayMultiTexCoordOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayMultiTexCoordOffsetEXT_Lazy(int vaobj, int buffer, uint texunit, int size, uint type, int stride, IntPtr offset)
        {
            _glVertexArrayMultiTexCoordOffsetEXT_fnptr = (delegate* unmanaged<int, int, uint, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayMultiTexCoordOffsetEXT");
            _glVertexArrayMultiTexCoordOffsetEXT_fnptr(vaobj, buffer, texunit, size, type, stride, offset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayNormalOffsetEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, IntPtr, void> _glVertexArrayNormalOffsetEXT_fnptr = &glVertexArrayNormalOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayNormalOffsetEXT_Lazy(int vaobj, int buffer, uint type, int stride, IntPtr offset)
        {
            _glVertexArrayNormalOffsetEXT_fnptr = (delegate* unmanaged<int, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayNormalOffsetEXT");
            _glVertexArrayNormalOffsetEXT_fnptr(vaobj, buffer, type, stride, offset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayParameteriAPPLE</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glVertexArrayParameteriAPPLE_fnptr = &glVertexArrayParameteriAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayParameteriAPPLE_Lazy(uint pname, int param)
        {
            _glVertexArrayParameteriAPPLE_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayParameteriAPPLE");
            _glVertexArrayParameteriAPPLE_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayRangeAPPLE</c>]</b></summary>
        public static delegate* unmanaged<int, void*, void> _glVertexArrayRangeAPPLE_fnptr = &glVertexArrayRangeAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayRangeAPPLE_Lazy(int length, void* pointer)
        {
            _glVertexArrayRangeAPPLE_fnptr = (delegate* unmanaged<int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayRangeAPPLE");
            _glVertexArrayRangeAPPLE_fnptr(length, pointer);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayRangeNV</c>]</b></summary>
        public static delegate* unmanaged<int, void*, void> _glVertexArrayRangeNV_fnptr = &glVertexArrayRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayRangeNV_Lazy(int length, void* pointer)
        {
            _glVertexArrayRangeNV_fnptr = (delegate* unmanaged<int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayRangeNV");
            _glVertexArrayRangeNV_fnptr(length, pointer);
        }
        
        /// <summary><b>[entry point: <c>glVertexArraySecondaryColorOffsetEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint, int, IntPtr, void> _glVertexArraySecondaryColorOffsetEXT_fnptr = &glVertexArraySecondaryColorOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArraySecondaryColorOffsetEXT_Lazy(int vaobj, int buffer, int size, uint type, int stride, IntPtr offset)
        {
            _glVertexArraySecondaryColorOffsetEXT_fnptr = (delegate* unmanaged<int, int, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArraySecondaryColorOffsetEXT");
            _glVertexArraySecondaryColorOffsetEXT_fnptr(vaobj, buffer, size, type, stride, offset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayTexCoordOffsetEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint, int, IntPtr, void> _glVertexArrayTexCoordOffsetEXT_fnptr = &glVertexArrayTexCoordOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayTexCoordOffsetEXT_Lazy(int vaobj, int buffer, int size, uint type, int stride, IntPtr offset)
        {
            _glVertexArrayTexCoordOffsetEXT_fnptr = (delegate* unmanaged<int, int, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayTexCoordOffsetEXT");
            _glVertexArrayTexCoordOffsetEXT_fnptr(vaobj, buffer, size, type, stride, offset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayVertexAttribBindingEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, void> _glVertexArrayVertexAttribBindingEXT_fnptr = &glVertexArrayVertexAttribBindingEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayVertexAttribBindingEXT_Lazy(int vaobj, uint attribindex, uint bindingindex)
        {
            _glVertexArrayVertexAttribBindingEXT_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribBindingEXT");
            _glVertexArrayVertexAttribBindingEXT_fnptr(vaobj, attribindex, bindingindex);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayVertexAttribDivisorEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, void> _glVertexArrayVertexAttribDivisorEXT_fnptr = &glVertexArrayVertexAttribDivisorEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayVertexAttribDivisorEXT_Lazy(int vaobj, uint index, uint divisor)
        {
            _glVertexArrayVertexAttribDivisorEXT_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribDivisorEXT");
            _glVertexArrayVertexAttribDivisorEXT_fnptr(vaobj, index, divisor);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayVertexAttribFormatEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, byte, uint, void> _glVertexArrayVertexAttribFormatEXT_fnptr = &glVertexArrayVertexAttribFormatEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayVertexAttribFormatEXT_Lazy(int vaobj, uint attribindex, int size, uint type, byte normalized, uint relativeoffset)
        {
            _glVertexArrayVertexAttribFormatEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, byte, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribFormatEXT");
            _glVertexArrayVertexAttribFormatEXT_fnptr(vaobj, attribindex, size, type, normalized, relativeoffset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayVertexAttribIFormatEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, uint, void> _glVertexArrayVertexAttribIFormatEXT_fnptr = &glVertexArrayVertexAttribIFormatEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayVertexAttribIFormatEXT_Lazy(int vaobj, uint attribindex, int size, uint type, uint relativeoffset)
        {
            _glVertexArrayVertexAttribIFormatEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribIFormatEXT");
            _glVertexArrayVertexAttribIFormatEXT_fnptr(vaobj, attribindex, size, type, relativeoffset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayVertexAttribIOffsetEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, uint, int, IntPtr, void> _glVertexArrayVertexAttribIOffsetEXT_fnptr = &glVertexArrayVertexAttribIOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayVertexAttribIOffsetEXT_Lazy(int vaobj, int buffer, uint index, int size, uint type, int stride, IntPtr offset)
        {
            _glVertexArrayVertexAttribIOffsetEXT_fnptr = (delegate* unmanaged<int, int, uint, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribIOffsetEXT");
            _glVertexArrayVertexAttribIOffsetEXT_fnptr(vaobj, buffer, index, size, type, stride, offset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayVertexAttribLFormatEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, uint, uint, void> _glVertexArrayVertexAttribLFormatEXT_fnptr = &glVertexArrayVertexAttribLFormatEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayVertexAttribLFormatEXT_Lazy(int vaobj, uint attribindex, int size, uint type, uint relativeoffset)
        {
            _glVertexArrayVertexAttribLFormatEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribLFormatEXT");
            _glVertexArrayVertexAttribLFormatEXT_fnptr(vaobj, attribindex, size, type, relativeoffset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayVertexAttribLOffsetEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, uint, int, IntPtr, void> _glVertexArrayVertexAttribLOffsetEXT_fnptr = &glVertexArrayVertexAttribLOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayVertexAttribLOffsetEXT_Lazy(int vaobj, int buffer, uint index, int size, uint type, int stride, IntPtr offset)
        {
            _glVertexArrayVertexAttribLOffsetEXT_fnptr = (delegate* unmanaged<int, int, uint, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribLOffsetEXT");
            _glVertexArrayVertexAttribLOffsetEXT_fnptr(vaobj, buffer, index, size, type, stride, offset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayVertexAttribOffsetEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, uint, int, uint, byte, int, IntPtr, void> _glVertexArrayVertexAttribOffsetEXT_fnptr = &glVertexArrayVertexAttribOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayVertexAttribOffsetEXT_Lazy(int vaobj, int buffer, uint index, int size, uint type, byte normalized, int stride, IntPtr offset)
        {
            _glVertexArrayVertexAttribOffsetEXT_fnptr = (delegate* unmanaged<int, int, uint, int, uint, byte, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribOffsetEXT");
            _glVertexArrayVertexAttribOffsetEXT_fnptr(vaobj, buffer, index, size, type, normalized, stride, offset);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayVertexBindingDivisorEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, uint, void> _glVertexArrayVertexBindingDivisorEXT_fnptr = &glVertexArrayVertexBindingDivisorEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayVertexBindingDivisorEXT_Lazy(int vaobj, uint bindingindex, uint divisor)
        {
            _glVertexArrayVertexBindingDivisorEXT_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexBindingDivisorEXT");
            _glVertexArrayVertexBindingDivisorEXT_fnptr(vaobj, bindingindex, divisor);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayVertexBuffer</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, IntPtr, int, void> _glVertexArrayVertexBuffer_fnptr = &glVertexArrayVertexBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayVertexBuffer_Lazy(int vaobj, uint bindingindex, int buffer, IntPtr offset, int stride)
        {
            _glVertexArrayVertexBuffer_fnptr = (delegate* unmanaged<int, uint, int, IntPtr, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexBuffer");
            _glVertexArrayVertexBuffer_fnptr(vaobj, bindingindex, buffer, offset, stride);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayVertexBuffers</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int*, IntPtr*, int*, void> _glVertexArrayVertexBuffers_fnptr = &glVertexArrayVertexBuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayVertexBuffers_Lazy(int vaobj, uint first, int count, int* buffers, IntPtr* offsets, int* strides)
        {
            _glVertexArrayVertexBuffers_fnptr = (delegate* unmanaged<int, uint, int, int*, IntPtr*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexBuffers");
            _glVertexArrayVertexBuffers_fnptr(vaobj, first, count, buffers, offsets, strides);
        }
        
        /// <summary><b>[entry point: <c>glVertexArrayVertexOffsetEXT</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, uint, int, IntPtr, void> _glVertexArrayVertexOffsetEXT_fnptr = &glVertexArrayVertexOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexArrayVertexOffsetEXT_Lazy(int vaobj, int buffer, int size, uint type, int stride, IntPtr offset)
        {
            _glVertexArrayVertexOffsetEXT_fnptr = (delegate* unmanaged<int, int, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexOffsetEXT");
            _glVertexArrayVertexOffsetEXT_fnptr(vaobj, buffer, size, type, stride, offset);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1d</c>]</b></summary>
        public static delegate* unmanaged<uint, double, void> _glVertexAttrib1d_fnptr = &glVertexAttrib1d_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1d_Lazy(uint index, double x)
        {
            _glVertexAttrib1d_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1d");
            _glVertexAttrib1d_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1dARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double, void> _glVertexAttrib1dARB_fnptr = &glVertexAttrib1dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1dARB_Lazy(uint index, double x)
        {
            _glVertexAttrib1dARB_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1dARB");
            _glVertexAttrib1dARB_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1dNV</c>]</b></summary>
        public static delegate* unmanaged<uint, double, void> _glVertexAttrib1dNV_fnptr = &glVertexAttrib1dNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1dNV_Lazy(uint index, double x)
        {
            _glVertexAttrib1dNV_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1dNV");
            _glVertexAttrib1dNV_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1dv</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttrib1dv_fnptr = &glVertexAttrib1dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1dv_Lazy(uint index, double* v)
        {
            _glVertexAttrib1dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1dv");
            _glVertexAttrib1dv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1dvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttrib1dvARB_fnptr = &glVertexAttrib1dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1dvARB_Lazy(uint index, double* v)
        {
            _glVertexAttrib1dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1dvARB");
            _glVertexAttrib1dvARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1dvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttrib1dvNV_fnptr = &glVertexAttrib1dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1dvNV_Lazy(uint index, double* v)
        {
            _glVertexAttrib1dvNV_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1dvNV");
            _glVertexAttrib1dvNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1f</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glVertexAttrib1f_fnptr = &glVertexAttrib1f_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1f_Lazy(uint index, float x)
        {
            _glVertexAttrib1f_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1f");
            _glVertexAttrib1f_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1fARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glVertexAttrib1fARB_fnptr = &glVertexAttrib1fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1fARB_Lazy(uint index, float x)
        {
            _glVertexAttrib1fARB_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1fARB");
            _glVertexAttrib1fARB_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1fNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glVertexAttrib1fNV_fnptr = &glVertexAttrib1fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1fNV_Lazy(uint index, float x)
        {
            _glVertexAttrib1fNV_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1fNV");
            _glVertexAttrib1fNV_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1fv</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexAttrib1fv_fnptr = &glVertexAttrib1fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1fv_Lazy(uint index, float* v)
        {
            _glVertexAttrib1fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1fv");
            _glVertexAttrib1fv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1fvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexAttrib1fvARB_fnptr = &glVertexAttrib1fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1fvARB_Lazy(uint index, float* v)
        {
            _glVertexAttrib1fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1fvARB");
            _glVertexAttrib1fvARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1fvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexAttrib1fvNV_fnptr = &glVertexAttrib1fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1fvNV_Lazy(uint index, float* v)
        {
            _glVertexAttrib1fvNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1fvNV");
            _glVertexAttrib1fvNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1hNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half, void> _glVertexAttrib1hNV_fnptr = &glVertexAttrib1hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1hNV_Lazy(uint index, Half x)
        {
            _glVertexAttrib1hNV_fnptr = (delegate* unmanaged<uint, Half, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1hNV");
            _glVertexAttrib1hNV_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1hvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half*, void> _glVertexAttrib1hvNV_fnptr = &glVertexAttrib1hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1hvNV_Lazy(uint index, Half* v)
        {
            _glVertexAttrib1hvNV_fnptr = (delegate* unmanaged<uint, Half*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1hvNV");
            _glVertexAttrib1hvNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1s</c>]</b></summary>
        public static delegate* unmanaged<uint, short, void> _glVertexAttrib1s_fnptr = &glVertexAttrib1s_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1s_Lazy(uint index, short x)
        {
            _glVertexAttrib1s_fnptr = (delegate* unmanaged<uint, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1s");
            _glVertexAttrib1s_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1sARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short, void> _glVertexAttrib1sARB_fnptr = &glVertexAttrib1sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1sARB_Lazy(uint index, short x)
        {
            _glVertexAttrib1sARB_fnptr = (delegate* unmanaged<uint, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1sARB");
            _glVertexAttrib1sARB_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1sNV</c>]</b></summary>
        public static delegate* unmanaged<uint, short, void> _glVertexAttrib1sNV_fnptr = &glVertexAttrib1sNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1sNV_Lazy(uint index, short x)
        {
            _glVertexAttrib1sNV_fnptr = (delegate* unmanaged<uint, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1sNV");
            _glVertexAttrib1sNV_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1sv</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttrib1sv_fnptr = &glVertexAttrib1sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1sv_Lazy(uint index, short* v)
        {
            _glVertexAttrib1sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1sv");
            _glVertexAttrib1sv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1svARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttrib1svARB_fnptr = &glVertexAttrib1svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1svARB_Lazy(uint index, short* v)
        {
            _glVertexAttrib1svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1svARB");
            _glVertexAttrib1svARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib1svNV</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttrib1svNV_fnptr = &glVertexAttrib1svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib1svNV_Lazy(uint index, short* v)
        {
            _glVertexAttrib1svNV_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1svNV");
            _glVertexAttrib1svNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2d</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, void> _glVertexAttrib2d_fnptr = &glVertexAttrib2d_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2d_Lazy(uint index, double x, double y)
        {
            _glVertexAttrib2d_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2d");
            _glVertexAttrib2d_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2dARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, void> _glVertexAttrib2dARB_fnptr = &glVertexAttrib2dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2dARB_Lazy(uint index, double x, double y)
        {
            _glVertexAttrib2dARB_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2dARB");
            _glVertexAttrib2dARB_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2dNV</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, void> _glVertexAttrib2dNV_fnptr = &glVertexAttrib2dNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2dNV_Lazy(uint index, double x, double y)
        {
            _glVertexAttrib2dNV_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2dNV");
            _glVertexAttrib2dNV_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2dv</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttrib2dv_fnptr = &glVertexAttrib2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2dv_Lazy(uint index, double* v)
        {
            _glVertexAttrib2dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2dv");
            _glVertexAttrib2dv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2dvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttrib2dvARB_fnptr = &glVertexAttrib2dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2dvARB_Lazy(uint index, double* v)
        {
            _glVertexAttrib2dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2dvARB");
            _glVertexAttrib2dvARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2dvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttrib2dvNV_fnptr = &glVertexAttrib2dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2dvNV_Lazy(uint index, double* v)
        {
            _glVertexAttrib2dvNV_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2dvNV");
            _glVertexAttrib2dvNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2f</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, void> _glVertexAttrib2f_fnptr = &glVertexAttrib2f_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2f_Lazy(uint index, float x, float y)
        {
            _glVertexAttrib2f_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2f");
            _glVertexAttrib2f_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2fARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, void> _glVertexAttrib2fARB_fnptr = &glVertexAttrib2fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2fARB_Lazy(uint index, float x, float y)
        {
            _glVertexAttrib2fARB_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2fARB");
            _glVertexAttrib2fARB_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2fNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, void> _glVertexAttrib2fNV_fnptr = &glVertexAttrib2fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2fNV_Lazy(uint index, float x, float y)
        {
            _glVertexAttrib2fNV_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2fNV");
            _glVertexAttrib2fNV_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2fv</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexAttrib2fv_fnptr = &glVertexAttrib2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2fv_Lazy(uint index, float* v)
        {
            _glVertexAttrib2fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2fv");
            _glVertexAttrib2fv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2fvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexAttrib2fvARB_fnptr = &glVertexAttrib2fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2fvARB_Lazy(uint index, float* v)
        {
            _glVertexAttrib2fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2fvARB");
            _glVertexAttrib2fvARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2fvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexAttrib2fvNV_fnptr = &glVertexAttrib2fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2fvNV_Lazy(uint index, float* v)
        {
            _glVertexAttrib2fvNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2fvNV");
            _glVertexAttrib2fvNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2hNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half, Half, void> _glVertexAttrib2hNV_fnptr = &glVertexAttrib2hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2hNV_Lazy(uint index, Half x, Half y)
        {
            _glVertexAttrib2hNV_fnptr = (delegate* unmanaged<uint, Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2hNV");
            _glVertexAttrib2hNV_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2hvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half*, void> _glVertexAttrib2hvNV_fnptr = &glVertexAttrib2hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2hvNV_Lazy(uint index, Half* v)
        {
            _glVertexAttrib2hvNV_fnptr = (delegate* unmanaged<uint, Half*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2hvNV");
            _glVertexAttrib2hvNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2s</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, void> _glVertexAttrib2s_fnptr = &glVertexAttrib2s_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2s_Lazy(uint index, short x, short y)
        {
            _glVertexAttrib2s_fnptr = (delegate* unmanaged<uint, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2s");
            _glVertexAttrib2s_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2sARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, void> _glVertexAttrib2sARB_fnptr = &glVertexAttrib2sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2sARB_Lazy(uint index, short x, short y)
        {
            _glVertexAttrib2sARB_fnptr = (delegate* unmanaged<uint, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2sARB");
            _glVertexAttrib2sARB_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2sNV</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, void> _glVertexAttrib2sNV_fnptr = &glVertexAttrib2sNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2sNV_Lazy(uint index, short x, short y)
        {
            _glVertexAttrib2sNV_fnptr = (delegate* unmanaged<uint, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2sNV");
            _glVertexAttrib2sNV_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2sv</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttrib2sv_fnptr = &glVertexAttrib2sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2sv_Lazy(uint index, short* v)
        {
            _glVertexAttrib2sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2sv");
            _glVertexAttrib2sv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2svARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttrib2svARB_fnptr = &glVertexAttrib2svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2svARB_Lazy(uint index, short* v)
        {
            _glVertexAttrib2svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2svARB");
            _glVertexAttrib2svARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib2svNV</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttrib2svNV_fnptr = &glVertexAttrib2svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib2svNV_Lazy(uint index, short* v)
        {
            _glVertexAttrib2svNV_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2svNV");
            _glVertexAttrib2svNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3d</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, void> _glVertexAttrib3d_fnptr = &glVertexAttrib3d_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3d_Lazy(uint index, double x, double y, double z)
        {
            _glVertexAttrib3d_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3d");
            _glVertexAttrib3d_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3dARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, void> _glVertexAttrib3dARB_fnptr = &glVertexAttrib3dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3dARB_Lazy(uint index, double x, double y, double z)
        {
            _glVertexAttrib3dARB_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3dARB");
            _glVertexAttrib3dARB_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3dNV</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, void> _glVertexAttrib3dNV_fnptr = &glVertexAttrib3dNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3dNV_Lazy(uint index, double x, double y, double z)
        {
            _glVertexAttrib3dNV_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3dNV");
            _glVertexAttrib3dNV_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3dv</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttrib3dv_fnptr = &glVertexAttrib3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3dv_Lazy(uint index, double* v)
        {
            _glVertexAttrib3dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3dv");
            _glVertexAttrib3dv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3dvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttrib3dvARB_fnptr = &glVertexAttrib3dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3dvARB_Lazy(uint index, double* v)
        {
            _glVertexAttrib3dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3dvARB");
            _glVertexAttrib3dvARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3dvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttrib3dvNV_fnptr = &glVertexAttrib3dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3dvNV_Lazy(uint index, double* v)
        {
            _glVertexAttrib3dvNV_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3dvNV");
            _glVertexAttrib3dvNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3f</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, void> _glVertexAttrib3f_fnptr = &glVertexAttrib3f_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3f_Lazy(uint index, float x, float y, float z)
        {
            _glVertexAttrib3f_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3f");
            _glVertexAttrib3f_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3fARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, void> _glVertexAttrib3fARB_fnptr = &glVertexAttrib3fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3fARB_Lazy(uint index, float x, float y, float z)
        {
            _glVertexAttrib3fARB_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3fARB");
            _glVertexAttrib3fARB_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3fNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, void> _glVertexAttrib3fNV_fnptr = &glVertexAttrib3fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3fNV_Lazy(uint index, float x, float y, float z)
        {
            _glVertexAttrib3fNV_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3fNV");
            _glVertexAttrib3fNV_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3fv</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexAttrib3fv_fnptr = &glVertexAttrib3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3fv_Lazy(uint index, float* v)
        {
            _glVertexAttrib3fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3fv");
            _glVertexAttrib3fv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3fvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexAttrib3fvARB_fnptr = &glVertexAttrib3fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3fvARB_Lazy(uint index, float* v)
        {
            _glVertexAttrib3fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3fvARB");
            _glVertexAttrib3fvARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3fvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexAttrib3fvNV_fnptr = &glVertexAttrib3fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3fvNV_Lazy(uint index, float* v)
        {
            _glVertexAttrib3fvNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3fvNV");
            _glVertexAttrib3fvNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3hNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half, Half, Half, void> _glVertexAttrib3hNV_fnptr = &glVertexAttrib3hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3hNV_Lazy(uint index, Half x, Half y, Half z)
        {
            _glVertexAttrib3hNV_fnptr = (delegate* unmanaged<uint, Half, Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3hNV");
            _glVertexAttrib3hNV_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3hvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half*, void> _glVertexAttrib3hvNV_fnptr = &glVertexAttrib3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3hvNV_Lazy(uint index, Half* v)
        {
            _glVertexAttrib3hvNV_fnptr = (delegate* unmanaged<uint, Half*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3hvNV");
            _glVertexAttrib3hvNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3s</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, short, void> _glVertexAttrib3s_fnptr = &glVertexAttrib3s_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3s_Lazy(uint index, short x, short y, short z)
        {
            _glVertexAttrib3s_fnptr = (delegate* unmanaged<uint, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3s");
            _glVertexAttrib3s_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3sARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, short, void> _glVertexAttrib3sARB_fnptr = &glVertexAttrib3sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3sARB_Lazy(uint index, short x, short y, short z)
        {
            _glVertexAttrib3sARB_fnptr = (delegate* unmanaged<uint, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3sARB");
            _glVertexAttrib3sARB_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3sNV</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, short, void> _glVertexAttrib3sNV_fnptr = &glVertexAttrib3sNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3sNV_Lazy(uint index, short x, short y, short z)
        {
            _glVertexAttrib3sNV_fnptr = (delegate* unmanaged<uint, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3sNV");
            _glVertexAttrib3sNV_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3sv</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttrib3sv_fnptr = &glVertexAttrib3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3sv_Lazy(uint index, short* v)
        {
            _glVertexAttrib3sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3sv");
            _glVertexAttrib3sv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3svARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttrib3svARB_fnptr = &glVertexAttrib3svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3svARB_Lazy(uint index, short* v)
        {
            _glVertexAttrib3svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3svARB");
            _glVertexAttrib3svARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib3svNV</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttrib3svNV_fnptr = &glVertexAttrib3svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib3svNV_Lazy(uint index, short* v)
        {
            _glVertexAttrib3svNV_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3svNV");
            _glVertexAttrib3svNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4bv</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte*, void> _glVertexAttrib4bv_fnptr = &glVertexAttrib4bv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4bv_Lazy(uint index, sbyte* v)
        {
            _glVertexAttrib4bv_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4bv");
            _glVertexAttrib4bv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4bvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte*, void> _glVertexAttrib4bvARB_fnptr = &glVertexAttrib4bvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4bvARB_Lazy(uint index, sbyte* v)
        {
            _glVertexAttrib4bvARB_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4bvARB");
            _glVertexAttrib4bvARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4d</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, double, void> _glVertexAttrib4d_fnptr = &glVertexAttrib4d_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4d_Lazy(uint index, double x, double y, double z, double w)
        {
            _glVertexAttrib4d_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4d");
            _glVertexAttrib4d_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4dARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, double, void> _glVertexAttrib4dARB_fnptr = &glVertexAttrib4dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4dARB_Lazy(uint index, double x, double y, double z, double w)
        {
            _glVertexAttrib4dARB_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4dARB");
            _glVertexAttrib4dARB_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4dNV</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, double, void> _glVertexAttrib4dNV_fnptr = &glVertexAttrib4dNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4dNV_Lazy(uint index, double x, double y, double z, double w)
        {
            _glVertexAttrib4dNV_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4dNV");
            _glVertexAttrib4dNV_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4dv</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttrib4dv_fnptr = &glVertexAttrib4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4dv_Lazy(uint index, double* v)
        {
            _glVertexAttrib4dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4dv");
            _glVertexAttrib4dv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4dvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttrib4dvARB_fnptr = &glVertexAttrib4dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4dvARB_Lazy(uint index, double* v)
        {
            _glVertexAttrib4dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4dvARB");
            _glVertexAttrib4dvARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4dvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttrib4dvNV_fnptr = &glVertexAttrib4dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4dvNV_Lazy(uint index, double* v)
        {
            _glVertexAttrib4dvNV_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4dvNV");
            _glVertexAttrib4dvNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4f</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, void> _glVertexAttrib4f_fnptr = &glVertexAttrib4f_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4f_Lazy(uint index, float x, float y, float z, float w)
        {
            _glVertexAttrib4f_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4f");
            _glVertexAttrib4f_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4fARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, void> _glVertexAttrib4fARB_fnptr = &glVertexAttrib4fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4fARB_Lazy(uint index, float x, float y, float z, float w)
        {
            _glVertexAttrib4fARB_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4fARB");
            _glVertexAttrib4fARB_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4fNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, void> _glVertexAttrib4fNV_fnptr = &glVertexAttrib4fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4fNV_Lazy(uint index, float x, float y, float z, float w)
        {
            _glVertexAttrib4fNV_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4fNV");
            _glVertexAttrib4fNV_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4fv</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexAttrib4fv_fnptr = &glVertexAttrib4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4fv_Lazy(uint index, float* v)
        {
            _glVertexAttrib4fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4fv");
            _glVertexAttrib4fv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4fvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexAttrib4fvARB_fnptr = &glVertexAttrib4fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4fvARB_Lazy(uint index, float* v)
        {
            _glVertexAttrib4fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4fvARB");
            _glVertexAttrib4fvARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4fvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexAttrib4fvNV_fnptr = &glVertexAttrib4fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4fvNV_Lazy(uint index, float* v)
        {
            _glVertexAttrib4fvNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4fvNV");
            _glVertexAttrib4fvNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4hNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half, Half, Half, Half, void> _glVertexAttrib4hNV_fnptr = &glVertexAttrib4hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4hNV_Lazy(uint index, Half x, Half y, Half z, Half w)
        {
            _glVertexAttrib4hNV_fnptr = (delegate* unmanaged<uint, Half, Half, Half, Half, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4hNV");
            _glVertexAttrib4hNV_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4hvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, Half*, void> _glVertexAttrib4hvNV_fnptr = &glVertexAttrib4hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4hvNV_Lazy(uint index, Half* v)
        {
            _glVertexAttrib4hvNV_fnptr = (delegate* unmanaged<uint, Half*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4hvNV");
            _glVertexAttrib4hvNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4iv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexAttrib4iv_fnptr = &glVertexAttrib4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4iv_Lazy(uint index, int* v)
        {
            _glVertexAttrib4iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4iv");
            _glVertexAttrib4iv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4ivARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexAttrib4ivARB_fnptr = &glVertexAttrib4ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4ivARB_Lazy(uint index, int* v)
        {
            _glVertexAttrib4ivARB_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4ivARB");
            _glVertexAttrib4ivARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4Nbv</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte*, void> _glVertexAttrib4Nbv_fnptr = &glVertexAttrib4Nbv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4Nbv_Lazy(uint index, sbyte* v)
        {
            _glVertexAttrib4Nbv_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4Nbv");
            _glVertexAttrib4Nbv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4NbvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte*, void> _glVertexAttrib4NbvARB_fnptr = &glVertexAttrib4NbvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4NbvARB_Lazy(uint index, sbyte* v)
        {
            _glVertexAttrib4NbvARB_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4NbvARB");
            _glVertexAttrib4NbvARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4Niv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexAttrib4Niv_fnptr = &glVertexAttrib4Niv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4Niv_Lazy(uint index, int* v)
        {
            _glVertexAttrib4Niv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4Niv");
            _glVertexAttrib4Niv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4NivARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexAttrib4NivARB_fnptr = &glVertexAttrib4NivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4NivARB_Lazy(uint index, int* v)
        {
            _glVertexAttrib4NivARB_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4NivARB");
            _glVertexAttrib4NivARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4Nsv</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttrib4Nsv_fnptr = &glVertexAttrib4Nsv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4Nsv_Lazy(uint index, short* v)
        {
            _glVertexAttrib4Nsv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4Nsv");
            _glVertexAttrib4Nsv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4NsvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttrib4NsvARB_fnptr = &glVertexAttrib4NsvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4NsvARB_Lazy(uint index, short* v)
        {
            _glVertexAttrib4NsvARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4NsvARB");
            _glVertexAttrib4NsvARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4Nub</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, byte, byte, byte, void> _glVertexAttrib4Nub_fnptr = &glVertexAttrib4Nub_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4Nub_Lazy(uint index, byte x, byte y, byte z, byte w)
        {
            _glVertexAttrib4Nub_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4Nub");
            _glVertexAttrib4Nub_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4NubARB</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, byte, byte, byte, void> _glVertexAttrib4NubARB_fnptr = &glVertexAttrib4NubARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4NubARB_Lazy(uint index, byte x, byte y, byte z, byte w)
        {
            _glVertexAttrib4NubARB_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4NubARB");
            _glVertexAttrib4NubARB_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4Nubv</c>]</b></summary>
        public static delegate* unmanaged<uint, byte*, void> _glVertexAttrib4Nubv_fnptr = &glVertexAttrib4Nubv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4Nubv_Lazy(uint index, byte* v)
        {
            _glVertexAttrib4Nubv_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4Nubv");
            _glVertexAttrib4Nubv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4NubvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, byte*, void> _glVertexAttrib4NubvARB_fnptr = &glVertexAttrib4NubvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4NubvARB_Lazy(uint index, byte* v)
        {
            _glVertexAttrib4NubvARB_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4NubvARB");
            _glVertexAttrib4NubvARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4Nuiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVertexAttrib4Nuiv_fnptr = &glVertexAttrib4Nuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4Nuiv_Lazy(uint index, uint* v)
        {
            _glVertexAttrib4Nuiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4Nuiv");
            _glVertexAttrib4Nuiv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4NuivARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVertexAttrib4NuivARB_fnptr = &glVertexAttrib4NuivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4NuivARB_Lazy(uint index, uint* v)
        {
            _glVertexAttrib4NuivARB_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4NuivARB");
            _glVertexAttrib4NuivARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4Nusv</c>]</b></summary>
        public static delegate* unmanaged<uint, ushort*, void> _glVertexAttrib4Nusv_fnptr = &glVertexAttrib4Nusv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4Nusv_Lazy(uint index, ushort* v)
        {
            _glVertexAttrib4Nusv_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4Nusv");
            _glVertexAttrib4Nusv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4NusvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, ushort*, void> _glVertexAttrib4NusvARB_fnptr = &glVertexAttrib4NusvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4NusvARB_Lazy(uint index, ushort* v)
        {
            _glVertexAttrib4NusvARB_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4NusvARB");
            _glVertexAttrib4NusvARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4s</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, short, short, void> _glVertexAttrib4s_fnptr = &glVertexAttrib4s_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4s_Lazy(uint index, short x, short y, short z, short w)
        {
            _glVertexAttrib4s_fnptr = (delegate* unmanaged<uint, short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4s");
            _glVertexAttrib4s_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4sARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, short, short, void> _glVertexAttrib4sARB_fnptr = &glVertexAttrib4sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4sARB_Lazy(uint index, short x, short y, short z, short w)
        {
            _glVertexAttrib4sARB_fnptr = (delegate* unmanaged<uint, short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4sARB");
            _glVertexAttrib4sARB_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4sNV</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, short, short, void> _glVertexAttrib4sNV_fnptr = &glVertexAttrib4sNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4sNV_Lazy(uint index, short x, short y, short z, short w)
        {
            _glVertexAttrib4sNV_fnptr = (delegate* unmanaged<uint, short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4sNV");
            _glVertexAttrib4sNV_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4sv</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttrib4sv_fnptr = &glVertexAttrib4sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4sv_Lazy(uint index, short* v)
        {
            _glVertexAttrib4sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4sv");
            _glVertexAttrib4sv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4svARB</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttrib4svARB_fnptr = &glVertexAttrib4svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4svARB_Lazy(uint index, short* v)
        {
            _glVertexAttrib4svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4svARB");
            _glVertexAttrib4svARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4svNV</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttrib4svNV_fnptr = &glVertexAttrib4svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4svNV_Lazy(uint index, short* v)
        {
            _glVertexAttrib4svNV_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4svNV");
            _glVertexAttrib4svNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4ubNV</c>]</b></summary>
        public static delegate* unmanaged<uint, byte, byte, byte, byte, void> _glVertexAttrib4ubNV_fnptr = &glVertexAttrib4ubNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4ubNV_Lazy(uint index, byte x, byte y, byte z, byte w)
        {
            _glVertexAttrib4ubNV_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4ubNV");
            _glVertexAttrib4ubNV_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4ubv</c>]</b></summary>
        public static delegate* unmanaged<uint, byte*, void> _glVertexAttrib4ubv_fnptr = &glVertexAttrib4ubv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4ubv_Lazy(uint index, byte* v)
        {
            _glVertexAttrib4ubv_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4ubv");
            _glVertexAttrib4ubv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4ubvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, byte*, void> _glVertexAttrib4ubvARB_fnptr = &glVertexAttrib4ubvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4ubvARB_Lazy(uint index, byte* v)
        {
            _glVertexAttrib4ubvARB_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4ubvARB");
            _glVertexAttrib4ubvARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4ubvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, byte*, void> _glVertexAttrib4ubvNV_fnptr = &glVertexAttrib4ubvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4ubvNV_Lazy(uint index, byte* v)
        {
            _glVertexAttrib4ubvNV_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4ubvNV");
            _glVertexAttrib4ubvNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVertexAttrib4uiv_fnptr = &glVertexAttrib4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4uiv_Lazy(uint index, uint* v)
        {
            _glVertexAttrib4uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4uiv");
            _glVertexAttrib4uiv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4uivARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVertexAttrib4uivARB_fnptr = &glVertexAttrib4uivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4uivARB_Lazy(uint index, uint* v)
        {
            _glVertexAttrib4uivARB_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4uivARB");
            _glVertexAttrib4uivARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4usv</c>]</b></summary>
        public static delegate* unmanaged<uint, ushort*, void> _glVertexAttrib4usv_fnptr = &glVertexAttrib4usv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4usv_Lazy(uint index, ushort* v)
        {
            _glVertexAttrib4usv_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4usv");
            _glVertexAttrib4usv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttrib4usvARB</c>]</b></summary>
        public static delegate* unmanaged<uint, ushort*, void> _glVertexAttrib4usvARB_fnptr = &glVertexAttrib4usvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttrib4usvARB_Lazy(uint index, ushort* v)
        {
            _glVertexAttrib4usvARB_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4usvARB");
            _glVertexAttrib4usvARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribArrayObjectATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, byte, int, int, uint, void> _glVertexAttribArrayObjectATI_fnptr = &glVertexAttribArrayObjectATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribArrayObjectATI_Lazy(uint index, int size, uint type, byte normalized, int stride, int buffer, uint offset)
        {
            _glVertexAttribArrayObjectATI_fnptr = (delegate* unmanaged<uint, int, uint, byte, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribArrayObjectATI");
            _glVertexAttribArrayObjectATI_fnptr(index, size, type, normalized, stride, buffer, offset);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribBinding</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glVertexAttribBinding_fnptr = &glVertexAttribBinding_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribBinding_Lazy(uint attribindex, uint bindingindex)
        {
            _glVertexAttribBinding_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribBinding");
            _glVertexAttribBinding_fnptr(attribindex, bindingindex);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribDivisor</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glVertexAttribDivisor_fnptr = &glVertexAttribDivisor_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribDivisor_Lazy(uint index, uint divisor)
        {
            _glVertexAttribDivisor_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribDivisor");
            _glVertexAttribDivisor_fnptr(index, divisor);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribDivisorANGLE</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glVertexAttribDivisorANGLE_fnptr = &glVertexAttribDivisorANGLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribDivisorANGLE_Lazy(uint index, uint divisor)
        {
            _glVertexAttribDivisorANGLE_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribDivisorANGLE");
            _glVertexAttribDivisorANGLE_fnptr(index, divisor);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribDivisorARB</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glVertexAttribDivisorARB_fnptr = &glVertexAttribDivisorARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribDivisorARB_Lazy(uint index, uint divisor)
        {
            _glVertexAttribDivisorARB_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribDivisorARB");
            _glVertexAttribDivisorARB_fnptr(index, divisor);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribDivisorEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glVertexAttribDivisorEXT_fnptr = &glVertexAttribDivisorEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribDivisorEXT_Lazy(uint index, uint divisor)
        {
            _glVertexAttribDivisorEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribDivisorEXT");
            _glVertexAttribDivisorEXT_fnptr(index, divisor);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribDivisorNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glVertexAttribDivisorNV_fnptr = &glVertexAttribDivisorNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribDivisorNV_Lazy(uint index, uint divisor)
        {
            _glVertexAttribDivisorNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribDivisorNV");
            _glVertexAttribDivisorNV_fnptr(index, divisor);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribFormat</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, byte, uint, void> _glVertexAttribFormat_fnptr = &glVertexAttribFormat_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribFormat_Lazy(uint attribindex, int size, uint type, byte normalized, uint relativeoffset)
        {
            _glVertexAttribFormat_fnptr = (delegate* unmanaged<uint, int, uint, byte, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribFormat");
            _glVertexAttribFormat_fnptr(attribindex, size, type, normalized, relativeoffset);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribFormatNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, byte, int, void> _glVertexAttribFormatNV_fnptr = &glVertexAttribFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribFormatNV_Lazy(uint index, int size, uint type, byte normalized, int stride)
        {
            _glVertexAttribFormatNV_fnptr = (delegate* unmanaged<uint, int, uint, byte, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribFormatNV");
            _glVertexAttribFormatNV_fnptr(index, size, type, normalized, stride);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI1i</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glVertexAttribI1i_fnptr = &glVertexAttribI1i_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI1i_Lazy(uint index, int x)
        {
            _glVertexAttribI1i_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1i");
            _glVertexAttribI1i_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI1iEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glVertexAttribI1iEXT_fnptr = &glVertexAttribI1iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI1iEXT_Lazy(uint index, int x)
        {
            _glVertexAttribI1iEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1iEXT");
            _glVertexAttribI1iEXT_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI1iv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexAttribI1iv_fnptr = &glVertexAttribI1iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI1iv_Lazy(uint index, int* v)
        {
            _glVertexAttribI1iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1iv");
            _glVertexAttribI1iv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI1ivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexAttribI1ivEXT_fnptr = &glVertexAttribI1ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI1ivEXT_Lazy(uint index, int* v)
        {
            _glVertexAttribI1ivEXT_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1ivEXT");
            _glVertexAttribI1ivEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI1ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glVertexAttribI1ui_fnptr = &glVertexAttribI1ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI1ui_Lazy(uint index, uint x)
        {
            _glVertexAttribI1ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1ui");
            _glVertexAttribI1ui_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI1uiEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glVertexAttribI1uiEXT_fnptr = &glVertexAttribI1uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI1uiEXT_Lazy(uint index, uint x)
        {
            _glVertexAttribI1uiEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1uiEXT");
            _glVertexAttribI1uiEXT_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI1uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVertexAttribI1uiv_fnptr = &glVertexAttribI1uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI1uiv_Lazy(uint index, uint* v)
        {
            _glVertexAttribI1uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1uiv");
            _glVertexAttribI1uiv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI1uivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVertexAttribI1uivEXT_fnptr = &glVertexAttribI1uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI1uivEXT_Lazy(uint index, uint* v)
        {
            _glVertexAttribI1uivEXT_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1uivEXT");
            _glVertexAttribI1uivEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI2i</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void> _glVertexAttribI2i_fnptr = &glVertexAttribI2i_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI2i_Lazy(uint index, int x, int y)
        {
            _glVertexAttribI2i_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2i");
            _glVertexAttribI2i_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI2iEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void> _glVertexAttribI2iEXT_fnptr = &glVertexAttribI2iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI2iEXT_Lazy(uint index, int x, int y)
        {
            _glVertexAttribI2iEXT_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2iEXT");
            _glVertexAttribI2iEXT_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI2iv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexAttribI2iv_fnptr = &glVertexAttribI2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI2iv_Lazy(uint index, int* v)
        {
            _glVertexAttribI2iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2iv");
            _glVertexAttribI2iv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI2ivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexAttribI2ivEXT_fnptr = &glVertexAttribI2ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI2ivEXT_Lazy(uint index, int* v)
        {
            _glVertexAttribI2ivEXT_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2ivEXT");
            _glVertexAttribI2ivEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI2ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glVertexAttribI2ui_fnptr = &glVertexAttribI2ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI2ui_Lazy(uint index, uint x, uint y)
        {
            _glVertexAttribI2ui_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2ui");
            _glVertexAttribI2ui_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI2uiEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, void> _glVertexAttribI2uiEXT_fnptr = &glVertexAttribI2uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI2uiEXT_Lazy(uint index, uint x, uint y)
        {
            _glVertexAttribI2uiEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2uiEXT");
            _glVertexAttribI2uiEXT_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI2uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVertexAttribI2uiv_fnptr = &glVertexAttribI2uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI2uiv_Lazy(uint index, uint* v)
        {
            _glVertexAttribI2uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2uiv");
            _glVertexAttribI2uiv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI2uivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVertexAttribI2uivEXT_fnptr = &glVertexAttribI2uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI2uivEXT_Lazy(uint index, uint* v)
        {
            _glVertexAttribI2uivEXT_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2uivEXT");
            _glVertexAttribI2uivEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI3i</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, void> _glVertexAttribI3i_fnptr = &glVertexAttribI3i_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI3i_Lazy(uint index, int x, int y, int z)
        {
            _glVertexAttribI3i_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3i");
            _glVertexAttribI3i_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI3iEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, void> _glVertexAttribI3iEXT_fnptr = &glVertexAttribI3iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI3iEXT_Lazy(uint index, int x, int y, int z)
        {
            _glVertexAttribI3iEXT_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3iEXT");
            _glVertexAttribI3iEXT_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI3iv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexAttribI3iv_fnptr = &glVertexAttribI3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI3iv_Lazy(uint index, int* v)
        {
            _glVertexAttribI3iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3iv");
            _glVertexAttribI3iv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI3ivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexAttribI3ivEXT_fnptr = &glVertexAttribI3ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI3ivEXT_Lazy(uint index, int* v)
        {
            _glVertexAttribI3ivEXT_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3ivEXT");
            _glVertexAttribI3ivEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI3ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, void> _glVertexAttribI3ui_fnptr = &glVertexAttribI3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI3ui_Lazy(uint index, uint x, uint y, uint z)
        {
            _glVertexAttribI3ui_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3ui");
            _glVertexAttribI3ui_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI3uiEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, void> _glVertexAttribI3uiEXT_fnptr = &glVertexAttribI3uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI3uiEXT_Lazy(uint index, uint x, uint y, uint z)
        {
            _glVertexAttribI3uiEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3uiEXT");
            _glVertexAttribI3uiEXT_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI3uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVertexAttribI3uiv_fnptr = &glVertexAttribI3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI3uiv_Lazy(uint index, uint* v)
        {
            _glVertexAttribI3uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3uiv");
            _glVertexAttribI3uiv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI3uivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVertexAttribI3uivEXT_fnptr = &glVertexAttribI3uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI3uivEXT_Lazy(uint index, uint* v)
        {
            _glVertexAttribI3uivEXT_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3uivEXT");
            _glVertexAttribI3uivEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4bv</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte*, void> _glVertexAttribI4bv_fnptr = &glVertexAttribI4bv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4bv_Lazy(uint index, sbyte* v)
        {
            _glVertexAttribI4bv_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4bv");
            _glVertexAttribI4bv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4bvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, sbyte*, void> _glVertexAttribI4bvEXT_fnptr = &glVertexAttribI4bvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4bvEXT_Lazy(uint index, sbyte* v)
        {
            _glVertexAttribI4bvEXT_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4bvEXT");
            _glVertexAttribI4bvEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4i</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, void> _glVertexAttribI4i_fnptr = &glVertexAttribI4i_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4i_Lazy(uint index, int x, int y, int z, int w)
        {
            _glVertexAttribI4i_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4i");
            _glVertexAttribI4i_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4iEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, void> _glVertexAttribI4iEXT_fnptr = &glVertexAttribI4iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4iEXT_Lazy(uint index, int x, int y, int z, int w)
        {
            _glVertexAttribI4iEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4iEXT");
            _glVertexAttribI4iEXT_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4iv</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexAttribI4iv_fnptr = &glVertexAttribI4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4iv_Lazy(uint index, int* v)
        {
            _glVertexAttribI4iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4iv");
            _glVertexAttribI4iv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4ivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexAttribI4ivEXT_fnptr = &glVertexAttribI4ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4ivEXT_Lazy(uint index, int* v)
        {
            _glVertexAttribI4ivEXT_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4ivEXT");
            _glVertexAttribI4ivEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4sv</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttribI4sv_fnptr = &glVertexAttribI4sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4sv_Lazy(uint index, short* v)
        {
            _glVertexAttribI4sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4sv");
            _glVertexAttribI4sv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4svEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexAttribI4svEXT_fnptr = &glVertexAttribI4svEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4svEXT_Lazy(uint index, short* v)
        {
            _glVertexAttribI4svEXT_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4svEXT");
            _glVertexAttribI4svEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4ubv</c>]</b></summary>
        public static delegate* unmanaged<uint, byte*, void> _glVertexAttribI4ubv_fnptr = &glVertexAttribI4ubv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4ubv_Lazy(uint index, byte* v)
        {
            _glVertexAttribI4ubv_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4ubv");
            _glVertexAttribI4ubv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4ubvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, byte*, void> _glVertexAttribI4ubvEXT_fnptr = &glVertexAttribI4ubvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4ubvEXT_Lazy(uint index, byte* v)
        {
            _glVertexAttribI4ubvEXT_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4ubvEXT");
            _glVertexAttribI4ubvEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, void> _glVertexAttribI4ui_fnptr = &glVertexAttribI4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4ui_Lazy(uint index, uint x, uint y, uint z, uint w)
        {
            _glVertexAttribI4ui_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4ui");
            _glVertexAttribI4ui_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4uiEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, void> _glVertexAttribI4uiEXT_fnptr = &glVertexAttribI4uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4uiEXT_Lazy(uint index, uint x, uint y, uint z, uint w)
        {
            _glVertexAttribI4uiEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4uiEXT");
            _glVertexAttribI4uiEXT_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVertexAttribI4uiv_fnptr = &glVertexAttribI4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4uiv_Lazy(uint index, uint* v)
        {
            _glVertexAttribI4uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4uiv");
            _glVertexAttribI4uiv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4uivEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVertexAttribI4uivEXT_fnptr = &glVertexAttribI4uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4uivEXT_Lazy(uint index, uint* v)
        {
            _glVertexAttribI4uivEXT_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4uivEXT");
            _glVertexAttribI4uivEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4usv</c>]</b></summary>
        public static delegate* unmanaged<uint, ushort*, void> _glVertexAttribI4usv_fnptr = &glVertexAttribI4usv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4usv_Lazy(uint index, ushort* v)
        {
            _glVertexAttribI4usv_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4usv");
            _glVertexAttribI4usv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribI4usvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, ushort*, void> _glVertexAttribI4usvEXT_fnptr = &glVertexAttribI4usvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribI4usvEXT_Lazy(uint index, ushort* v)
        {
            _glVertexAttribI4usvEXT_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4usvEXT");
            _glVertexAttribI4usvEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribIFormat</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, uint, void> _glVertexAttribIFormat_fnptr = &glVertexAttribIFormat_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribIFormat_Lazy(uint attribindex, int size, uint type, uint relativeoffset)
        {
            _glVertexAttribIFormat_fnptr = (delegate* unmanaged<uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribIFormat");
            _glVertexAttribIFormat_fnptr(attribindex, size, type, relativeoffset);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribIFormatNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, void> _glVertexAttribIFormatNV_fnptr = &glVertexAttribIFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribIFormatNV_Lazy(uint index, int size, uint type, int stride)
        {
            _glVertexAttribIFormatNV_fnptr = (delegate* unmanaged<uint, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribIFormatNV");
            _glVertexAttribIFormatNV_fnptr(index, size, type, stride);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribIPointer</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, void*, void> _glVertexAttribIPointer_fnptr = &glVertexAttribIPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribIPointer_Lazy(uint index, int size, uint type, int stride, void* pointer)
        {
            _glVertexAttribIPointer_fnptr = (delegate* unmanaged<uint, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribIPointer");
            _glVertexAttribIPointer_fnptr(index, size, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribIPointerEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, void*, void> _glVertexAttribIPointerEXT_fnptr = &glVertexAttribIPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribIPointerEXT_Lazy(uint index, int size, uint type, int stride, void* pointer)
        {
            _glVertexAttribIPointerEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribIPointerEXT");
            _glVertexAttribIPointerEXT_fnptr(index, size, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL1d</c>]</b></summary>
        public static delegate* unmanaged<uint, double, void> _glVertexAttribL1d_fnptr = &glVertexAttribL1d_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL1d_Lazy(uint index, double x)
        {
            _glVertexAttribL1d_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1d");
            _glVertexAttribL1d_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL1dEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double, void> _glVertexAttribL1dEXT_fnptr = &glVertexAttribL1dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL1dEXT_Lazy(uint index, double x)
        {
            _glVertexAttribL1dEXT_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1dEXT");
            _glVertexAttribL1dEXT_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL1dv</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttribL1dv_fnptr = &glVertexAttribL1dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL1dv_Lazy(uint index, double* v)
        {
            _glVertexAttribL1dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1dv");
            _glVertexAttribL1dv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL1dvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttribL1dvEXT_fnptr = &glVertexAttribL1dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL1dvEXT_Lazy(uint index, double* v)
        {
            _glVertexAttribL1dvEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1dvEXT");
            _glVertexAttribL1dvEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL1i64NV</c>]</b></summary>
        public static delegate* unmanaged<uint, long, void> _glVertexAttribL1i64NV_fnptr = &glVertexAttribL1i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL1i64NV_Lazy(uint index, long x)
        {
            _glVertexAttribL1i64NV_fnptr = (delegate* unmanaged<uint, long, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1i64NV");
            _glVertexAttribL1i64NV_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL1i64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, long*, void> _glVertexAttribL1i64vNV_fnptr = &glVertexAttribL1i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL1i64vNV_Lazy(uint index, long* v)
        {
            _glVertexAttribL1i64vNV_fnptr = (delegate* unmanaged<uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1i64vNV");
            _glVertexAttribL1i64vNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL1ui64ARB</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong, void> _glVertexAttribL1ui64ARB_fnptr = &glVertexAttribL1ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL1ui64ARB_Lazy(uint index, ulong x)
        {
            _glVertexAttribL1ui64ARB_fnptr = (delegate* unmanaged<uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1ui64ARB");
            _glVertexAttribL1ui64ARB_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL1ui64NV</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong, void> _glVertexAttribL1ui64NV_fnptr = &glVertexAttribL1ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL1ui64NV_Lazy(uint index, ulong x)
        {
            _glVertexAttribL1ui64NV_fnptr = (delegate* unmanaged<uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1ui64NV");
            _glVertexAttribL1ui64NV_fnptr(index, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL1ui64vARB</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong*, void> _glVertexAttribL1ui64vARB_fnptr = &glVertexAttribL1ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL1ui64vARB_Lazy(uint index, ulong* v)
        {
            _glVertexAttribL1ui64vARB_fnptr = (delegate* unmanaged<uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1ui64vARB");
            _glVertexAttribL1ui64vARB_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL1ui64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong*, void> _glVertexAttribL1ui64vNV_fnptr = &glVertexAttribL1ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL1ui64vNV_Lazy(uint index, ulong* v)
        {
            _glVertexAttribL1ui64vNV_fnptr = (delegate* unmanaged<uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1ui64vNV");
            _glVertexAttribL1ui64vNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL2d</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, void> _glVertexAttribL2d_fnptr = &glVertexAttribL2d_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL2d_Lazy(uint index, double x, double y)
        {
            _glVertexAttribL2d_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2d");
            _glVertexAttribL2d_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL2dEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, void> _glVertexAttribL2dEXT_fnptr = &glVertexAttribL2dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL2dEXT_Lazy(uint index, double x, double y)
        {
            _glVertexAttribL2dEXT_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2dEXT");
            _glVertexAttribL2dEXT_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL2dv</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttribL2dv_fnptr = &glVertexAttribL2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL2dv_Lazy(uint index, double* v)
        {
            _glVertexAttribL2dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2dv");
            _glVertexAttribL2dv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL2dvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttribL2dvEXT_fnptr = &glVertexAttribL2dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL2dvEXT_Lazy(uint index, double* v)
        {
            _glVertexAttribL2dvEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2dvEXT");
            _glVertexAttribL2dvEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL2i64NV</c>]</b></summary>
        public static delegate* unmanaged<uint, long, long, void> _glVertexAttribL2i64NV_fnptr = &glVertexAttribL2i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL2i64NV_Lazy(uint index, long x, long y)
        {
            _glVertexAttribL2i64NV_fnptr = (delegate* unmanaged<uint, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2i64NV");
            _glVertexAttribL2i64NV_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL2i64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, long*, void> _glVertexAttribL2i64vNV_fnptr = &glVertexAttribL2i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL2i64vNV_Lazy(uint index, long* v)
        {
            _glVertexAttribL2i64vNV_fnptr = (delegate* unmanaged<uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2i64vNV");
            _glVertexAttribL2i64vNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL2ui64NV</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong, ulong, void> _glVertexAttribL2ui64NV_fnptr = &glVertexAttribL2ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL2ui64NV_Lazy(uint index, ulong x, ulong y)
        {
            _glVertexAttribL2ui64NV_fnptr = (delegate* unmanaged<uint, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2ui64NV");
            _glVertexAttribL2ui64NV_fnptr(index, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL2ui64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong*, void> _glVertexAttribL2ui64vNV_fnptr = &glVertexAttribL2ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL2ui64vNV_Lazy(uint index, ulong* v)
        {
            _glVertexAttribL2ui64vNV_fnptr = (delegate* unmanaged<uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2ui64vNV");
            _glVertexAttribL2ui64vNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL3d</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, void> _glVertexAttribL3d_fnptr = &glVertexAttribL3d_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL3d_Lazy(uint index, double x, double y, double z)
        {
            _glVertexAttribL3d_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3d");
            _glVertexAttribL3d_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL3dEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, void> _glVertexAttribL3dEXT_fnptr = &glVertexAttribL3dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL3dEXT_Lazy(uint index, double x, double y, double z)
        {
            _glVertexAttribL3dEXT_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3dEXT");
            _glVertexAttribL3dEXT_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL3dv</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttribL3dv_fnptr = &glVertexAttribL3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL3dv_Lazy(uint index, double* v)
        {
            _glVertexAttribL3dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3dv");
            _glVertexAttribL3dv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL3dvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttribL3dvEXT_fnptr = &glVertexAttribL3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL3dvEXT_Lazy(uint index, double* v)
        {
            _glVertexAttribL3dvEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3dvEXT");
            _glVertexAttribL3dvEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL3i64NV</c>]</b></summary>
        public static delegate* unmanaged<uint, long, long, long, void> _glVertexAttribL3i64NV_fnptr = &glVertexAttribL3i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL3i64NV_Lazy(uint index, long x, long y, long z)
        {
            _glVertexAttribL3i64NV_fnptr = (delegate* unmanaged<uint, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3i64NV");
            _glVertexAttribL3i64NV_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL3i64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, long*, void> _glVertexAttribL3i64vNV_fnptr = &glVertexAttribL3i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL3i64vNV_Lazy(uint index, long* v)
        {
            _glVertexAttribL3i64vNV_fnptr = (delegate* unmanaged<uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3i64vNV");
            _glVertexAttribL3i64vNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL3ui64NV</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong, ulong, ulong, void> _glVertexAttribL3ui64NV_fnptr = &glVertexAttribL3ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL3ui64NV_Lazy(uint index, ulong x, ulong y, ulong z)
        {
            _glVertexAttribL3ui64NV_fnptr = (delegate* unmanaged<uint, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3ui64NV");
            _glVertexAttribL3ui64NV_fnptr(index, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL3ui64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong*, void> _glVertexAttribL3ui64vNV_fnptr = &glVertexAttribL3ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL3ui64vNV_Lazy(uint index, ulong* v)
        {
            _glVertexAttribL3ui64vNV_fnptr = (delegate* unmanaged<uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3ui64vNV");
            _glVertexAttribL3ui64vNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL4d</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, double, void> _glVertexAttribL4d_fnptr = &glVertexAttribL4d_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL4d_Lazy(uint index, double x, double y, double z, double w)
        {
            _glVertexAttribL4d_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4d");
            _glVertexAttribL4d_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL4dEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, double, void> _glVertexAttribL4dEXT_fnptr = &glVertexAttribL4dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL4dEXT_Lazy(uint index, double x, double y, double z, double w)
        {
            _glVertexAttribL4dEXT_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4dEXT");
            _glVertexAttribL4dEXT_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL4dv</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttribL4dv_fnptr = &glVertexAttribL4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL4dv_Lazy(uint index, double* v)
        {
            _glVertexAttribL4dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4dv");
            _glVertexAttribL4dv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL4dvEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexAttribL4dvEXT_fnptr = &glVertexAttribL4dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL4dvEXT_Lazy(uint index, double* v)
        {
            _glVertexAttribL4dvEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4dvEXT");
            _glVertexAttribL4dvEXT_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL4i64NV</c>]</b></summary>
        public static delegate* unmanaged<uint, long, long, long, long, void> _glVertexAttribL4i64NV_fnptr = &glVertexAttribL4i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL4i64NV_Lazy(uint index, long x, long y, long z, long w)
        {
            _glVertexAttribL4i64NV_fnptr = (delegate* unmanaged<uint, long, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4i64NV");
            _glVertexAttribL4i64NV_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL4i64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, long*, void> _glVertexAttribL4i64vNV_fnptr = &glVertexAttribL4i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL4i64vNV_Lazy(uint index, long* v)
        {
            _glVertexAttribL4i64vNV_fnptr = (delegate* unmanaged<uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4i64vNV");
            _glVertexAttribL4i64vNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL4ui64NV</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong, ulong, ulong, ulong, void> _glVertexAttribL4ui64NV_fnptr = &glVertexAttribL4ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL4ui64NV_Lazy(uint index, ulong x, ulong y, ulong z, ulong w)
        {
            _glVertexAttribL4ui64NV_fnptr = (delegate* unmanaged<uint, ulong, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4ui64NV");
            _glVertexAttribL4ui64NV_fnptr(index, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribL4ui64vNV</c>]</b></summary>
        public static delegate* unmanaged<uint, ulong*, void> _glVertexAttribL4ui64vNV_fnptr = &glVertexAttribL4ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribL4ui64vNV_Lazy(uint index, ulong* v)
        {
            _glVertexAttribL4ui64vNV_fnptr = (delegate* unmanaged<uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4ui64vNV");
            _glVertexAttribL4ui64vNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribLFormat</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, uint, void> _glVertexAttribLFormat_fnptr = &glVertexAttribLFormat_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribLFormat_Lazy(uint attribindex, int size, uint type, uint relativeoffset)
        {
            _glVertexAttribLFormat_fnptr = (delegate* unmanaged<uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribLFormat");
            _glVertexAttribLFormat_fnptr(attribindex, size, type, relativeoffset);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribLFormatNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, void> _glVertexAttribLFormatNV_fnptr = &glVertexAttribLFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribLFormatNV_Lazy(uint index, int size, uint type, int stride)
        {
            _glVertexAttribLFormatNV_fnptr = (delegate* unmanaged<uint, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribLFormatNV");
            _glVertexAttribLFormatNV_fnptr(index, size, type, stride);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribLPointer</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, void*, void> _glVertexAttribLPointer_fnptr = &glVertexAttribLPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribLPointer_Lazy(uint index, int size, uint type, int stride, void* pointer)
        {
            _glVertexAttribLPointer_fnptr = (delegate* unmanaged<uint, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribLPointer");
            _glVertexAttribLPointer_fnptr(index, size, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribLPointerEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, void*, void> _glVertexAttribLPointerEXT_fnptr = &glVertexAttribLPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribLPointerEXT_Lazy(uint index, int size, uint type, int stride, void* pointer)
        {
            _glVertexAttribLPointerEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribLPointerEXT");
            _glVertexAttribLPointerEXT_fnptr(index, size, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribP1ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte, uint, void> _glVertexAttribP1ui_fnptr = &glVertexAttribP1ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribP1ui_Lazy(uint index, uint type, byte normalized, uint value)
        {
            _glVertexAttribP1ui_fnptr = (delegate* unmanaged<uint, uint, byte, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP1ui");
            _glVertexAttribP1ui_fnptr(index, type, normalized, value);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribP1uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte, uint*, void> _glVertexAttribP1uiv_fnptr = &glVertexAttribP1uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribP1uiv_Lazy(uint index, uint type, byte normalized, uint* value)
        {
            _glVertexAttribP1uiv_fnptr = (delegate* unmanaged<uint, uint, byte, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP1uiv");
            _glVertexAttribP1uiv_fnptr(index, type, normalized, value);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribP2ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte, uint, void> _glVertexAttribP2ui_fnptr = &glVertexAttribP2ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribP2ui_Lazy(uint index, uint type, byte normalized, uint value)
        {
            _glVertexAttribP2ui_fnptr = (delegate* unmanaged<uint, uint, byte, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP2ui");
            _glVertexAttribP2ui_fnptr(index, type, normalized, value);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribP2uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte, uint*, void> _glVertexAttribP2uiv_fnptr = &glVertexAttribP2uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribP2uiv_Lazy(uint index, uint type, byte normalized, uint* value)
        {
            _glVertexAttribP2uiv_fnptr = (delegate* unmanaged<uint, uint, byte, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP2uiv");
            _glVertexAttribP2uiv_fnptr(index, type, normalized, value);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribP3ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte, uint, void> _glVertexAttribP3ui_fnptr = &glVertexAttribP3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribP3ui_Lazy(uint index, uint type, byte normalized, uint value)
        {
            _glVertexAttribP3ui_fnptr = (delegate* unmanaged<uint, uint, byte, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP3ui");
            _glVertexAttribP3ui_fnptr(index, type, normalized, value);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribP3uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte, uint*, void> _glVertexAttribP3uiv_fnptr = &glVertexAttribP3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribP3uiv_Lazy(uint index, uint type, byte normalized, uint* value)
        {
            _glVertexAttribP3uiv_fnptr = (delegate* unmanaged<uint, uint, byte, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP3uiv");
            _glVertexAttribP3uiv_fnptr(index, type, normalized, value);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribP4ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte, uint, void> _glVertexAttribP4ui_fnptr = &glVertexAttribP4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribP4ui_Lazy(uint index, uint type, byte normalized, uint value)
        {
            _glVertexAttribP4ui_fnptr = (delegate* unmanaged<uint, uint, byte, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP4ui");
            _glVertexAttribP4ui_fnptr(index, type, normalized, value);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribP4uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, byte, uint*, void> _glVertexAttribP4uiv_fnptr = &glVertexAttribP4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribP4uiv_Lazy(uint index, uint type, byte normalized, uint* value)
        {
            _glVertexAttribP4uiv_fnptr = (delegate* unmanaged<uint, uint, byte, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP4uiv");
            _glVertexAttribP4uiv_fnptr(index, type, normalized, value);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribParameteriAMD</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int, void> _glVertexAttribParameteriAMD_fnptr = &glVertexAttribParameteriAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribParameteriAMD_Lazy(uint index, uint pname, int param)
        {
            _glVertexAttribParameteriAMD_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribParameteriAMD");
            _glVertexAttribParameteriAMD_fnptr(index, pname, param);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribPointer</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, byte, int, void*, void> _glVertexAttribPointer_fnptr = &glVertexAttribPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribPointer_Lazy(uint index, int size, uint type, byte normalized, int stride, void* pointer)
        {
            _glVertexAttribPointer_fnptr = (delegate* unmanaged<uint, int, uint, byte, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribPointer");
            _glVertexAttribPointer_fnptr(index, size, type, normalized, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribPointerARB</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, byte, int, void*, void> _glVertexAttribPointerARB_fnptr = &glVertexAttribPointerARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribPointerARB_Lazy(uint index, int size, uint type, byte normalized, int stride, void* pointer)
        {
            _glVertexAttribPointerARB_fnptr = (delegate* unmanaged<uint, int, uint, byte, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribPointerARB");
            _glVertexAttribPointerARB_fnptr(index, size, type, normalized, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribPointerNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint, int, void*, void> _glVertexAttribPointerNV_fnptr = &glVertexAttribPointerNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribPointerNV_Lazy(uint index, int fsize, uint type, int stride, void* pointer)
        {
            _glVertexAttribPointerNV_fnptr = (delegate* unmanaged<uint, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribPointerNV");
            _glVertexAttribPointerNV_fnptr(index, fsize, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs1dvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, double*, void> _glVertexAttribs1dvNV_fnptr = &glVertexAttribs1dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs1dvNV_Lazy(uint index, int count, double* v)
        {
            _glVertexAttribs1dvNV_fnptr = (delegate* unmanaged<uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs1dvNV");
            _glVertexAttribs1dvNV_fnptr(index, count, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs1fvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glVertexAttribs1fvNV_fnptr = &glVertexAttribs1fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs1fvNV_Lazy(uint index, int count, float* v)
        {
            _glVertexAttribs1fvNV_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs1fvNV");
            _glVertexAttribs1fvNV_fnptr(index, count, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs1hvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, Half*, void> _glVertexAttribs1hvNV_fnptr = &glVertexAttribs1hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs1hvNV_Lazy(uint index, int n, Half* v)
        {
            _glVertexAttribs1hvNV_fnptr = (delegate* unmanaged<uint, int, Half*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs1hvNV");
            _glVertexAttribs1hvNV_fnptr(index, n, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs1svNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, short*, void> _glVertexAttribs1svNV_fnptr = &glVertexAttribs1svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs1svNV_Lazy(uint index, int count, short* v)
        {
            _glVertexAttribs1svNV_fnptr = (delegate* unmanaged<uint, int, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs1svNV");
            _glVertexAttribs1svNV_fnptr(index, count, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs2dvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, double*, void> _glVertexAttribs2dvNV_fnptr = &glVertexAttribs2dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs2dvNV_Lazy(uint index, int count, double* v)
        {
            _glVertexAttribs2dvNV_fnptr = (delegate* unmanaged<uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs2dvNV");
            _glVertexAttribs2dvNV_fnptr(index, count, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs2fvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glVertexAttribs2fvNV_fnptr = &glVertexAttribs2fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs2fvNV_Lazy(uint index, int count, float* v)
        {
            _glVertexAttribs2fvNV_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs2fvNV");
            _glVertexAttribs2fvNV_fnptr(index, count, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs2hvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, Half*, void> _glVertexAttribs2hvNV_fnptr = &glVertexAttribs2hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs2hvNV_Lazy(uint index, int n, Half* v)
        {
            _glVertexAttribs2hvNV_fnptr = (delegate* unmanaged<uint, int, Half*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs2hvNV");
            _glVertexAttribs2hvNV_fnptr(index, n, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs2svNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, short*, void> _glVertexAttribs2svNV_fnptr = &glVertexAttribs2svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs2svNV_Lazy(uint index, int count, short* v)
        {
            _glVertexAttribs2svNV_fnptr = (delegate* unmanaged<uint, int, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs2svNV");
            _glVertexAttribs2svNV_fnptr(index, count, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs3dvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, double*, void> _glVertexAttribs3dvNV_fnptr = &glVertexAttribs3dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs3dvNV_Lazy(uint index, int count, double* v)
        {
            _glVertexAttribs3dvNV_fnptr = (delegate* unmanaged<uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs3dvNV");
            _glVertexAttribs3dvNV_fnptr(index, count, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs3fvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glVertexAttribs3fvNV_fnptr = &glVertexAttribs3fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs3fvNV_Lazy(uint index, int count, float* v)
        {
            _glVertexAttribs3fvNV_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs3fvNV");
            _glVertexAttribs3fvNV_fnptr(index, count, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs3hvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, Half*, void> _glVertexAttribs3hvNV_fnptr = &glVertexAttribs3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs3hvNV_Lazy(uint index, int n, Half* v)
        {
            _glVertexAttribs3hvNV_fnptr = (delegate* unmanaged<uint, int, Half*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs3hvNV");
            _glVertexAttribs3hvNV_fnptr(index, n, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs3svNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, short*, void> _glVertexAttribs3svNV_fnptr = &glVertexAttribs3svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs3svNV_Lazy(uint index, int count, short* v)
        {
            _glVertexAttribs3svNV_fnptr = (delegate* unmanaged<uint, int, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs3svNV");
            _glVertexAttribs3svNV_fnptr(index, count, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs4dvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, double*, void> _glVertexAttribs4dvNV_fnptr = &glVertexAttribs4dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs4dvNV_Lazy(uint index, int count, double* v)
        {
            _glVertexAttribs4dvNV_fnptr = (delegate* unmanaged<uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs4dvNV");
            _glVertexAttribs4dvNV_fnptr(index, count, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs4fvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glVertexAttribs4fvNV_fnptr = &glVertexAttribs4fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs4fvNV_Lazy(uint index, int count, float* v)
        {
            _glVertexAttribs4fvNV_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs4fvNV");
            _glVertexAttribs4fvNV_fnptr(index, count, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs4hvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, Half*, void> _glVertexAttribs4hvNV_fnptr = &glVertexAttribs4hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs4hvNV_Lazy(uint index, int n, Half* v)
        {
            _glVertexAttribs4hvNV_fnptr = (delegate* unmanaged<uint, int, Half*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs4hvNV");
            _glVertexAttribs4hvNV_fnptr(index, n, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs4svNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, short*, void> _glVertexAttribs4svNV_fnptr = &glVertexAttribs4svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs4svNV_Lazy(uint index, int count, short* v)
        {
            _glVertexAttribs4svNV_fnptr = (delegate* unmanaged<uint, int, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs4svNV");
            _glVertexAttribs4svNV_fnptr(index, count, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexAttribs4ubvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, byte*, void> _glVertexAttribs4ubvNV_fnptr = &glVertexAttribs4ubvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexAttribs4ubvNV_Lazy(uint index, int count, byte* v)
        {
            _glVertexAttribs4ubvNV_fnptr = (delegate* unmanaged<uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs4ubvNV");
            _glVertexAttribs4ubvNV_fnptr(index, count, v);
        }
        
        /// <summary><b>[entry point: <c>glVertexBindingDivisor</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glVertexBindingDivisor_fnptr = &glVertexBindingDivisor_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexBindingDivisor_Lazy(uint bindingindex, uint divisor)
        {
            _glVertexBindingDivisor_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexBindingDivisor");
            _glVertexBindingDivisor_fnptr(bindingindex, divisor);
        }
        
        /// <summary><b>[entry point: <c>glVertexBlendARB</c>]</b></summary>
        public static delegate* unmanaged<int, void> _glVertexBlendARB_fnptr = &glVertexBlendARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexBlendARB_Lazy(int count)
        {
            _glVertexBlendARB_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexBlendARB");
            _glVertexBlendARB_fnptr(count);
        }
        
        /// <summary><b>[entry point: <c>glVertexBlendEnvfATI</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glVertexBlendEnvfATI_fnptr = &glVertexBlendEnvfATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexBlendEnvfATI_Lazy(uint pname, float param)
        {
            _glVertexBlendEnvfATI_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexBlendEnvfATI");
            _glVertexBlendEnvfATI_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glVertexBlendEnviATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glVertexBlendEnviATI_fnptr = &glVertexBlendEnviATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexBlendEnviATI_Lazy(uint pname, int param)
        {
            _glVertexBlendEnviATI_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexBlendEnviATI");
            _glVertexBlendEnviATI_fnptr(pname, param);
        }
        
        /// <summary><b>[entry point: <c>glVertexFormatNV</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void> _glVertexFormatNV_fnptr = &glVertexFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexFormatNV_Lazy(int size, uint type, int stride)
        {
            _glVertexFormatNV_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexFormatNV");
            _glVertexFormatNV_fnptr(size, type, stride);
        }
        
        /// <summary><b>[entry point: <c>glVertexP2ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glVertexP2ui_fnptr = &glVertexP2ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexP2ui_Lazy(uint type, uint value)
        {
            _glVertexP2ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexP2ui");
            _glVertexP2ui_fnptr(type, value);
        }
        
        /// <summary><b>[entry point: <c>glVertexP2uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVertexP2uiv_fnptr = &glVertexP2uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexP2uiv_Lazy(uint type, uint* value)
        {
            _glVertexP2uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexP2uiv");
            _glVertexP2uiv_fnptr(type, value);
        }
        
        /// <summary><b>[entry point: <c>glVertexP3ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glVertexP3ui_fnptr = &glVertexP3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexP3ui_Lazy(uint type, uint value)
        {
            _glVertexP3ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexP3ui");
            _glVertexP3ui_fnptr(type, value);
        }
        
        /// <summary><b>[entry point: <c>glVertexP3uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVertexP3uiv_fnptr = &glVertexP3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexP3uiv_Lazy(uint type, uint* value)
        {
            _glVertexP3uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexP3uiv");
            _glVertexP3uiv_fnptr(type, value);
        }
        
        /// <summary><b>[entry point: <c>glVertexP4ui</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, void> _glVertexP4ui_fnptr = &glVertexP4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexP4ui_Lazy(uint type, uint value)
        {
            _glVertexP4ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexP4ui");
            _glVertexP4ui_fnptr(type, value);
        }
        
        /// <summary><b>[entry point: <c>glVertexP4uiv</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, void> _glVertexP4uiv_fnptr = &glVertexP4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexP4uiv_Lazy(uint type, uint* value)
        {
            _glVertexP4uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexP4uiv");
            _glVertexP4uiv_fnptr(type, value);
        }
        
        /// <summary><b>[entry point: <c>glVertexPointer</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void*, void> _glVertexPointer_fnptr = &glVertexPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexPointer_Lazy(int size, uint type, int stride, void* pointer)
        {
            _glVertexPointer_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexPointer");
            _glVertexPointer_fnptr(size, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glVertexPointerEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, int, void*, void> _glVertexPointerEXT_fnptr = &glVertexPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexPointerEXT_Lazy(int size, uint type, int stride, int count, void* pointer)
        {
            _glVertexPointerEXT_fnptr = (delegate* unmanaged<int, uint, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexPointerEXT");
            _glVertexPointerEXT_fnptr(size, type, stride, count, pointer);
        }
        
        /// <summary><b>[entry point: <c>glVertexPointerListIBM</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void**, int, void> _glVertexPointerListIBM_fnptr = &glVertexPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexPointerListIBM_Lazy(int size, uint type, int stride, void** pointer, int ptrstride)
        {
            _glVertexPointerListIBM_fnptr = (delegate* unmanaged<int, uint, int, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexPointerListIBM");
            _glVertexPointerListIBM_fnptr(size, type, stride, pointer, ptrstride);
        }
        
        /// <summary><b>[entry point: <c>glVertexPointervINTEL</c>]</b></summary>
        public static delegate* unmanaged<int, uint, void**, void> _glVertexPointervINTEL_fnptr = &glVertexPointervINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexPointervINTEL_Lazy(int size, uint type, void** pointer)
        {
            _glVertexPointervINTEL_fnptr = (delegate* unmanaged<int, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glVertexPointervINTEL");
            _glVertexPointervINTEL_fnptr(size, type, pointer);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream1dATI</c>]</b></summary>
        public static delegate* unmanaged<uint, double, void> _glVertexStream1dATI_fnptr = &glVertexStream1dATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream1dATI_Lazy(uint stream, double x)
        {
            _glVertexStream1dATI_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1dATI");
            _glVertexStream1dATI_fnptr(stream, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream1dvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexStream1dvATI_fnptr = &glVertexStream1dvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream1dvATI_Lazy(uint stream, double* coords)
        {
            _glVertexStream1dvATI_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1dvATI");
            _glVertexStream1dvATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream1fATI</c>]</b></summary>
        public static delegate* unmanaged<uint, float, void> _glVertexStream1fATI_fnptr = &glVertexStream1fATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream1fATI_Lazy(uint stream, float x)
        {
            _glVertexStream1fATI_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1fATI");
            _glVertexStream1fATI_fnptr(stream, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream1fvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexStream1fvATI_fnptr = &glVertexStream1fvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream1fvATI_Lazy(uint stream, float* coords)
        {
            _glVertexStream1fvATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1fvATI");
            _glVertexStream1fvATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream1iATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int, void> _glVertexStream1iATI_fnptr = &glVertexStream1iATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream1iATI_Lazy(uint stream, int x)
        {
            _glVertexStream1iATI_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1iATI");
            _glVertexStream1iATI_fnptr(stream, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream1ivATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexStream1ivATI_fnptr = &glVertexStream1ivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream1ivATI_Lazy(uint stream, int* coords)
        {
            _glVertexStream1ivATI_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1ivATI");
            _glVertexStream1ivATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream1sATI</c>]</b></summary>
        public static delegate* unmanaged<uint, short, void> _glVertexStream1sATI_fnptr = &glVertexStream1sATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream1sATI_Lazy(uint stream, short x)
        {
            _glVertexStream1sATI_fnptr = (delegate* unmanaged<uint, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1sATI");
            _glVertexStream1sATI_fnptr(stream, x);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream1svATI</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexStream1svATI_fnptr = &glVertexStream1svATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream1svATI_Lazy(uint stream, short* coords)
        {
            _glVertexStream1svATI_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1svATI");
            _glVertexStream1svATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream2dATI</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, void> _glVertexStream2dATI_fnptr = &glVertexStream2dATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream2dATI_Lazy(uint stream, double x, double y)
        {
            _glVertexStream2dATI_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2dATI");
            _glVertexStream2dATI_fnptr(stream, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream2dvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexStream2dvATI_fnptr = &glVertexStream2dvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream2dvATI_Lazy(uint stream, double* coords)
        {
            _glVertexStream2dvATI_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2dvATI");
            _glVertexStream2dvATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream2fATI</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, void> _glVertexStream2fATI_fnptr = &glVertexStream2fATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream2fATI_Lazy(uint stream, float x, float y)
        {
            _glVertexStream2fATI_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2fATI");
            _glVertexStream2fATI_fnptr(stream, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream2fvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexStream2fvATI_fnptr = &glVertexStream2fvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream2fvATI_Lazy(uint stream, float* coords)
        {
            _glVertexStream2fvATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2fvATI");
            _glVertexStream2fvATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream2iATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, void> _glVertexStream2iATI_fnptr = &glVertexStream2iATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream2iATI_Lazy(uint stream, int x, int y)
        {
            _glVertexStream2iATI_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2iATI");
            _glVertexStream2iATI_fnptr(stream, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream2ivATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexStream2ivATI_fnptr = &glVertexStream2ivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream2ivATI_Lazy(uint stream, int* coords)
        {
            _glVertexStream2ivATI_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2ivATI");
            _glVertexStream2ivATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream2sATI</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, void> _glVertexStream2sATI_fnptr = &glVertexStream2sATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream2sATI_Lazy(uint stream, short x, short y)
        {
            _glVertexStream2sATI_fnptr = (delegate* unmanaged<uint, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2sATI");
            _glVertexStream2sATI_fnptr(stream, x, y);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream2svATI</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexStream2svATI_fnptr = &glVertexStream2svATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream2svATI_Lazy(uint stream, short* coords)
        {
            _glVertexStream2svATI_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2svATI");
            _glVertexStream2svATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream3dATI</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, void> _glVertexStream3dATI_fnptr = &glVertexStream3dATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream3dATI_Lazy(uint stream, double x, double y, double z)
        {
            _glVertexStream3dATI_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3dATI");
            _glVertexStream3dATI_fnptr(stream, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream3dvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexStream3dvATI_fnptr = &glVertexStream3dvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream3dvATI_Lazy(uint stream, double* coords)
        {
            _glVertexStream3dvATI_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3dvATI");
            _glVertexStream3dvATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream3fATI</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, void> _glVertexStream3fATI_fnptr = &glVertexStream3fATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream3fATI_Lazy(uint stream, float x, float y, float z)
        {
            _glVertexStream3fATI_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3fATI");
            _glVertexStream3fATI_fnptr(stream, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream3fvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexStream3fvATI_fnptr = &glVertexStream3fvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream3fvATI_Lazy(uint stream, float* coords)
        {
            _glVertexStream3fvATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3fvATI");
            _glVertexStream3fvATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream3iATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, void> _glVertexStream3iATI_fnptr = &glVertexStream3iATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream3iATI_Lazy(uint stream, int x, int y, int z)
        {
            _glVertexStream3iATI_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3iATI");
            _glVertexStream3iATI_fnptr(stream, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream3ivATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexStream3ivATI_fnptr = &glVertexStream3ivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream3ivATI_Lazy(uint stream, int* coords)
        {
            _glVertexStream3ivATI_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3ivATI");
            _glVertexStream3ivATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream3sATI</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, short, void> _glVertexStream3sATI_fnptr = &glVertexStream3sATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream3sATI_Lazy(uint stream, short x, short y, short z)
        {
            _glVertexStream3sATI_fnptr = (delegate* unmanaged<uint, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3sATI");
            _glVertexStream3sATI_fnptr(stream, x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream3svATI</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexStream3svATI_fnptr = &glVertexStream3svATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream3svATI_Lazy(uint stream, short* coords)
        {
            _glVertexStream3svATI_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3svATI");
            _glVertexStream3svATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream4dATI</c>]</b></summary>
        public static delegate* unmanaged<uint, double, double, double, double, void> _glVertexStream4dATI_fnptr = &glVertexStream4dATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream4dATI_Lazy(uint stream, double x, double y, double z, double w)
        {
            _glVertexStream4dATI_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4dATI");
            _glVertexStream4dATI_fnptr(stream, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream4dvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, double*, void> _glVertexStream4dvATI_fnptr = &glVertexStream4dvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream4dvATI_Lazy(uint stream, double* coords)
        {
            _glVertexStream4dvATI_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4dvATI");
            _glVertexStream4dvATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream4fATI</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, void> _glVertexStream4fATI_fnptr = &glVertexStream4fATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream4fATI_Lazy(uint stream, float x, float y, float z, float w)
        {
            _glVertexStream4fATI_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4fATI");
            _glVertexStream4fATI_fnptr(stream, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream4fvATI</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glVertexStream4fvATI_fnptr = &glVertexStream4fvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream4fvATI_Lazy(uint stream, float* coords)
        {
            _glVertexStream4fvATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4fvATI");
            _glVertexStream4fvATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream4iATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int, int, int, void> _glVertexStream4iATI_fnptr = &glVertexStream4iATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream4iATI_Lazy(uint stream, int x, int y, int z, int w)
        {
            _glVertexStream4iATI_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4iATI");
            _glVertexStream4iATI_fnptr(stream, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream4ivATI</c>]</b></summary>
        public static delegate* unmanaged<uint, int*, void> _glVertexStream4ivATI_fnptr = &glVertexStream4ivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream4ivATI_Lazy(uint stream, int* coords)
        {
            _glVertexStream4ivATI_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4ivATI");
            _glVertexStream4ivATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream4sATI</c>]</b></summary>
        public static delegate* unmanaged<uint, short, short, short, short, void> _glVertexStream4sATI_fnptr = &glVertexStream4sATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream4sATI_Lazy(uint stream, short x, short y, short z, short w)
        {
            _glVertexStream4sATI_fnptr = (delegate* unmanaged<uint, short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4sATI");
            _glVertexStream4sATI_fnptr(stream, x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glVertexStream4svATI</c>]</b></summary>
        public static delegate* unmanaged<uint, short*, void> _glVertexStream4svATI_fnptr = &glVertexStream4svATI_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexStream4svATI_Lazy(uint stream, short* coords)
        {
            _glVertexStream4svATI_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4svATI");
            _glVertexStream4svATI_fnptr(stream, coords);
        }
        
        /// <summary><b>[entry point: <c>glVertexWeightfEXT</c>]</b></summary>
        public static delegate* unmanaged<float, void> _glVertexWeightfEXT_fnptr = &glVertexWeightfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexWeightfEXT_Lazy(float weight)
        {
            _glVertexWeightfEXT_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexWeightfEXT");
            _glVertexWeightfEXT_fnptr(weight);
        }
        
        /// <summary><b>[entry point: <c>glVertexWeightfvEXT</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glVertexWeightfvEXT_fnptr = &glVertexWeightfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexWeightfvEXT_Lazy(float* weight)
        {
            _glVertexWeightfvEXT_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexWeightfvEXT");
            _glVertexWeightfvEXT_fnptr(weight);
        }
        
        /// <summary><b>[entry point: <c>glVertexWeighthNV</c>]</b></summary>
        public static delegate* unmanaged<Half, void> _glVertexWeighthNV_fnptr = &glVertexWeighthNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexWeighthNV_Lazy(Half weight)
        {
            _glVertexWeighthNV_fnptr = (delegate* unmanaged<Half, void>)GLLoader.BindingsContext.GetProcAddress("glVertexWeighthNV");
            _glVertexWeighthNV_fnptr(weight);
        }
        
        /// <summary><b>[entry point: <c>glVertexWeighthvNV</c>]</b></summary>
        public static delegate* unmanaged<Half*, void> _glVertexWeighthvNV_fnptr = &glVertexWeighthvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexWeighthvNV_Lazy(Half* weight)
        {
            _glVertexWeighthvNV_fnptr = (delegate* unmanaged<Half*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexWeighthvNV");
            _glVertexWeighthvNV_fnptr(weight);
        }
        
        /// <summary><b>[entry point: <c>glVertexWeightPointerEXT</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void*, void> _glVertexWeightPointerEXT_fnptr = &glVertexWeightPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glVertexWeightPointerEXT_Lazy(int size, uint type, int stride, void* pointer)
        {
            _glVertexWeightPointerEXT_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexWeightPointerEXT");
            _glVertexWeightPointerEXT_fnptr(size, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glVideoCaptureNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint*, ulong*, uint> _glVideoCaptureNV_fnptr = &glVideoCaptureNV_Lazy;
        [UnmanagedCallersOnly]
        private static uint glVideoCaptureNV_Lazy(uint video_capture_slot, uint* sequence_num, ulong* capture_time)
        {
            _glVideoCaptureNV_fnptr = (delegate* unmanaged<uint, uint*, ulong*, uint>)GLLoader.BindingsContext.GetProcAddress("glVideoCaptureNV");
            return _glVideoCaptureNV_fnptr(video_capture_slot, sequence_num, capture_time);
        }
        
        /// <summary><b>[entry point: <c>glVideoCaptureStreamParameterdvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, double*, void> _glVideoCaptureStreamParameterdvNV_fnptr = &glVideoCaptureStreamParameterdvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVideoCaptureStreamParameterdvNV_Lazy(uint video_capture_slot, uint stream, uint pname, double* parameters)
        {
            _glVideoCaptureStreamParameterdvNV_fnptr = (delegate* unmanaged<uint, uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVideoCaptureStreamParameterdvNV");
            _glVideoCaptureStreamParameterdvNV_fnptr(video_capture_slot, stream, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glVideoCaptureStreamParameterfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, float*, void> _glVideoCaptureStreamParameterfvNV_fnptr = &glVideoCaptureStreamParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVideoCaptureStreamParameterfvNV_Lazy(uint video_capture_slot, uint stream, uint pname, float* parameters)
        {
            _glVideoCaptureStreamParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVideoCaptureStreamParameterfvNV");
            _glVideoCaptureStreamParameterfvNV_fnptr(video_capture_slot, stream, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glVideoCaptureStreamParameterivNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, int*, void> _glVideoCaptureStreamParameterivNV_fnptr = &glVideoCaptureStreamParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glVideoCaptureStreamParameterivNV_Lazy(uint video_capture_slot, uint stream, uint pname, int* parameters)
        {
            _glVideoCaptureStreamParameterivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVideoCaptureStreamParameterivNV");
            _glVideoCaptureStreamParameterivNV_fnptr(video_capture_slot, stream, pname, parameters);
        }
        
        /// <summary><b>[entry point: <c>glViewport</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glViewport_fnptr = &glViewport_Lazy;
        [UnmanagedCallersOnly]
        private static void glViewport_Lazy(int x, int y, int width, int height)
        {
            _glViewport_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glViewport");
            _glViewport_fnptr(x, y, width, height);
        }
        
        /// <summary><b>[entry point: <c>glViewportArrayv</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glViewportArrayv_fnptr = &glViewportArrayv_Lazy;
        [UnmanagedCallersOnly]
        private static void glViewportArrayv_Lazy(uint first, int count, float* v)
        {
            _glViewportArrayv_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glViewportArrayv");
            _glViewportArrayv_fnptr(first, count, v);
        }
        
        /// <summary><b>[entry point: <c>glViewportArrayvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glViewportArrayvNV_fnptr = &glViewportArrayvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glViewportArrayvNV_Lazy(uint first, int count, float* v)
        {
            _glViewportArrayvNV_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glViewportArrayvNV");
            _glViewportArrayvNV_fnptr(first, count, v);
        }
        
        /// <summary><b>[entry point: <c>glViewportArrayvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, int, float*, void> _glViewportArrayvOES_fnptr = &glViewportArrayvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glViewportArrayvOES_Lazy(uint first, int count, float* v)
        {
            _glViewportArrayvOES_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glViewportArrayvOES");
            _glViewportArrayvOES_fnptr(first, count, v);
        }
        
        /// <summary><b>[entry point: <c>glViewportIndexedf</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, void> _glViewportIndexedf_fnptr = &glViewportIndexedf_Lazy;
        [UnmanagedCallersOnly]
        private static void glViewportIndexedf_Lazy(uint index, float x, float y, float w, float h)
        {
            _glViewportIndexedf_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glViewportIndexedf");
            _glViewportIndexedf_fnptr(index, x, y, w, h);
        }
        
        /// <summary><b>[entry point: <c>glViewportIndexedfNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, void> _glViewportIndexedfNV_fnptr = &glViewportIndexedfNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glViewportIndexedfNV_Lazy(uint index, float x, float y, float w, float h)
        {
            _glViewportIndexedfNV_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glViewportIndexedfNV");
            _glViewportIndexedfNV_fnptr(index, x, y, w, h);
        }
        
        /// <summary><b>[entry point: <c>glViewportIndexedfOES</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, float, float, void> _glViewportIndexedfOES_fnptr = &glViewportIndexedfOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glViewportIndexedfOES_Lazy(uint index, float x, float y, float w, float h)
        {
            _glViewportIndexedfOES_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glViewportIndexedfOES");
            _glViewportIndexedfOES_fnptr(index, x, y, w, h);
        }
        
        /// <summary><b>[entry point: <c>glViewportIndexedfv</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glViewportIndexedfv_fnptr = &glViewportIndexedfv_Lazy;
        [UnmanagedCallersOnly]
        private static void glViewportIndexedfv_Lazy(uint index, float* v)
        {
            _glViewportIndexedfv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glViewportIndexedfv");
            _glViewportIndexedfv_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glViewportIndexedfvNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glViewportIndexedfvNV_fnptr = &glViewportIndexedfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glViewportIndexedfvNV_Lazy(uint index, float* v)
        {
            _glViewportIndexedfvNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glViewportIndexedfvNV");
            _glViewportIndexedfvNV_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glViewportIndexedfvOES</c>]</b></summary>
        public static delegate* unmanaged<uint, float*, void> _glViewportIndexedfvOES_fnptr = &glViewportIndexedfvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glViewportIndexedfvOES_Lazy(uint index, float* v)
        {
            _glViewportIndexedfvOES_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glViewportIndexedfvOES");
            _glViewportIndexedfvOES_fnptr(index, v);
        }
        
        /// <summary><b>[entry point: <c>glViewportPositionWScaleNV</c>]</b></summary>
        public static delegate* unmanaged<uint, float, float, void> _glViewportPositionWScaleNV_fnptr = &glViewportPositionWScaleNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glViewportPositionWScaleNV_Lazy(uint index, float xcoeff, float ycoeff)
        {
            _glViewportPositionWScaleNV_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glViewportPositionWScaleNV");
            _glViewportPositionWScaleNV_fnptr(index, xcoeff, ycoeff);
        }
        
        /// <summary><b>[entry point: <c>glViewportSwizzleNV</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, void> _glViewportSwizzleNV_fnptr = &glViewportSwizzleNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glViewportSwizzleNV_Lazy(uint index, uint swizzlex, uint swizzley, uint swizzlez, uint swizzlew)
        {
            _glViewportSwizzleNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glViewportSwizzleNV");
            _glViewportSwizzleNV_fnptr(index, swizzlex, swizzley, swizzlez, swizzlew);
        }
        
        /// <summary><b>[entry point: <c>glWaitSemaphoreEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, int*, uint, int*, uint*, void> _glWaitSemaphoreEXT_fnptr = &glWaitSemaphoreEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glWaitSemaphoreEXT_Lazy(uint semaphore, uint numBufferBarriers, int* buffers, uint numTextureBarriers, int* textures, uint* srcLayouts)
        {
            _glWaitSemaphoreEXT_fnptr = (delegate* unmanaged<uint, uint, int*, uint, int*, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glWaitSemaphoreEXT");
            _glWaitSemaphoreEXT_fnptr(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
        }
        
        /// <summary><b>[entry point: <c>glWaitSemaphoreui64NVX</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, ulong*, void> _glWaitSemaphoreui64NVX_fnptr = &glWaitSemaphoreui64NVX_Lazy;
        [UnmanagedCallersOnly]
        private static void glWaitSemaphoreui64NVX_Lazy(uint waitGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray)
        {
            _glWaitSemaphoreui64NVX_fnptr = (delegate* unmanaged<uint, int, uint*, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glWaitSemaphoreui64NVX");
            _glWaitSemaphoreui64NVX_fnptr(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
        }
        
        /// <summary><b>[entry point: <c>glWaitSync</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, uint, ulong, void> _glWaitSync_fnptr = &glWaitSync_Lazy;
        [UnmanagedCallersOnly]
        private static void glWaitSync_Lazy(IntPtr sync, uint flags, ulong timeout)
        {
            _glWaitSync_fnptr = (delegate* unmanaged<IntPtr, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glWaitSync");
            _glWaitSync_fnptr(sync, flags, timeout);
        }
        
        /// <summary><b>[entry point: <c>glWaitSyncAPPLE</c>]</b></summary>
        public static delegate* unmanaged<IntPtr, uint, ulong, void> _glWaitSyncAPPLE_fnptr = &glWaitSyncAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void glWaitSyncAPPLE_Lazy(IntPtr sync, uint flags, ulong timeout)
        {
            _glWaitSyncAPPLE_fnptr = (delegate* unmanaged<IntPtr, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glWaitSyncAPPLE");
            _glWaitSyncAPPLE_fnptr(sync, flags, timeout);
        }
        
        /// <summary><b>[entry point: <c>glWaitVkSemaphoreNV</c>]</b></summary>
        public static delegate* unmanaged<ulong, void> _glWaitVkSemaphoreNV_fnptr = &glWaitVkSemaphoreNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glWaitVkSemaphoreNV_Lazy(ulong vkSemaphore)
        {
            _glWaitVkSemaphoreNV_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glWaitVkSemaphoreNV");
            _glWaitVkSemaphoreNV_fnptr(vkSemaphore);
        }
        
        /// <summary><b>[entry point: <c>glWeightbvARB</c>]</b></summary>
        public static delegate* unmanaged<int, sbyte*, void> _glWeightbvARB_fnptr = &glWeightbvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWeightbvARB_Lazy(int size, sbyte* weights)
        {
            _glWeightbvARB_fnptr = (delegate* unmanaged<int, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightbvARB");
            _glWeightbvARB_fnptr(size, weights);
        }
        
        /// <summary><b>[entry point: <c>glWeightdvARB</c>]</b></summary>
        public static delegate* unmanaged<int, double*, void> _glWeightdvARB_fnptr = &glWeightdvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWeightdvARB_Lazy(int size, double* weights)
        {
            _glWeightdvARB_fnptr = (delegate* unmanaged<int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightdvARB");
            _glWeightdvARB_fnptr(size, weights);
        }
        
        /// <summary><b>[entry point: <c>glWeightfvARB</c>]</b></summary>
        public static delegate* unmanaged<int, float*, void> _glWeightfvARB_fnptr = &glWeightfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWeightfvARB_Lazy(int size, float* weights)
        {
            _glWeightfvARB_fnptr = (delegate* unmanaged<int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightfvARB");
            _glWeightfvARB_fnptr(size, weights);
        }
        
        /// <summary><b>[entry point: <c>glWeightivARB</c>]</b></summary>
        public static delegate* unmanaged<int, int*, void> _glWeightivARB_fnptr = &glWeightivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWeightivARB_Lazy(int size, int* weights)
        {
            _glWeightivARB_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightivARB");
            _glWeightivARB_fnptr(size, weights);
        }
        
        /// <summary><b>[entry point: <c>glWeightPathsNV</c>]</b></summary>
        public static delegate* unmanaged<uint, int, uint*, float*, void> _glWeightPathsNV_fnptr = &glWeightPathsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void glWeightPathsNV_Lazy(uint resultPath, int numPaths, uint* paths, float* weights)
        {
            _glWeightPathsNV_fnptr = (delegate* unmanaged<uint, int, uint*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightPathsNV");
            _glWeightPathsNV_fnptr(resultPath, numPaths, paths, weights);
        }
        
        /// <summary><b>[entry point: <c>glWeightPointerARB</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void*, void> _glWeightPointerARB_fnptr = &glWeightPointerARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWeightPointerARB_Lazy(int size, uint type, int stride, void* pointer)
        {
            _glWeightPointerARB_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightPointerARB");
            _glWeightPointerARB_fnptr(size, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glWeightPointerOES</c>]</b></summary>
        public static delegate* unmanaged<int, uint, int, void*, void> _glWeightPointerOES_fnptr = &glWeightPointerOES_Lazy;
        [UnmanagedCallersOnly]
        private static void glWeightPointerOES_Lazy(int size, uint type, int stride, void* pointer)
        {
            _glWeightPointerOES_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightPointerOES");
            _glWeightPointerOES_fnptr(size, type, stride, pointer);
        }
        
        /// <summary><b>[entry point: <c>glWeightsvARB</c>]</b></summary>
        public static delegate* unmanaged<int, short*, void> _glWeightsvARB_fnptr = &glWeightsvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWeightsvARB_Lazy(int size, short* weights)
        {
            _glWeightsvARB_fnptr = (delegate* unmanaged<int, short*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightsvARB");
            _glWeightsvARB_fnptr(size, weights);
        }
        
        /// <summary><b>[entry point: <c>glWeightubvARB</c>]</b></summary>
        public static delegate* unmanaged<int, byte*, void> _glWeightubvARB_fnptr = &glWeightubvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWeightubvARB_Lazy(int size, byte* weights)
        {
            _glWeightubvARB_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightubvARB");
            _glWeightubvARB_fnptr(size, weights);
        }
        
        /// <summary><b>[entry point: <c>glWeightuivARB</c>]</b></summary>
        public static delegate* unmanaged<int, uint*, void> _glWeightuivARB_fnptr = &glWeightuivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWeightuivARB_Lazy(int size, uint* weights)
        {
            _glWeightuivARB_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightuivARB");
            _glWeightuivARB_fnptr(size, weights);
        }
        
        /// <summary><b>[entry point: <c>glWeightusvARB</c>]</b></summary>
        public static delegate* unmanaged<int, ushort*, void> _glWeightusvARB_fnptr = &glWeightusvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWeightusvARB_Lazy(int size, ushort* weights)
        {
            _glWeightusvARB_fnptr = (delegate* unmanaged<int, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightusvARB");
            _glWeightusvARB_fnptr(size, weights);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2d</c>]</b></summary>
        public static delegate* unmanaged<double, double, void> _glWindowPos2d_fnptr = &glWindowPos2d_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2d_Lazy(double x, double y)
        {
            _glWindowPos2d_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2d");
            _glWindowPos2d_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2dARB</c>]</b></summary>
        public static delegate* unmanaged<double, double, void> _glWindowPos2dARB_fnptr = &glWindowPos2dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2dARB_Lazy(double x, double y)
        {
            _glWindowPos2dARB_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2dARB");
            _glWindowPos2dARB_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2dMESA</c>]</b></summary>
        public static delegate* unmanaged<double, double, void> _glWindowPos2dMESA_fnptr = &glWindowPos2dMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2dMESA_Lazy(double x, double y)
        {
            _glWindowPos2dMESA_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2dMESA");
            _glWindowPos2dMESA_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glWindowPos2dv_fnptr = &glWindowPos2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2dv_Lazy(double* v)
        {
            _glWindowPos2dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2dv");
            _glWindowPos2dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2dvARB</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glWindowPos2dvARB_fnptr = &glWindowPos2dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2dvARB_Lazy(double* v)
        {
            _glWindowPos2dvARB_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2dvARB");
            _glWindowPos2dvARB_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2dvMESA</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glWindowPos2dvMESA_fnptr = &glWindowPos2dvMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2dvMESA_Lazy(double* v)
        {
            _glWindowPos2dvMESA_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2dvMESA");
            _glWindowPos2dvMESA_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2f</c>]</b></summary>
        public static delegate* unmanaged<float, float, void> _glWindowPos2f_fnptr = &glWindowPos2f_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2f_Lazy(float x, float y)
        {
            _glWindowPos2f_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2f");
            _glWindowPos2f_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2fARB</c>]</b></summary>
        public static delegate* unmanaged<float, float, void> _glWindowPos2fARB_fnptr = &glWindowPos2fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2fARB_Lazy(float x, float y)
        {
            _glWindowPos2fARB_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2fARB");
            _glWindowPos2fARB_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2fMESA</c>]</b></summary>
        public static delegate* unmanaged<float, float, void> _glWindowPos2fMESA_fnptr = &glWindowPos2fMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2fMESA_Lazy(float x, float y)
        {
            _glWindowPos2fMESA_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2fMESA");
            _glWindowPos2fMESA_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glWindowPos2fv_fnptr = &glWindowPos2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2fv_Lazy(float* v)
        {
            _glWindowPos2fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2fv");
            _glWindowPos2fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2fvARB</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glWindowPos2fvARB_fnptr = &glWindowPos2fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2fvARB_Lazy(float* v)
        {
            _glWindowPos2fvARB_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2fvARB");
            _glWindowPos2fvARB_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2fvMESA</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glWindowPos2fvMESA_fnptr = &glWindowPos2fvMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2fvMESA_Lazy(float* v)
        {
            _glWindowPos2fvMESA_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2fvMESA");
            _glWindowPos2fvMESA_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2i</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glWindowPos2i_fnptr = &glWindowPos2i_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2i_Lazy(int x, int y)
        {
            _glWindowPos2i_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2i");
            _glWindowPos2i_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2iARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glWindowPos2iARB_fnptr = &glWindowPos2iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2iARB_Lazy(int x, int y)
        {
            _glWindowPos2iARB_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2iARB");
            _glWindowPos2iARB_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2iMESA</c>]</b></summary>
        public static delegate* unmanaged<int, int, void> _glWindowPos2iMESA_fnptr = &glWindowPos2iMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2iMESA_Lazy(int x, int y)
        {
            _glWindowPos2iMESA_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2iMESA");
            _glWindowPos2iMESA_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glWindowPos2iv_fnptr = &glWindowPos2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2iv_Lazy(int* v)
        {
            _glWindowPos2iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2iv");
            _glWindowPos2iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2ivARB</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glWindowPos2ivARB_fnptr = &glWindowPos2ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2ivARB_Lazy(int* v)
        {
            _glWindowPos2ivARB_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2ivARB");
            _glWindowPos2ivARB_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2ivMESA</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glWindowPos2ivMESA_fnptr = &glWindowPos2ivMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2ivMESA_Lazy(int* v)
        {
            _glWindowPos2ivMESA_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2ivMESA");
            _glWindowPos2ivMESA_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2s</c>]</b></summary>
        public static delegate* unmanaged<short, short, void> _glWindowPos2s_fnptr = &glWindowPos2s_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2s_Lazy(short x, short y)
        {
            _glWindowPos2s_fnptr = (delegate* unmanaged<short, short, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2s");
            _glWindowPos2s_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2sARB</c>]</b></summary>
        public static delegate* unmanaged<short, short, void> _glWindowPos2sARB_fnptr = &glWindowPos2sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2sARB_Lazy(short x, short y)
        {
            _glWindowPos2sARB_fnptr = (delegate* unmanaged<short, short, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2sARB");
            _glWindowPos2sARB_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2sMESA</c>]</b></summary>
        public static delegate* unmanaged<short, short, void> _glWindowPos2sMESA_fnptr = &glWindowPos2sMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2sMESA_Lazy(short x, short y)
        {
            _glWindowPos2sMESA_fnptr = (delegate* unmanaged<short, short, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2sMESA");
            _glWindowPos2sMESA_fnptr(x, y);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glWindowPos2sv_fnptr = &glWindowPos2sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2sv_Lazy(short* v)
        {
            _glWindowPos2sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2sv");
            _glWindowPos2sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2svARB</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glWindowPos2svARB_fnptr = &glWindowPos2svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2svARB_Lazy(short* v)
        {
            _glWindowPos2svARB_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2svARB");
            _glWindowPos2svARB_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos2svMESA</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glWindowPos2svMESA_fnptr = &glWindowPos2svMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos2svMESA_Lazy(short* v)
        {
            _glWindowPos2svMESA_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2svMESA");
            _glWindowPos2svMESA_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3d</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, void> _glWindowPos3d_fnptr = &glWindowPos3d_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3d_Lazy(double x, double y, double z)
        {
            _glWindowPos3d_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3d");
            _glWindowPos3d_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3dARB</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, void> _glWindowPos3dARB_fnptr = &glWindowPos3dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3dARB_Lazy(double x, double y, double z)
        {
            _glWindowPos3dARB_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3dARB");
            _glWindowPos3dARB_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3dMESA</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, void> _glWindowPos3dMESA_fnptr = &glWindowPos3dMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3dMESA_Lazy(double x, double y, double z)
        {
            _glWindowPos3dMESA_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3dMESA");
            _glWindowPos3dMESA_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3dv</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glWindowPos3dv_fnptr = &glWindowPos3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3dv_Lazy(double* v)
        {
            _glWindowPos3dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3dv");
            _glWindowPos3dv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3dvARB</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glWindowPos3dvARB_fnptr = &glWindowPos3dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3dvARB_Lazy(double* v)
        {
            _glWindowPos3dvARB_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3dvARB");
            _glWindowPos3dvARB_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3dvMESA</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glWindowPos3dvMESA_fnptr = &glWindowPos3dvMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3dvMESA_Lazy(double* v)
        {
            _glWindowPos3dvMESA_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3dvMESA");
            _glWindowPos3dvMESA_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3f</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glWindowPos3f_fnptr = &glWindowPos3f_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3f_Lazy(float x, float y, float z)
        {
            _glWindowPos3f_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3f");
            _glWindowPos3f_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3fARB</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glWindowPos3fARB_fnptr = &glWindowPos3fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3fARB_Lazy(float x, float y, float z)
        {
            _glWindowPos3fARB_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3fARB");
            _glWindowPos3fARB_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3fMESA</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, void> _glWindowPos3fMESA_fnptr = &glWindowPos3fMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3fMESA_Lazy(float x, float y, float z)
        {
            _glWindowPos3fMESA_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3fMESA");
            _glWindowPos3fMESA_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3fv</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glWindowPos3fv_fnptr = &glWindowPos3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3fv_Lazy(float* v)
        {
            _glWindowPos3fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3fv");
            _glWindowPos3fv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3fvARB</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glWindowPos3fvARB_fnptr = &glWindowPos3fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3fvARB_Lazy(float* v)
        {
            _glWindowPos3fvARB_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3fvARB");
            _glWindowPos3fvARB_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3fvMESA</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glWindowPos3fvMESA_fnptr = &glWindowPos3fvMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3fvMESA_Lazy(float* v)
        {
            _glWindowPos3fvMESA_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3fvMESA");
            _glWindowPos3fvMESA_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3i</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glWindowPos3i_fnptr = &glWindowPos3i_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3i_Lazy(int x, int y, int z)
        {
            _glWindowPos3i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3i");
            _glWindowPos3i_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3iARB</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glWindowPos3iARB_fnptr = &glWindowPos3iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3iARB_Lazy(int x, int y, int z)
        {
            _glWindowPos3iARB_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3iARB");
            _glWindowPos3iARB_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3iMESA</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, void> _glWindowPos3iMESA_fnptr = &glWindowPos3iMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3iMESA_Lazy(int x, int y, int z)
        {
            _glWindowPos3iMESA_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3iMESA");
            _glWindowPos3iMESA_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3iv</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glWindowPos3iv_fnptr = &glWindowPos3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3iv_Lazy(int* v)
        {
            _glWindowPos3iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3iv");
            _glWindowPos3iv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3ivARB</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glWindowPos3ivARB_fnptr = &glWindowPos3ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3ivARB_Lazy(int* v)
        {
            _glWindowPos3ivARB_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3ivARB");
            _glWindowPos3ivARB_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3ivMESA</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glWindowPos3ivMESA_fnptr = &glWindowPos3ivMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3ivMESA_Lazy(int* v)
        {
            _glWindowPos3ivMESA_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3ivMESA");
            _glWindowPos3ivMESA_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3s</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, void> _glWindowPos3s_fnptr = &glWindowPos3s_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3s_Lazy(short x, short y, short z)
        {
            _glWindowPos3s_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3s");
            _glWindowPos3s_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3sARB</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, void> _glWindowPos3sARB_fnptr = &glWindowPos3sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3sARB_Lazy(short x, short y, short z)
        {
            _glWindowPos3sARB_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3sARB");
            _glWindowPos3sARB_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3sMESA</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, void> _glWindowPos3sMESA_fnptr = &glWindowPos3sMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3sMESA_Lazy(short x, short y, short z)
        {
            _glWindowPos3sMESA_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3sMESA");
            _glWindowPos3sMESA_fnptr(x, y, z);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3sv</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glWindowPos3sv_fnptr = &glWindowPos3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3sv_Lazy(short* v)
        {
            _glWindowPos3sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3sv");
            _glWindowPos3sv_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3svARB</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glWindowPos3svARB_fnptr = &glWindowPos3svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3svARB_Lazy(short* v)
        {
            _glWindowPos3svARB_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3svARB");
            _glWindowPos3svARB_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos3svMESA</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glWindowPos3svMESA_fnptr = &glWindowPos3svMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos3svMESA_Lazy(short* v)
        {
            _glWindowPos3svMESA_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3svMESA");
            _glWindowPos3svMESA_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos4dMESA</c>]</b></summary>
        public static delegate* unmanaged<double, double, double, double, void> _glWindowPos4dMESA_fnptr = &glWindowPos4dMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos4dMESA_Lazy(double x, double y, double z, double w)
        {
            _glWindowPos4dMESA_fnptr = (delegate* unmanaged<double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4dMESA");
            _glWindowPos4dMESA_fnptr(x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos4dvMESA</c>]</b></summary>
        public static delegate* unmanaged<double*, void> _glWindowPos4dvMESA_fnptr = &glWindowPos4dvMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos4dvMESA_Lazy(double* v)
        {
            _glWindowPos4dvMESA_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4dvMESA");
            _glWindowPos4dvMESA_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos4fMESA</c>]</b></summary>
        public static delegate* unmanaged<float, float, float, float, void> _glWindowPos4fMESA_fnptr = &glWindowPos4fMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos4fMESA_Lazy(float x, float y, float z, float w)
        {
            _glWindowPos4fMESA_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4fMESA");
            _glWindowPos4fMESA_fnptr(x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos4fvMESA</c>]</b></summary>
        public static delegate* unmanaged<float*, void> _glWindowPos4fvMESA_fnptr = &glWindowPos4fvMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos4fvMESA_Lazy(float* v)
        {
            _glWindowPos4fvMESA_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4fvMESA");
            _glWindowPos4fvMESA_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos4iMESA</c>]</b></summary>
        public static delegate* unmanaged<int, int, int, int, void> _glWindowPos4iMESA_fnptr = &glWindowPos4iMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos4iMESA_Lazy(int x, int y, int z, int w)
        {
            _glWindowPos4iMESA_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4iMESA");
            _glWindowPos4iMESA_fnptr(x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos4ivMESA</c>]</b></summary>
        public static delegate* unmanaged<int*, void> _glWindowPos4ivMESA_fnptr = &glWindowPos4ivMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos4ivMESA_Lazy(int* v)
        {
            _glWindowPos4ivMESA_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4ivMESA");
            _glWindowPos4ivMESA_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos4sMESA</c>]</b></summary>
        public static delegate* unmanaged<short, short, short, short, void> _glWindowPos4sMESA_fnptr = &glWindowPos4sMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos4sMESA_Lazy(short x, short y, short z, short w)
        {
            _glWindowPos4sMESA_fnptr = (delegate* unmanaged<short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4sMESA");
            _glWindowPos4sMESA_fnptr(x, y, z, w);
        }
        
        /// <summary><b>[entry point: <c>glWindowPos4svMESA</c>]</b></summary>
        public static delegate* unmanaged<short*, void> _glWindowPos4svMESA_fnptr = &glWindowPos4svMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowPos4svMESA_Lazy(short* v)
        {
            _glWindowPos4svMESA_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4svMESA");
            _glWindowPos4svMESA_fnptr(v);
        }
        
        /// <summary><b>[entry point: <c>glWindowRectanglesEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, int, int*, void> _glWindowRectanglesEXT_fnptr = &glWindowRectanglesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glWindowRectanglesEXT_Lazy(uint mode, int count, int* box)
        {
            _glWindowRectanglesEXT_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowRectanglesEXT");
            _glWindowRectanglesEXT_fnptr(mode, count, box);
        }
        
        /// <summary><b>[entry point: <c>glWriteMaskEXT</c>]</b></summary>
        public static delegate* unmanaged<uint, uint, uint, uint, uint, uint, void> _glWriteMaskEXT_fnptr = &glWriteMaskEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void glWriteMaskEXT_Lazy(uint res, uint input, uint outX, uint outY, uint outZ, uint outW)
        {
            _glWriteMaskEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glWriteMaskEXT");
            _glWriteMaskEXT_fnptr(res, input, outX, outY, outZ, outW);
        }
        
    }
}
