// This file is auto generated, do not edit. Generated: 2023-10-16 17:21:49 GMT+02:00
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using OpenTK.Mathematics;
using OpenTK.Graphics;
using OpenTK.Graphics.Wgl;
using OpenTK.Graphics.Glx;

namespace OpenTK.Graphics.OpenGL
{
    public static unsafe partial class GL
    {
        /// <inheritdoc cref="BindAttribLocation(int, uint, byte*)"/>
        public static unsafe void BindAttribLocation(int program, uint index, string name)
        {
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            BindAttribLocation(program, index, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
        }
        /// <inheritdoc cref="BindBuffersBase(BufferTargetARB, uint, int, int*)"/>
        public static unsafe void BindBuffersBase(BufferTargetARB target, uint first, ReadOnlySpan<int> buffers)
        {
            int count = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                BindBuffersBase(target, first, count, buffers_ptr);
            }
        }
        /// <inheritdoc cref="BindBuffersBase(BufferTargetARB, uint, int, int*)"/>
        public static unsafe void BindBuffersBase(BufferTargetARB target, uint first, int[] buffers)
        {
            int count = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                BindBuffersBase(target, first, count, buffers_ptr);
            }
        }
        /// <inheritdoc cref="BindBuffersBase(BufferTargetARB, uint, int, int*)"/>
        public static unsafe void BindBuffersBase(BufferTargetARB target, uint first, int count, in int buffers)
        {
            fixed (int* buffers_ptr = &buffers)
            {
                BindBuffersBase(target, first, count, buffers_ptr);
            }
        }
        /// <inheritdoc cref="BindBuffersRange(BufferTargetARB, uint, int, int*, IntPtr*, nint*)"/>
        public static unsafe void BindBuffersRange(BufferTargetARB target, uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<nint> sizes)
        {
            fixed (int* buffers_ptr = buffers)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (nint* sizes_ptr = sizes)
                    {
                        BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="BindBuffersRange(BufferTargetARB, uint, int, int*, IntPtr*, nint*)"/>
        public static unsafe void BindBuffersRange(BufferTargetARB target, uint first, int count, int[] buffers, IntPtr[] offsets, nint[] sizes)
        {
            fixed (int* buffers_ptr = buffers)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (nint* sizes_ptr = sizes)
                    {
                        BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="BindBuffersRange(BufferTargetARB, uint, int, int*, IntPtr*, nint*)"/>
        public static unsafe void BindBuffersRange(BufferTargetARB target, uint first, int count, in int buffers, in IntPtr offsets, in nint sizes)
        {
            fixed (int* buffers_ptr = &buffers)
            fixed (IntPtr* offsets_ptr = &offsets)
            fixed (nint* sizes_ptr = &sizes)
            {
                BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
            }
        }
        /// <inheritdoc cref="BindFragDataLocation(int, uint, byte*)"/>
        public static unsafe void BindFragDataLocation(int program, uint color, string name)
        {
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            BindFragDataLocation(program, color, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
        }
        /// <inheritdoc cref="BindFragDataLocationIndexed(int, uint, uint, byte*)"/>
        public static unsafe void BindFragDataLocationIndexed(int program, uint colorNumber, uint index, string name)
        {
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            BindFragDataLocationIndexed(program, colorNumber, index, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
        }
        /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
        public static unsafe void BindImageTextures(uint first, ReadOnlySpan<int> textures)
        {
            int count = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                BindImageTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
        public static unsafe void BindImageTextures(uint first, int[] textures)
        {
            int count = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                BindImageTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
        public static unsafe void BindImageTextures(uint first, int count, in int textures)
        {
            fixed (int* textures_ptr = &textures)
            {
                BindImageTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
        public static unsafe void BindSamplers(uint first, ReadOnlySpan<int> samplers)
        {
            int count = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                BindSamplers(first, count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
        public static unsafe void BindSamplers(uint first, int[] samplers)
        {
            int count = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                BindSamplers(first, count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
        public static unsafe void BindSamplers(uint first, int count, in int samplers)
        {
            fixed (int* samplers_ptr = &samplers)
            {
                BindSamplers(first, count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
        public static unsafe void BindTextures(uint first, ReadOnlySpan<int> textures)
        {
            int count = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                BindTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
        public static unsafe void BindTextures(uint first, int[] textures)
        {
            int count = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                BindTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
        public static unsafe void BindTextures(uint first, int count, in int textures)
        {
            fixed (int* textures_ptr = &textures)
            {
                BindTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void BindVertexBuffers(uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<int> strides)
        {
            fixed (int* buffers_ptr = buffers)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (int* strides_ptr = strides)
                    {
                        BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void BindVertexBuffers(uint first, int count, int[] buffers, IntPtr[] offsets, int[] strides)
        {
            fixed (int* buffers_ptr = buffers)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (int* strides_ptr = strides)
                    {
                        BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void BindVertexBuffers(uint first, int count, in int buffers, in IntPtr offsets, in int strides)
        {
            fixed (int* buffers_ptr = &buffers)
            fixed (IntPtr* offsets_ptr = &offsets)
            fixed (int* strides_ptr = &strides)
            {
                BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
            }
        }
        /// <inheritdoc cref="BufferData(BufferTargetARB, nint, void*, BufferUsageARB)"/>
        public static unsafe void BufferData(BufferTargetARB target, nint size, IntPtr data, BufferUsageARB usage)
        {
            void* data_vptr = (void*)data;
            BufferData(target, size, data_vptr, usage);
        }
        /// <inheritdoc cref="BufferData(BufferTargetARB, nint, void*, BufferUsageARB)"/>
        public static unsafe void BufferData<T1>(BufferTargetARB target, ReadOnlySpan<T1> data, BufferUsageARB usage)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                BufferData(target, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="BufferData(BufferTargetARB, nint, void*, BufferUsageARB)"/>
        public static unsafe void BufferData<T1>(BufferTargetARB target, T1[] data, BufferUsageARB usage)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                BufferData(target, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="BufferData(BufferTargetARB, nint, void*, BufferUsageARB)"/>
        public static unsafe void BufferData<T1>(BufferTargetARB target, nint size, in T1 data, BufferUsageARB usage)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                BufferData(target, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
        public static unsafe void BufferStorage(BufferStorageTarget target, nint size, IntPtr data, BufferStorageMask flags)
        {
            void* data_vptr = (void*)data;
            BufferStorage(target, size, data_vptr, flags);
        }
        /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
        public static unsafe void BufferStorage<T1>(BufferStorageTarget target, ReadOnlySpan<T1> data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                BufferStorage(target, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
        public static unsafe void BufferStorage<T1>(BufferStorageTarget target, T1[] data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                BufferStorage(target, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
        public static unsafe void BufferStorage<T1>(BufferStorageTarget target, nint size, in T1 data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                BufferStorage(target, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="BufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void BufferSubData(BufferTargetARB target, IntPtr offset, nint size, IntPtr data)
        {
            void* data_vptr = (void*)data;
            BufferSubData(target, offset, size, data_vptr);
        }
        /// <inheritdoc cref="BufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void BufferSubData<T1>(BufferTargetARB target, IntPtr offset, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                BufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="BufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void BufferSubData<T1>(BufferTargetARB target, IntPtr offset, T1[] data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                BufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="BufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void BufferSubData<T1>(BufferTargetARB target, IntPtr offset, nint size, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                BufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearBufferData(target, internalformat, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearBufferData(target, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearBufferData(target, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearBufferData(target, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferfi(Buffer, int, float, int)"/>
        public static unsafe void ClearBuffer(Buffer buffer, int drawbuffer, float depth, int stencil)
        {
            ClearBufferfi(buffer, drawbuffer, depth, stencil);
        }
        /// <inheritdoc cref="ClearBufferfv(Buffer, int, float*)"/>
        public static unsafe void ClearBufferf(Buffer buffer, int drawbuffer, ReadOnlySpan<float> value)
        {
            fixed (float* value_ptr = value)
            {
                ClearBufferfv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferfv(Buffer, int, float*)"/>
        public static unsafe void ClearBufferf(Buffer buffer, int drawbuffer, float[] value)
        {
            fixed (float* value_ptr = value)
            {
                ClearBufferfv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferfv(Buffer, int, float*)"/>
        public static unsafe void ClearBufferf(Buffer buffer, int drawbuffer, in float value)
        {
            fixed (float* value_ptr = &value)
            {
                ClearBufferfv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferiv(Buffer, int, int*)"/>
        public static unsafe void ClearBufferi(Buffer buffer, int drawbuffer, ReadOnlySpan<int> value)
        {
            fixed (int* value_ptr = value)
            {
                ClearBufferiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferiv(Buffer, int, int*)"/>
        public static unsafe void ClearBufferi(Buffer buffer, int drawbuffer, int[] value)
        {
            fixed (int* value_ptr = value)
            {
                ClearBufferiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferiv(Buffer, int, int*)"/>
        public static unsafe void ClearBufferi(Buffer buffer, int drawbuffer, in int value)
        {
            fixed (int* value_ptr = &value)
            {
                ClearBufferiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearBufferSubData(target, internalformat, offset, size, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferSubData<T1>(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferSubData<T1>(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferSubData<T1>(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferuiv(Buffer, int, uint*)"/>
        public static unsafe void ClearBufferui(Buffer buffer, int drawbuffer, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                ClearBufferuiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferuiv(Buffer, int, uint*)"/>
        public static unsafe void ClearBufferui(Buffer buffer, int drawbuffer, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                ClearBufferuiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferuiv(Buffer, int, uint*)"/>
        public static unsafe void ClearBufferui(Buffer buffer, int drawbuffer, in uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                ClearBufferuiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferData(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearNamedBufferData(buffer, internalformat, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferSubData(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferfi(int, Buffer, int, float, int)"/>
        public static unsafe void ClearNamedFramebuffer(int framebuffer, Buffer buffer, int drawbuffer, float depth, int stencil)
        {
            ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
        }
        /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
        public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<float> value)
        {
            fixed (float* value_ptr = value)
            {
                ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
        public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, float[] value)
        {
            fixed (float* value_ptr = value)
            {
                ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
        public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, in float value)
        {
            fixed (float* value_ptr = &value)
            {
                ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
        public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<int> value)
        {
            fixed (int* value_ptr = value)
            {
                ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
        public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, int[] value)
        {
            fixed (int* value_ptr = value)
            {
                ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
        public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, in int value)
        {
            fixed (int* value_ptr = &value)
            {
                ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
        public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
        public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
        public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, in uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexImage(int texture, int level, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearTexImage(texture, level, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearTexImage(texture, level, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearTexImage(texture, level, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearTexImage(texture, level, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage1D(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CreateBuffers(int, int*)"/>
        public static unsafe int CreateBuffer()
        {
            int buffer;
            int n = 1;
            Unsafe.SkipInit(out buffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* buffers_handle = (int*)Unsafe.AsPointer(ref buffer);
            CreateBuffers(n, buffers_handle);
            return buffer;
        }
        /// <inheritdoc cref="CreateBuffers(int, int*)"/>
        public static unsafe void CreateBuffer(out int buffer)
        {
            int n = 1;
            Unsafe.SkipInit(out buffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* buffers_handle = (int*)Unsafe.AsPointer(ref buffer);
            CreateBuffers(n, buffers_handle);
        }
        /// <inheritdoc cref="CreateBuffers(int, int*)"/>
        public static unsafe void CreateBuffers(Span<int> buffers)
        {
            int n = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                CreateBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateBuffers(int, int*)"/>
        public static unsafe void CreateBuffers(int[] buffers)
        {
            int n = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                CreateBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateBuffers(int, int*)"/>
        public static unsafe void CreateBuffers(int n, ref int buffers)
        {
            fixed (int* buffers_ptr = &buffers)
            {
                CreateBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
        public static unsafe int CreateFramebuffer()
        {
            int framebuffer;
            int n = 1;
            Unsafe.SkipInit(out framebuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
            CreateFramebuffers(n, framebuffers_handle);
            return framebuffer;
        }
        /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
        public static unsafe void CreateFramebuffer(out int framebuffer)
        {
            int n = 1;
            Unsafe.SkipInit(out framebuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
            CreateFramebuffers(n, framebuffers_handle);
        }
        /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
        public static unsafe void CreateFramebuffers(Span<int> framebuffers)
        {
            int n = (int)(framebuffers.Length);
            fixed (int* framebuffers_ptr = framebuffers)
            {
                CreateFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
        public static unsafe void CreateFramebuffers(int[] framebuffers)
        {
            int n = (int)(framebuffers.Length);
            fixed (int* framebuffers_ptr = framebuffers)
            {
                CreateFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
        public static unsafe void CreateFramebuffers(int n, ref int framebuffers)
        {
            fixed (int* framebuffers_ptr = &framebuffers)
            {
                CreateFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
        public static unsafe int CreateProgramPipeline()
        {
            int pipeline;
            int n = 1;
            Unsafe.SkipInit(out pipeline);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
            CreateProgramPipelines(n, pipelines_handle);
            return pipeline;
        }
        /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
        public static unsafe void CreateProgramPipeline(out int pipeline)
        {
            int n = 1;
            Unsafe.SkipInit(out pipeline);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
            CreateProgramPipelines(n, pipelines_handle);
        }
        /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
        public static unsafe void CreateProgramPipelines(Span<int> pipelines)
        {
            int n = (int)(pipelines.Length);
            fixed (int* pipelines_ptr = pipelines)
            {
                CreateProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
        public static unsafe void CreateProgramPipelines(int[] pipelines)
        {
            int n = (int)(pipelines.Length);
            fixed (int* pipelines_ptr = pipelines)
            {
                CreateProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
        public static unsafe void CreateProgramPipelines(int n, ref int pipelines)
        {
            fixed (int* pipelines_ptr = &pipelines)
            {
                CreateProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
        public static unsafe int CreateQuery(QueryTarget target)
        {
            int id;
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            CreateQueries(target, n, ids_handle);
            return id;
        }
        /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
        public static unsafe void CreateQuery(QueryTarget target, out int id)
        {
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            CreateQueries(target, n, ids_handle);
        }
        /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
        public static unsafe void CreateQueries(QueryTarget target, Span<int> ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                CreateQueries(target, n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
        public static unsafe void CreateQueries(QueryTarget target, int[] ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                CreateQueries(target, n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
        public static unsafe void CreateQueries(QueryTarget target, int n, ref int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                CreateQueries(target, n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
        public static unsafe int CreateRenderbuffer()
        {
            int renderbuffer;
            int n = 1;
            Unsafe.SkipInit(out renderbuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
            CreateRenderbuffers(n, renderbuffers_handle);
            return renderbuffer;
        }
        /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
        public static unsafe void CreateRenderbuffer(out int renderbuffer)
        {
            int n = 1;
            Unsafe.SkipInit(out renderbuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
            CreateRenderbuffers(n, renderbuffers_handle);
        }
        /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
        public static unsafe void CreateRenderbuffers(Span<int> renderbuffers)
        {
            int n = (int)(renderbuffers.Length);
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                CreateRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
        public static unsafe void CreateRenderbuffers(int[] renderbuffers)
        {
            int n = (int)(renderbuffers.Length);
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                CreateRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
        public static unsafe void CreateRenderbuffers(int n, ref int renderbuffers)
        {
            fixed (int* renderbuffers_ptr = &renderbuffers)
            {
                CreateRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateSamplers(int, int*)"/>
        public static unsafe int CreateSampler()
        {
            int sampler;
            int n = 1;
            Unsafe.SkipInit(out sampler);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
            CreateSamplers(n, samplers_handle);
            return sampler;
        }
        /// <inheritdoc cref="CreateSamplers(int, int*)"/>
        public static unsafe void CreateSampler(out int sampler)
        {
            int n = 1;
            Unsafe.SkipInit(out sampler);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
            CreateSamplers(n, samplers_handle);
        }
        /// <inheritdoc cref="CreateSamplers(int, int*)"/>
        public static unsafe void CreateSamplers(Span<int> samplers)
        {
            int n = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                CreateSamplers(n, samplers_ptr);
            }
        }
        /// <inheritdoc cref="CreateSamplers(int, int*)"/>
        public static unsafe void CreateSamplers(int[] samplers)
        {
            int n = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                CreateSamplers(n, samplers_ptr);
            }
        }
        /// <inheritdoc cref="CreateSamplers(int, int*)"/>
        public static unsafe void CreateSamplers(int n, ref int samplers)
        {
            fixed (int* samplers_ptr = &samplers)
            {
                CreateSamplers(n, samplers_ptr);
            }
        }
        /// <inheritdoc cref="CreateShaderProgramv(ShaderType, int, byte**)"/>
        public static unsafe int CreateShaderProgram(ShaderType type, int count, byte** strings)
        {
            int returnValue;
            returnValue = CreateShaderProgramv(type, count, strings);
            return returnValue;
        }
        /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
        public static unsafe int CreateTexture(TextureTarget target)
        {
            int texture;
            int n = 1;
            Unsafe.SkipInit(out texture);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* textures_handle = (int*)Unsafe.AsPointer(ref texture);
            CreateTextures(target, n, textures_handle);
            return texture;
        }
        /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
        public static unsafe void CreateTexture(TextureTarget target, out int texture)
        {
            int n = 1;
            Unsafe.SkipInit(out texture);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* textures_handle = (int*)Unsafe.AsPointer(ref texture);
            CreateTextures(target, n, textures_handle);
        }
        /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
        public static unsafe void CreateTextures(TextureTarget target, Span<int> textures)
        {
            int n = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                CreateTextures(target, n, textures_ptr);
            }
        }
        /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
        public static unsafe void CreateTextures(TextureTarget target, int[] textures)
        {
            int n = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                CreateTextures(target, n, textures_ptr);
            }
        }
        /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
        public static unsafe void CreateTextures(TextureTarget target, int n, ref int textures)
        {
            fixed (int* textures_ptr = &textures)
            {
                CreateTextures(target, n, textures_ptr);
            }
        }
        /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
        public static unsafe int CreateTransformFeedback()
        {
            int id;
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            CreateTransformFeedbacks(n, ids_handle);
            return id;
        }
        /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
        public static unsafe void CreateTransformFeedback(out int id)
        {
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            CreateTransformFeedbacks(n, ids_handle);
        }
        /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
        public static unsafe void CreateTransformFeedbacks(Span<int> ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                CreateTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
        public static unsafe void CreateTransformFeedbacks(int[] ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                CreateTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
        public static unsafe void CreateTransformFeedbacks(int n, ref int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                CreateTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
        public static unsafe int CreateVertexArray()
        {
            int array;
            int n = 1;
            Unsafe.SkipInit(out array);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
            CreateVertexArrays(n, arrays_handle);
            return array;
        }
        /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
        public static unsafe void CreateVertexArray(out int array)
        {
            int n = 1;
            Unsafe.SkipInit(out array);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
            CreateVertexArrays(n, arrays_handle);
        }
        /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
        public static unsafe void CreateVertexArrays(Span<int> arrays)
        {
            int n = (int)(arrays.Length);
            fixed (int* arrays_ptr = arrays)
            {
                CreateVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
        public static unsafe void CreateVertexArrays(int[] arrays)
        {
            int n = (int)(arrays.Length);
            fixed (int* arrays_ptr = arrays)
            {
                CreateVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
        public static unsafe void CreateVertexArrays(int n, ref int arrays)
        {
            fixed (int* arrays_ptr = &arrays)
            {
                CreateVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
        public static unsafe void DebugMessageCallback(GLDebugProc callback, IntPtr userParam)
        {
            void* userParam_vptr = (void*)userParam;
            IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
            DebugMessageCallback(callback_ptr, userParam_vptr);
        }
        /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
        public static unsafe void DebugMessageCallback<T1>(GLDebugProc callback, in T1 userParam)
            where T1 : unmanaged
        {
            fixed (void* userParam_ptr = &userParam)
            {
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallback(callback_ptr, userParam_ptr);
            }
        }
        /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
        public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, ReadOnlySpan<uint> ids, bool enabled)
        {
            int count = (int)(ids.Length);
            fixed (uint* ids_ptr = ids)
            {
                DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
            }
        }
        /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
        public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, uint[] ids, bool enabled)
        {
            int count = (int)(ids.Length);
            fixed (uint* ids_ptr = ids)
            {
                DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
            }
        }
        /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
        public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, in uint ids, bool enabled)
        {
            fixed (uint* ids_ptr = &ids)
            {
                DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
            }
        }
        /// <inheritdoc cref="DebugMessageInsert(DebugSource, DebugType, uint, DebugSeverity, int, byte*)"/>
        public static unsafe void DebugMessageInsert(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
        {
            byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
            DebugMessageInsert(source, type, id, severity, length, buf_ptr);
            Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
        }
        /// <inheritdoc cref="DeleteBuffers(int, int*)"/>
        public static unsafe void DeleteBuffer(in int buffer)
        {
            int n = 1;
            fixed(int* buffers_handle = &buffer)
            {
                DeleteBuffers(n, buffers_handle);
            }
        }
        /// <inheritdoc cref="DeleteBuffers(int, int*)"/>
        public static unsafe void DeleteBuffers(ReadOnlySpan<int> buffers)
        {
            int n = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                DeleteBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteBuffers(int, int*)"/>
        public static unsafe void DeleteBuffers(int[] buffers)
        {
            int n = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                DeleteBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteBuffers(int, int*)"/>
        public static unsafe void DeleteBuffers(int n, in int buffers)
        {
            fixed (int* buffers_ptr = &buffers)
            {
                DeleteBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
        public static unsafe void DeleteFramebuffer(in int framebuffer)
        {
            int n = 1;
            fixed(int* framebuffers_handle = &framebuffer)
            {
                DeleteFramebuffers(n, framebuffers_handle);
            }
        }
        /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
        public static unsafe void DeleteFramebuffers(ReadOnlySpan<int> framebuffers)
        {
            int n = (int)(framebuffers.Length);
            fixed (int* framebuffers_ptr = framebuffers)
            {
                DeleteFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
        public static unsafe void DeleteFramebuffers(int[] framebuffers)
        {
            int n = (int)(framebuffers.Length);
            fixed (int* framebuffers_ptr = framebuffers)
            {
                DeleteFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
        public static unsafe void DeleteFramebuffers(int n, in int framebuffers)
        {
            fixed (int* framebuffers_ptr = &framebuffers)
            {
                DeleteFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
        public static unsafe void DeleteProgramPipeline(in int pipeline)
        {
            int n = 1;
            fixed(int* pipelines_handle = &pipeline)
            {
                DeleteProgramPipelines(n, pipelines_handle);
            }
        }
        /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
        public static unsafe void DeleteProgramPipelines(ReadOnlySpan<int> pipelines)
        {
            int n = (int)(pipelines.Length);
            fixed (int* pipelines_ptr = pipelines)
            {
                DeleteProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
        public static unsafe void DeleteProgramPipelines(int[] pipelines)
        {
            int n = (int)(pipelines.Length);
            fixed (int* pipelines_ptr = pipelines)
            {
                DeleteProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
        public static unsafe void DeleteProgramPipelines(int n, in int pipelines)
        {
            fixed (int* pipelines_ptr = &pipelines)
            {
                DeleteProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="DeleteQueries(int, int*)"/>
        public static unsafe void DeleteQuery(in int id)
        {
            int n = 1;
            fixed(int* ids_handle = &id)
            {
                DeleteQueries(n, ids_handle);
            }
        }
        /// <inheritdoc cref="DeleteQueries(int, int*)"/>
        public static unsafe void DeleteQueries(ReadOnlySpan<int> ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                DeleteQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteQueries(int, int*)"/>
        public static unsafe void DeleteQueries(int[] ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                DeleteQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteQueries(int, int*)"/>
        public static unsafe void DeleteQueries(int n, in int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                DeleteQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
        public static unsafe void DeleteRenderbuffer(in int renderbuffer)
        {
            int n = 1;
            fixed(int* renderbuffers_handle = &renderbuffer)
            {
                DeleteRenderbuffers(n, renderbuffers_handle);
            }
        }
        /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
        public static unsafe void DeleteRenderbuffers(ReadOnlySpan<int> renderbuffers)
        {
            int n = (int)(renderbuffers.Length);
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                DeleteRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
        public static unsafe void DeleteRenderbuffers(int[] renderbuffers)
        {
            int n = (int)(renderbuffers.Length);
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                DeleteRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
        public static unsafe void DeleteRenderbuffers(int n, in int renderbuffers)
        {
            fixed (int* renderbuffers_ptr = &renderbuffers)
            {
                DeleteRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
        public static unsafe void DeleteSampler(in int sampler)
        {
            int count = 1;
            fixed(int* samplers_handle = &sampler)
            {
                DeleteSamplers(count, samplers_handle);
            }
        }
        /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
        public static unsafe void DeleteSamplers(ReadOnlySpan<int> samplers)
        {
            int count = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                DeleteSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
        public static unsafe void DeleteSamplers(int[] samplers)
        {
            int count = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                DeleteSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
        public static unsafe void DeleteSamplers(int count, in int samplers)
        {
            fixed (int* samplers_ptr = &samplers)
            {
                DeleteSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTextures(int, int*)"/>
        public static unsafe void DeleteTexture(in int texture)
        {
            int n = 1;
            fixed(int* textures_handle = &texture)
            {
                DeleteTextures(n, textures_handle);
            }
        }
        /// <inheritdoc cref="DeleteTextures(int, int*)"/>
        public static unsafe void DeleteTextures(ReadOnlySpan<int> textures)
        {
            int n = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                DeleteTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTextures(int, int*)"/>
        public static unsafe void DeleteTextures(int[] textures)
        {
            int n = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                DeleteTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTextures(int, int*)"/>
        public static unsafe void DeleteTextures(int n, in int textures)
        {
            fixed (int* textures_ptr = &textures)
            {
                DeleteTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
        public static unsafe void DeleteTransformFeedback(in int id)
        {
            int n = 1;
            fixed(int* ids_handle = &id)
            {
                DeleteTransformFeedbacks(n, ids_handle);
            }
        }
        /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
        public static unsafe void DeleteTransformFeedbacks(ReadOnlySpan<int> ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                DeleteTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
        public static unsafe void DeleteTransformFeedbacks(int[] ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                DeleteTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
        public static unsafe void DeleteTransformFeedbacks(int n, in int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                DeleteTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
        public static unsafe void DeleteVertexArray(in int array)
        {
            int n = 1;
            fixed(int* arrays_handle = &array)
            {
                DeleteVertexArrays(n, arrays_handle);
            }
        }
        /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
        public static unsafe void DeleteVertexArrays(ReadOnlySpan<int> arrays)
        {
            int n = (int)(arrays.Length);
            fixed (int* arrays_ptr = arrays)
            {
                DeleteVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
        public static unsafe void DeleteVertexArrays(int[] arrays)
        {
            int n = (int)(arrays.Length);
            fixed (int* arrays_ptr = arrays)
            {
                DeleteVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
        public static unsafe void DeleteVertexArrays(int n, in int arrays)
        {
            fixed (int* arrays_ptr = &arrays)
            {
                DeleteVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
        public static unsafe void DepthRangeArray(uint first, int count, ReadOnlySpan<double> v)
        {
            fixed (double* v_ptr = v)
            {
                DepthRangeArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
        public static unsafe void DepthRangeArray(uint first, int count, double[] v)
        {
            fixed (double* v_ptr = v)
            {
                DepthRangeArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
        public static unsafe void DepthRangeArray(uint first, int count, in double v)
        {
            fixed (double* v_ptr = &v)
            {
                DepthRangeArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
        public static unsafe void DrawArraysIndirect(PrimitiveType mode, IntPtr indirect)
        {
            void* indirect_vptr = (void*)indirect;
            DrawArraysIndirect(mode, indirect_vptr);
        }
        /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
        public static unsafe void DrawArraysIndirect<T1>(PrimitiveType mode, in T1 indirect)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                DrawArraysIndirect(mode, indirect_ptr);
            }
        }
        /// <inheritdoc cref="DrawBuffers(int, DrawBufferMode*)"/>
        public static unsafe void DrawBuffers(ReadOnlySpan<DrawBufferMode> bufs)
        {
            int n = (int)(bufs.Length);
            fixed (DrawBufferMode* bufs_ptr = bufs)
            {
                DrawBuffers(n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="DrawBuffers(int, DrawBufferMode*)"/>
        public static unsafe void DrawBuffers(DrawBufferMode[] bufs)
        {
            int n = (int)(bufs.Length);
            fixed (DrawBufferMode* bufs_ptr = bufs)
            {
                DrawBuffers(n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="DrawBuffers(int, DrawBufferMode*)"/>
        public static unsafe void DrawBuffers(int n, in DrawBufferMode bufs)
        {
            fixed (DrawBufferMode* bufs_ptr = &bufs)
            {
                DrawBuffers(n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="DrawElements(PrimitiveType, int, DrawElementsType, void*)"/>
        public static unsafe void DrawElements(PrimitiveType mode, int count, DrawElementsType type, nint offset)
        {
            void* indices = (void*)offset;
            DrawElements(mode, count, type, indices);
        }
        /// <inheritdoc cref="DrawElementsBaseVertex(PrimitiveType, int, DrawElementsType, void*, int)"/>
        public static unsafe void DrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint offset, int basevertex)
        {
            void* indices = (void*)offset;
            DrawElementsBaseVertex(mode, count, type, indices, basevertex);
        }
        /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
        public static unsafe void DrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect)
        {
            void* indirect_vptr = (void*)indirect;
            DrawElementsIndirect(mode, type, indirect_vptr);
        }
        /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
        public static unsafe void DrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                DrawElementsIndirect(mode, type, indirect_ptr);
            }
        }
        /// <inheritdoc cref="DrawElementsInstanced(PrimitiveType, int, DrawElementsType, void*, int)"/>
        public static unsafe void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount)
        {
            void* indices = (void*)offset;
            DrawElementsInstanced(mode, count, type, indices, instancecount);
        }
        /// <inheritdoc cref="DrawElementsInstancedBaseInstance(PrimitiveType, int, DrawElementsType, void*, int, uint)"/>
        public static unsafe void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, uint baseinstance)
        {
            void* indices = (void*)offset;
            DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
        }
        /// <inheritdoc cref="DrawElementsInstancedBaseVertex(PrimitiveType, int, DrawElementsType, void*, int, int)"/>
        public static unsafe void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, int basevertex)
        {
            void* indices = (void*)offset;
            DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
        }
        /// <inheritdoc cref="DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType, int, DrawElementsType, void*, int, int, uint)"/>
        public static unsafe void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, int basevertex, uint baseinstance)
        {
            void* indices = (void*)offset;
            DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }
        /// <inheritdoc cref="DrawRangeElements(PrimitiveType, uint, uint, int, DrawElementsType, void*)"/>
        public static unsafe void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint offset)
        {
            void* indices = (void*)offset;
            DrawRangeElements(mode, start, end, count, type, indices);
        }
        /// <inheritdoc cref="DrawRangeElementsBaseVertex(PrimitiveType, uint, uint, int, DrawElementsType, void*, int)"/>
        public static unsafe void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint offset, int basevertex)
        {
            void* indices = (void*)offset;
            DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
        }
        /// <inheritdoc cref="GenBuffers(int, int*)"/>
        public static unsafe int GenBuffer()
        {
            int buffer;
            int n = 1;
            Unsafe.SkipInit(out buffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* buffers_handle = (int*)Unsafe.AsPointer(ref buffer);
            GenBuffers(n, buffers_handle);
            return buffer;
        }
        /// <inheritdoc cref="GenBuffers(int, int*)"/>
        public static unsafe void GenBuffer(out int buffer)
        {
            int n = 1;
            Unsafe.SkipInit(out buffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* buffers_handle = (int*)Unsafe.AsPointer(ref buffer);
            GenBuffers(n, buffers_handle);
        }
        /// <inheritdoc cref="GenBuffers(int, int*)"/>
        public static unsafe void GenBuffers(Span<int> buffers)
        {
            int n = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                GenBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="GenBuffers(int, int*)"/>
        public static unsafe void GenBuffers(int[] buffers)
        {
            int n = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                GenBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="GenBuffers(int, int*)"/>
        public static unsafe void GenBuffers(int n, ref int buffers)
        {
            fixed (int* buffers_ptr = &buffers)
            {
                GenBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
        public static unsafe int GenFramebuffer()
        {
            int framebuffer;
            int n = 1;
            Unsafe.SkipInit(out framebuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
            GenFramebuffers(n, framebuffers_handle);
            return framebuffer;
        }
        /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
        public static unsafe void GenFramebuffer(out int framebuffer)
        {
            int n = 1;
            Unsafe.SkipInit(out framebuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
            GenFramebuffers(n, framebuffers_handle);
        }
        /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
        public static unsafe void GenFramebuffers(Span<int> framebuffers)
        {
            int n = (int)(framebuffers.Length);
            fixed (int* framebuffers_ptr = framebuffers)
            {
                GenFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
        public static unsafe void GenFramebuffers(int[] framebuffers)
        {
            int n = (int)(framebuffers.Length);
            fixed (int* framebuffers_ptr = framebuffers)
            {
                GenFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
        public static unsafe void GenFramebuffers(int n, ref int framebuffers)
        {
            fixed (int* framebuffers_ptr = &framebuffers)
            {
                GenFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
        public static unsafe int GenProgramPipeline()
        {
            int pipeline;
            int n = 1;
            Unsafe.SkipInit(out pipeline);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
            GenProgramPipelines(n, pipelines_handle);
            return pipeline;
        }
        /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
        public static unsafe void GenProgramPipeline(out int pipeline)
        {
            int n = 1;
            Unsafe.SkipInit(out pipeline);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
            GenProgramPipelines(n, pipelines_handle);
        }
        /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
        public static unsafe void GenProgramPipelines(Span<int> pipelines)
        {
            int n = (int)(pipelines.Length);
            fixed (int* pipelines_ptr = pipelines)
            {
                GenProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
        public static unsafe void GenProgramPipelines(int[] pipelines)
        {
            int n = (int)(pipelines.Length);
            fixed (int* pipelines_ptr = pipelines)
            {
                GenProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
        public static unsafe void GenProgramPipelines(int n, ref int pipelines)
        {
            fixed (int* pipelines_ptr = &pipelines)
            {
                GenProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="GenQueries(int, int*)"/>
        public static unsafe int GenQuery()
        {
            int id;
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            GenQueries(n, ids_handle);
            return id;
        }
        /// <inheritdoc cref="GenQueries(int, int*)"/>
        public static unsafe void GenQuery(out int id)
        {
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            GenQueries(n, ids_handle);
        }
        /// <inheritdoc cref="GenQueries(int, int*)"/>
        public static unsafe void GenQueries(Span<int> ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                GenQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenQueries(int, int*)"/>
        public static unsafe void GenQueries(int[] ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                GenQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenQueries(int, int*)"/>
        public static unsafe void GenQueries(int n, ref int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                GenQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
        public static unsafe int GenRenderbuffer()
        {
            int renderbuffer;
            int n = 1;
            Unsafe.SkipInit(out renderbuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
            GenRenderbuffers(n, renderbuffers_handle);
            return renderbuffer;
        }
        /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
        public static unsafe void GenRenderbuffer(out int renderbuffer)
        {
            int n = 1;
            Unsafe.SkipInit(out renderbuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
            GenRenderbuffers(n, renderbuffers_handle);
        }
        /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
        public static unsafe void GenRenderbuffers(Span<int> renderbuffers)
        {
            int n = (int)(renderbuffers.Length);
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                GenRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
        public static unsafe void GenRenderbuffers(int[] renderbuffers)
        {
            int n = (int)(renderbuffers.Length);
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                GenRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
        public static unsafe void GenRenderbuffers(int n, ref int renderbuffers)
        {
            fixed (int* renderbuffers_ptr = &renderbuffers)
            {
                GenRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenSamplers(int, int*)"/>
        public static unsafe int GenSampler()
        {
            int sampler;
            int count = 1;
            Unsafe.SkipInit(out sampler);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
            GenSamplers(count, samplers_handle);
            return sampler;
        }
        /// <inheritdoc cref="GenSamplers(int, int*)"/>
        public static unsafe void GenSampler(out int sampler)
        {
            int count = 1;
            Unsafe.SkipInit(out sampler);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
            GenSamplers(count, samplers_handle);
        }
        /// <inheritdoc cref="GenSamplers(int, int*)"/>
        public static unsafe void GenSamplers(Span<int> samplers)
        {
            int count = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                GenSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="GenSamplers(int, int*)"/>
        public static unsafe void GenSamplers(int[] samplers)
        {
            int count = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                GenSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="GenSamplers(int, int*)"/>
        public static unsafe void GenSamplers(int count, ref int samplers)
        {
            fixed (int* samplers_ptr = &samplers)
            {
                GenSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="GenTextures(int, int*)"/>
        public static unsafe int GenTexture()
        {
            int texture;
            int n = 1;
            Unsafe.SkipInit(out texture);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* textures_handle = (int*)Unsafe.AsPointer(ref texture);
            GenTextures(n, textures_handle);
            return texture;
        }
        /// <inheritdoc cref="GenTextures(int, int*)"/>
        public static unsafe void GenTexture(out int texture)
        {
            int n = 1;
            Unsafe.SkipInit(out texture);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* textures_handle = (int*)Unsafe.AsPointer(ref texture);
            GenTextures(n, textures_handle);
        }
        /// <inheritdoc cref="GenTextures(int, int*)"/>
        public static unsafe void GenTextures(Span<int> textures)
        {
            int n = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                GenTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="GenTextures(int, int*)"/>
        public static unsafe void GenTextures(int[] textures)
        {
            int n = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                GenTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="GenTextures(int, int*)"/>
        public static unsafe void GenTextures(int n, ref int textures)
        {
            fixed (int* textures_ptr = &textures)
            {
                GenTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
        public static unsafe int GenTransformFeedback()
        {
            int id;
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            GenTransformFeedbacks(n, ids_handle);
            return id;
        }
        /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
        public static unsafe void GenTransformFeedback(out int id)
        {
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            GenTransformFeedbacks(n, ids_handle);
        }
        /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
        public static unsafe void GenTransformFeedbacks(Span<int> ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                GenTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
        public static unsafe void GenTransformFeedbacks(int[] ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                GenTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
        public static unsafe void GenTransformFeedbacks(int n, ref int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                GenTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
        public static unsafe int GenVertexArray()
        {
            int array;
            int n = 1;
            Unsafe.SkipInit(out array);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
            GenVertexArrays(n, arrays_handle);
            return array;
        }
        /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
        public static unsafe void GenVertexArray(out int array)
        {
            int n = 1;
            Unsafe.SkipInit(out array);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
            GenVertexArrays(n, arrays_handle);
        }
        /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
        public static unsafe void GenVertexArrays(Span<int> arrays)
        {
            int n = (int)(arrays.Length);
            fixed (int* arrays_ptr = arrays)
            {
                GenVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
        public static unsafe void GenVertexArrays(int[] arrays)
        {
            int n = (int)(arrays.Length);
            fixed (int* arrays_ptr = arrays)
            {
                GenVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
        public static unsafe void GenVertexArrays(int n, ref int arrays)
        {
            fixed (int* arrays_ptr = &arrays)
            {
                GenVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
        public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
        public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
        public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
        public static unsafe int GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetActiveAttrib(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe string GetActiveAttrib(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<AttributeType> type)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveAttrib(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe void GetActiveAttrib(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<AttributeType> type, out string name)
        {
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetActiveAttrib(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe string GetActiveAttrib(int program, uint index, int bufSize, int[] length, int[] size, AttributeType[] type)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveAttrib(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe void GetActiveAttrib(int program, uint index, int bufSize, int[] length, int[] size, AttributeType[] type, out string name)
        {
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetActiveAttrib(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe string GetActiveAttrib(int program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type)
        {
            string name;
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (AttributeType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveAttrib(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe void GetActiveAttrib(int program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type, out string name)
        {
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (AttributeType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length, out string name)
        {
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, int[] length)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, int[] length, out string name)
        {
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, ref int length)
        {
            string name;
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, ref int length, out string name)
        {
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
        public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, Span<int> values)
        {
            fixed (int* values_ptr = values)
            {
                GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
        public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, int[] values)
        {
            fixed (int* values_ptr = values)
            {
                GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
        public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, ref int values)
        {
            fixed (int* values_ptr = &values)
            {
                GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
        public static unsafe int GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname)
        {
            int values_val;
            int* values = &values_val;
            GetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
            return values_val;
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length, out string name)
        {
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, int[] length)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, int[] length, out string name)
        {
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, ref int length)
        {
            string name;
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, ref int length, out string name)
        {
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniform(int, uint, int, int*, int*, UniformType*, byte*)"/>
        public static unsafe string GetActiveUniform(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<UniformType> type)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (UniformType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveUniform(int, uint, int, int*, int*, UniformType*, byte*)"/>
        public static unsafe void GetActiveUniform(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<UniformType> type, out string name)
        {
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (UniformType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetActiveUniform(int, uint, int, int*, int*, UniformType*, byte*)"/>
        public static unsafe string GetActiveUniform(int program, uint index, int bufSize, int[] length, int[] size, UniformType[] type)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (UniformType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveUniform(int, uint, int, int*, int*, UniformType*, byte*)"/>
        public static unsafe void GetActiveUniform(int program, uint index, int bufSize, int[] length, int[] size, UniformType[] type, out string name)
        {
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (UniformType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetActiveUniform(int, uint, int, int*, int*, UniformType*, byte*)"/>
        public static unsafe string GetActiveUniform(int program, uint index, int bufSize, ref int length, ref int size, ref UniformType type)
        {
            string name;
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (UniformType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveUniform(int, uint, int, int*, int*, UniformType*, byte*)"/>
        public static unsafe void GetActiveUniform(int program, uint index, int bufSize, ref int length, ref int size, ref UniformType type, out string name)
        {
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (UniformType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
        public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
        public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
        public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
        public static unsafe int GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, Span<int> length)
        {
            string uniformBlockName;
            fixed (int* length_ptr = length)
            {
                var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            }
            return uniformBlockName;
        }
        /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, Span<int> length, out string uniformBlockName)
        {
            fixed (int* length_ptr = length)
            {
                var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, int[] length)
        {
            string uniformBlockName;
            fixed (int* length_ptr = length)
            {
                var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            }
            return uniformBlockName;
        }
        /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, int[] length, out string uniformBlockName)
        {
            fixed (int* length_ptr = length)
            {
                var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, ref int length)
        {
            string uniformBlockName;
            fixed (int* length_ptr = &length)
            {
                var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            }
            return uniformBlockName;
        }
        /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, ref int length, out string uniformBlockName)
        {
            fixed (int* length_ptr = &length)
            {
                var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveUniformName(int program, uint uniformIndex, int bufSize, Span<int> length)
        {
            string uniformName;
            fixed (int* length_ptr = length)
            {
                var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
            }
            return uniformName;
        }
        /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveUniformName(int program, uint uniformIndex, int bufSize, Span<int> length, out string uniformName)
        {
            fixed (int* length_ptr = length)
            {
                var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveUniformName(int program, uint uniformIndex, int bufSize, int[] length)
        {
            string uniformName;
            fixed (int* length_ptr = length)
            {
                var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
            }
            return uniformName;
        }
        /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveUniformName(int program, uint uniformIndex, int bufSize, int[] length, out string uniformName)
        {
            fixed (int* length_ptr = length)
            {
                var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveUniformName(int program, uint uniformIndex, int bufSize, ref int length)
        {
            string uniformName;
            fixed (int* length_ptr = &length)
            {
                var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
            }
            return uniformName;
        }
        /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveUniformName(int program, uint uniformIndex, int bufSize, ref int length, out string uniformName)
        {
            fixed (int* length_ptr = &length)
            {
                var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
        public static unsafe void GetActiveUniformsi(int program, ReadOnlySpan<uint> uniformIndices, UniformPName pname, Span<int> parameters)
        {
            int uniformCount = (int)(uniformIndices.Length);
            fixed (uint* uniformIndices_ptr = uniformIndices)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
        public static unsafe void GetActiveUniformsi(int program, uint[] uniformIndices, UniformPName pname, int[] parameters)
        {
            int uniformCount = (int)(uniformIndices.Length);
            fixed (uint* uniformIndices_ptr = uniformIndices)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
        public static unsafe void GetActiveUniformsi(int program, int uniformCount, in uint uniformIndices, UniformPName pname, ref int parameters)
        {
            fixed (uint* uniformIndices_ptr = &uniformIndices)
            fixed (int* parameters_ptr = &parameters)
            {
                GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
        public static unsafe int GetActiveUniformsi(int program, ReadOnlySpan<uint> uniformIndices, UniformPName pname)
        {
            int parameters_val;
            int uniformCount = (int)(uniformIndices.Length);
            fixed (uint* uniformIndices_ptr = uniformIndices)
            {
                int* parameters = &parameters_val;
                GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters);
            }
            return parameters_val;
        }
        /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
        public static unsafe int GetActiveUniformsi(int program, uint[] uniformIndices, UniformPName pname)
        {
            int parameters_val;
            int uniformCount = (int)(uniformIndices.Length);
            fixed (uint* uniformIndices_ptr = uniformIndices)
            {
                int* parameters = &parameters_val;
                GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters);
            }
            return parameters_val;
        }
        /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
        public static unsafe int GetActiveUniformsi(int program, int uniformCount, in uint uniformIndices, UniformPName pname)
        {
            int parameters_val;
            fixed (uint* uniformIndices_ptr = &uniformIndices)
            {
                int* parameters = &parameters_val;
                GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters);
            }
            return parameters_val;
        }
        /// <inheritdoc cref="GetAttachedShaders(int, int, int*, int*)"/>
        public static unsafe void GetAttachedShaders(int program, Span<int> count, Span<int> shaders)
        {
            fixed (int* count_ptr = count)
            {
                int maxCount = (int)(shaders.Length);
                fixed (int* shaders_ptr = shaders)
                {
                    GetAttachedShaders(program, maxCount, count_ptr, shaders_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetAttachedShaders(int, int, int*, int*)"/>
        public static unsafe void GetAttachedShaders(int program, int[] count, int[] shaders)
        {
            fixed (int* count_ptr = count)
            {
                int maxCount = (int)(shaders.Length);
                fixed (int* shaders_ptr = shaders)
                {
                    GetAttachedShaders(program, maxCount, count_ptr, shaders_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetAttachedShaders(int, int, int*, int*)"/>
        public static unsafe void GetAttachedShaders(int program, int maxCount, ref int count, ref int shaders)
        {
            fixed (int* count_ptr = &count)
            fixed (int* shaders_ptr = &shaders)
            {
                GetAttachedShaders(program, maxCount, count_ptr, shaders_ptr);
            }
        }
        /// <inheritdoc cref="GetAttachedShaders(int, int, int*, int*)"/>
        public static unsafe int GetAttachedShaders(int program, int maxCount, Span<int> count)
        {
            int shaders_val;
            fixed (int* count_ptr = count)
            {
                int* shaders = &shaders_val;
                GetAttachedShaders(program, maxCount, count_ptr, shaders);
            }
            return shaders_val;
        }
        /// <inheritdoc cref="GetAttachedShaders(int, int, int*, int*)"/>
        public static unsafe int GetAttachedShaders(int program, int maxCount, int[] count)
        {
            int shaders_val;
            fixed (int* count_ptr = count)
            {
                int* shaders = &shaders_val;
                GetAttachedShaders(program, maxCount, count_ptr, shaders);
            }
            return shaders_val;
        }
        /// <inheritdoc cref="GetAttachedShaders(int, int, int*, int*)"/>
        public static unsafe int GetAttachedShaders(int program, int maxCount, ref int count)
        {
            int shaders_val;
            fixed (int* count_ptr = &count)
            {
                int* shaders = &shaders_val;
                GetAttachedShaders(program, maxCount, count_ptr, shaders);
            }
            return shaders_val;
        }
        /// <inheritdoc cref="GetAttribLocation(int, byte*)"/>
        public static unsafe int GetAttribLocation(int program, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetAttribLocation(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetBooleani_v(BufferTargetARB, uint, bool*)"/>
        public static unsafe void GetBoolean(BufferTargetARB target, uint index, Span<bool> data)
        {
            fixed (bool* data_ptr = data)
            {
                GetBooleani_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleani_v(BufferTargetARB, uint, bool*)"/>
        public static unsafe void GetBoolean(BufferTargetARB target, uint index, bool[] data)
        {
            fixed (bool* data_ptr = data)
            {
                GetBooleani_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleani_v(BufferTargetARB, uint, bool*)"/>
        public static unsafe void GetBoolean(BufferTargetARB target, uint index, ref bool data)
        {
            fixed (bool* data_ptr = &data)
            {
                GetBooleani_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleani_v(BufferTargetARB, uint, bool*)"/>
        public static unsafe bool GetBoolean(BufferTargetARB target, uint index)
        {
            bool data_val;
            bool* data = &data_val;
            GetBooleani_v(target, index, data);
            return data_val;
        }
        /// <inheritdoc cref="GetBooleanv(GetPName, bool*)"/>
        public static unsafe void GetBoolean(GetPName pname, Span<bool> data)
        {
            fixed (bool* data_ptr = data)
            {
                GetBooleanv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleanv(GetPName, bool*)"/>
        public static unsafe void GetBoolean(GetPName pname, bool[] data)
        {
            fixed (bool* data_ptr = data)
            {
                GetBooleanv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleanv(GetPName, bool*)"/>
        public static unsafe void GetBoolean(GetPName pname, ref bool data)
        {
            fixed (bool* data_ptr = &data)
            {
                GetBooleanv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleanv(GetPName, bool*)"/>
        public static unsafe bool GetBoolean(GetPName pname)
        {
            bool data_val;
            bool* data = &data_val;
            GetBooleanv(pname, data);
            return data_val;
        }
        /// <inheritdoc cref="GetBufferParameteri64v(BufferTargetARB, BufferPNameARB, long*)"/>
        public static unsafe void GetBufferParameteri64(BufferTargetARB target, BufferPNameARB pname, Span<long> parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetBufferParameteri64v(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteri64v(BufferTargetARB, BufferPNameARB, long*)"/>
        public static unsafe void GetBufferParameteri64(BufferTargetARB target, BufferPNameARB pname, long[] parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetBufferParameteri64v(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteri64v(BufferTargetARB, BufferPNameARB, long*)"/>
        public static unsafe void GetBufferParameteri64(BufferTargetARB target, BufferPNameARB pname, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters)
            {
                GetBufferParameteri64v(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteri64v(BufferTargetARB, BufferPNameARB, long*)"/>
        public static unsafe long GetBufferParameteri64(BufferTargetARB target, BufferPNameARB pname)
        {
            long parameters_val;
            long* parameters = &parameters_val;
            GetBufferParameteri64v(target, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetBufferParameteriv(BufferTargetARB, BufferPNameARB, int*)"/>
        public static unsafe void GetBufferParameteri(BufferTargetARB target, BufferPNameARB pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetBufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteriv(BufferTargetARB, BufferPNameARB, int*)"/>
        public static unsafe void GetBufferParameteri(BufferTargetARB target, BufferPNameARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetBufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteriv(BufferTargetARB, BufferPNameARB, int*)"/>
        public static unsafe void GetBufferParameteri(BufferTargetARB target, BufferPNameARB pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetBufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteriv(BufferTargetARB, BufferPNameARB, int*)"/>
        public static unsafe int GetBufferParameteri(BufferTargetARB target, BufferPNameARB pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetBufferParameteriv(target, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetBufferPointerv(BufferTargetARB, BufferPointerNameARB, void**)"/>
        public static unsafe void GetBufferPointer(BufferTargetARB target, BufferPointerNameARB pname, void** parameters)
        {
            GetBufferPointerv(target, pname, parameters);
        }
        /// <inheritdoc cref="GetBufferPointerv(BufferTargetARB, BufferPointerNameARB, void**)"/>
        public static unsafe void* GetBufferPointer(BufferTargetARB target, BufferPointerNameARB pname)
        {
            void* parameters_val;
            void** parameters = &parameters_val;
            GetBufferPointerv(target, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetBufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void GetBufferSubData(BufferTargetARB target, IntPtr offset, nint size, IntPtr data)
        {
            void* data_vptr = (void*)data;
            GetBufferSubData(target, offset, size, data_vptr);
        }
        /// <inheritdoc cref="GetBufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void GetBufferSubData<T1>(BufferTargetARB target, IntPtr offset, Span<T1> data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                GetBufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void GetBufferSubData<T1>(BufferTargetARB target, IntPtr offset, T1[] data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                GetBufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void GetBufferSubData<T1>(BufferTargetARB target, IntPtr offset, nint size, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                GetBufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
        public static unsafe void GetCompressedTexImage(TextureTarget target, int level, IntPtr img)
        {
            void* img_vptr = (void*)img;
            GetCompressedTexImage(target, level, img_vptr);
        }
        /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
        public static unsafe void GetCompressedTexImage<T1>(TextureTarget target, int level, Span<T1> img)
            where T1 : unmanaged
        {
            fixed (void* img_ptr = img)
            {
                GetCompressedTexImage(target, level, img_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
        public static unsafe void GetCompressedTexImage<T1>(TextureTarget target, int level, T1[] img)
            where T1 : unmanaged
        {
            fixed (void* img_ptr = img)
            {
                GetCompressedTexImage(target, level, img_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
        public static unsafe void GetCompressedTexImage<T1>(TextureTarget target, int level, ref T1 img)
            where T1 : unmanaged
        {
            fixed (void* img_ptr = &img)
            {
                GetCompressedTexImage(target, level, img_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureImage(int texture, int level, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetCompressedTextureImage(texture, level, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, Span<T1> pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, T1[] pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, Span<T1> pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, T1[] pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
        public static unsafe uint GetDebugMessageLog(uint count, int bufSize, Span<DebugSource> sources, Span<DebugType> types, Span<uint> ids, Span<DebugSeverity> severities, Span<int> lengths, out string messageLog)
        {
            uint returnValue;
            fixed (DebugSource* sources_ptr = sources)
            {
                fixed (DebugType* types_ptr = types)
                {
                    fixed (uint* ids_ptr = ids)
                    {
                        fixed (DebugSeverity* severities_ptr = severities)
                        {
                            fixed (int* lengths_ptr = lengths)
                            {
                                var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                            }
                        }
                    }
                }
            }
            return returnValue;
        }
        /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
        public static unsafe uint GetDebugMessageLog(uint count, int bufSize, DebugSource[] sources, DebugType[] types, uint[] ids, DebugSeverity[] severities, int[] lengths, out string messageLog)
        {
            uint returnValue;
            fixed (DebugSource* sources_ptr = sources)
            {
                fixed (DebugType* types_ptr = types)
                {
                    fixed (uint* ids_ptr = ids)
                    {
                        fixed (DebugSeverity* severities_ptr = severities)
                        {
                            fixed (int* lengths_ptr = lengths)
                            {
                                var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                            }
                        }
                    }
                }
            }
            return returnValue;
        }
        /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
        public static unsafe uint GetDebugMessageLog(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, out string messageLog)
        {
            uint returnValue;
            fixed (DebugSource* sources_ptr = &sources)
            fixed (DebugType* types_ptr = &types)
            fixed (uint* ids_ptr = &ids)
            fixed (DebugSeverity* severities_ptr = &severities)
            fixed (int* lengths_ptr = &lengths)
            {
                var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
            }
            return returnValue;
        }
        /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
        public static unsafe void GetDouble(GetPName target, uint index, Span<double> data)
        {
            fixed (double* data_ptr = data)
            {
                GetDoublei_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
        public static unsafe void GetDouble(GetPName target, uint index, double[] data)
        {
            fixed (double* data_ptr = data)
            {
                GetDoublei_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
        public static unsafe void GetDouble(GetPName target, uint index, ref double data)
        {
            fixed (double* data_ptr = &data)
            {
                GetDoublei_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
        public static unsafe double GetDouble(GetPName target, uint index)
        {
            double data_val;
            double* data = &data_val;
            GetDoublei_v(target, index, data);
            return data_val;
        }
        /// <inheritdoc cref="GetDoublev(GetPName, double*)"/>
        public static unsafe void GetDouble(GetPName pname, Span<double> data)
        {
            fixed (double* data_ptr = data)
            {
                GetDoublev(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublev(GetPName, double*)"/>
        public static unsafe void GetDouble(GetPName pname, double[] data)
        {
            fixed (double* data_ptr = data)
            {
                GetDoublev(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublev(GetPName, double*)"/>
        public static unsafe void GetDouble(GetPName pname, ref double data)
        {
            fixed (double* data_ptr = &data)
            {
                GetDoublev(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublev(GetPName, double*)"/>
        public static unsafe double GetDouble(GetPName pname)
        {
            double data_val;
            double* data = &data_val;
            GetDoublev(pname, data);
            return data_val;
        }
        /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
        public static unsafe void GetFloat(GetPName target, uint index, Span<float> data)
        {
            fixed (float* data_ptr = data)
            {
                GetFloati_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
        public static unsafe void GetFloat(GetPName target, uint index, float[] data)
        {
            fixed (float* data_ptr = data)
            {
                GetFloati_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
        public static unsafe void GetFloat(GetPName target, uint index, ref float data)
        {
            fixed (float* data_ptr = &data)
            {
                GetFloati_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
        public static unsafe float GetFloat(GetPName target, uint index)
        {
            float data_val;
            float* data = &data_val;
            GetFloati_v(target, index, data);
            return data_val;
        }
        /// <inheritdoc cref="GetFloatv(GetPName, float*)"/>
        public static unsafe void GetFloat(GetPName pname, Span<float> data)
        {
            fixed (float* data_ptr = data)
            {
                GetFloatv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloatv(GetPName, float*)"/>
        public static unsafe void GetFloat(GetPName pname, float[] data)
        {
            fixed (float* data_ptr = data)
            {
                GetFloatv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloatv(GetPName, float*)"/>
        public static unsafe void GetFloat(GetPName pname, ref float data)
        {
            fixed (float* data_ptr = &data)
            {
                GetFloatv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloatv(GetPName, float*)"/>
        public static unsafe float GetFloat(GetPName pname)
        {
            float data_val;
            float* data = &data_val;
            GetFloatv(pname, data);
            return data_val;
        }
        /// <inheritdoc cref="GetFragDataIndex(int, byte*)"/>
        public static unsafe int GetFragDataIndex(int program, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetFragDataIndex(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetFragDataLocation(int, byte*)"/>
        public static unsafe int GetFragDataLocation(int program, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetFragDataLocation(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe int GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetFramebufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetFramebufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetFramebufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe int GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetFramebufferParameteriv(target, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetInteger64i_v(GetPName, uint, long*)"/>
        public static unsafe void GetInteger64(GetPName target, uint index, Span<long> data)
        {
            fixed (long* data_ptr = data)
            {
                GetInteger64i_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64i_v(GetPName, uint, long*)"/>
        public static unsafe void GetInteger64(GetPName target, uint index, long[] data)
        {
            fixed (long* data_ptr = data)
            {
                GetInteger64i_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64i_v(GetPName, uint, long*)"/>
        public static unsafe void GetInteger64(GetPName target, uint index, ref long data)
        {
            fixed (long* data_ptr = &data)
            {
                GetInteger64i_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64i_v(GetPName, uint, long*)"/>
        public static unsafe long GetInteger64(GetPName target, uint index)
        {
            long data_val;
            long* data = &data_val;
            GetInteger64i_v(target, index, data);
            return data_val;
        }
        /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
        public static unsafe void GetInteger64(GetPName pname, Span<long> data)
        {
            fixed (long* data_ptr = data)
            {
                GetInteger64v(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
        public static unsafe void GetInteger64(GetPName pname, long[] data)
        {
            fixed (long* data_ptr = data)
            {
                GetInteger64v(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
        public static unsafe void GetInteger64(GetPName pname, ref long data)
        {
            fixed (long* data_ptr = &data)
            {
                GetInteger64v(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
        public static unsafe long GetInteger64(GetPName pname)
        {
            long data_val;
            long* data = &data_val;
            GetInteger64v(pname, data);
            return data_val;
        }
        /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
        public static unsafe void GetInteger(GetPName target, uint index, Span<int> data)
        {
            fixed (int* data_ptr = data)
            {
                GetIntegeri_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
        public static unsafe void GetInteger(GetPName target, uint index, int[] data)
        {
            fixed (int* data_ptr = data)
            {
                GetIntegeri_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
        public static unsafe void GetInteger(GetPName target, uint index, ref int data)
        {
            fixed (int* data_ptr = &data)
            {
                GetIntegeri_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
        public static unsafe int GetInteger(GetPName target, uint index)
        {
            int data_val;
            int* data = &data_val;
            GetIntegeri_v(target, index, data);
            return data_val;
        }
        /// <inheritdoc cref="GetIntegerv(GetPName, int*)"/>
        public static unsafe void GetInteger(GetPName pname, Span<int> data)
        {
            fixed (int* data_ptr = data)
            {
                GetIntegerv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegerv(GetPName, int*)"/>
        public static unsafe void GetInteger(GetPName pname, int[] data)
        {
            fixed (int* data_ptr = data)
            {
                GetIntegerv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegerv(GetPName, int*)"/>
        public static unsafe void GetInteger(GetPName pname, ref int data)
        {
            fixed (int* data_ptr = &data)
            {
                GetIntegerv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegerv(GetPName, int*)"/>
        public static unsafe int GetInteger(GetPName pname)
        {
            int data_val;
            int* data = &data_val;
            GetIntegerv(pname, data);
            return data_val;
        }
        /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
        public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, Span<long> parameters)
        {
            int count = (int)(parameters.Length);
            fixed (long* parameters_ptr = parameters)
            {
                GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
        public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, long[] parameters)
        {
            int count = (int)(parameters.Length);
            fixed (long* parameters_ptr = parameters)
            {
                GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
        public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters)
            {
                GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
        public static unsafe long GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count)
        {
            long parameters_val;
            long* parameters = &parameters_val;
            GetInternalformati64v(target, internalformat, pname, count, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
        public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, Span<int> parameters)
        {
            int count = (int)(parameters.Length);
            fixed (int* parameters_ptr = parameters)
            {
                GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
        public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int[] parameters)
        {
            int count = (int)(parameters.Length);
            fixed (int* parameters_ptr = parameters)
            {
                GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
        public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
        public static unsafe int GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetInternalformativ(target, internalformat, pname, count, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
        public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, Span<float> val)
        {
            fixed (float* val_ptr = val)
            {
                GetMultisamplefv(pname, index, val_ptr);
            }
        }
        /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
        public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, float[] val)
        {
            fixed (float* val_ptr = val)
            {
                GetMultisamplefv(pname, index, val_ptr);
            }
        }
        /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
        public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, ref float val)
        {
            fixed (float* val_ptr = &val)
            {
                GetMultisamplefv(pname, index, val_ptr);
            }
        }
        /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
        public static unsafe float GetMultisamplef(GetMultisamplePNameNV pname, uint index)
        {
            float val_val;
            float* val = &val_val;
            GetMultisamplefv(pname, index, val);
            return val_val;
        }
        /// <inheritdoc cref="GetNamedBufferParameteri64v(int, BufferPNameARB, long*)"/>
        public static unsafe void GetNamedBufferParameteri64(int buffer, BufferPNameARB pname, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters)
            {
                GetNamedBufferParameteri64v(buffer, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferParameteri64v(int, BufferPNameARB, long*)"/>
        public static unsafe long GetNamedBufferParameteri64(int buffer, BufferPNameARB pname)
        {
            long parameters_val;
            long* parameters = &parameters_val;
            GetNamedBufferParameteri64v(buffer, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetNamedBufferParameteriv(int, BufferPNameARB, int*)"/>
        public static unsafe void GetNamedBufferParameteri(int buffer, BufferPNameARB pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetNamedBufferParameteriv(buffer, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferParameteriv(int, BufferPNameARB, int*)"/>
        public static unsafe int GetNamedBufferParameteri(int buffer, BufferPNameARB pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetNamedBufferParameteriv(buffer, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetNamedBufferPointerv(int, BufferPointerNameARB, void**)"/>
        public static unsafe void GetNamedBufferPointer(int buffer, BufferPointerNameARB pname, void** parameters)
        {
            GetNamedBufferPointerv(buffer, pname, parameters);
        }
        /// <inheritdoc cref="GetNamedBufferPointerv(int, BufferPointerNameARB, void**)"/>
        public static unsafe void* GetNamedBufferPointer(int buffer, BufferPointerNameARB pname)
        {
            void* parameters_val;
            void** parameters = &parameters_val;
            GetNamedBufferPointerv(buffer, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void GetNamedBufferSubData(int buffer, IntPtr offset, nint size, IntPtr data)
        {
            void* data_vptr = (void*)data;
            GetNamedBufferSubData(buffer, offset, size, data_vptr);
        }
        /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, Span<T1> data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                GetNamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, T1[] data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                GetNamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                GetNamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedFramebufferAttachmentParameteriv(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetNamedFramebufferAttachmentParameteri(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedFramebufferAttachmentParameteriv(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe int GetNamedFramebufferAttachmentParameteri(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetNamedFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
        public static unsafe void GetNamedFramebufferParameteri(int framebuffer, GetFramebufferParameter pname, ref int param)
        {
            fixed (int* param_ptr = &param)
            {
                GetNamedFramebufferParameteriv(framebuffer, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
        public static unsafe int GetNamedFramebufferParameteri(int framebuffer, GetFramebufferParameter pname)
        {
            int param_val;
            int* param = &param_val;
            GetNamedFramebufferParameteriv(framebuffer, pname, param);
            return param_val;
        }
        /// <inheritdoc cref="GetNamedRenderbufferParameteriv(int, RenderbufferParameterName, int*)"/>
        public static unsafe void GetNamedRenderbufferParameteri(int renderbuffer, RenderbufferParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetNamedRenderbufferParameteriv(renderbuffer, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedRenderbufferParameteriv(int, RenderbufferParameterName, int*)"/>
        public static unsafe int GetNamedRenderbufferParameteri(int renderbuffer, RenderbufferParameterName pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetNamedRenderbufferParameteriv(renderbuffer, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
        public static unsafe void GetnCompressedTexImage(TextureTarget target, int lod, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetnCompressedTexImage(target, lod, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
        public static unsafe void GetnCompressedTexImage<T1>(TextureTarget target, int lod, Span<T1> pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetnCompressedTexImage(target, lod, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
        public static unsafe void GetnCompressedTexImage<T1>(TextureTarget target, int lod, T1[] pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetnCompressedTexImage(target, lod, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
        public static unsafe void GetnCompressedTexImage<T1>(TextureTarget target, int lod, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetnCompressedTexImage(target, lod, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetnTexImage(target, level, format, type, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, Span<T1> pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetnTexImage(target, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetnTexImage(target, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetnTexImage(target, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformdv(int, int, int, double*)"/>
        public static unsafe void GetnUniformd(int program, int location, Span<double> parameters)
        {
            int bufSize = (int)(parameters.Length * 8);
            fixed (double* parameters_ptr = parameters)
            {
                GetnUniformdv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformdv(int, int, int, double*)"/>
        public static unsafe void GetnUniformd(int program, int location, double[] parameters)
        {
            int bufSize = (int)(parameters.Length * 8);
            fixed (double* parameters_ptr = parameters)
            {
                GetnUniformdv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformdv(int, int, int, double*)"/>
        public static unsafe void GetnUniformd(int program, int location, int bufSize, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                GetnUniformdv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformdv(int, int, int, double*)"/>
        public static unsafe double GetnUniformd(int program, int location, int bufSize)
        {
            double parameters_val;
            double* parameters = &parameters_val;
            GetnUniformdv(program, location, bufSize, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
        public static unsafe void GetnUniformf(int program, int location, Span<float> parameters)
        {
            int bufSize = (int)(parameters.Length * 4);
            fixed (float* parameters_ptr = parameters)
            {
                GetnUniformfv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
        public static unsafe void GetnUniformf(int program, int location, float[] parameters)
        {
            int bufSize = (int)(parameters.Length * 4);
            fixed (float* parameters_ptr = parameters)
            {
                GetnUniformfv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
        public static unsafe void GetnUniformf(int program, int location, int bufSize, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetnUniformfv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
        public static unsafe float GetnUniformf(int program, int location, int bufSize)
        {
            float parameters_val;
            float* parameters = &parameters_val;
            GetnUniformfv(program, location, bufSize, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
        public static unsafe void GetnUniformi(int program, int location, Span<int> parameters)
        {
            int bufSize = (int)(parameters.Length * 4);
            fixed (int* parameters_ptr = parameters)
            {
                GetnUniformiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
        public static unsafe void GetnUniformi(int program, int location, int[] parameters)
        {
            int bufSize = (int)(parameters.Length * 4);
            fixed (int* parameters_ptr = parameters)
            {
                GetnUniformiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
        public static unsafe void GetnUniformi(int program, int location, int bufSize, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetnUniformiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
        public static unsafe int GetnUniformi(int program, int location, int bufSize)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetnUniformiv(program, location, bufSize, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
        public static unsafe void GetnUniformui(int program, int location, Span<uint> parameters)
        {
            int bufSize = (int)(parameters.Length * 4);
            fixed (uint* parameters_ptr = parameters)
            {
                GetnUniformuiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
        public static unsafe void GetnUniformui(int program, int location, uint[] parameters)
        {
            int bufSize = (int)(parameters.Length * 4);
            fixed (uint* parameters_ptr = parameters)
            {
                GetnUniformuiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
        public static unsafe void GetnUniformui(int program, int location, int bufSize, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetnUniformuiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
        public static unsafe uint GetnUniformui(int program, int location, int bufSize)
        {
            uint parameters_val;
            uint* parameters = &parameters_val;
            GetnUniformuiv(program, location, bufSize, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
        public static unsafe string GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, Span<int> length)
        {
            string label;
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
        public static unsafe void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, Span<int> length, out string label)
        {
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
        public static unsafe string GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, int[] length)
        {
            string label;
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
        public static unsafe void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, int[] length, out string label)
        {
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
        public static unsafe string GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, ref int length)
        {
            string label;
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
        public static unsafe void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, ref int length, out string label)
        {
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel(IntPtr ptr, int bufSize, Span<int> length)
        {
            string label;
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                void* ptr_vptr = (void*)ptr;
                GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, Span<int> length, out string label)
        {
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                void* ptr_vptr = (void*)ptr;
                GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel(IntPtr ptr, int bufSize, int[] length)
        {
            string label;
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                void* ptr_vptr = (void*)ptr;
                GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, int[] length, out string label)
        {
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                void* ptr_vptr = (void*)ptr;
                GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel(IntPtr ptr, int bufSize, ref int length)
        {
            string label;
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                void* ptr_vptr = (void*)ptr;
                GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, ref int length, out string label)
        {
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                void* ptr_vptr = (void*)ptr;
                GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, Span<int> length)
            where T1 : unmanaged
        {
            string label;
            fixed (void* ptr_ptr = &ptr)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, Span<int> length, out string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, int[] length)
            where T1 : unmanaged
        {
            string label;
            fixed (void* ptr_ptr = &ptr)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, int[] length, out string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, ref int length)
            where T1 : unmanaged
        {
            string label;
            fixed (void* ptr_ptr = &ptr)
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, ref int length, out string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr)
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary(int program, int bufSize, Span<int> length, Span<All> binaryFormat, IntPtr binary)
        {
            fixed (int* length_ptr = length)
            {
                fixed (All* binaryFormat_ptr = binaryFormat)
                {
                    void* binary_vptr = (void*)binary;
                    GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
                }
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary(int program, int bufSize, int[] length, All[] binaryFormat, IntPtr binary)
        {
            fixed (int* length_ptr = length)
            {
                fixed (All* binaryFormat_ptr = binaryFormat)
                {
                    void* binary_vptr = (void*)binary;
                    GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
                }
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary(int program, int bufSize, ref int length, ref All binaryFormat, IntPtr binary)
        {
            fixed (int* length_ptr = &length)
            fixed (All* binaryFormat_ptr = &binaryFormat)
            {
                void* binary_vptr = (void*)binary;
                GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary<T1>(int program, Span<int> length, Span<All> binaryFormat, Span<T1> binary)
            where T1 : unmanaged
        {
            fixed (int* length_ptr = length)
            {
                fixed (All* binaryFormat_ptr = binaryFormat)
                {
                    int bufSize = (int)(binary.Length * sizeof(T1));
                    fixed (void* binary_ptr = binary)
                    {
                        GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary<T1>(int program, int[] length, All[] binaryFormat, T1[] binary)
            where T1 : unmanaged
        {
            fixed (int* length_ptr = length)
            {
                fixed (All* binaryFormat_ptr = binaryFormat)
                {
                    int bufSize = (int)(binary.Length * sizeof(T1));
                    fixed (void* binary_ptr = binary)
                    {
                        GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary<T1>(int program, int bufSize, ref int length, ref All binaryFormat, ref T1 binary)
            where T1 : unmanaged
        {
            fixed (int* length_ptr = &length)
            fixed (All* binaryFormat_ptr = &binaryFormat)
            fixed (void* binary_ptr = &binary)
            {
                GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetProgramInfoLog(int program, int bufSize, Span<int> length)
        {
            string infoLog;
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramInfoLog(program, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetProgramInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetProgramInfoLog(int program, int bufSize, Span<int> length, out string infoLog)
        {
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramInfoLog(program, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetProgramInfoLog(int program, int bufSize, int[] length)
        {
            string infoLog;
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramInfoLog(program, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetProgramInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetProgramInfoLog(int program, int bufSize, int[] length, out string infoLog)
        {
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramInfoLog(program, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetProgramInfoLog(int program, int bufSize, ref int length)
        {
            string infoLog;
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramInfoLog(program, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetProgramInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetProgramInfoLog(int program, int bufSize, ref int length, out string infoLog)
        {
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramInfoLog(program, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
        public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
        public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
        public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
        public static unsafe int GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetProgramInterfaceiv(program, programInterface, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetProgramiv(int, ProgramPropertyARB, int*)"/>
        public static unsafe void GetProgrami(int program, ProgramPropertyARB pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramiv(program, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramiv(int, ProgramPropertyARB, int*)"/>
        public static unsafe void GetProgrami(int program, ProgramPropertyARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramiv(program, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramiv(int, ProgramPropertyARB, int*)"/>
        public static unsafe void GetProgrami(int program, ProgramPropertyARB pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetProgramiv(program, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramiv(int, ProgramPropertyARB, int*)"/>
        public static unsafe int GetProgrami(int program, ProgramPropertyARB pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetProgramiv(program, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, Span<int> length)
        {
            string infoLog;
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, Span<int> length, out string infoLog)
        {
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, int[] length)
        {
            string infoLog;
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, int[] length, out string infoLog)
        {
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, ref int length)
        {
            string infoLog;
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, ref int length, out string infoLog)
        {
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
        public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramPipelineiv(pipeline, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
        public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramPipelineiv(pipeline, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
        public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetProgramPipelineiv(pipeline, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
        public static unsafe int GetProgramPipelinei(int pipeline, PipelineParameterName pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetProgramPipelineiv(pipeline, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetProgramResourceIndex(int, ProgramInterface, byte*)"/>
        public static unsafe uint GetProgramResourceIndex(int program, ProgramInterface programInterface, string name)
        {
            uint returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetProgramResourceIndex(program, programInterface, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
        public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, ReadOnlySpan<ProgramResourceProperty> props, Span<int> length, Span<int> parameters)
        {
            int propCount = (int)(props.Length);
            fixed (ProgramResourceProperty* props_ptr = props)
            {
                fixed (int* length_ptr = length)
                {
                    int count = (int)(parameters.Length);
                    fixed (int* parameters_ptr = parameters)
                    {
                        GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
        public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, ProgramResourceProperty[] props, int[] length, int[] parameters)
        {
            int propCount = (int)(props.Length);
            fixed (ProgramResourceProperty* props_ptr = props)
            {
                fixed (int* length_ptr = length)
                {
                    int count = (int)(parameters.Length);
                    fixed (int* parameters_ptr = parameters)
                    {
                        GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
        public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, int propCount, in ProgramResourceProperty props, int count, ref int length, ref int parameters)
        {
            fixed (ProgramResourceProperty* props_ptr = &props)
            fixed (int* length_ptr = &length)
            fixed (int* parameters_ptr = &parameters)
            {
                GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
        public static unsafe int GetProgramResourcei(int program, ProgramInterface programInterface, uint index, ReadOnlySpan<ProgramResourceProperty> props, int count, Span<int> length)
        {
            int parameters_val;
            int propCount = (int)(props.Length);
            fixed (ProgramResourceProperty* props_ptr = props)
            {
                fixed (int* length_ptr = length)
                {
                    int* parameters = &parameters_val;
                    GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters);
                }
            }
            return parameters_val;
        }
        /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
        public static unsafe int GetProgramResourcei(int program, ProgramInterface programInterface, uint index, ProgramResourceProperty[] props, int count, int[] length)
        {
            int parameters_val;
            int propCount = (int)(props.Length);
            fixed (ProgramResourceProperty* props_ptr = props)
            {
                fixed (int* length_ptr = length)
                {
                    int* parameters = &parameters_val;
                    GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters);
                }
            }
            return parameters_val;
        }
        /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
        public static unsafe int GetProgramResourcei(int program, ProgramInterface programInterface, uint index, int propCount, in ProgramResourceProperty props, int count, ref int length)
        {
            int parameters_val;
            fixed (ProgramResourceProperty* props_ptr = &props)
            fixed (int* length_ptr = &length)
            {
                int* parameters = &parameters_val;
                GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters);
            }
            return parameters_val;
        }
        /// <inheritdoc cref="GetProgramResourceLocation(int, ProgramInterface, byte*)"/>
        public static unsafe int GetProgramResourceLocation(int program, ProgramInterface programInterface, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetProgramResourceLocation(program, programInterface, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetProgramResourceLocationIndex(int, ProgramInterface, byte*)"/>
        public static unsafe int GetProgramResourceLocationIndex(int program, ProgramInterface programInterface, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetProgramResourceLocationIndex(program, programInterface, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
        public static unsafe string GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, Span<int> length)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
        public static unsafe void GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, Span<int> length, out string name)
        {
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
        public static unsafe string GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, int[] length)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
        public static unsafe void GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, int[] length, out string name)
        {
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
        public static unsafe string GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, ref int length)
        {
            string name;
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
        public static unsafe void GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, ref int length, out string name)
        {
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
        public static unsafe void GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname, Span<int> values)
        {
            fixed (int* values_ptr = values)
            {
                GetProgramStageiv(program, shadertype, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
        public static unsafe void GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname, int[] values)
        {
            fixed (int* values_ptr = values)
            {
                GetProgramStageiv(program, shadertype, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
        public static unsafe void GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname, ref int values)
        {
            fixed (int* values_ptr = &values)
            {
                GetProgramStageiv(program, shadertype, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
        public static unsafe int GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname)
        {
            int values_val;
            int* values = &values_val;
            GetProgramStageiv(program, shadertype, pname, values);
            return values_val;
        }
        /// <inheritdoc cref="GetQueryBufferObjecti64v(int, int, QueryObjectParameterName, IntPtr)"/>
        public static unsafe void GetQueryBufferObjecti64(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
        {
            GetQueryBufferObjecti64v(id, buffer, pname, offset);
        }
        /// <inheritdoc cref="GetQueryBufferObjectiv(int, int, QueryObjectParameterName, IntPtr)"/>
        public static unsafe void GetQueryBufferObjecti(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
        {
            GetQueryBufferObjectiv(id, buffer, pname, offset);
        }
        /// <inheritdoc cref="GetQueryBufferObjectui64v(int, int, QueryObjectParameterName, IntPtr)"/>
        public static unsafe void GetQueryBufferObjectui64(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
        {
            GetQueryBufferObjectui64v(id, buffer, pname, offset);
        }
        /// <inheritdoc cref="GetQueryBufferObjectuiv(int, int, QueryObjectParameterName, IntPtr)"/>
        public static unsafe void GetQueryBufferObjectui(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
        {
            GetQueryBufferObjectuiv(id, buffer, pname, offset);
        }
        /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
        public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryIndexediv(target, index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
        public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryIndexediv(target, index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
        public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetQueryIndexediv(target, index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
        public static unsafe int GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetQueryIndexediv(target, index, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetQueryiv(QueryTarget, QueryParameterName, int*)"/>
        public static unsafe void GetQueryi(QueryTarget target, QueryParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryiv(QueryTarget, QueryParameterName, int*)"/>
        public static unsafe void GetQueryi(QueryTarget target, QueryParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryiv(QueryTarget, QueryParameterName, int*)"/>
        public static unsafe void GetQueryi(QueryTarget target, QueryParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetQueryiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryiv(QueryTarget, QueryParameterName, int*)"/>
        public static unsafe int GetQueryi(QueryTarget target, QueryParameterName pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetQueryiv(target, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
        public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, Span<long> parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetQueryObjecti64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
        public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, long[] parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetQueryObjecti64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
        public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters)
            {
                GetQueryObjecti64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
        public static unsafe long GetQueryObjecti64(int id, QueryObjectParameterName pname)
        {
            long parameters_val;
            long* parameters = &parameters_val;
            GetQueryObjecti64v(id, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetQueryObjectiv(int, QueryObjectParameterName, int*)"/>
        public static unsafe void GetQueryObjecti(int id, QueryObjectParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryObjectiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectiv(int, QueryObjectParameterName, int*)"/>
        public static unsafe void GetQueryObjecti(int id, QueryObjectParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryObjectiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectiv(int, QueryObjectParameterName, int*)"/>
        public static unsafe void GetQueryObjecti(int id, QueryObjectParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetQueryObjectiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectiv(int, QueryObjectParameterName, int*)"/>
        public static unsafe int GetQueryObjecti(int id, QueryObjectParameterName pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetQueryObjectiv(id, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
        public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, Span<ulong> parameters)
        {
            fixed (ulong* parameters_ptr = parameters)
            {
                GetQueryObjectui64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
        public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, ulong[] parameters)
        {
            fixed (ulong* parameters_ptr = parameters)
            {
                GetQueryObjectui64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
        public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, ref ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters)
            {
                GetQueryObjectui64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
        public static unsafe ulong GetQueryObjectui64(int id, QueryObjectParameterName pname)
        {
            ulong parameters_val;
            ulong* parameters = &parameters_val;
            GetQueryObjectui64v(id, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetQueryObjectuiv(int, QueryObjectParameterName, uint*)"/>
        public static unsafe void GetQueryObjectui(int id, QueryObjectParameterName pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetQueryObjectuiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectuiv(int, QueryObjectParameterName, uint*)"/>
        public static unsafe void GetQueryObjectui(int id, QueryObjectParameterName pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetQueryObjectuiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectuiv(int, QueryObjectParameterName, uint*)"/>
        public static unsafe void GetQueryObjectui(int id, QueryObjectParameterName pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetQueryObjectuiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectuiv(int, QueryObjectParameterName, uint*)"/>
        public static unsafe uint GetQueryObjectui(int id, QueryObjectParameterName pname)
        {
            uint parameters_val;
            uint* parameters = &parameters_val;
            GetQueryObjectuiv(id, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
        public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetRenderbufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
        public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetRenderbufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
        public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetRenderbufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
        public static unsafe int GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetRenderbufferParameteriv(target, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetSamplerParameterfv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetSamplerParameterfv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetSamplerParameterfv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe float GetSamplerParameterf(int sampler, SamplerParameterF pname)
        {
            float parameters_val;
            float* parameters = &parameters_val;
            GetSamplerParameterfv(sampler, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetSamplerParameterIiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetSamplerParameterIiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetSamplerParameterIiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe int GetSamplerParameterIi(int sampler, SamplerParameterI pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetSamplerParameterIiv(sampler, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe uint GetSamplerParameterIui(int sampler, SamplerParameterI pname)
        {
            uint parameters_val;
            uint* parameters = &parameters_val;
            GetSamplerParameterIuiv(sampler, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetSamplerParameteriv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetSamplerParameteriv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetSamplerParameteriv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe int GetSamplerParameteri(int sampler, SamplerParameterI pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetSamplerParameteriv(sampler, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetShaderInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetShaderInfoLog(int shader, int bufSize, Span<int> length)
        {
            string infoLog;
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderInfoLog(shader, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetShaderInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetShaderInfoLog(int shader, int bufSize, Span<int> length, out string infoLog)
        {
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderInfoLog(shader, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetShaderInfoLog(int shader, int bufSize, int[] length)
        {
            string infoLog;
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderInfoLog(shader, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetShaderInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetShaderInfoLog(int shader, int bufSize, int[] length, out string infoLog)
        {
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderInfoLog(shader, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetShaderInfoLog(int shader, int bufSize, ref int length)
        {
            string infoLog;
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderInfoLog(shader, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetShaderInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetShaderInfoLog(int shader, int bufSize, ref int length, out string infoLog)
        {
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderInfoLog(shader, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderiv(int, ShaderParameterName, int*)"/>
        public static unsafe void GetShaderi(int shader, ShaderParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetShaderiv(shader, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderiv(int, ShaderParameterName, int*)"/>
        public static unsafe void GetShaderi(int shader, ShaderParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetShaderiv(shader, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderiv(int, ShaderParameterName, int*)"/>
        public static unsafe void GetShaderi(int shader, ShaderParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetShaderiv(shader, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderiv(int, ShaderParameterName, int*)"/>
        public static unsafe int GetShaderi(int shader, ShaderParameterName pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetShaderiv(shader, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
        public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, Span<int> range, Span<int> precision)
        {
            fixed (int* range_ptr = range)
            {
                fixed (int* precision_ptr = precision)
                {
                    GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
        public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, int[] range, int[] precision)
        {
            fixed (int* range_ptr = range)
            {
                fixed (int* precision_ptr = precision)
                {
                    GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
        public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, ref int range, ref int precision)
        {
            fixed (int* range_ptr = &range)
            fixed (int* precision_ptr = &precision)
            {
                GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
        public static unsafe int GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, Span<int> range)
        {
            int precision_val;
            fixed (int* range_ptr = range)
            {
                int* precision = &precision_val;
                GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision);
            }
            return precision_val;
        }
        /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
        public static unsafe int GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, int[] range)
        {
            int precision_val;
            fixed (int* range_ptr = range)
            {
                int* precision = &precision_val;
                GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision);
            }
            return precision_val;
        }
        /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
        public static unsafe int GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, ref int range)
        {
            int precision_val;
            fixed (int* range_ptr = &range)
            {
                int* precision = &precision_val;
                GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision);
            }
            return precision_val;
        }
        /// <inheritdoc cref="GetShaderSource(int, int, int*, byte*)"/>
        public static unsafe string GetShaderSource(int shader, int bufSize, Span<int> length)
        {
            string source;
            fixed (int* length_ptr = length)
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderSource(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
            return source;
        }
        /// <inheritdoc cref="GetShaderSource(int, int, int*, byte*)"/>
        public static unsafe void GetShaderSource(int shader, int bufSize, Span<int> length, out string source)
        {
            fixed (int* length_ptr = length)
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderSource(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderSource(int, int, int*, byte*)"/>
        public static unsafe string GetShaderSource(int shader, int bufSize, int[] length)
        {
            string source;
            fixed (int* length_ptr = length)
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderSource(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
            return source;
        }
        /// <inheritdoc cref="GetShaderSource(int, int, int*, byte*)"/>
        public static unsafe void GetShaderSource(int shader, int bufSize, int[] length, out string source)
        {
            fixed (int* length_ptr = length)
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderSource(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderSource(int, int, int*, byte*)"/>
        public static unsafe string GetShaderSource(int shader, int bufSize, ref int length)
        {
            string source;
            fixed (int* length_ptr = &length)
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderSource(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
            return source;
        }
        /// <inheritdoc cref="GetShaderSource(int, int, int*, byte*)"/>
        public static unsafe void GetShaderSource(int shader, int bufSize, ref int length, out string source)
        {
            fixed (int* length_ptr = &length)
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderSource(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
        }
        /// <inheritdoc cref="GetString(StringName)"/>
        public static unsafe string? GetString(StringName name)
        {
            string? returnValue_str;
            byte* returnValue;
            returnValue = GetString_(name);
            returnValue_str = Marshal.PtrToStringAnsi((IntPtr)returnValue);
            return returnValue_str;
        }
        /// <inheritdoc cref="GetStringi(StringName, uint)"/>
        public static unsafe string? GetStringi(StringName name, uint index)
        {
            string? returnValue_str;
            byte* returnValue;
            returnValue = GetStringi_(name, index);
            returnValue_str = Marshal.PtrToStringAnsi((IntPtr)returnValue);
            return returnValue_str;
        }
        /// <inheritdoc cref="GetSubroutineIndex(int, ShaderType, byte*)"/>
        public static unsafe uint GetSubroutineIndex(int program, ShaderType shadertype, string name)
        {
            uint returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetSubroutineIndex(program, shadertype, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetSubroutineUniformLocation(int, ShaderType, byte*)"/>
        public static unsafe int GetSubroutineUniformLocation(int program, ShaderType shadertype, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetSubroutineUniformLocation(program, shadertype, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
        public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, Span<int> length, Span<int> values)
        {
            fixed (int* length_ptr = length)
            {
                int count = (int)(values.Length);
                fixed (int* values_ptr = values)
                {
                    GetSynciv(sync, pname, count, length_ptr, values_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
        public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, int[] length, int[] values)
        {
            fixed (int* length_ptr = length)
            {
                int count = (int)(values.Length);
                fixed (int* values_ptr = values)
                {
                    GetSynciv(sync, pname, count, length_ptr, values_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
        public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, int count, ref int length, ref int values)
        {
            fixed (int* length_ptr = &length)
            fixed (int* values_ptr = &values)
            {
                GetSynciv(sync, pname, count, length_ptr, values_ptr);
            }
        }
        /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
        public static unsafe int GetSynci(GLSync sync, SyncParameterName pname, int count, Span<int> length)
        {
            int values_val;
            fixed (int* length_ptr = length)
            {
                int* values = &values_val;
                GetSynciv(sync, pname, count, length_ptr, values);
            }
            return values_val;
        }
        /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
        public static unsafe int GetSynci(GLSync sync, SyncParameterName pname, int count, int[] length)
        {
            int values_val;
            fixed (int* length_ptr = length)
            {
                int* values = &values_val;
                GetSynciv(sync, pname, count, length_ptr, values);
            }
            return values_val;
        }
        /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
        public static unsafe int GetSynci(GLSync sync, SyncParameterName pname, int count, ref int length)
        {
            int values_val;
            fixed (int* length_ptr = &length)
            {
                int* values = &values_val;
                GetSynciv(sync, pname, count, length_ptr, values);
            }
            return values_val;
        }
        /// <inheritdoc cref="GetTexImage(TextureTarget, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetTexImage(target, level, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="GetTexImage(TextureTarget, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void GetTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, Span<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetTexImage(target, level, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTexImage(TextureTarget, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void GetTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetTexImage(target, level, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTexImage(TextureTarget, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void GetTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetTexImage(target, level, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameterfv(TextureTarget, int, GetTextureParameter, float*)"/>
        public static unsafe void GetTexLevelParameterf(TextureTarget target, int level, GetTextureParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexLevelParameterfv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameterfv(TextureTarget, int, GetTextureParameter, float*)"/>
        public static unsafe void GetTexLevelParameterf(TextureTarget target, int level, GetTextureParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexLevelParameterfv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameterfv(TextureTarget, int, GetTextureParameter, float*)"/>
        public static unsafe void GetTexLevelParameterf(TextureTarget target, int level, GetTextureParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTexLevelParameterfv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameterfv(TextureTarget, int, GetTextureParameter, float*)"/>
        public static unsafe float GetTexLevelParameterf(TextureTarget target, int level, GetTextureParameter pname)
        {
            float parameters_val;
            float* parameters = &parameters_val;
            GetTexLevelParameterfv(target, level, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetTexLevelParameteriv(TextureTarget, int, GetTextureParameter, int*)"/>
        public static unsafe void GetTexLevelParameteri(TextureTarget target, int level, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexLevelParameteriv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameteriv(TextureTarget, int, GetTextureParameter, int*)"/>
        public static unsafe void GetTexLevelParameteri(TextureTarget target, int level, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexLevelParameteriv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameteriv(TextureTarget, int, GetTextureParameter, int*)"/>
        public static unsafe void GetTexLevelParameteri(TextureTarget target, int level, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTexLevelParameteriv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameteriv(TextureTarget, int, GetTextureParameter, int*)"/>
        public static unsafe int GetTexLevelParameteri(TextureTarget target, int level, GetTextureParameter pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetTexLevelParameteriv(target, level, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetTexParameterfv(TextureTarget, GetTextureParameter, float*)"/>
        public static unsafe void GetTexParameterf(TextureTarget target, GetTextureParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterfv(TextureTarget, GetTextureParameter, float*)"/>
        public static unsafe void GetTexParameterf(TextureTarget target, GetTextureParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterfv(TextureTarget, GetTextureParameter, float*)"/>
        public static unsafe void GetTexParameterf(TextureTarget target, GetTextureParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterfv(TextureTarget, GetTextureParameter, float*)"/>
        public static unsafe float GetTexParameterf(TextureTarget target, GetTextureParameter pname)
        {
            float parameters_val;
            float* parameters = &parameters_val;
            GetTexParameterfv(target, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetTexParameterIiv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameterIi(TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIiv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameterIi(TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIiv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameterIi(TextureTarget target, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIiv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe int GetTexParameterIi(TextureTarget target, GetTextureParameter pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetTexParameterIiv(target, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetTexParameterIuiv(TextureTarget, GetTextureParameter, uint*)"/>
        public static unsafe void GetTexParameterIui(TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetTexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIuiv(TextureTarget, GetTextureParameter, uint*)"/>
        public static unsafe void GetTexParameterIui(TextureTarget target, GetTextureParameter pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetTexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIuiv(TextureTarget, GetTextureParameter, uint*)"/>
        public static unsafe void GetTexParameterIui(TextureTarget target, GetTextureParameter pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetTexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIuiv(TextureTarget, GetTextureParameter, uint*)"/>
        public static unsafe uint GetTexParameterIui(TextureTarget target, GetTextureParameter pname)
        {
            uint parameters_val;
            uint* parameters = &parameters_val;
            GetTexParameterIuiv(target, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetTexParameteriv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameteri(TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameteriv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameteri(TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameteriv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameteri(TextureTarget target, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameteriv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe int GetTexParameteri(TextureTarget target, GetTextureParameter pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetTexParameteriv(target, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureImage(int texture, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetTextureImage(texture, level, format, type, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, Span<T1> pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureLevelParameterfv(int, int, GetTextureParameter, float*)"/>
        public static unsafe void GetTextureLevelParameterf(int texture, int level, GetTextureParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTextureLevelParameterfv(texture, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureLevelParameterfv(int, int, GetTextureParameter, float*)"/>
        public static unsafe float GetTextureLevelParameterf(int texture, int level, GetTextureParameter pname)
        {
            float parameters_val;
            float* parameters = &parameters_val;
            GetTextureLevelParameterfv(texture, level, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetTextureLevelParameteriv(int, int, GetTextureParameter, int*)"/>
        public static unsafe void GetTextureLevelParameteri(int texture, int level, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTextureLevelParameteriv(texture, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureLevelParameteriv(int, int, GetTextureParameter, int*)"/>
        public static unsafe int GetTextureLevelParameteri(int texture, int level, GetTextureParameter pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetTextureLevelParameteriv(texture, level, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetTextureParameterfv(int, GetTextureParameter, float*)"/>
        public static unsafe void GetTextureParameterf(int texture, GetTextureParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTextureParameterfv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameterfv(int, GetTextureParameter, float*)"/>
        public static unsafe float GetTextureParameterf(int texture, GetTextureParameter pname)
        {
            float parameters_val;
            float* parameters = &parameters_val;
            GetTextureParameterfv(texture, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetTextureParameterIiv(int, GetTextureParameter, int*)"/>
        public static unsafe void GetTextureParameterIi(int texture, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTextureParameterIiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameterIiv(int, GetTextureParameter, int*)"/>
        public static unsafe int GetTextureParameterIi(int texture, GetTextureParameter pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetTextureParameterIiv(texture, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetTextureParameterIuiv(int, GetTextureParameter, uint*)"/>
        public static unsafe void GetTextureParameterIui(int texture, GetTextureParameter pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetTextureParameterIuiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameterIuiv(int, GetTextureParameter, uint*)"/>
        public static unsafe uint GetTextureParameterIui(int texture, GetTextureParameter pname)
        {
            uint parameters_val;
            uint* parameters = &parameters_val;
            GetTextureParameterIuiv(texture, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetTextureParameteriv(int, GetTextureParameter, int*)"/>
        public static unsafe void GetTextureParameteri(int texture, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTextureParameteriv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameteriv(int, GetTextureParameter, int*)"/>
        public static unsafe int GetTextureParameteri(int texture, GetTextureParameter pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetTextureParameteriv(texture, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, Span<T1> pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbacki_v(int, TransformFeedbackPName, uint, int*)"/>
        public static unsafe void GetTransformFeedback(int xfb, TransformFeedbackPName pname, uint index, ref int param)
        {
            fixed (int* param_ptr = &param)
            {
                GetTransformFeedbacki_v(xfb, pname, index, param_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbacki_v(int, TransformFeedbackPName, uint, int*)"/>
        public static unsafe int GetTransformFeedback(int xfb, TransformFeedbackPName pname, uint index)
        {
            int param_val;
            int* param = &param_val;
            GetTransformFeedbacki_v(xfb, pname, index, param);
            return param_val;
        }
        /// <inheritdoc cref="GetTransformFeedbacki64_v(int, TransformFeedbackPName, uint, long*)"/>
        public static unsafe void GetTransformFeedbacki64_(int xfb, TransformFeedbackPName pname, uint index, ref long param)
        {
            fixed (long* param_ptr = &param)
            {
                GetTransformFeedbacki64_v(xfb, pname, index, param_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbacki64_v(int, TransformFeedbackPName, uint, long*)"/>
        public static unsafe long GetTransformFeedbacki64_(int xfb, TransformFeedbackPName pname, uint index)
        {
            long param_val;
            long* param = &param_val;
            GetTransformFeedbacki64_v(xfb, pname, index, param);
            return param_val;
        }
        /// <inheritdoc cref="GetTransformFeedbackiv(int, TransformFeedbackPName, int*)"/>
        public static unsafe void GetTransformFeedbacki(int xfb, TransformFeedbackPName pname, ref int param)
        {
            fixed (int* param_ptr = &param)
            {
                GetTransformFeedbackiv(xfb, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbackiv(int, TransformFeedbackPName, int*)"/>
        public static unsafe int GetTransformFeedbacki(int xfb, TransformFeedbackPName pname)
        {
            int param_val;
            int* param = &param_val;
            GetTransformFeedbackiv(xfb, pname, param);
            return param_val;
        }
        /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe string GetTransformFeedbackVarying(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<AttributeType> type)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }
        /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe void GetTransformFeedbackVarying(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<AttributeType> type, out string name)
        {
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe string GetTransformFeedbackVarying(int program, uint index, int bufSize, int[] length, int[] size, AttributeType[] type)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }
        /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe void GetTransformFeedbackVarying(int program, uint index, int bufSize, int[] length, int[] size, AttributeType[] type, out string name)
        {
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe string GetTransformFeedbackVarying(int program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type)
        {
            string name;
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (AttributeType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe void GetTransformFeedbackVarying(int program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type, out string name)
        {
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (AttributeType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformBlockIndex(int, byte*)"/>
        public static unsafe uint GetUniformBlockIndex(int program, string uniformBlockName)
        {
            uint returnValue;
            byte* uniformBlockName_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(uniformBlockName);
            returnValue = GetUniformBlockIndex(program, uniformBlockName_ptr);
            Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
        public static unsafe void GetUniformd(int program, int location, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetUniformdv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
        public static unsafe void GetUniformd(int program, int location, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetUniformdv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
        public static unsafe void GetUniformd(int program, int location, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                GetUniformdv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
        public static unsafe double GetUniformd(int program, int location)
        {
            double parameters_val;
            double* parameters = &parameters_val;
            GetUniformdv(program, location, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetUniformfv(int, int, float*)"/>
        public static unsafe void GetUniformf(int program, int location, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetUniformfv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformfv(int, int, float*)"/>
        public static unsafe void GetUniformf(int program, int location, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetUniformfv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformfv(int, int, float*)"/>
        public static unsafe void GetUniformf(int program, int location, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetUniformfv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformfv(int, int, float*)"/>
        public static unsafe float GetUniformf(int program, int location)
        {
            float parameters_val;
            float* parameters = &parameters_val;
            GetUniformfv(program, location, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
        public static unsafe void GetUniformIndices(int program, int uniformCount, byte** uniformNames, Span<uint> uniformIndices)
        {
            fixed (uint* uniformIndices_ptr = uniformIndices)
            {
                GetUniformIndices(program, uniformCount, uniformNames, uniformIndices_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
        public static unsafe void GetUniformIndices(int program, int uniformCount, byte** uniformNames, uint[] uniformIndices)
        {
            fixed (uint* uniformIndices_ptr = uniformIndices)
            {
                GetUniformIndices(program, uniformCount, uniformNames, uniformIndices_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
        public static unsafe void GetUniformIndices(int program, int uniformCount, byte** uniformNames, ref uint uniformIndices)
        {
            fixed (uint* uniformIndices_ptr = &uniformIndices)
            {
                GetUniformIndices(program, uniformCount, uniformNames, uniformIndices_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
        public static unsafe uint GetUniformIndices(int program, int uniformCount, byte** uniformNames)
        {
            uint uniformIndices_val;
            uint* uniformIndices = &uniformIndices_val;
            GetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
            return uniformIndices_val;
        }
        /// <inheritdoc cref="GetUniformiv(int, int, int*)"/>
        public static unsafe void GetUniformi(int program, int location, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetUniformiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformiv(int, int, int*)"/>
        public static unsafe void GetUniformi(int program, int location, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetUniformiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformiv(int, int, int*)"/>
        public static unsafe void GetUniformi(int program, int location, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetUniformiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformiv(int, int, int*)"/>
        public static unsafe int GetUniformi(int program, int location)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetUniformiv(program, location, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetUniformLocation(int, byte*)"/>
        public static unsafe int GetUniformLocation(int program, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetUniformLocation(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
        public static unsafe void GetUniformSubroutineui(ShaderType shadertype, int location, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
        public static unsafe void GetUniformSubroutineui(ShaderType shadertype, int location, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
        public static unsafe void GetUniformSubroutineui(ShaderType shadertype, int location, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
        public static unsafe uint GetUniformSubroutineui(ShaderType shadertype, int location)
        {
            uint parameters_val;
            uint* parameters = &parameters_val;
            GetUniformSubroutineuiv(shadertype, location, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetUniformuiv(int, int, uint*)"/>
        public static unsafe void GetUniformui(int program, int location, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetUniformuiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformuiv(int, int, uint*)"/>
        public static unsafe void GetUniformui(int program, int location, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetUniformuiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformuiv(int, int, uint*)"/>
        public static unsafe void GetUniformui(int program, int location, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetUniformuiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformuiv(int, int, uint*)"/>
        public static unsafe uint GetUniformui(int program, int location)
        {
            uint parameters_val;
            uint* parameters = &parameters_val;
            GetUniformuiv(program, location, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetVertexArrayIndexed64iv(int, uint, VertexArrayPName, long*)"/>
        public static unsafe void GetVertexArrayIndexed64iv(int vaobj, uint index, VertexArrayPName pname, ref long param)
        {
            fixed (long* param_ptr = &param)
            {
                GetVertexArrayIndexed64iv(vaobj, index, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexArrayIndexed64iv(int, uint, VertexArrayPName, long*)"/>
        public static unsafe long GetVertexArrayIndexed64iv(int vaobj, uint index, VertexArrayPName pname)
        {
            long param_val;
            long* param = &param_val;
            GetVertexArrayIndexed64iv(vaobj, index, pname, param);
            return param_val;
        }
        /// <inheritdoc cref="GetVertexArrayIndexediv(int, uint, VertexArrayPName, int*)"/>
        public static unsafe void GetVertexArrayIndexedi(int vaobj, uint index, VertexArrayPName pname, ref int param)
        {
            fixed (int* param_ptr = &param)
            {
                GetVertexArrayIndexediv(vaobj, index, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexArrayIndexediv(int, uint, VertexArrayPName, int*)"/>
        public static unsafe int GetVertexArrayIndexedi(int vaobj, uint index, VertexArrayPName pname)
        {
            int param_val;
            int* param = &param_val;
            GetVertexArrayIndexediv(vaobj, index, pname, param);
            return param_val;
        }
        /// <inheritdoc cref="GetVertexArrayiv(int, VertexArrayPName, int*)"/>
        public static unsafe void GetVertexArrayi(int vaobj, VertexArrayPName pname, ref int param)
        {
            fixed (int* param_ptr = &param)
            {
                GetVertexArrayiv(vaobj, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexArrayiv(int, VertexArrayPName, int*)"/>
        public static unsafe int GetVertexArrayi(int vaobj, VertexArrayPName pname)
        {
            int param_val;
            int* param = &param_val;
            GetVertexArrayiv(vaobj, pname, param);
            return param_val;
        }
        /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribPropertyARB, double*)"/>
        public static unsafe void GetVertexAttribd(uint index, VertexAttribPropertyARB pname, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetVertexAttribdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribPropertyARB, double*)"/>
        public static unsafe void GetVertexAttribd(uint index, VertexAttribPropertyARB pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetVertexAttribdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribPropertyARB, double*)"/>
        public static unsafe void GetVertexAttribd(uint index, VertexAttribPropertyARB pname, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                GetVertexAttribdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribPropertyARB, double*)"/>
        public static unsafe double GetVertexAttribd(uint index, VertexAttribPropertyARB pname)
        {
            double parameters_val;
            double* parameters = &parameters_val;
            GetVertexAttribdv(index, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribPropertyARB, float*)"/>
        public static unsafe void GetVertexAttribf(uint index, VertexAttribPropertyARB pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetVertexAttribfv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribPropertyARB, float*)"/>
        public static unsafe void GetVertexAttribf(uint index, VertexAttribPropertyARB pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetVertexAttribfv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribPropertyARB, float*)"/>
        public static unsafe void GetVertexAttribf(uint index, VertexAttribPropertyARB pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetVertexAttribfv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribPropertyARB, float*)"/>
        public static unsafe float GetVertexAttribf(uint index, VertexAttribPropertyARB pname)
        {
            float parameters_val;
            float* parameters = &parameters_val;
            GetVertexAttribfv(index, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetVertexAttribIiv(uint, VertexAttribEnum, int*)"/>
        public static unsafe void GetVertexAttribIi(uint index, VertexAttribEnum pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetVertexAttribIiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribIiv(uint, VertexAttribEnum, int*)"/>
        public static unsafe void GetVertexAttribIi(uint index, VertexAttribEnum pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetVertexAttribIiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribIiv(uint, VertexAttribEnum, int*)"/>
        public static unsafe void GetVertexAttribIi(uint index, VertexAttribEnum pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetVertexAttribIiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribIiv(uint, VertexAttribEnum, int*)"/>
        public static unsafe int GetVertexAttribIi(uint index, VertexAttribEnum pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetVertexAttribIiv(index, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetVertexAttribIuiv(uint, VertexAttribEnum, uint*)"/>
        public static unsafe void GetVertexAttribIui(uint index, VertexAttribEnum pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetVertexAttribIuiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribIuiv(uint, VertexAttribEnum, uint*)"/>
        public static unsafe void GetVertexAttribIui(uint index, VertexAttribEnum pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetVertexAttribIuiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribIuiv(uint, VertexAttribEnum, uint*)"/>
        public static unsafe void GetVertexAttribIui(uint index, VertexAttribEnum pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetVertexAttribIuiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribIuiv(uint, VertexAttribEnum, uint*)"/>
        public static unsafe uint GetVertexAttribIui(uint index, VertexAttribEnum pname)
        {
            uint parameters_val;
            uint* parameters = &parameters_val;
            GetVertexAttribIuiv(index, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribPropertyARB, int*)"/>
        public static unsafe void GetVertexAttribi(uint index, VertexAttribPropertyARB pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetVertexAttribiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribPropertyARB, int*)"/>
        public static unsafe void GetVertexAttribi(uint index, VertexAttribPropertyARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetVertexAttribiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribPropertyARB, int*)"/>
        public static unsafe void GetVertexAttribi(uint index, VertexAttribPropertyARB pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetVertexAttribiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribPropertyARB, int*)"/>
        public static unsafe int GetVertexAttribi(uint index, VertexAttribPropertyARB pname)
        {
            int parameters_val;
            int* parameters = &parameters_val;
            GetVertexAttribiv(index, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
        public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetVertexAttribLdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
        public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetVertexAttribLdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
        public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                GetVertexAttribLdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
        public static unsafe double GetVertexAttribLd(uint index, VertexAttribEnum pname)
        {
            double parameters_val;
            double* parameters = &parameters_val;
            GetVertexAttribLdv(index, pname, parameters);
            return parameters_val;
        }
        /// <inheritdoc cref="GetVertexAttribPointerv(uint, VertexAttribPointerPropertyARB, void**)"/>
        public static unsafe void GetVertexAttribPointer(uint index, VertexAttribPointerPropertyARB pname, void** pointer)
        {
            GetVertexAttribPointerv(index, pname, pointer);
        }
        /// <inheritdoc cref="GetVertexAttribPointerv(uint, VertexAttribPointerPropertyARB, void**)"/>
        public static unsafe void* GetVertexAttribPointer(uint index, VertexAttribPointerPropertyARB pname)
        {
            void* pointer_val;
            void** pointer = &pointer_val;
            GetVertexAttribPointerv(index, pname, pointer);
            return pointer_val;
        }
        /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
        public static unsafe void InvalidateFramebuffer(FramebufferTarget target, ReadOnlySpan<InvalidateFramebufferAttachment> attachments)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateFramebuffer(target, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
        public static unsafe void InvalidateFramebuffer(FramebufferTarget target, InvalidateFramebufferAttachment[] attachments)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateFramebuffer(target, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
        public static unsafe void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, in InvalidateFramebufferAttachment attachments)
        {
            fixed (InvalidateFramebufferAttachment* attachments_ptr = &attachments)
            {
                InvalidateFramebuffer(target, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
        public static unsafe void InvalidateNamedFramebufferData(int framebuffer, ReadOnlySpan<FramebufferAttachment> attachments)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (FramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
        public static unsafe void InvalidateNamedFramebufferData(int framebuffer, FramebufferAttachment[] attachments)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (FramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
        public static unsafe void InvalidateNamedFramebufferData(int framebuffer, int numAttachments, in FramebufferAttachment attachments)
        {
            fixed (FramebufferAttachment* attachments_ptr = &attachments)
            {
                InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, ReadOnlySpan<FramebufferAttachment> attachments, int x, int y, int width, int height)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (FramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, FramebufferAttachment[] attachments, int x, int y, int width, int height)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (FramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, int numAttachments, in FramebufferAttachment attachments, int x, int y, int width, int height)
        {
            fixed (FramebufferAttachment* attachments_ptr = &attachments)
            {
                InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, ReadOnlySpan<InvalidateFramebufferAttachment> attachments, int x, int y, int width, int height)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, InvalidateFramebufferAttachment[] attachments, int x, int y, int width, int height)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, in InvalidateFramebufferAttachment attachments, int x, int y, int width, int height)
        {
            fixed (InvalidateFramebufferAttachment* attachments_ptr = &attachments)
            {
                InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="MultiDrawArrays(PrimitiveType, int*, int*, int)"/>
        public static unsafe void MultiDrawArrays(PrimitiveType mode, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int drawcount)
        {
            fixed (int* first_ptr = first)
            {
                fixed (int* count_ptr = count)
                {
                    MultiDrawArrays(mode, first_ptr, count_ptr, drawcount);
                }
            }
        }
        /// <inheritdoc cref="MultiDrawArrays(PrimitiveType, int*, int*, int)"/>
        public static unsafe void MultiDrawArrays(PrimitiveType mode, int[] first, int[] count, int drawcount)
        {
            fixed (int* first_ptr = first)
            {
                fixed (int* count_ptr = count)
                {
                    MultiDrawArrays(mode, first_ptr, count_ptr, drawcount);
                }
            }
        }
        /// <inheritdoc cref="MultiDrawArrays(PrimitiveType, int*, int*, int)"/>
        public static unsafe void MultiDrawArrays(PrimitiveType mode, in int first, in int count, int drawcount)
        {
            fixed (int* first_ptr = &first)
            fixed (int* count_ptr = &count)
            {
                MultiDrawArrays(mode, first_ptr, count_ptr, drawcount);
            }
        }
        /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
        public static unsafe void MultiDrawArraysIndirect(PrimitiveType mode, IntPtr indirect, int drawcount, int stride)
        {
            void* indirect_vptr = (void*)indirect;
            MultiDrawArraysIndirect(mode, indirect_vptr, drawcount, stride);
        }
        /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
        public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, ReadOnlySpan<T1> indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
        public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, T1[] indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
        public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, in T1 indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawArraysIndirectCount(PrimitiveType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawArraysIndirectCount(PrimitiveType mode, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            void* indirect_vptr = (void*)indirect;
            MultiDrawArraysIndirectCount(mode, indirect_vptr, drawcount, maxdrawcount, stride);
        }
        /// <inheritdoc cref="MultiDrawArraysIndirectCount(PrimitiveType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawArraysIndirectCount<T1>(PrimitiveType mode, in T1 indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                MultiDrawArraysIndirectCount(mode, indirect_ptr, drawcount, maxdrawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawElements(PrimitiveType, int*, DrawElementsType, void**, int)"/>
        public static unsafe void MultiDrawElements(PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int drawcount)
        {
            fixed (int* count_ptr = count)
            {
                MultiDrawElements(mode, count_ptr, type, indices, drawcount);
            }
        }
        /// <inheritdoc cref="MultiDrawElements(PrimitiveType, int*, DrawElementsType, void**, int)"/>
        public static unsafe void MultiDrawElements(PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int drawcount)
        {
            fixed (int* count_ptr = count)
            {
                MultiDrawElements(mode, count_ptr, type, indices, drawcount);
            }
        }
        /// <inheritdoc cref="MultiDrawElements(PrimitiveType, int*, DrawElementsType, void**, int)"/>
        public static unsafe void MultiDrawElements(PrimitiveType mode, in int count, DrawElementsType type, void** indices, int drawcount)
        {
            fixed (int* count_ptr = &count)
            {
                MultiDrawElements(mode, count_ptr, type, indices, drawcount);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
        public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int drawcount, ReadOnlySpan<int> basevertex)
        {
            fixed (int* count_ptr = count)
            {
                fixed (int* basevertex_ptr = basevertex)
                {
                    MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                }
            }
        }
        /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
        public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int drawcount, int[] basevertex)
        {
            fixed (int* count_ptr = count)
            {
                fixed (int* basevertex_ptr = basevertex)
                {
                    MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                }
            }
        }
        /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
        public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, in int count, DrawElementsType type, void** indices, int drawcount, in int basevertex)
        {
            fixed (int* count_ptr = &count)
            fixed (int* basevertex_ptr = &basevertex)
            {
                MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
        public static unsafe void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawcount, int stride)
        {
            void* indirect_vptr = (void*)indirect;
            MultiDrawElementsIndirect(mode, type, indirect_vptr, drawcount, stride);
        }
        /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
        public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
        public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, T1[] indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
        public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsIndirectCount(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawElementsIndirectCount(PrimitiveType mode, DrawElementsType type, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            void* indirect_vptr = (void*)indirect;
            MultiDrawElementsIndirectCount(mode, type, indirect_vptr, drawcount, maxdrawcount, stride);
        }
        /// <inheritdoc cref="MultiDrawElementsIndirectCount(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawElementsIndirectCount<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                MultiDrawElementsIndirectCount(mode, type, indirect_ptr, drawcount, maxdrawcount, stride);
            }
        }
        /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
        public static unsafe void NamedBufferData(int buffer, nint size, IntPtr data, VertexBufferObjectUsage usage)
        {
            void* data_vptr = (void*)data;
            NamedBufferData(buffer, size, data_vptr, usage);
        }
        /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
        public static unsafe void NamedBufferData<T1>(int buffer, ReadOnlySpan<T1> data, VertexBufferObjectUsage usage)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                NamedBufferData(buffer, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
        public static unsafe void NamedBufferData<T1>(int buffer, T1[] data, VertexBufferObjectUsage usage)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                NamedBufferData(buffer, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
        public static unsafe void NamedBufferData<T1>(int buffer, nint size, in T1 data, VertexBufferObjectUsage usage)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                NamedBufferData(buffer, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
        public static unsafe void NamedBufferStorage(int buffer, nint size, IntPtr data, BufferStorageMask flags)
        {
            void* data_vptr = (void*)data;
            NamedBufferStorage(buffer, size, data_vptr, flags);
        }
        /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
        public static unsafe void NamedBufferStorage<T1>(int buffer, ReadOnlySpan<T1> data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                NamedBufferStorage(buffer, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
        public static unsafe void NamedBufferStorage<T1>(int buffer, T1[] data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                NamedBufferStorage(buffer, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
        public static unsafe void NamedBufferStorage<T1>(int buffer, nint size, in T1 data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                NamedBufferStorage(buffer, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void NamedBufferSubData(int buffer, IntPtr offset, nint size, IntPtr data)
        {
            void* data_vptr = (void*)data;
            NamedBufferSubData(buffer, offset, size, data_vptr);
        }
        /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                NamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, T1[] data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                NamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                NamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
        public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, ReadOnlySpan<ColorBuffer> bufs)
        {
            int n = (int)(bufs.Length);
            fixed (ColorBuffer* bufs_ptr = bufs)
            {
                NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
        public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, ColorBuffer[] bufs)
        {
            int n = (int)(bufs.Length);
            fixed (ColorBuffer* bufs_ptr = bufs)
            {
                NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
        public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, int n, in ColorBuffer bufs)
        {
            fixed (ColorBuffer* bufs_ptr = &bufs)
            {
                NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="ObjectLabel(ObjectIdentifier, uint, int, byte*)"/>
        public static unsafe void ObjectLabel(ObjectIdentifier identifier, uint name, int length, string label)
        {
            byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
            ObjectLabel(identifier, name, length, label_ptr);
            Marshal.FreeCoTaskMem((IntPtr)label_ptr);
        }
        /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
        public static unsafe void ObjectPtrLabel(IntPtr ptr, int length, string label)
        {
            byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
            void* ptr_vptr = (void*)ptr;
            ObjectPtrLabel(ptr_vptr, length, label_ptr);
            Marshal.FreeCoTaskMem((IntPtr)label_ptr);
        }
        /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
        public static unsafe void ObjectPtrLabel<T1>(in T1 ptr, int length, string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                ObjectPtrLabel(ptr_ptr, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
        public static unsafe void PatchParameterf(PatchParameterName pname, ReadOnlySpan<float> values)
        {
            fixed (float* values_ptr = values)
            {
                PatchParameterfv(pname, values_ptr);
            }
        }
        /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
        public static unsafe void PatchParameterf(PatchParameterName pname, float[] values)
        {
            fixed (float* values_ptr = values)
            {
                PatchParameterfv(pname, values_ptr);
            }
        }
        /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
        public static unsafe void PatchParameterf(PatchParameterName pname, in float values)
        {
            fixed (float* values_ptr = &values)
            {
                PatchParameterfv(pname, values_ptr);
            }
        }
        /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
        public static unsafe void PointParameterf(PointParameterNameARB pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                PointParameterfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
        public static unsafe void PointParameterf(PointParameterNameARB pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                PointParameterfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
        public static unsafe void PointParameterf(PointParameterNameARB pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                PointParameterfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PointParameteriv(PointParameterNameARB, int*)"/>
        public static unsafe void PointParameteri(PointParameterNameARB pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                PointParameteriv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PointParameteriv(PointParameterNameARB, int*)"/>
        public static unsafe void PointParameteri(PointParameterNameARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                PointParameteriv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PointParameteriv(PointParameterNameARB, int*)"/>
        public static unsafe void PointParameteri(PointParameterNameARB pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                PointParameteriv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
        public static unsafe void ProgramBinary(int program, All binaryFormat, IntPtr binary, int length)
        {
            void* binary_vptr = (void*)binary;
            ProgramBinary(program, binaryFormat, binary_vptr, length);
        }
        /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
        public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, ReadOnlySpan<T1> binary)
            where T1 : unmanaged
        {
            int length = (int)(binary.Length * sizeof(T1));
            fixed (void* binary_ptr = binary)
            {
                ProgramBinary(program, binaryFormat, binary_ptr, length);
            }
        }
        /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
        public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, T1[] binary)
            where T1 : unmanaged
        {
            int length = (int)(binary.Length * sizeof(T1));
            fixed (void* binary_ptr = binary)
            {
                ProgramBinary(program, binaryFormat, binary_ptr, length);
            }
        }
        /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
        public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, in T1 binary, int length)
            where T1 : unmanaged
        {
            fixed (void* binary_ptr = &binary)
            {
                ProgramBinary(program, binaryFormat, binary_ptr, length);
            }
        }
        /// <inheritdoc cref="ProgramUniform1dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform1d(int program, int location, int count, in double value)
        {
            fixed (double* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform1dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform1fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform1f(int program, int location, int count, in float value)
        {
            fixed (float* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform1fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform1iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform1i(int program, int location, int count, in int value)
        {
            fixed (int* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform1iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform1uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform1ui(int program, int location, int count, in uint value)
        {
            fixed (uint* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform1uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform2d(int program, int location, int count, in Vector2d value)
        {
            fixed (Vector2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform2dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform2d(int program, int location, int count, ReadOnlySpan<Vector2d> value)
        {
            fixed (Vector2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform2dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform2d(int program, int location, int count, Vector2d[] value)
        {
            fixed (Vector2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform2dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, in Vector2 value)
        {
            fixed (Vector2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, ReadOnlySpan<Vector2> value)
        {
            fixed (Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, Vector2[] value)
        {
            fixed (Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, in System.Numerics.Vector2 value)
        {
            fixed (System.Numerics.Vector2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
        {
            fixed (System.Numerics.Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, System.Numerics.Vector2[] value)
        {
            fixed (System.Numerics.Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform2i(int program, int location, int count, in Vector2i value)
        {
            fixed (Vector2i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform2iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform2i(int program, int location, int count, ReadOnlySpan<Vector2i> value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform2iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform2i(int program, int location, int count, Vector2i[] value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform2iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform2ui(int program, int location, int count, in Vector2i value)
        {
            fixed (Vector2i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform2uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform2ui(int program, int location, int count, ReadOnlySpan<Vector2i> value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform2uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform2ui(int program, int location, int count, Vector2i[] value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform2uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform3d(int program, int location, int count, in Vector3d value)
        {
            fixed (Vector3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform3dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform3d(int program, int location, int count, ReadOnlySpan<Vector3d> value)
        {
            fixed (Vector3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform3dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform3d(int program, int location, int count, Vector3d[] value)
        {
            fixed (Vector3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform3dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, in Vector3 value)
        {
            fixed (Vector3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, ReadOnlySpan<Vector3> value)
        {
            fixed (Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, Vector3[] value)
        {
            fixed (Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, in System.Numerics.Vector3 value)
        {
            fixed (System.Numerics.Vector3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
        {
            fixed (System.Numerics.Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, System.Numerics.Vector3[] value)
        {
            fixed (System.Numerics.Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform3i(int program, int location, int count, in Vector3i value)
        {
            fixed (Vector3i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform3iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform3i(int program, int location, int count, ReadOnlySpan<Vector3i> value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform3iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform3i(int program, int location, int count, Vector3i[] value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform3iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform3ui(int program, int location, int count, in Vector3i value)
        {
            fixed (Vector3i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform3uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform3ui(int program, int location, int count, ReadOnlySpan<Vector3i> value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform3uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform3ui(int program, int location, int count, Vector3i[] value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform3uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform4d(int program, int location, int count, in Vector4d value)
        {
            fixed (Vector4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform4dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform4d(int program, int location, int count, ReadOnlySpan<Vector4d> value)
        {
            fixed (Vector4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform4dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform4d(int program, int location, int count, Vector4d[] value)
        {
            fixed (Vector4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform4dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, in Vector4 value)
        {
            fixed (Vector4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, ReadOnlySpan<Vector4> value)
        {
            fixed (Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, Vector4[] value)
        {
            fixed (Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, in System.Numerics.Vector4 value)
        {
            fixed (System.Numerics.Vector4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
        {
            fixed (System.Numerics.Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, System.Numerics.Vector4[] value)
        {
            fixed (System.Numerics.Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform4i(int program, int location, int count, in Vector4i value)
        {
            fixed (Vector4i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform4iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform4i(int program, int location, int count, ReadOnlySpan<Vector4i> value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform4iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform4i(int program, int location, int count, Vector4i[] value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform4iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform4ui(int program, int location, int count, in Vector4i value)
        {
            fixed (Vector4i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform4uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform4ui(int program, int location, int count, ReadOnlySpan<Vector4i> value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform4uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform4ui(int program, int location, int count, Vector4i[] value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform4uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, in Matrix2d value)
        {
            fixed (Matrix2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2d> value)
        {
            fixed (Matrix2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, Matrix2d[] value)
        {
            fixed (Matrix2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, in Matrix2 value)
        {
            fixed (Matrix2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2> value)
        {
            fixed (Matrix2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, Matrix2[] value)
        {
            fixed (Matrix2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, in Matrix2x3d value)
        {
            fixed (Matrix2x3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3d> value)
        {
            fixed (Matrix2x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, Matrix2x3d[] value)
        {
            fixed (Matrix2x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, in Matrix2x3 value)
        {
            fixed (Matrix2x3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3> value)
        {
            fixed (Matrix2x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, Matrix2x3[] value)
        {
            fixed (Matrix2x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, in Matrix2x4d value)
        {
            fixed (Matrix2x4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4d> value)
        {
            fixed (Matrix2x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, Matrix2x4d[] value)
        {
            fixed (Matrix2x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, in Matrix2x4 value)
        {
            fixed (Matrix2x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4> value)
        {
            fixed (Matrix2x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, Matrix2x4[] value)
        {
            fixed (Matrix2x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, in Matrix3d value)
        {
            fixed (Matrix3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3d> value)
        {
            fixed (Matrix3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, Matrix3d[] value)
        {
            fixed (Matrix3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, in Matrix3 value)
        {
            fixed (Matrix3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3> value)
        {
            fixed (Matrix3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, Matrix3[] value)
        {
            fixed (Matrix3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, in Matrix3x2d value)
        {
            fixed (Matrix3x2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2d> value)
        {
            fixed (Matrix3x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, Matrix3x2d[] value)
        {
            fixed (Matrix3x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, in Matrix3x2 value)
        {
            fixed (Matrix3x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2> value)
        {
            fixed (Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, Matrix3x2[] value)
        {
            fixed (Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, in System.Numerics.Matrix3x2 value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix3x2> value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, System.Numerics.Matrix3x2[] value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, in Matrix3x4d value)
        {
            fixed (Matrix3x4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4d> value)
        {
            fixed (Matrix3x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, Matrix3x4d[] value)
        {
            fixed (Matrix3x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, in Matrix3x4 value)
        {
            fixed (Matrix3x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4> value)
        {
            fixed (Matrix3x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, Matrix3x4[] value)
        {
            fixed (Matrix3x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, in Matrix4d value)
        {
            fixed (Matrix4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4d> value)
        {
            fixed (Matrix4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, Matrix4d[] value)
        {
            fixed (Matrix4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, in Matrix4 value)
        {
            fixed (Matrix4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4> value)
        {
            fixed (Matrix4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, Matrix4[] value)
        {
            fixed (Matrix4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, in System.Numerics.Matrix4x4 value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix4x4> value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, System.Numerics.Matrix4x4[] value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, in Matrix4x2d value)
        {
            fixed (Matrix4x2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2d> value)
        {
            fixed (Matrix4x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, Matrix4x2d[] value)
        {
            fixed (Matrix4x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, in Matrix4x2 value)
        {
            fixed (Matrix4x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2> value)
        {
            fixed (Matrix4x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, Matrix4x2[] value)
        {
            fixed (Matrix4x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, in Matrix4x3d value)
        {
            fixed (Matrix4x3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3d> value)
        {
            fixed (Matrix4x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, Matrix4x3d[] value)
        {
            fixed (Matrix4x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, in Matrix4x3 value)
        {
            fixed (Matrix4x3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3> value)
        {
            fixed (Matrix4x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, Matrix4x3[] value)
        {
            fixed (Matrix4x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="PushDebugGroup(DebugSource, uint, int, byte*)"/>
        public static unsafe void PushDebugGroup(DebugSource source, uint id, int length, string message)
        {
            byte* message_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(message);
            PushDebugGroup(source, id, length, message_ptr);
            Marshal.FreeCoTaskMem((IntPtr)message_ptr);
        }
        /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void ReadnPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ReadnPixels(x, y, width, height, format, type, bufSize, data_vptr);
        }
        /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, Span<T1> data)
            where T1 : unmanaged
        {
            int bufSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }
        /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            int bufSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }
        /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }
        /// <inheritdoc cref="ReadPixels(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            ReadPixels(x, y, width, height, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="ReadPixels(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ReadPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, Span<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                ReadPixels(x, y, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="ReadPixels(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ReadPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                ReadPixels(x, y, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="ReadPixels(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ReadPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                ReadPixels(x, y, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, ReadOnlySpan<float> param)
        {
            fixed (float* param_ptr = param)
            {
                SamplerParameterfv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, float[] param)
        {
            fixed (float* param_ptr = param)
            {
                SamplerParameterfv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, in float param)
        {
            fixed (float* param_ptr = &param)
            {
                SamplerParameterfv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param)
            {
                SamplerParameterIiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, int[] param)
        {
            fixed (int* param_ptr = param)
            {
                SamplerParameterIiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, in int param)
        {
            fixed (int* param_ptr = &param)
            {
                SamplerParameterIiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, ReadOnlySpan<uint> param)
        {
            fixed (uint* param_ptr = param)
            {
                SamplerParameterIuiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, uint[] param)
        {
            fixed (uint* param_ptr = param)
            {
                SamplerParameterIuiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, in uint param)
        {
            fixed (uint* param_ptr = &param)
            {
                SamplerParameterIuiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param)
            {
                SamplerParameteriv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, int[] param)
        {
            fixed (int* param_ptr = param)
            {
                SamplerParameteriv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, in int param)
        {
            fixed (int* param_ptr = &param)
            {
                SamplerParameteriv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
        public static unsafe void ScissorArray(uint first, int count, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v)
            {
                ScissorArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
        public static unsafe void ScissorArray(uint first, int count, int[] v)
        {
            fixed (int* v_ptr = v)
            {
                ScissorArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
        public static unsafe void ScissorArray(uint first, int count, in int v)
        {
            fixed (int* v_ptr = &v)
            {
                ScissorArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
        public static unsafe void ScissorIndexed(uint index, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v)
            {
                ScissorIndexedv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
        public static unsafe void ScissorIndexed(uint index, int[] v)
        {
            fixed (int* v_ptr = v)
            {
                ScissorIndexedv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
        public static unsafe void ScissorIndexed(uint index, in int v)
        {
            fixed (int* v_ptr = &v)
            {
                ScissorIndexedv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary(ReadOnlySpan<int> shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
        {
            int count = (int)(shaders.Length);
            fixed (int* shaders_ptr = shaders)
            {
                void* binary_vptr = (void*)binary;
                ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary(int[] shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
        {
            int count = (int)(shaders.Length);
            fixed (int* shaders_ptr = shaders)
            {
                void* binary_vptr = (void*)binary;
                ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary(int count, in int shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
        {
            fixed (int* shaders_ptr = &shaders)
            {
                void* binary_vptr = (void*)binary;
                ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary<T1>(ReadOnlySpan<int> shaders, ShaderBinaryFormat binaryFormat, ReadOnlySpan<T1> binary)
            where T1 : unmanaged
        {
            int count = (int)(shaders.Length);
            fixed (int* shaders_ptr = shaders)
            {
                int length = (int)(binary.Length * sizeof(T1));
                fixed (void* binary_ptr = binary)
                {
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
                }
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary<T1>(int[] shaders, ShaderBinaryFormat binaryFormat, T1[] binary)
            where T1 : unmanaged
        {
            int count = (int)(shaders.Length);
            fixed (int* shaders_ptr = shaders)
            {
                int length = (int)(binary.Length * sizeof(T1));
                fixed (void* binary_ptr = binary)
                {
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
                }
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary<T1>(int count, in int shaders, ShaderBinaryFormat binaryFormat, in T1 binary, int length)
            where T1 : unmanaged
        {
            fixed (int* shaders_ptr = &shaders)
            fixed (void* binary_ptr = &binary)
            {
                ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
            }
        }
        /// <inheritdoc cref="ShaderSource(int, int, byte**, int*)"/>
        public static unsafe void ShaderSource(int shader, int count, byte** str, ReadOnlySpan<int> length)
        {
            fixed (int* length_ptr = length)
            {
                ShaderSource(shader, count, str, length_ptr);
            }
        }
        /// <inheritdoc cref="ShaderSource(int, int, byte**, int*)"/>
        public static unsafe void ShaderSource(int shader, int count, byte** str, int[] length)
        {
            fixed (int* length_ptr = length)
            {
                ShaderSource(shader, count, str, length_ptr);
            }
        }
        /// <inheritdoc cref="ShaderSource(int, int, byte**, int*)"/>
        public static unsafe void ShaderSource(int shader, int count, byte** str, in int length)
        {
            fixed (int* length_ptr = &length)
            {
                ShaderSource(shader, count, str, length_ptr);
            }
        }
        /// <inheritdoc cref="SpecializeShader(int, byte*, uint, uint*, uint*)"/>
        public static unsafe void SpecializeShader(int shader, string pEntryPoint, uint numSpecializationConstants, ReadOnlySpan<uint> pConstantIndex, ReadOnlySpan<uint> pConstantValue)
        {
            fixed (uint* pConstantIndex_ptr = pConstantIndex)
            {
                fixed (uint* pConstantValue_ptr = pConstantValue)
                {
                    byte* pEntryPoint_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(pEntryPoint);
                    SpecializeShader(shader, pEntryPoint_ptr, numSpecializationConstants, pConstantIndex_ptr, pConstantValue_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)pEntryPoint_ptr);
                }
            }
        }
        /// <inheritdoc cref="SpecializeShader(int, byte*, uint, uint*, uint*)"/>
        public static unsafe void SpecializeShader(int shader, string pEntryPoint, uint numSpecializationConstants, uint[] pConstantIndex, uint[] pConstantValue)
        {
            fixed (uint* pConstantIndex_ptr = pConstantIndex)
            {
                fixed (uint* pConstantValue_ptr = pConstantValue)
                {
                    byte* pEntryPoint_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(pEntryPoint);
                    SpecializeShader(shader, pEntryPoint_ptr, numSpecializationConstants, pConstantIndex_ptr, pConstantValue_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)pEntryPoint_ptr);
                }
            }
        }
        /// <inheritdoc cref="SpecializeShader(int, byte*, uint, uint*, uint*)"/>
        public static unsafe void SpecializeShader(int shader, string pEntryPoint, uint numSpecializationConstants, in uint pConstantIndex, in uint pConstantValue)
        {
            fixed (uint* pConstantIndex_ptr = &pConstantIndex)
            fixed (uint* pConstantValue_ptr = &pConstantValue)
            {
                byte* pEntryPoint_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(pEntryPoint);
                SpecializeShader(shader, pEntryPoint_ptr, numSpecializationConstants, pConstantIndex_ptr, pConstantValue_ptr);
                Marshal.FreeCoTaskMem((IntPtr)pEntryPoint_ptr);
            }
        }
        /// <inheritdoc cref="TexImage1D(TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage1D(TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexImage1D(target, level, internalformat, width, border, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexImage1D(TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage1D(target, level, internalformat, width, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage1D(TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage1D(target, level, internalformat, width, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage1D(TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexImage1D(target, level, internalformat, width, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage2D(TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexImage2D(TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage2D(TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage2D(TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterfv(TextureTarget, TextureParameterName, float*)"/>
        public static unsafe void TexParameterf(TextureTarget target, TextureParameterName pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                TexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterfv(TextureTarget, TextureParameterName, float*)"/>
        public static unsafe void TexParameterf(TextureTarget target, TextureParameterName pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                TexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterfv(TextureTarget, TextureParameterName, float*)"/>
        public static unsafe void TexParameterf(TextureTarget target, TextureParameterName pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                TexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIiv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameterIi(TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIiv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameterIi(TextureTarget target, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIiv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameterIi(TextureTarget target, TextureParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                TexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIuiv(TextureTarget, TextureParameterName, uint*)"/>
        public static unsafe void TexParameterIui(TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                TexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIuiv(TextureTarget, TextureParameterName, uint*)"/>
        public static unsafe void TexParameterIui(TextureTarget target, TextureParameterName pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                TexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIuiv(TextureTarget, TextureParameterName, uint*)"/>
        public static unsafe void TexParameterIui(TextureTarget target, TextureParameterName pname, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                TexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameteriv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameteri(TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameteriv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameteri(TextureTarget target, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameteriv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameteri(TextureTarget target, TextureParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                TexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexSubImage1D(target, level, xoffset, width, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage1D(target, level, xoffset, width, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage1D(target, level, xoffset, width, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexSubImage1D(target, level, xoffset, width, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
        public static unsafe void TextureParameterf(int texture, TextureParameterName pname, ReadOnlySpan<float> param)
        {
            fixed (float* param_ptr = param)
            {
                TextureParameterfv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
        public static unsafe void TextureParameterf(int texture, TextureParameterName pname, float[] param)
        {
            fixed (float* param_ptr = param)
            {
                TextureParameterfv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
        public static unsafe void TextureParameterf(int texture, TextureParameterName pname, in float param)
        {
            fixed (float* param_ptr = &param)
            {
                TextureParameterfv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TextureParameterIiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TextureParameterIiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                TextureParameterIiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
        public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, ReadOnlySpan<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                TextureParameterIuiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
        public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                TextureParameterIuiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
        public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                TextureParameterIuiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameteri(int texture, TextureParameterName pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param)
            {
                TextureParameteriv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameteri(int texture, TextureParameterName pname, int[] param)
        {
            fixed (int* param_ptr = param)
            {
                TextureParameteriv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameteri(int texture, TextureParameterName pname, in int param)
        {
            fixed (int* param_ptr = &param)
            {
                TextureParameteriv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage1D(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage1D<T1>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
        public static unsafe void Uniform1d(int location, int count, in double value)
        {
            fixed (double* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform1dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
        public static unsafe void Uniform1d(int location, int count, ReadOnlySpan<double> value)
        {
            fixed (double* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform1dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
        public static unsafe void Uniform1d(int location, int count, double[] value)
        {
            fixed (double* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform1dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1fv(int, int, float*)"/>
        public static unsafe void Uniform1f(int location, int count, in float value)
        {
            fixed (float* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform1fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1fv(int, int, float*)"/>
        public static unsafe void Uniform1f(int location, int count, ReadOnlySpan<float> value)
        {
            fixed (float* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform1fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1fv(int, int, float*)"/>
        public static unsafe void Uniform1f(int location, int count, float[] value)
        {
            fixed (float* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform1fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1iv(int, int, int*)"/>
        public static unsafe void Uniform1i(int location, int count, in int value)
        {
            fixed (int* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform1iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1iv(int, int, int*)"/>
        public static unsafe void Uniform1i(int location, int count, ReadOnlySpan<int> value)
        {
            fixed (int* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform1iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1iv(int, int, int*)"/>
        public static unsafe void Uniform1i(int location, int count, int[] value)
        {
            fixed (int* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform1iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1uiv(int, int, uint*)"/>
        public static unsafe void Uniform1ui(int location, int count, in uint value)
        {
            fixed (uint* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform1uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1uiv(int, int, uint*)"/>
        public static unsafe void Uniform1ui(int location, int count, ReadOnlySpan<uint> value)
        {
            fixed (uint* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform1uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1uiv(int, int, uint*)"/>
        public static unsafe void Uniform1ui(int location, int count, uint[] value)
        {
            fixed (uint* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform1uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
        public static unsafe void Uniform2d(int location, int count, in Vector2d value)
        {
            fixed (Vector2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform2dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
        public static unsafe void Uniform2d(int location, int count, ReadOnlySpan<Vector2d> value)
        {
            fixed (Vector2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform2dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
        public static unsafe void Uniform2d(int location, int count, Vector2d[] value)
        {
            fixed (Vector2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform2dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, in Vector2 value)
        {
            fixed (Vector2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, ReadOnlySpan<Vector2> value)
        {
            fixed (Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, Vector2[] value)
        {
            fixed (Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, in System.Numerics.Vector2 value)
        {
            fixed (System.Numerics.Vector2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
        {
            fixed (System.Numerics.Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, System.Numerics.Vector2[] value)
        {
            fixed (System.Numerics.Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2iv(int, int, int*)"/>
        public static unsafe void Uniform2i(int location, int count, in Vector2i value)
        {
            fixed (Vector2i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform2iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2iv(int, int, int*)"/>
        public static unsafe void Uniform2i(int location, int count, ReadOnlySpan<Vector2i> value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform2iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2iv(int, int, int*)"/>
        public static unsafe void Uniform2i(int location, int count, Vector2i[] value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform2iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2uiv(int, int, uint*)"/>
        public static unsafe void Uniform2ui(int location, int count, in Vector2i value)
        {
            fixed (Vector2i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform2uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2uiv(int, int, uint*)"/>
        public static unsafe void Uniform2ui(int location, int count, ReadOnlySpan<Vector2i> value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform2uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2uiv(int, int, uint*)"/>
        public static unsafe void Uniform2ui(int location, int count, Vector2i[] value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform2uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
        public static unsafe void Uniform3d(int location, int count, in Vector3d value)
        {
            fixed (Vector3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform3dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
        public static unsafe void Uniform3d(int location, int count, ReadOnlySpan<Vector3d> value)
        {
            fixed (Vector3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform3dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
        public static unsafe void Uniform3d(int location, int count, Vector3d[] value)
        {
            fixed (Vector3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform3dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, in Vector3 value)
        {
            fixed (Vector3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, ReadOnlySpan<Vector3> value)
        {
            fixed (Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, Vector3[] value)
        {
            fixed (Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, in System.Numerics.Vector3 value)
        {
            fixed (System.Numerics.Vector3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
        {
            fixed (System.Numerics.Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, System.Numerics.Vector3[] value)
        {
            fixed (System.Numerics.Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3iv(int, int, int*)"/>
        public static unsafe void Uniform3i(int location, int count, in Vector3i value)
        {
            fixed (Vector3i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform3iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3iv(int, int, int*)"/>
        public static unsafe void Uniform3i(int location, int count, ReadOnlySpan<Vector3i> value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform3iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3iv(int, int, int*)"/>
        public static unsafe void Uniform3i(int location, int count, Vector3i[] value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform3iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3uiv(int, int, uint*)"/>
        public static unsafe void Uniform3ui(int location, int count, in Vector3i value)
        {
            fixed (Vector3i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform3uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3uiv(int, int, uint*)"/>
        public static unsafe void Uniform3ui(int location, int count, ReadOnlySpan<Vector3i> value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform3uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3uiv(int, int, uint*)"/>
        public static unsafe void Uniform3ui(int location, int count, Vector3i[] value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform3uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
        public static unsafe void Uniform4d(int location, int count, in Vector4d value)
        {
            fixed (Vector4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform4dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
        public static unsafe void Uniform4d(int location, int count, ReadOnlySpan<Vector4d> value)
        {
            fixed (Vector4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform4dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
        public static unsafe void Uniform4d(int location, int count, Vector4d[] value)
        {
            fixed (Vector4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform4dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, in Vector4 value)
        {
            fixed (Vector4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, ReadOnlySpan<Vector4> value)
        {
            fixed (Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, Vector4[] value)
        {
            fixed (Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, in System.Numerics.Vector4 value)
        {
            fixed (System.Numerics.Vector4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
        {
            fixed (System.Numerics.Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, System.Numerics.Vector4[] value)
        {
            fixed (System.Numerics.Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4iv(int, int, int*)"/>
        public static unsafe void Uniform4i(int location, int count, in Vector4i value)
        {
            fixed (Vector4i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform4iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4iv(int, int, int*)"/>
        public static unsafe void Uniform4i(int location, int count, ReadOnlySpan<Vector4i> value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform4iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4iv(int, int, int*)"/>
        public static unsafe void Uniform4i(int location, int count, Vector4i[] value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform4iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4uiv(int, int, uint*)"/>
        public static unsafe void Uniform4ui(int location, int count, in Vector4i value)
        {
            fixed (Vector4i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform4uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4uiv(int, int, uint*)"/>
        public static unsafe void Uniform4ui(int location, int count, ReadOnlySpan<Vector4i> value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform4uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4uiv(int, int, uint*)"/>
        public static unsafe void Uniform4ui(int location, int count, Vector4i[] value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform4uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2d(int location, int count, bool transpose, in Matrix2d value)
        {
            fixed (Matrix2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2d(int location, int count, bool transpose, ReadOnlySpan<Matrix2d> value)
        {
            fixed (Matrix2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2d(int location, int count, bool transpose, Matrix2d[] value)
        {
            fixed (Matrix2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2f(int location, int count, bool transpose, in Matrix2 value)
        {
            fixed (Matrix2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2f(int location, int count, bool transpose, ReadOnlySpan<Matrix2> value)
        {
            fixed (Matrix2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2f(int location, int count, bool transpose, Matrix2[] value)
        {
            fixed (Matrix2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, in Matrix2x3d value)
        {
            fixed (Matrix2x3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, ReadOnlySpan<Matrix2x3d> value)
        {
            fixed (Matrix2x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, Matrix2x3d[] value)
        {
            fixed (Matrix2x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x3f(int location, int count, bool transpose, in Matrix2x3 value)
        {
            fixed (Matrix2x3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x3f(int location, int count, bool transpose, ReadOnlySpan<Matrix2x3> value)
        {
            fixed (Matrix2x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x3f(int location, int count, bool transpose, Matrix2x3[] value)
        {
            fixed (Matrix2x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, in Matrix2x4d value)
        {
            fixed (Matrix2x4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, ReadOnlySpan<Matrix2x4d> value)
        {
            fixed (Matrix2x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, Matrix2x4d[] value)
        {
            fixed (Matrix2x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x4f(int location, int count, bool transpose, in Matrix2x4 value)
        {
            fixed (Matrix2x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x4f(int location, int count, bool transpose, ReadOnlySpan<Matrix2x4> value)
        {
            fixed (Matrix2x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x4f(int location, int count, bool transpose, Matrix2x4[] value)
        {
            fixed (Matrix2x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3d(int location, int count, bool transpose, in Matrix3d value)
        {
            fixed (Matrix3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3d(int location, int count, bool transpose, ReadOnlySpan<Matrix3d> value)
        {
            fixed (Matrix3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3d(int location, int count, bool transpose, Matrix3d[] value)
        {
            fixed (Matrix3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3f(int location, int count, bool transpose, in Matrix3 value)
        {
            fixed (Matrix3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3f(int location, int count, bool transpose, ReadOnlySpan<Matrix3> value)
        {
            fixed (Matrix3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3f(int location, int count, bool transpose, Matrix3[] value)
        {
            fixed (Matrix3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, in Matrix3x2d value)
        {
            fixed (Matrix3x2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, ReadOnlySpan<Matrix3x2d> value)
        {
            fixed (Matrix3x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, Matrix3x2d[] value)
        {
            fixed (Matrix3x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, in Matrix3x2 value)
        {
            fixed (Matrix3x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, ReadOnlySpan<Matrix3x2> value)
        {
            fixed (Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, Matrix3x2[] value)
        {
            fixed (Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, in System.Numerics.Matrix3x2 value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix3x2> value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, System.Numerics.Matrix3x2[] value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, in Matrix3x4d value)
        {
            fixed (Matrix3x4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, ReadOnlySpan<Matrix3x4d> value)
        {
            fixed (Matrix3x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, Matrix3x4d[] value)
        {
            fixed (Matrix3x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x4f(int location, int count, bool transpose, in Matrix3x4 value)
        {
            fixed (Matrix3x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x4f(int location, int count, bool transpose, ReadOnlySpan<Matrix3x4> value)
        {
            fixed (Matrix3x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x4f(int location, int count, bool transpose, Matrix3x4[] value)
        {
            fixed (Matrix3x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4d(int location, int count, bool transpose, in Matrix4d value)
        {
            fixed (Matrix4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4d(int location, int count, bool transpose, ReadOnlySpan<Matrix4d> value)
        {
            fixed (Matrix4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4d(int location, int count, bool transpose, Matrix4d[] value)
        {
            fixed (Matrix4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, in Matrix4 value)
        {
            fixed (Matrix4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, ReadOnlySpan<Matrix4> value)
        {
            fixed (Matrix4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, Matrix4[] value)
        {
            fixed (Matrix4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, in System.Numerics.Matrix4x4 value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix4x4> value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, System.Numerics.Matrix4x4[] value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, in Matrix4x2d value)
        {
            fixed (Matrix4x2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, ReadOnlySpan<Matrix4x2d> value)
        {
            fixed (Matrix4x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, Matrix4x2d[] value)
        {
            fixed (Matrix4x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x2f(int location, int count, bool transpose, in Matrix4x2 value)
        {
            fixed (Matrix4x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x2f(int location, int count, bool transpose, ReadOnlySpan<Matrix4x2> value)
        {
            fixed (Matrix4x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x2f(int location, int count, bool transpose, Matrix4x2[] value)
        {
            fixed (Matrix4x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, in Matrix4x3d value)
        {
            fixed (Matrix4x3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, ReadOnlySpan<Matrix4x3d> value)
        {
            fixed (Matrix4x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, Matrix4x3d[] value)
        {
            fixed (Matrix4x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x3f(int location, int count, bool transpose, in Matrix4x3 value)
        {
            fixed (Matrix4x3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x3f(int location, int count, bool transpose, ReadOnlySpan<Matrix4x3> value)
        {
            fixed (Matrix4x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x3f(int location, int count, bool transpose, Matrix4x3[] value)
        {
            fixed (Matrix4x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
        public static unsafe void UniformSubroutinesui(ShaderType shadertype, ReadOnlySpan<uint> indices)
        {
            int count = (int)(indices.Length);
            fixed (uint* indices_ptr = indices)
            {
                UniformSubroutinesuiv(shadertype, count, indices_ptr);
            }
        }
        /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
        public static unsafe void UniformSubroutinesui(ShaderType shadertype, uint[] indices)
        {
            int count = (int)(indices.Length);
            fixed (uint* indices_ptr = indices)
            {
                UniformSubroutinesuiv(shadertype, count, indices_ptr);
            }
        }
        /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
        public static unsafe void UniformSubroutinesui(ShaderType shadertype, int count, in uint indices)
        {
            fixed (uint* indices_ptr = &indices)
            {
                UniformSubroutinesuiv(shadertype, count, indices_ptr);
            }
        }
        /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<int> strides)
        {
            fixed (int* buffers_ptr = buffers)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (int* strides_ptr = strides)
                    {
                        VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, int[] buffers, IntPtr[] offsets, int[] strides)
        {
            fixed (int* buffers_ptr = buffers)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (int* strides_ptr = strides)
                    {
                        VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, in int buffers, in IntPtr offsets, in int strides)
        {
            fixed (int* buffers_ptr = &buffers)
            fixed (IntPtr* offsets_ptr = &offsets)
            fixed (int* strides_ptr = &strides)
            {
                VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib1dv(uint, double*)"/>
        public static unsafe void VertexAttrib1d(uint index, in double v)
        {
            fixed (double* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttrib1dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib1fv(uint, float*)"/>
        public static unsafe void VertexAttrib1f(uint index, in float v)
        {
            fixed (float* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib1fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib1s(uint, short)"/>
        public static unsafe void VertexAttrib1(uint index, short x)
        {
            VertexAttrib1s(index, x);
        }
        /// <inheritdoc cref="VertexAttrib1sv(uint, short*)"/>
        public static unsafe void VertexAttrib1(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib1sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib1sv(uint, short*)"/>
        public static unsafe void VertexAttrib1(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib1sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib1sv(uint, short*)"/>
        public static unsafe void VertexAttrib1(uint index, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttrib1sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2dv(uint, double*)"/>
        public static unsafe void VertexAttrib2d(uint index, in Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttrib2dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
        public static unsafe void VertexAttrib2f(uint index, in Vector2 v)
        {
            fixed (Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib2fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
        public static unsafe void VertexAttrib2f(uint index, in System.Numerics.Vector2 v)
        {
            fixed (System.Numerics.Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib2fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
        public static unsafe void VertexAttrib2f(uint index, ReadOnlySpan<System.Numerics.Vector2> v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib2fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
        public static unsafe void VertexAttrib2f(uint index, System.Numerics.Vector2[] v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib2fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2s(uint, short, short)"/>
        public static unsafe void VertexAttrib2(uint index, short x, short y)
        {
            VertexAttrib2s(index, x, y);
        }
        /// <inheritdoc cref="VertexAttrib2sv(uint, short*)"/>
        public static unsafe void VertexAttrib2(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib2sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2sv(uint, short*)"/>
        public static unsafe void VertexAttrib2(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib2sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2sv(uint, short*)"/>
        public static unsafe void VertexAttrib2(uint index, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttrib2sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3dv(uint, double*)"/>
        public static unsafe void VertexAttrib3d(uint index, in Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttrib3dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
        public static unsafe void VertexAttrib3f(uint index, in Vector3 v)
        {
            fixed (Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib3fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
        public static unsafe void VertexAttrib3f(uint index, in System.Numerics.Vector3 v)
        {
            fixed (System.Numerics.Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib3fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
        public static unsafe void VertexAttrib3f(uint index, ReadOnlySpan<System.Numerics.Vector3> v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib3fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
        public static unsafe void VertexAttrib3f(uint index, System.Numerics.Vector3[] v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib3fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3s(uint, short, short, short)"/>
        public static unsafe void VertexAttrib3(uint index, short x, short y, short z)
        {
            VertexAttrib3s(index, x, y, z);
        }
        /// <inheritdoc cref="VertexAttrib3sv(uint, short*)"/>
        public static unsafe void VertexAttrib3(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib3sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3sv(uint, short*)"/>
        public static unsafe void VertexAttrib3(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib3sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3sv(uint, short*)"/>
        public static unsafe void VertexAttrib3(uint index, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttrib3sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4(uint index, ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttrib4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4(uint index, sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttrib4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4(uint index, in sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                VertexAttrib4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4dv(uint, double*)"/>
        public static unsafe void VertexAttrib4d(uint index, in Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttrib4dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
        public static unsafe void VertexAttrib4f(uint index, in Vector4 v)
        {
            fixed (Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib4fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
        public static unsafe void VertexAttrib4f(uint index, in System.Numerics.Vector4 v)
        {
            fixed (System.Numerics.Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib4fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
        public static unsafe void VertexAttrib4f(uint index, ReadOnlySpan<System.Numerics.Vector4> v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib4fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
        public static unsafe void VertexAttrib4f(uint index, System.Numerics.Vector4[] v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib4fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4iv(uint, int*)"/>
        public static unsafe void VertexAttrib4i(uint index, in Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                VertexAttrib4iv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nbv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4N(uint index, ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttrib4Nbv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nbv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4N(uint index, sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttrib4Nbv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nbv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4N(uint index, in sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                VertexAttrib4Nbv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Niv(uint, int*)"/>
        public static unsafe void VertexAttrib4Ni(uint index, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v)
            {
                VertexAttrib4Niv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Niv(uint, int*)"/>
        public static unsafe void VertexAttrib4Ni(uint index, int[] v)
        {
            fixed (int* v_ptr = v)
            {
                VertexAttrib4Niv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Niv(uint, int*)"/>
        public static unsafe void VertexAttrib4Ni(uint index, in int v)
        {
            fixed (int* v_ptr = &v)
            {
                VertexAttrib4Niv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nsv(uint, short*)"/>
        public static unsafe void VertexAttrib4N(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib4Nsv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nsv(uint, short*)"/>
        public static unsafe void VertexAttrib4N(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib4Nsv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nsv(uint, short*)"/>
        public static unsafe void VertexAttrib4N(uint index, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttrib4Nsv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nub(uint, byte, byte, byte, byte)"/>
        public static unsafe void VertexAttrib4N(uint index, byte x, byte y, byte z, byte w)
        {
            VertexAttrib4Nub(index, x, y, z, w);
        }
        /// <inheritdoc cref="VertexAttrib4Nubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4N(uint index, ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttrib4Nubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4N(uint index, byte[] v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttrib4Nubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4N(uint index, in byte v)
        {
            fixed (byte* v_ptr = &v)
            {
                VertexAttrib4Nubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nuiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4Nui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttrib4Nuiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nuiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4Nui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttrib4Nuiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nuiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4Nui(uint index, in uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttrib4Nuiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nusv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4N(uint index, ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttrib4Nusv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nusv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4N(uint index, ushort[] v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttrib4Nusv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nusv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4N(uint index, in ushort v)
        {
            fixed (ushort* v_ptr = &v)
            {
                VertexAttrib4Nusv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4s(uint, short, short, short, short)"/>
        public static unsafe void VertexAttrib4(uint index, short x, short y, short z, short w)
        {
            VertexAttrib4s(index, x, y, z, w);
        }
        /// <inheritdoc cref="VertexAttrib4sv(uint, short*)"/>
        public static unsafe void VertexAttrib4(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4sv(uint, short*)"/>
        public static unsafe void VertexAttrib4(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4sv(uint, short*)"/>
        public static unsafe void VertexAttrib4(uint index, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttrib4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4ubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4(uint index, ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttrib4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4ubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4(uint index, byte[] v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttrib4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4ubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4(uint index, in byte v)
        {
            fixed (byte* v_ptr = &v)
            {
                VertexAttrib4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4uiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4ui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttrib4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4uiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4ui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttrib4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4uiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4ui(uint index, in uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttrib4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4usv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4(uint index, ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttrib4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4usv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4(uint index, ushort[] v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttrib4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4usv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4(uint index, in ushort v)
        {
            fixed (ushort* v_ptr = &v)
            {
                VertexAttrib4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI1iv(uint, int*)"/>
        public static unsafe void VertexAttribI1i(uint index, in int v)
        {
            fixed (int* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                VertexAttribI1iv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI1uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI1ui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI1uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI1uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI1ui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI1uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI1uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI1ui(uint index, in uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttribI1uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI2iv(uint, int*)"/>
        public static unsafe void VertexAttribI2i(uint index, in Vector2i v)
        {
            fixed (Vector2i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                VertexAttribI2iv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI2uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI2ui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI2uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI2uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI2ui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI2uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI2uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI2ui(uint index, in uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttribI2uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI3iv(uint, int*)"/>
        public static unsafe void VertexAttribI3i(uint index, in Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                VertexAttribI3iv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI3uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI3ui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI3uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI3uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI3ui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI3uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI3uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI3ui(uint index, in uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttribI3uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttribI4(uint index, ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttribI4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttribI4(uint index, sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttribI4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttribI4(uint index, in sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                VertexAttribI4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4iv(uint, int*)"/>
        public static unsafe void VertexAttribI4i(uint index, in Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                VertexAttribI4iv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4sv(uint, short*)"/>
        public static unsafe void VertexAttribI4(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttribI4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4sv(uint, short*)"/>
        public static unsafe void VertexAttribI4(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttribI4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4sv(uint, short*)"/>
        public static unsafe void VertexAttribI4(uint index, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttribI4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4ubv(uint, byte*)"/>
        public static unsafe void VertexAttribI4(uint index, ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttribI4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4ubv(uint, byte*)"/>
        public static unsafe void VertexAttribI4(uint index, byte[] v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttribI4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4ubv(uint, byte*)"/>
        public static unsafe void VertexAttribI4(uint index, in byte v)
        {
            fixed (byte* v_ptr = &v)
            {
                VertexAttribI4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI4ui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI4ui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI4ui(uint index, in uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttribI4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4usv(uint, ushort*)"/>
        public static unsafe void VertexAttribI4(uint index, ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttribI4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4usv(uint, ushort*)"/>
        public static unsafe void VertexAttribI4(uint index, ushort[] v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttribI4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4usv(uint, ushort*)"/>
        public static unsafe void VertexAttribI4(uint index, in ushort v)
        {
            fixed (ushort* v_ptr = &v)
            {
                VertexAttribI4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribIPointer(uint, int, VertexAttribIType, int, void*)"/>
        public static unsafe void VertexAttribIPointer(uint index, int size, VertexAttribIType type, int stride, nint offset)
        {
            void* pointer = (void*)offset;
            VertexAttribIPointer(index, size, type, stride, pointer);
        }
        /// <inheritdoc cref="VertexAttribL1dv(uint, double*)"/>
        public static unsafe void VertexAttribL1d(uint index, in double v)
        {
            fixed (double* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttribL1dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribL2dv(uint, double*)"/>
        public static unsafe void VertexAttribL2d(uint index, in Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttribL2dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribL3dv(uint, double*)"/>
        public static unsafe void VertexAttribL3d(uint index, in Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttribL3dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribL4dv(uint, double*)"/>
        public static unsafe void VertexAttribL4d(uint index, in Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttribL4dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribLPointer(uint, int, VertexAttribLType, int, void*)"/>
        public static unsafe void VertexAttribLPointer(uint index, int size, VertexAttribLType type, int stride, nint offset)
        {
            void* pointer = (void*)offset;
            VertexAttribLPointer(index, size, type, stride, pointer);
        }
        /// <inheritdoc cref="VertexAttribP1uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP1uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP1uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP1uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP1uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexAttribP1uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP2uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP2uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP2uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP2uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP2uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexAttribP2uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP3uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP3uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP3uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP3uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP3uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexAttribP3uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP4uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP4uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP4uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP4uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP4uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexAttribP4uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribPointer(uint, int, VertexAttribPointerType, bool, int, void*)"/>
        public static unsafe void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, nint offset)
        {
            void* pointer = (void*)offset;
            VertexAttribPointer(index, size, type, normalized, stride, pointer);
        }
        /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
        public static unsafe void ViewportArray(uint first, int count, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v)
            {
                ViewportArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
        public static unsafe void ViewportArray(uint first, int count, float[] v)
        {
            fixed (float* v_ptr = v)
            {
                ViewportArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
        public static unsafe void ViewportArray(uint first, int count, in float v)
        {
            fixed (float* v_ptr = &v)
            {
                ViewportArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
        public static unsafe void ViewportIndexedf(uint index, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v)
            {
                ViewportIndexedfv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
        public static unsafe void ViewportIndexedf(uint index, float[] v)
        {
            fixed (float* v_ptr = v)
            {
                ViewportIndexedfv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
        public static unsafe void ViewportIndexedf(uint index, in float v)
        {
            fixed (float* v_ptr = &v)
            {
                ViewportIndexedfv(index, v_ptr);
            }
        }
        public static unsafe partial class _3DFX
        {
        }
        public static unsafe partial class AMD
        {
            /// <inheritdoc cref="DebugMessageCallbackAMD(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackAMD(GLDebugProcAMD callback, IntPtr userParam)
            {
                void* userParam_vptr = (void*)userParam;
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallbackAMD(callback_ptr, userParam_vptr);
            }
            /// <inheritdoc cref="DebugMessageCallbackAMD(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackAMD<T1>(GLDebugProcAMD callback, ref T1 userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = &userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallbackAMD(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageEnableAMD(All, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageEnableAMD(All category, DebugSeverity severity, ReadOnlySpan<uint> ids, bool enabled)
            {
                int count = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageEnableAMD(category, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageEnableAMD(All, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageEnableAMD(All category, DebugSeverity severity, uint[] ids, bool enabled)
            {
                int count = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageEnableAMD(category, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageEnableAMD(All, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageEnableAMD(All category, DebugSeverity severity, int count, in uint ids, bool enabled)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    DebugMessageEnableAMD(category, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageInsertAMD(All, DebugSeverity, uint, int, byte*)"/>
            public static unsafe void DebugMessageInsertAMD(All category, DebugSeverity severity, uint id, int length, string buf)
            {
                byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
                DebugMessageInsertAMD(category, severity, id, length, buf_ptr);
                Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
            }
            /// <inheritdoc cref="DeleteNamesAMD(All, uint, uint*)"/>
            public static unsafe void DeleteNamesAMD(All identifier, ReadOnlySpan<uint> names)
            {
                uint num = (uint)(names.Length);
                fixed (uint* names_ptr = names)
                {
                    DeleteNamesAMD(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="DeleteNamesAMD(All, uint, uint*)"/>
            public static unsafe void DeleteNamesAMD(All identifier, uint[] names)
            {
                uint num = (uint)(names.Length);
                fixed (uint* names_ptr = names)
                {
                    DeleteNamesAMD(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="DeleteNamesAMD(All, uint, uint*)"/>
            public static unsafe void DeleteNamesAMD(All identifier, uint num, in uint names)
            {
                fixed (uint* names_ptr = &names)
                {
                    DeleteNamesAMD(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="DeletePerfMonitorsAMD(int, uint*)"/>
            public static unsafe void DeletePerfMonitorsAMD(Span<uint> monitors)
            {
                int n = (int)(monitors.Length);
                fixed (uint* monitors_ptr = monitors)
                {
                    DeletePerfMonitorsAMD(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="DeletePerfMonitorsAMD(int, uint*)"/>
            public static unsafe void DeletePerfMonitorsAMD(uint[] monitors)
            {
                int n = (int)(monitors.Length);
                fixed (uint* monitors_ptr = monitors)
                {
                    DeletePerfMonitorsAMD(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="DeletePerfMonitorsAMD(int, uint*)"/>
            public static unsafe void DeletePerfMonitorsAMD(int n, ref uint monitors)
            {
                fixed (uint* monitors_ptr = &monitors)
                {
                    DeletePerfMonitorsAMD(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferSamplePositionsfvAMD(FramebufferTarget, uint, uint, float*)"/>
            public static unsafe void FramebufferSamplePositionsfvAMD(FramebufferTarget target, uint numsamples, uint pixelindex, in float values)
            {
                fixed (float* values_ptr = &values)
                {
                    FramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values_ptr);
                }
            }
            /// <inheritdoc cref="GenNamesAMD(All, uint, uint*)"/>
            public static unsafe void GenNamesAMD(All identifier, Span<uint> names)
            {
                uint num = (uint)(names.Length);
                fixed (uint* names_ptr = names)
                {
                    GenNamesAMD(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="GenNamesAMD(All, uint, uint*)"/>
            public static unsafe void GenNamesAMD(All identifier, uint[] names)
            {
                uint num = (uint)(names.Length);
                fixed (uint* names_ptr = names)
                {
                    GenNamesAMD(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="GenNamesAMD(All, uint, uint*)"/>
            public static unsafe void GenNamesAMD(All identifier, uint num, ref uint names)
            {
                fixed (uint* names_ptr = &names)
                {
                    GenNamesAMD(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="GenPerfMonitorsAMD(int, uint*)"/>
            public static unsafe void GenPerfMonitorsAMD(Span<uint> monitors)
            {
                int n = (int)(monitors.Length);
                fixed (uint* monitors_ptr = monitors)
                {
                    GenPerfMonitorsAMD(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="GenPerfMonitorsAMD(int, uint*)"/>
            public static unsafe void GenPerfMonitorsAMD(uint[] monitors)
            {
                int n = (int)(monitors.Length);
                fixed (uint* monitors_ptr = monitors)
                {
                    GenPerfMonitorsAMD(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="GenPerfMonitorsAMD(int, uint*)"/>
            public static unsafe void GenPerfMonitorsAMD(int n, ref uint monitors)
            {
                fixed (uint* monitors_ptr = &monitors)
                {
                    GenPerfMonitorsAMD(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="GetDebugMessageLogAMD(uint, int, All*, DebugSeverity*, uint*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogAMD(uint count, int bufSize, Span<All> categories, Span<DebugSeverity> severities, Span<uint> ids, Span<int> lengths, out string message)
            {
                uint returnValue;
                fixed (All* categories_ptr = categories)
                {
                    fixed (DebugSeverity* severities_ptr = severities)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (int* lengths_ptr = lengths)
                            {
                                var message_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = GetDebugMessageLogAMD(count, bufSize, categories_ptr, severities_ptr, ids_ptr, lengths_ptr, message_ptr);
                                message = Marshal.PtrToStringUTF8((IntPtr)message_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)message_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogAMD(uint, int, All*, DebugSeverity*, uint*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogAMD(uint count, int bufSize, All[] categories, DebugSeverity[] severities, uint[] ids, int[] lengths, out string message)
            {
                uint returnValue;
                fixed (All* categories_ptr = categories)
                {
                    fixed (DebugSeverity* severities_ptr = severities)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (int* lengths_ptr = lengths)
                            {
                                var message_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = GetDebugMessageLogAMD(count, bufSize, categories_ptr, severities_ptr, ids_ptr, lengths_ptr, message_ptr);
                                message = Marshal.PtrToStringUTF8((IntPtr)message_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)message_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogAMD(uint, int, All*, DebugSeverity*, uint*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogAMD(uint count, int bufSize, ref All categories, ref DebugSeverity severities, ref uint ids, ref int lengths, out string message)
            {
                uint returnValue;
                fixed (All* categories_ptr = &categories)
                fixed (DebugSeverity* severities_ptr = &severities)
                fixed (uint* ids_ptr = &ids)
                fixed (int* lengths_ptr = &lengths)
                {
                    var message_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    returnValue = GetDebugMessageLogAMD(count, bufSize, categories_ptr, severities_ptr, ids_ptr, lengths_ptr, message_ptr);
                    message = Marshal.PtrToStringUTF8((IntPtr)message_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)message_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetFramebufferParameterfvAMD(FramebufferTarget, FramebufferAttachmentParameterName, uint, uint, int, float*)"/>
            public static unsafe void GetFramebufferParameterfvAMD(FramebufferTarget target, FramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, ref float values)
            {
                fixed (float* values_ptr = &values)
                {
                    GetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameterfvAMD(FramebufferTarget, FramebufferAttachmentParameterName, uint, uint, int, float*)"/>
            public static unsafe float GetFramebufferParameterfvAMD(FramebufferTarget target, FramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size)
            {
                float values_val;
                float* values = &values_val;
                GetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values);
                return values_val;
            }
            /// <inheritdoc cref="GetNamedFramebufferParameterfvAMD(int, All, uint, uint, int, float*)"/>
            public static unsafe void GetNamedFramebufferParameterfvAMD(int framebuffer, All pname, uint numsamples, uint pixelindex, int size, ref float values)
            {
                fixed (float* values_ptr = &values)
                {
                    GetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameterfvAMD(int, All, uint, uint, int, float*)"/>
            public static unsafe float GetNamedFramebufferParameterfvAMD(int framebuffer, All pname, uint numsamples, uint pixelindex, int size)
            {
                float values_val;
                float* values = &values_val;
                GetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values);
                return values_val;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterDataAMD(uint, All, int, uint*, int*)"/>
            public static unsafe void GetPerfMonitorCounterDataAMD(uint monitor, All pname, Span<uint> data, Span<int> bytesWritten)
            {
                int dataSize = (int)(data.Length * 4);
                fixed (uint* data_ptr = data)
                {
                    fixed (int* bytesWritten_ptr = bytesWritten)
                    {
                        GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterDataAMD(uint, All, int, uint*, int*)"/>
            public static unsafe void GetPerfMonitorCounterDataAMD(uint monitor, All pname, uint[] data, int[] bytesWritten)
            {
                int dataSize = (int)(data.Length * 4);
                fixed (uint* data_ptr = data)
                {
                    fixed (int* bytesWritten_ptr = bytesWritten)
                    {
                        GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterDataAMD(uint, All, int, uint*, int*)"/>
            public static unsafe void GetPerfMonitorCounterDataAMD(uint monitor, All pname, int dataSize, ref uint data, ref int bytesWritten)
            {
                fixed (uint* data_ptr = &data)
                fixed (int* bytesWritten_ptr = &bytesWritten)
                {
                    GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterDataAMD(uint, All, int, uint*, int*)"/>
            public static unsafe int GetPerfMonitorCounterDataAMD(uint monitor, All pname, Span<uint> data)
            {
                int bytesWritten_val;
                int dataSize = (int)(data.Length * 4);
                fixed (uint* data_ptr = data)
                {
                    int* bytesWritten = &bytesWritten_val;
                    GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten);
                }
                return bytesWritten_val;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterDataAMD(uint, All, int, uint*, int*)"/>
            public static unsafe int GetPerfMonitorCounterDataAMD(uint monitor, All pname, uint[] data)
            {
                int bytesWritten_val;
                int dataSize = (int)(data.Length * 4);
                fixed (uint* data_ptr = data)
                {
                    int* bytesWritten = &bytesWritten_val;
                    GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten);
                }
                return bytesWritten_val;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterDataAMD(uint, All, int, uint*, int*)"/>
            public static unsafe int GetPerfMonitorCounterDataAMD(uint monitor, All pname, int dataSize, ref uint data)
            {
                int bytesWritten_val;
                fixed (uint* data_ptr = &data)
                {
                    int* bytesWritten = &bytesWritten_val;
                    GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten);
                }
                return bytesWritten_val;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterInfoAMD(uint, uint, All, void*)"/>
            public static unsafe void GetPerfMonitorCounterInfoAMD(uint group, uint counter, All pname, IntPtr data)
            {
                void* data_vptr = (void*)data;
                GetPerfMonitorCounterInfoAMD(group, counter, pname, data_vptr);
            }
            /// <inheritdoc cref="GetPerfMonitorCounterInfoAMD(uint, uint, All, void*)"/>
            public static unsafe void GetPerfMonitorCounterInfoAMD<T1>(uint group, uint counter, All pname, Span<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetPerfMonitorCounterInfoAMD(group, counter, pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterInfoAMD(uint, uint, All, void*)"/>
            public static unsafe void GetPerfMonitorCounterInfoAMD<T1>(uint group, uint counter, All pname, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetPerfMonitorCounterInfoAMD(group, counter, pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterInfoAMD(uint, uint, All, void*)"/>
            public static unsafe void GetPerfMonitorCounterInfoAMD<T1>(uint group, uint counter, All pname, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    GetPerfMonitorCounterInfoAMD(group, counter, pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCountersAMD(uint, int*, int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorCountersAMD(uint group, Span<int> numCounters, Span<int> maxActiveCounters, Span<uint> counters)
            {
                fixed (int* numCounters_ptr = numCounters)
                {
                    fixed (int* maxActiveCounters_ptr = maxActiveCounters)
                    {
                        int counterSize = (int)(counters.Length);
                        fixed (uint* counters_ptr = counters)
                        {
                            GetPerfMonitorCountersAMD(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCountersAMD(uint, int*, int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorCountersAMD(uint group, int[] numCounters, int[] maxActiveCounters, uint[] counters)
            {
                fixed (int* numCounters_ptr = numCounters)
                {
                    fixed (int* maxActiveCounters_ptr = maxActiveCounters)
                    {
                        int counterSize = (int)(counters.Length);
                        fixed (uint* counters_ptr = counters)
                        {
                            GetPerfMonitorCountersAMD(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCountersAMD(uint, int*, int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorCountersAMD(uint group, ref int numCounters, ref int maxActiveCounters, int counterSize, ref uint counters)
            {
                fixed (int* numCounters_ptr = &numCounters)
                fixed (int* maxActiveCounters_ptr = &maxActiveCounters)
                fixed (uint* counters_ptr = &counters)
                {
                    GetPerfMonitorCountersAMD(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCountersAMD(uint, int*, int*, int, uint*)"/>
            public static unsafe uint GetPerfMonitorCountersAMD(uint group, Span<int> numCounters, Span<int> maxActiveCounters, int counterSize)
            {
                uint counters_val;
                fixed (int* numCounters_ptr = numCounters)
                {
                    fixed (int* maxActiveCounters_ptr = maxActiveCounters)
                    {
                        uint* counters = &counters_val;
                        GetPerfMonitorCountersAMD(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters);
                    }
                }
                return counters_val;
            }
            /// <inheritdoc cref="GetPerfMonitorCountersAMD(uint, int*, int*, int, uint*)"/>
            public static unsafe uint GetPerfMonitorCountersAMD(uint group, int[] numCounters, int[] maxActiveCounters, int counterSize)
            {
                uint counters_val;
                fixed (int* numCounters_ptr = numCounters)
                {
                    fixed (int* maxActiveCounters_ptr = maxActiveCounters)
                    {
                        uint* counters = &counters_val;
                        GetPerfMonitorCountersAMD(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters);
                    }
                }
                return counters_val;
            }
            /// <inheritdoc cref="GetPerfMonitorCountersAMD(uint, int*, int*, int, uint*)"/>
            public static unsafe uint GetPerfMonitorCountersAMD(uint group, ref int numCounters, ref int maxActiveCounters, int counterSize)
            {
                uint counters_val;
                fixed (int* numCounters_ptr = &numCounters)
                fixed (int* maxActiveCounters_ptr = &maxActiveCounters)
                {
                    uint* counters = &counters_val;
                    GetPerfMonitorCountersAMD(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters);
                }
                return counters_val;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterStringAMD(uint, uint, int, int*, byte*)"/>
            public static unsafe string GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, Span<int> length)
            {
                string counterString;
                fixed (int* length_ptr = length)
                {
                    var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                    counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
                }
                return counterString;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterStringAMD(uint, uint, int, int*, byte*)"/>
            public static unsafe void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, Span<int> length, out string counterString)
            {
                fixed (int* length_ptr = length)
                {
                    var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                    counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterStringAMD(uint, uint, int, int*, byte*)"/>
            public static unsafe string GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, int[] length)
            {
                string counterString;
                fixed (int* length_ptr = length)
                {
                    var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                    counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
                }
                return counterString;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterStringAMD(uint, uint, int, int*, byte*)"/>
            public static unsafe void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, int[] length, out string counterString)
            {
                fixed (int* length_ptr = length)
                {
                    var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                    counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterStringAMD(uint, uint, int, int*, byte*)"/>
            public static unsafe string GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, ref int length)
            {
                string counterString;
                fixed (int* length_ptr = &length)
                {
                    var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                    counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
                }
                return counterString;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterStringAMD(uint, uint, int, int*, byte*)"/>
            public static unsafe void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, ref int length, out string counterString)
            {
                fixed (int* length_ptr = &length)
                {
                    var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                    counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroupsAMD(int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorGroupsAMD(Span<int> numGroups, Span<uint> groups)
            {
                fixed (int* numGroups_ptr = numGroups)
                {
                    int groupsSize = (int)(groups.Length);
                    fixed (uint* groups_ptr = groups)
                    {
                        GetPerfMonitorGroupsAMD(numGroups_ptr, groupsSize, groups_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroupsAMD(int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorGroupsAMD(int[] numGroups, uint[] groups)
            {
                fixed (int* numGroups_ptr = numGroups)
                {
                    int groupsSize = (int)(groups.Length);
                    fixed (uint* groups_ptr = groups)
                    {
                        GetPerfMonitorGroupsAMD(numGroups_ptr, groupsSize, groups_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroupsAMD(int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorGroupsAMD(ref int numGroups, int groupsSize, ref uint groups)
            {
                fixed (int* numGroups_ptr = &numGroups)
                fixed (uint* groups_ptr = &groups)
                {
                    GetPerfMonitorGroupsAMD(numGroups_ptr, groupsSize, groups_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroupsAMD(int*, int, uint*)"/>
            public static unsafe uint GetPerfMonitorGroupsAMD(Span<int> numGroups, int groupsSize)
            {
                uint groups_val;
                fixed (int* numGroups_ptr = numGroups)
                {
                    uint* groups = &groups_val;
                    GetPerfMonitorGroupsAMD(numGroups_ptr, groupsSize, groups);
                }
                return groups_val;
            }
            /// <inheritdoc cref="GetPerfMonitorGroupsAMD(int*, int, uint*)"/>
            public static unsafe uint GetPerfMonitorGroupsAMD(int[] numGroups, int groupsSize)
            {
                uint groups_val;
                fixed (int* numGroups_ptr = numGroups)
                {
                    uint* groups = &groups_val;
                    GetPerfMonitorGroupsAMD(numGroups_ptr, groupsSize, groups);
                }
                return groups_val;
            }
            /// <inheritdoc cref="GetPerfMonitorGroupsAMD(int*, int, uint*)"/>
            public static unsafe uint GetPerfMonitorGroupsAMD(ref int numGroups, int groupsSize)
            {
                uint groups_val;
                fixed (int* numGroups_ptr = &numGroups)
                {
                    uint* groups = &groups_val;
                    GetPerfMonitorGroupsAMD(numGroups_ptr, groupsSize, groups);
                }
                return groups_val;
            }
            /// <inheritdoc cref="GetPerfMonitorGroupStringAMD(uint, int, int*, byte*)"/>
            public static unsafe string GetPerfMonitorGroupStringAMD(uint group, int bufSize, Span<int> length)
            {
                string groupString;
                fixed (int* length_ptr = length)
                {
                    var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                    groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
                }
                return groupString;
            }
            /// <inheritdoc cref="GetPerfMonitorGroupStringAMD(uint, int, int*, byte*)"/>
            public static unsafe void GetPerfMonitorGroupStringAMD(uint group, int bufSize, Span<int> length, out string groupString)
            {
                fixed (int* length_ptr = length)
                {
                    var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                    groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroupStringAMD(uint, int, int*, byte*)"/>
            public static unsafe string GetPerfMonitorGroupStringAMD(uint group, int bufSize, int[] length)
            {
                string groupString;
                fixed (int* length_ptr = length)
                {
                    var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                    groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
                }
                return groupString;
            }
            /// <inheritdoc cref="GetPerfMonitorGroupStringAMD(uint, int, int*, byte*)"/>
            public static unsafe void GetPerfMonitorGroupStringAMD(uint group, int bufSize, int[] length, out string groupString)
            {
                fixed (int* length_ptr = length)
                {
                    var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                    groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroupStringAMD(uint, int, int*, byte*)"/>
            public static unsafe string GetPerfMonitorGroupStringAMD(uint group, int bufSize, ref int length)
            {
                string groupString;
                fixed (int* length_ptr = &length)
                {
                    var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                    groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
                }
                return groupString;
            }
            /// <inheritdoc cref="GetPerfMonitorGroupStringAMD(uint, int, int*, byte*)"/>
            public static unsafe void GetPerfMonitorGroupStringAMD(uint group, int bufSize, ref int length, out string groupString)
            {
                fixed (int* length_ptr = &length)
                {
                    var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                    groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe void GetUniformi64vNV(int program, int location, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe void GetUniformi64vNV(int program, int location, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe void GetUniformi64vNV(int program, int location, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe long GetUniformi64vNV(int program, int location)
            {
                long parameters_val;
                long* parameters = &parameters_val;
                GetUniformi64vNV(program, location, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vNV(int program, int location, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vNV(int program, int location, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vNV(int program, int location, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe ulong GetUniformui64vNV(int program, int location)
            {
                ulong parameters_val;
                ulong* parameters = &parameters_val;
                GetUniformui64vNV(program, location, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectAMD(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectAMD(PrimitiveType mode, IntPtr indirect, int primcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawArraysIndirectAMD(mode, indirect_vptr, primcount, stride);
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectAMD(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectAMD<T1>(PrimitiveType mode, ReadOnlySpan<T1> indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirectAMD(mode, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectAMD(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectAMD<T1>(PrimitiveType mode, T1[] indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirectAMD(mode, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectAMD(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectAMD<T1>(PrimitiveType mode, in T1 indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawArraysIndirectAMD(mode, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectAMD(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectAMD(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int primcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawElementsIndirectAMD(mode, type, indirect_vptr, primcount, stride);
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectAMD(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectAMD<T1>(PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirectAMD(mode, type, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectAMD(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectAMD<T1>(PrimitiveType mode, DrawElementsType type, T1[] indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirectAMD(mode, type, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectAMD(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectAMD<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawElementsIndirectAMD(mode, type, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="NamedFramebufferSamplePositionsfvAMD(int, uint, uint, float*)"/>
            public static unsafe void NamedFramebufferSamplePositionsfvAMD(int framebuffer, uint numsamples, uint pixelindex, in float values)
            {
                fixed (float* values_ptr = &values)
                {
                    NamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform1i64vNV(int program, int location, int count, in long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform1i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform1ui64vNV(int program, int location, int count, in ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform1ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="SelectPerfMonitorCountersAMD(uint, bool, uint, int, uint*)"/>
            public static unsafe void SelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, Span<uint> counterList)
            {
                int numCounters = (int)(counterList.Length);
                fixed (uint* counterList_ptr = counterList)
                {
                    SelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList_ptr);
                }
            }
            /// <inheritdoc cref="SelectPerfMonitorCountersAMD(uint, bool, uint, int, uint*)"/>
            public static unsafe void SelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, uint[] counterList)
            {
                int numCounters = (int)(counterList.Length);
                fixed (uint* counterList_ptr = counterList)
                {
                    SelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList_ptr);
                }
            }
            /// <inheritdoc cref="SelectPerfMonitorCountersAMD(uint, bool, uint, int, uint*)"/>
            public static unsafe void SelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, int numCounters, ref uint counterList)
            {
                fixed (uint* counterList_ptr = &counterList)
                {
                    SelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList_ptr);
                }
            }
            /// <inheritdoc cref="SetMultisamplefvAMD(All, uint, float*)"/>
            public static unsafe void SetMultisamplefvAMD(All pname, uint index, ReadOnlySpan<float> val)
            {
                fixed (float* val_ptr = val)
                {
                    SetMultisamplefvAMD(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="SetMultisamplefvAMD(All, uint, float*)"/>
            public static unsafe void SetMultisamplefvAMD(All pname, uint index, float[] val)
            {
                fixed (float* val_ptr = val)
                {
                    SetMultisamplefvAMD(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="SetMultisamplefvAMD(All, uint, float*)"/>
            public static unsafe void SetMultisamplefvAMD(All pname, uint index, in float val)
            {
                fixed (float* val_ptr = &val)
                {
                    SetMultisamplefvAMD(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vNV(int, int, long*)"/>
            public static unsafe void Uniform1i64vNV(int location, int count, in long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vNV(int, int, long*)"/>
            public static unsafe void Uniform1i64vNV(int location, int count, ReadOnlySpan<long> value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vNV(int, int, long*)"/>
            public static unsafe void Uniform1i64vNV(int location, int count, long[] value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vNV(int location, int count, in ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vNV(int location, int count, ReadOnlySpan<ulong> value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vNV(int location, int count, ulong[] value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
        }
        public static unsafe partial class APPLE
        {
            /// <inheritdoc cref="DeleteFencesAPPLE(int, uint*)"/>
            public static unsafe void DeleteFencesAPPLE(ReadOnlySpan<uint> fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    DeleteFencesAPPLE(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFencesAPPLE(int, uint*)"/>
            public static unsafe void DeleteFencesAPPLE(uint[] fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    DeleteFencesAPPLE(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFencesAPPLE(int, uint*)"/>
            public static unsafe void DeleteFencesAPPLE(int n, in uint fences)
            {
                fixed (uint* fences_ptr = &fences)
                {
                    DeleteFencesAPPLE(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArraysAPPLE(int, int*)"/>
            public static unsafe void DeleteVertexArraysAPPLE(ReadOnlySpan<int> arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    DeleteVertexArraysAPPLE(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArraysAPPLE(int, int*)"/>
            public static unsafe void DeleteVertexArraysAPPLE(int[] arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    DeleteVertexArraysAPPLE(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArraysAPPLE(int, int*)"/>
            public static unsafe void DeleteVertexArraysAPPLE(int n, in int arrays)
            {
                fixed (int* arrays_ptr = &arrays)
                {
                    DeleteVertexArraysAPPLE(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointerAPPLE(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerAPPLE(ElementPointerTypeATI type, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                ElementPointerAPPLE(type, pointer_vptr);
            }
            /// <inheritdoc cref="ElementPointerAPPLE(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerAPPLE<T1>(ElementPointerTypeATI type, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ElementPointerAPPLE(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointerAPPLE(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerAPPLE<T1>(ElementPointerTypeATI type, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ElementPointerAPPLE(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointerAPPLE(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerAPPLE<T1>(ElementPointerTypeATI type, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    ElementPointerAPPLE(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FlushVertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void FlushVertexArrayRangeAPPLE(int length, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                FlushVertexArrayRangeAPPLE(length, pointer_vptr);
            }
            /// <inheritdoc cref="FlushVertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void FlushVertexArrayRangeAPPLE<T1>(Span<T1> pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    FlushVertexArrayRangeAPPLE(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FlushVertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void FlushVertexArrayRangeAPPLE<T1>(T1[] pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    FlushVertexArrayRangeAPPLE(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FlushVertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void FlushVertexArrayRangeAPPLE<T1>(int length, ref T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    FlushVertexArrayRangeAPPLE(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="GenFencesAPPLE(int, uint*)"/>
            public static unsafe void GenFencesAPPLE(Span<uint> fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    GenFencesAPPLE(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenFencesAPPLE(int, uint*)"/>
            public static unsafe void GenFencesAPPLE(uint[] fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    GenFencesAPPLE(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenFencesAPPLE(int, uint*)"/>
            public static unsafe void GenFencesAPPLE(int n, ref uint fences)
            {
                fixed (uint* fences_ptr = &fences)
                {
                    GenFencesAPPLE(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArraysAPPLE(int, int*)"/>
            public static unsafe void GenVertexArraysAPPLE(Span<int> arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    GenVertexArraysAPPLE(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArraysAPPLE(int, int*)"/>
            public static unsafe void GenVertexArraysAPPLE(int[] arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    GenVertexArraysAPPLE(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArraysAPPLE(int, int*)"/>
            public static unsafe void GenVertexArraysAPPLE(int n, ref int arrays)
            {
                fixed (int* arrays_ptr = &arrays)
                {
                    GenVertexArraysAPPLE(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterivAPPLE(All, uint, All, int*)"/>
            public static unsafe void GetObjectParameterivAPPLE(All objectType, uint name, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectParameterivAPPLE(objectType, name, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterivAPPLE(All, uint, All, int*)"/>
            public static unsafe void GetObjectParameterivAPPLE(All objectType, uint name, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectParameterivAPPLE(objectType, name, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterivAPPLE(All, uint, All, int*)"/>
            public static unsafe void GetObjectParameterivAPPLE(All objectType, uint name, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetObjectParameterivAPPLE(objectType, name, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterivAPPLE(All, uint, All, int*)"/>
            public static unsafe int GetObjectParameterivAPPLE(All objectType, uint name, All pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetObjectParameterivAPPLE(objectType, name, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTexParameterPointervAPPLE(All, All, void**)"/>
            public static unsafe void GetTexParameterPointervAPPLE(All target, All pname, void** parameters)
            {
                GetTexParameterPointervAPPLE_(target, pname, parameters);
            }
            /// <inheritdoc cref="GetTexParameterPointervAPPLE(All, All, void**)"/>
            public static unsafe void* GetTexParameterPointervAPPLE(All target, All pname)
            {
                void* parameters_val;
                void** parameters = &parameters_val;
                GetTexParameterPointervAPPLE_(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="MapVertexAttrib1dAPPLE(uint, uint, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, ReadOnlySpan<double> points)
            {
                fixed (double* points_ptr = points)
                {
                    MapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1dAPPLE(uint, uint, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, double[] points)
            {
                fixed (double* points_ptr = points)
                {
                    MapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1dAPPLE(uint, uint, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, in double points)
            {
                fixed (double* points_ptr = &points)
                {
                    MapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1fAPPLE(uint, uint, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, ReadOnlySpan<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    MapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1fAPPLE(uint, uint, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    MapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1fAPPLE(uint, uint, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, in float points)
            {
                fixed (float* points_ptr = &points)
                {
                    MapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2dAPPLE(uint, uint, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ReadOnlySpan<double> points)
            {
                fixed (double* points_ptr = points)
                {
                    MapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2dAPPLE(uint, uint, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points)
            {
                fixed (double* points_ptr = points)
                {
                    MapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2dAPPLE(uint, uint, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, in double points)
            {
                fixed (double* points_ptr = &points)
                {
                    MapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2fAPPLE(uint, uint, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ReadOnlySpan<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    MapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2fAPPLE(uint, uint, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    MapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2fAPPLE(uint, uint, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, in float points)
            {
                fixed (float* points_ptr = &points)
                {
                    MapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawElementArrayAPPLE(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawElementArrayAPPLE(PrimitiveType mode, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int primcount)
            {
                fixed (int* first_ptr = first)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiDrawElementArrayAPPLE(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawElementArrayAPPLE(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawElementArrayAPPLE(PrimitiveType mode, int[] first, int[] count, int primcount)
            {
                fixed (int* first_ptr = first)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiDrawElementArrayAPPLE(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawElementArrayAPPLE(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawElementArrayAPPLE(PrimitiveType mode, in int first, in int count, int primcount)
            {
                fixed (int* first_ptr = &first)
                fixed (int* count_ptr = &count)
                {
                    MultiDrawElementArrayAPPLE(mode, first_ptr, count_ptr, primcount);
                }
            }
            /// <inheritdoc cref="MultiDrawRangeElementArrayAPPLE(PrimitiveType, uint, uint, int*, int*, int)"/>
            public static unsafe void MultiDrawRangeElementArrayAPPLE(PrimitiveType mode, uint start, uint end, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int primcount)
            {
                fixed (int* first_ptr = first)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiDrawRangeElementArrayAPPLE(mode, start, end, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawRangeElementArrayAPPLE(PrimitiveType, uint, uint, int*, int*, int)"/>
            public static unsafe void MultiDrawRangeElementArrayAPPLE(PrimitiveType mode, uint start, uint end, int[] first, int[] count, int primcount)
            {
                fixed (int* first_ptr = first)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiDrawRangeElementArrayAPPLE(mode, start, end, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawRangeElementArrayAPPLE(PrimitiveType, uint, uint, int*, int*, int)"/>
            public static unsafe void MultiDrawRangeElementArrayAPPLE(PrimitiveType mode, uint start, uint end, in int first, in int count, int primcount)
            {
                fixed (int* first_ptr = &first)
                fixed (int* count_ptr = &count)
                {
                    MultiDrawRangeElementArrayAPPLE(mode, start, end, first_ptr, count_ptr, primcount);
                }
            }
            /// <inheritdoc cref="TextureRangeAPPLE(All, int, void*)"/>
            public static unsafe void TextureRangeAPPLE(All target, int length, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                TextureRangeAPPLE(target, length, pointer_vptr);
            }
            /// <inheritdoc cref="TextureRangeAPPLE(All, int, void*)"/>
            public static unsafe void TextureRangeAPPLE<T1>(All target, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    TextureRangeAPPLE(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TextureRangeAPPLE(All, int, void*)"/>
            public static unsafe void TextureRangeAPPLE<T1>(All target, T1[] pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    TextureRangeAPPLE(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TextureRangeAPPLE(All, int, void*)"/>
            public static unsafe void TextureRangeAPPLE<T1>(All target, int length, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    TextureRangeAPPLE(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void VertexArrayRangeAPPLE(int length, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexArrayRangeAPPLE(length, pointer_vptr);
            }
            /// <inheritdoc cref="VertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void VertexArrayRangeAPPLE<T1>(Span<T1> pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    VertexArrayRangeAPPLE(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void VertexArrayRangeAPPLE<T1>(T1[] pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    VertexArrayRangeAPPLE(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void VertexArrayRangeAPPLE<T1>(int length, ref T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexArrayRangeAPPLE(length, pointer_ptr);
                }
            }
        }
        public static unsafe partial class ARB
        {
            /// <inheritdoc cref="BindAttribLocationARB(GLHandleARB, uint, byte*)"/>
            public static unsafe void BindAttribLocationARB(GLHandleARB programObj, uint index, string name)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                BindAttribLocationARB(programObj, index, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="BindBuffersBase(BufferTargetARB, uint, int, int*)"/>
            public static unsafe void BindBuffersBase(BufferTargetARB target, uint first, ReadOnlySpan<int> buffers)
            {
                int count = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    BindBuffersBase(target, first, count, buffers_ptr);
                }
            }
            /// <inheritdoc cref="BindBuffersBase(BufferTargetARB, uint, int, int*)"/>
            public static unsafe void BindBuffersBase(BufferTargetARB target, uint first, int[] buffers)
            {
                int count = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    BindBuffersBase(target, first, count, buffers_ptr);
                }
            }
            /// <inheritdoc cref="BindBuffersBase(BufferTargetARB, uint, int, int*)"/>
            public static unsafe void BindBuffersBase(BufferTargetARB target, uint first, int count, in int buffers)
            {
                fixed (int* buffers_ptr = &buffers)
                {
                    BindBuffersBase(target, first, count, buffers_ptr);
                }
            }
            /// <inheritdoc cref="BindBuffersRange(BufferTargetARB, uint, int, int*, IntPtr*, nint*)"/>
            public static unsafe void BindBuffersRange(BufferTargetARB target, uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<nint> sizes)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (nint* sizes_ptr = sizes)
                        {
                            BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="BindBuffersRange(BufferTargetARB, uint, int, int*, IntPtr*, nint*)"/>
            public static unsafe void BindBuffersRange(BufferTargetARB target, uint first, int count, int[] buffers, IntPtr[] offsets, nint[] sizes)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (nint* sizes_ptr = sizes)
                        {
                            BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="BindBuffersRange(BufferTargetARB, uint, int, int*, IntPtr*, nint*)"/>
            public static unsafe void BindBuffersRange(BufferTargetARB target, uint first, int count, in int buffers, in IntPtr offsets, in nint sizes)
            {
                fixed (int* buffers_ptr = &buffers)
                fixed (IntPtr* offsets_ptr = &offsets)
                fixed (nint* sizes_ptr = &sizes)
                {
                    BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
                }
            }
            /// <inheritdoc cref="BindFragDataLocationIndexed(int, uint, uint, byte*)"/>
            public static unsafe void BindFragDataLocationIndexed(int program, uint colorNumber, uint index, string name)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                BindFragDataLocationIndexed(program, colorNumber, index, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
            public static unsafe void BindImageTextures(uint first, ReadOnlySpan<int> textures)
            {
                int count = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    BindImageTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
            public static unsafe void BindImageTextures(uint first, int[] textures)
            {
                int count = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    BindImageTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
            public static unsafe void BindImageTextures(uint first, int count, in int textures)
            {
                fixed (int* textures_ptr = &textures)
                {
                    BindImageTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
            public static unsafe void BindSamplers(uint first, ReadOnlySpan<int> samplers)
            {
                int count = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    BindSamplers(first, count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
            public static unsafe void BindSamplers(uint first, int[] samplers)
            {
                int count = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    BindSamplers(first, count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
            public static unsafe void BindSamplers(uint first, int count, in int samplers)
            {
                fixed (int* samplers_ptr = &samplers)
                {
                    BindSamplers(first, count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
            public static unsafe void BindTextures(uint first, ReadOnlySpan<int> textures)
            {
                int count = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    BindTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
            public static unsafe void BindTextures(uint first, int[] textures)
            {
                int count = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    BindTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
            public static unsafe void BindTextures(uint first, int count, in int textures)
            {
                fixed (int* textures_ptr = &textures)
                {
                    BindTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void BindVertexBuffers(uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<int> strides)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (int* strides_ptr = strides)
                        {
                            BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void BindVertexBuffers(uint first, int count, int[] buffers, IntPtr[] offsets, int[] strides)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (int* strides_ptr = strides)
                        {
                            BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void BindVertexBuffers(uint first, int count, in int buffers, in IntPtr offsets, in int strides)
            {
                fixed (int* buffers_ptr = &buffers)
                fixed (IntPtr* offsets_ptr = &offsets)
                fixed (int* strides_ptr = &strides)
                {
                    BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
                }
            }
            /// <inheritdoc cref="BufferDataARB(BufferTargetARB, nint, void*, BufferUsageARB)"/>
            public static unsafe void BufferDataARB(BufferTargetARB target, nint size, IntPtr data, BufferUsageARB usage)
            {
                void* data_vptr = (void*)data;
                BufferDataARB(target, size, data_vptr, usage);
            }
            /// <inheritdoc cref="BufferDataARB(BufferTargetARB, nint, void*, BufferUsageARB)"/>
            public static unsafe void BufferDataARB<T1>(BufferTargetARB target, ReadOnlySpan<T1> data, BufferUsageARB usage)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    BufferDataARB(target, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="BufferDataARB(BufferTargetARB, nint, void*, BufferUsageARB)"/>
            public static unsafe void BufferDataARB<T1>(BufferTargetARB target, T1[] data, BufferUsageARB usage)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    BufferDataARB(target, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="BufferDataARB(BufferTargetARB, nint, void*, BufferUsageARB)"/>
            public static unsafe void BufferDataARB<T1>(BufferTargetARB target, nint size, in T1 data, BufferUsageARB usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    BufferDataARB(target, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorage(BufferStorageTarget target, nint size, IntPtr data, BufferStorageMask flags)
            {
                void* data_vptr = (void*)data;
                BufferStorage(target, size, data_vptr, flags);
            }
            /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorage<T1>(BufferStorageTarget target, ReadOnlySpan<T1> data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    BufferStorage(target, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorage<T1>(BufferStorageTarget target, T1[] data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    BufferStorage(target, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorage<T1>(BufferStorageTarget target, nint size, in T1 data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    BufferStorage(target, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="BufferSubDataARB(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void BufferSubDataARB(BufferTargetARB target, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                BufferSubDataARB(target, offset, size, data_vptr);
            }
            /// <inheritdoc cref="BufferSubDataARB(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void BufferSubDataARB<T1>(BufferTargetARB target, IntPtr offset, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    BufferSubDataARB(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="BufferSubDataARB(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void BufferSubDataARB<T1>(BufferTargetARB target, IntPtr offset, T1[] data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    BufferSubDataARB(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="BufferSubDataARB(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void BufferSubDataARB<T1>(BufferTargetARB target, IntPtr offset, nint size, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    BufferSubDataARB(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearBufferData(target, internalformat, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearBufferData(target, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearBufferData(target, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearBufferData(target, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearBufferSubData(target, internalformat, offset, size, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferSubData<T1>(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferSubData<T1>(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferSubData<T1>(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearNamedBufferData(buffer, internalformat, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferfi(int, Buffer, int, float, int)"/>
            public static unsafe void ClearNamedFramebuffer(int framebuffer, Buffer buffer, int drawbuffer, float depth, int stencil)
            {
                ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
            }
            /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
            public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
            public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
            public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, in float value)
            {
                fixed (float* value_ptr = &value)
                {
                    ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
            public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<int> value)
            {
                fixed (int* value_ptr = value)
                {
                    ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
            public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, int[] value)
            {
                fixed (int* value_ptr = value)
                {
                    ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
            public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, in int value)
            {
                fixed (int* value_ptr = &value)
                {
                    ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
            public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
            public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
            public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexImage(int texture, int level, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearTexImage(texture, level, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearTexImage(texture, level, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearTexImage(texture, level, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearTexImage(texture, level, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorP3uiv(ColorPointerType, uint*)"/>
            public static unsafe void ColorP3ui(ColorPointerType type, ReadOnlySpan<uint> color)
            {
                fixed (uint* color_ptr = color)
                {
                    ColorP3uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="ColorP3uiv(ColorPointerType, uint*)"/>
            public static unsafe void ColorP3ui(ColorPointerType type, uint[] color)
            {
                fixed (uint* color_ptr = color)
                {
                    ColorP3uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="ColorP3uiv(ColorPointerType, uint*)"/>
            public static unsafe void ColorP3ui(ColorPointerType type, in uint color)
            {
                fixed (uint* color_ptr = &color)
                {
                    ColorP3uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="ColorP4uiv(ColorPointerType, uint*)"/>
            public static unsafe void ColorP4ui(ColorPointerType type, ReadOnlySpan<uint> color)
            {
                fixed (uint* color_ptr = color)
                {
                    ColorP4uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="ColorP4uiv(ColorPointerType, uint*)"/>
            public static unsafe void ColorP4ui(ColorPointerType type, uint[] color)
            {
                fixed (uint* color_ptr = color)
                {
                    ColorP4uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="ColorP4uiv(ColorPointerType, uint*)"/>
            public static unsafe void ColorP4ui(ColorPointerType type, in uint color)
            {
                fixed (uint* color_ptr = &color)
                {
                    ColorP4uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ColorSubTable(target, start, count, format, type, data_vptr);
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ColorSubTable(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ColorSubTable(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ColorSubTable(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
            {
                void* table_vptr = (void*)table;
                ColorTable(target, internalformat, width, format, type, table_vptr);
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable<T1>(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTable(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable<T1>(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTable(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable<T1>(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, in T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    ColorTable(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void ColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void ColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void ColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CompileShaderIncludeARB(int, int, byte**, int*)"/>
            public static unsafe void CompileShaderIncludeARB(int shader, int count, byte** path, ReadOnlySpan<int> length)
            {
                fixed (int* length_ptr = length)
                {
                    CompileShaderIncludeARB(shader, count, path, length_ptr);
                }
            }
            /// <inheritdoc cref="CompileShaderIncludeARB(int, int, byte**, int*)"/>
            public static unsafe void CompileShaderIncludeARB(int shader, int count, byte** path, int[] length)
            {
                fixed (int* length_ptr = length)
                {
                    CompileShaderIncludeARB(shader, count, path, length_ptr);
                }
            }
            /// <inheritdoc cref="CompileShaderIncludeARB(int, int, byte**, int*)"/>
            public static unsafe void CompileShaderIncludeARB(int shader, int count, byte** path, in int length)
            {
                fixed (int* length_ptr = &length)
                {
                    CompileShaderIncludeARB(shader, count, path, length_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage1DARB(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage1DARB(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexImage1DARB(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage1DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage1DARB(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage1DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage1DARB(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage1DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage2DARB(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage2DARB(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexImage2DARB(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage2DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage2DARB(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage2DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage2DARB(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage2DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage3DARB(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage3DARB(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexImage3DARB(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage3DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage3DARB(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage3DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage3DARB(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage3DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage1DARB(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage1DARB(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexSubImage1DARB(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage1DARB<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage1DARB(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage1DARB<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage1DARB(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage1DARB<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage2DARB(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage2DARB(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexSubImage2DARB(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage2DARB<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage2DARB(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage2DARB<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage2DARB(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage2DARB<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage3DARB(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage3DARB(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexSubImage3DARB(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage3DARB<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage3DARB(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage3DARB<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage3DARB(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage3DARB<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                ConvolutionFilter1D(target, internalformat, width, format, type, image_vptr);
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter1D(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter1D(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, in T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    ConvolutionFilter1D(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTarget, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                ConvolutionFilter2D(target, internalformat, width, height, format, type, image_vptr);
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTarget, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter2D(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTarget, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter2D(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTarget, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, in T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    ConvolutionFilter2D(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CreateBuffers(int, int*)"/>
            public static unsafe int CreateBuffer()
            {
                int buffer;
                int n = 1;
                Unsafe.SkipInit(out buffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* buffers_handle = (int*)Unsafe.AsPointer(ref buffer);
                CreateBuffers(n, buffers_handle);
                return buffer;
            }
            /// <inheritdoc cref="CreateBuffers(int, int*)"/>
            public static unsafe void CreateBuffer(out int buffer)
            {
                int n = 1;
                Unsafe.SkipInit(out buffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* buffers_handle = (int*)Unsafe.AsPointer(ref buffer);
                CreateBuffers(n, buffers_handle);
            }
            /// <inheritdoc cref="CreateBuffers(int, int*)"/>
            public static unsafe void CreateBuffers(Span<int> buffers)
            {
                int n = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    CreateBuffers(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateBuffers(int, int*)"/>
            public static unsafe void CreateBuffers(int[] buffers)
            {
                int n = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    CreateBuffers(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateBuffers(int, int*)"/>
            public static unsafe void CreateBuffers(int n, ref int buffers)
            {
                fixed (int* buffers_ptr = &buffers)
                {
                    CreateBuffers(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
            public static unsafe int CreateFramebuffer()
            {
                int framebuffer;
                int n = 1;
                Unsafe.SkipInit(out framebuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
                CreateFramebuffers(n, framebuffers_handle);
                return framebuffer;
            }
            /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
            public static unsafe void CreateFramebuffer(out int framebuffer)
            {
                int n = 1;
                Unsafe.SkipInit(out framebuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
                CreateFramebuffers(n, framebuffers_handle);
            }
            /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
            public static unsafe void CreateFramebuffers(Span<int> framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    CreateFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
            public static unsafe void CreateFramebuffers(int[] framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    CreateFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
            public static unsafe void CreateFramebuffers(int n, ref int framebuffers)
            {
                fixed (int* framebuffers_ptr = &framebuffers)
                {
                    CreateFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
            public static unsafe int CreateProgramPipeline()
            {
                int pipeline;
                int n = 1;
                Unsafe.SkipInit(out pipeline);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
                CreateProgramPipelines(n, pipelines_handle);
                return pipeline;
            }
            /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
            public static unsafe void CreateProgramPipeline(out int pipeline)
            {
                int n = 1;
                Unsafe.SkipInit(out pipeline);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
                CreateProgramPipelines(n, pipelines_handle);
            }
            /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
            public static unsafe void CreateProgramPipelines(Span<int> pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    CreateProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
            public static unsafe void CreateProgramPipelines(int[] pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    CreateProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
            public static unsafe void CreateProgramPipelines(int n, ref int pipelines)
            {
                fixed (int* pipelines_ptr = &pipelines)
                {
                    CreateProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
            public static unsafe int CreateQuery(QueryTarget target)
            {
                int id;
                int n = 1;
                Unsafe.SkipInit(out id);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* ids_handle = (int*)Unsafe.AsPointer(ref id);
                CreateQueries(target, n, ids_handle);
                return id;
            }
            /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
            public static unsafe void CreateQuery(QueryTarget target, out int id)
            {
                int n = 1;
                Unsafe.SkipInit(out id);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* ids_handle = (int*)Unsafe.AsPointer(ref id);
                CreateQueries(target, n, ids_handle);
            }
            /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
            public static unsafe void CreateQueries(QueryTarget target, Span<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    CreateQueries(target, n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
            public static unsafe void CreateQueries(QueryTarget target, int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    CreateQueries(target, n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
            public static unsafe void CreateQueries(QueryTarget target, int n, ref int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    CreateQueries(target, n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
            public static unsafe int CreateRenderbuffer()
            {
                int renderbuffer;
                int n = 1;
                Unsafe.SkipInit(out renderbuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
                CreateRenderbuffers(n, renderbuffers_handle);
                return renderbuffer;
            }
            /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
            public static unsafe void CreateRenderbuffer(out int renderbuffer)
            {
                int n = 1;
                Unsafe.SkipInit(out renderbuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
                CreateRenderbuffers(n, renderbuffers_handle);
            }
            /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
            public static unsafe void CreateRenderbuffers(Span<int> renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    CreateRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
            public static unsafe void CreateRenderbuffers(int[] renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    CreateRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
            public static unsafe void CreateRenderbuffers(int n, ref int renderbuffers)
            {
                fixed (int* renderbuffers_ptr = &renderbuffers)
                {
                    CreateRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateSamplers(int, int*)"/>
            public static unsafe int CreateSampler()
            {
                int sampler;
                int n = 1;
                Unsafe.SkipInit(out sampler);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
                CreateSamplers(n, samplers_handle);
                return sampler;
            }
            /// <inheritdoc cref="CreateSamplers(int, int*)"/>
            public static unsafe void CreateSampler(out int sampler)
            {
                int n = 1;
                Unsafe.SkipInit(out sampler);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
                CreateSamplers(n, samplers_handle);
            }
            /// <inheritdoc cref="CreateSamplers(int, int*)"/>
            public static unsafe void CreateSamplers(Span<int> samplers)
            {
                int n = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    CreateSamplers(n, samplers_ptr);
                }
            }
            /// <inheritdoc cref="CreateSamplers(int, int*)"/>
            public static unsafe void CreateSamplers(int[] samplers)
            {
                int n = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    CreateSamplers(n, samplers_ptr);
                }
            }
            /// <inheritdoc cref="CreateSamplers(int, int*)"/>
            public static unsafe void CreateSamplers(int n, ref int samplers)
            {
                fixed (int* samplers_ptr = &samplers)
                {
                    CreateSamplers(n, samplers_ptr);
                }
            }
            /// <inheritdoc cref="CreateShaderProgramv(ShaderType, int, byte**)"/>
            public static unsafe int CreateShaderProgram(ShaderType type, int count, byte** strings)
            {
                int returnValue;
                returnValue = CreateShaderProgramv(type, count, strings);
                return returnValue;
            }
            /// <inheritdoc cref="CreateSyncFromCLeventARB(CLContext*, CLEvent*, uint)"/>
            public static unsafe GLSync CreateSyncFromCLeventARB(ref CLContext context, ref CLEvent @event, uint flags)
            {
                GLSync returnValue;
                fixed (CLContext* context_ptr = &context)
                fixed (CLEvent* @event_ptr = &@event)
                {
                    returnValue = CreateSyncFromCLeventARB(context_ptr, @event_ptr, flags);
                }
                return returnValue;
            }
            /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
            public static unsafe int CreateTexture(TextureTarget target)
            {
                int texture;
                int n = 1;
                Unsafe.SkipInit(out texture);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* textures_handle = (int*)Unsafe.AsPointer(ref texture);
                CreateTextures(target, n, textures_handle);
                return texture;
            }
            /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
            public static unsafe void CreateTexture(TextureTarget target, out int texture)
            {
                int n = 1;
                Unsafe.SkipInit(out texture);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* textures_handle = (int*)Unsafe.AsPointer(ref texture);
                CreateTextures(target, n, textures_handle);
            }
            /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
            public static unsafe void CreateTextures(TextureTarget target, Span<int> textures)
            {
                int n = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    CreateTextures(target, n, textures_ptr);
                }
            }
            /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
            public static unsafe void CreateTextures(TextureTarget target, int[] textures)
            {
                int n = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    CreateTextures(target, n, textures_ptr);
                }
            }
            /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
            public static unsafe void CreateTextures(TextureTarget target, int n, ref int textures)
            {
                fixed (int* textures_ptr = &textures)
                {
                    CreateTextures(target, n, textures_ptr);
                }
            }
            /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
            public static unsafe int CreateTransformFeedback()
            {
                int id;
                int n = 1;
                Unsafe.SkipInit(out id);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* ids_handle = (int*)Unsafe.AsPointer(ref id);
                CreateTransformFeedbacks(n, ids_handle);
                return id;
            }
            /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
            public static unsafe void CreateTransformFeedback(out int id)
            {
                int n = 1;
                Unsafe.SkipInit(out id);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* ids_handle = (int*)Unsafe.AsPointer(ref id);
                CreateTransformFeedbacks(n, ids_handle);
            }
            /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
            public static unsafe void CreateTransformFeedbacks(Span<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    CreateTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
            public static unsafe void CreateTransformFeedbacks(int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    CreateTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
            public static unsafe void CreateTransformFeedbacks(int n, ref int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    CreateTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
            public static unsafe int CreateVertexArray()
            {
                int array;
                int n = 1;
                Unsafe.SkipInit(out array);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
                CreateVertexArrays(n, arrays_handle);
                return array;
            }
            /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
            public static unsafe void CreateVertexArray(out int array)
            {
                int n = 1;
                Unsafe.SkipInit(out array);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
                CreateVertexArrays(n, arrays_handle);
            }
            /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
            public static unsafe void CreateVertexArrays(Span<int> arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    CreateVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
            public static unsafe void CreateVertexArrays(int[] arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    CreateVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
            public static unsafe void CreateVertexArrays(int n, ref int arrays)
            {
                fixed (int* arrays_ptr = &arrays)
                {
                    CreateVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallbackARB(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackARB(GLDebugProcARB callback, IntPtr userParam)
            {
                void* userParam_vptr = (void*)userParam;
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallbackARB(callback_ptr, userParam_vptr);
            }
            /// <inheritdoc cref="DebugMessageCallbackARB(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackARB<T1>(GLDebugProcARB callback, ReadOnlySpan<T1> userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallbackARB(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallbackARB(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackARB<T1>(GLDebugProcARB callback, T1[] userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallbackARB(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallbackARB(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackARB<T1>(GLDebugProcARB callback, in T1 userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = &userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallbackARB(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageControlARB(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControlARB(DebugSource source, DebugType type, DebugSeverity severity, ReadOnlySpan<uint> ids, bool enabled)
            {
                int count = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageControlARB(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControlARB(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControlARB(DebugSource source, DebugType type, DebugSeverity severity, uint[] ids, bool enabled)
            {
                int count = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageControlARB(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControlARB(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControlARB(DebugSource source, DebugType type, DebugSeverity severity, int count, in uint ids, bool enabled)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    DebugMessageControlARB(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageInsertARB(DebugSource, DebugType, uint, DebugSeverity, int, byte*)"/>
            public static unsafe void DebugMessageInsertARB(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
            {
                byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
                DebugMessageInsertARB(source, type, id, severity, length, buf_ptr);
                Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
            }
            /// <inheritdoc cref="DeleteBuffersARB(int, int*)"/>
            public static unsafe void DeleteBuffersARB(ReadOnlySpan<int> buffers)
            {
                int n = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    DeleteBuffersARB(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteBuffersARB(int, int*)"/>
            public static unsafe void DeleteBuffersARB(int[] buffers)
            {
                int n = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    DeleteBuffersARB(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteBuffersARB(int, int*)"/>
            public static unsafe void DeleteBuffersARB(int n, in int buffers)
            {
                fixed (int* buffers_ptr = &buffers)
                {
                    DeleteBuffersARB(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
            public static unsafe void DeleteFramebuffer(in int framebuffer)
            {
                int n = 1;
                fixed(int* framebuffers_handle = &framebuffer)
                {
                    DeleteFramebuffers(n, framebuffers_handle);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
            public static unsafe void DeleteFramebuffers(ReadOnlySpan<int> framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    DeleteFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
            public static unsafe void DeleteFramebuffers(int[] framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    DeleteFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
            public static unsafe void DeleteFramebuffers(int n, in int framebuffers)
            {
                fixed (int* framebuffers_ptr = &framebuffers)
                {
                    DeleteFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteNamedStringARB(int, byte*)"/>
            public static unsafe void DeleteNamedStringARB(int namelen, string name)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                DeleteNamedStringARB(namelen, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
            public static unsafe void DeleteProgramPipeline(in int pipeline)
            {
                int n = 1;
                fixed(int* pipelines_handle = &pipeline)
                {
                    DeleteProgramPipelines(n, pipelines_handle);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
            public static unsafe void DeleteProgramPipelines(ReadOnlySpan<int> pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    DeleteProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
            public static unsafe void DeleteProgramPipelines(int[] pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    DeleteProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
            public static unsafe void DeleteProgramPipelines(int n, in int pipelines)
            {
                fixed (int* pipelines_ptr = &pipelines)
                {
                    DeleteProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramsARB(int, int*)"/>
            public static unsafe void DeleteProgramsARB(ReadOnlySpan<int> programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    DeleteProgramsARB(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramsARB(int, int*)"/>
            public static unsafe void DeleteProgramsARB(int[] programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    DeleteProgramsARB(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramsARB(int, int*)"/>
            public static unsafe void DeleteProgramsARB(int n, in int programs)
            {
                fixed (int* programs_ptr = &programs)
                {
                    DeleteProgramsARB(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueriesARB(int, int*)"/>
            public static unsafe void DeleteQueriesARB(ReadOnlySpan<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    DeleteQueriesARB(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueriesARB(int, int*)"/>
            public static unsafe void DeleteQueriesARB(int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    DeleteQueriesARB(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueriesARB(int, int*)"/>
            public static unsafe void DeleteQueriesARB(int n, in int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    DeleteQueriesARB(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
            public static unsafe void DeleteRenderbuffer(in int renderbuffer)
            {
                int n = 1;
                fixed(int* renderbuffers_handle = &renderbuffer)
                {
                    DeleteRenderbuffers(n, renderbuffers_handle);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
            public static unsafe void DeleteRenderbuffers(ReadOnlySpan<int> renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    DeleteRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
            public static unsafe void DeleteRenderbuffers(int[] renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    DeleteRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
            public static unsafe void DeleteRenderbuffers(int n, in int renderbuffers)
            {
                fixed (int* renderbuffers_ptr = &renderbuffers)
                {
                    DeleteRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
            public static unsafe void DeleteSampler(in int sampler)
            {
                int count = 1;
                fixed(int* samplers_handle = &sampler)
                {
                    DeleteSamplers(count, samplers_handle);
                }
            }
            /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
            public static unsafe void DeleteSamplers(ReadOnlySpan<int> samplers)
            {
                int count = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    DeleteSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
            public static unsafe void DeleteSamplers(int[] samplers)
            {
                int count = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    DeleteSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
            public static unsafe void DeleteSamplers(int count, in int samplers)
            {
                fixed (int* samplers_ptr = &samplers)
                {
                    DeleteSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
            public static unsafe void DeleteTransformFeedback(in int id)
            {
                int n = 1;
                fixed(int* ids_handle = &id)
                {
                    DeleteTransformFeedbacks(n, ids_handle);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacks(ReadOnlySpan<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    DeleteTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacks(int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    DeleteTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacks(int n, in int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    DeleteTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
            public static unsafe void DeleteVertexArray(in int array)
            {
                int n = 1;
                fixed(int* arrays_handle = &array)
                {
                    DeleteVertexArrays(n, arrays_handle);
                }
            }
            /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
            public static unsafe void DeleteVertexArrays(ReadOnlySpan<int> arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    DeleteVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
            public static unsafe void DeleteVertexArrays(int[] arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    DeleteVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
            public static unsafe void DeleteVertexArrays(int n, in int arrays)
            {
                fixed (int* arrays_ptr = &arrays)
                {
                    DeleteVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DepthRangeArraydvNV(uint, int, double*)"/>
            public static unsafe void DepthRangeArraydvNV(uint first, int count, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    DepthRangeArraydvNV(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
            public static unsafe void DepthRangeArray(uint first, int count, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    DepthRangeArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
            public static unsafe void DepthRangeArray(uint first, int count, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    DepthRangeArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
            public static unsafe void DepthRangeArray(uint first, int count, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    DepthRangeArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
            public static unsafe void DrawArraysIndirect(PrimitiveType mode, IntPtr indirect)
            {
                void* indirect_vptr = (void*)indirect;
                DrawArraysIndirect(mode, indirect_vptr);
            }
            /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
            public static unsafe void DrawArraysIndirect<T1>(PrimitiveType mode, in T1 indirect)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    DrawArraysIndirect(mode, indirect_ptr);
                }
            }
            /// <inheritdoc cref="DrawBuffersARB(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffersARB(ReadOnlySpan<DrawBufferMode> bufs)
            {
                int n = (int)(bufs.Length);
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    DrawBuffersARB(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="DrawBuffersARB(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffersARB(DrawBufferMode[] bufs)
            {
                int n = (int)(bufs.Length);
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    DrawBuffersARB(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="DrawBuffersARB(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffersARB(int n, in DrawBufferMode bufs)
            {
                fixed (DrawBufferMode* bufs_ptr = &bufs)
                {
                    DrawBuffersARB(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="DrawElementsBaseVertex(PrimitiveType, int, DrawElementsType, void*, int)"/>
            public static unsafe void DrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint offset, int basevertex)
            {
                void* indices = (void*)offset;
                DrawElementsBaseVertex(mode, count, type, indices, basevertex);
            }
            /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
            public static unsafe void DrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect)
            {
                void* indirect_vptr = (void*)indirect;
                DrawElementsIndirect(mode, type, indirect_vptr);
            }
            /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
            public static unsafe void DrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    DrawElementsIndirect(mode, type, indirect_ptr);
                }
            }
            /// <inheritdoc cref="DrawElementsInstancedARB(PrimitiveType, int, DrawElementsType, void*, int)"/>
            public static unsafe void DrawElementsInstancedARB(PrimitiveType mode, int count, DrawElementsType type, nint offset, int primcount)
            {
                void* indices = (void*)offset;
                DrawElementsInstancedARB(mode, count, type, indices, primcount);
            }
            /// <inheritdoc cref="DrawElementsInstancedBaseInstance(PrimitiveType, int, DrawElementsType, void*, int, uint)"/>
            public static unsafe void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, uint baseinstance)
            {
                void* indices = (void*)offset;
                DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
            }
            /// <inheritdoc cref="DrawElementsInstancedBaseVertex(PrimitiveType, int, DrawElementsType, void*, int, int)"/>
            public static unsafe void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, int basevertex)
            {
                void* indices = (void*)offset;
                DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
            }
            /// <inheritdoc cref="DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType, int, DrawElementsType, void*, int, int, uint)"/>
            public static unsafe void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, int basevertex, uint baseinstance)
            {
                void* indices = (void*)offset;
                DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
            }
            /// <inheritdoc cref="DrawRangeElementsBaseVertex(PrimitiveType, uint, uint, int, DrawElementsType, void*, int)"/>
            public static unsafe void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint offset, int basevertex)
            {
                void* indices = (void*)offset;
                DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
            }
            /// <inheritdoc cref="FramebufferSampleLocationsfvARB(FramebufferTarget, uint, int, float*)"/>
            public static unsafe void FramebufferSampleLocationsfvARB(FramebufferTarget target, uint start, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    FramebufferSampleLocationsfvARB(target, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="GenBuffersARB(int, int*)"/>
            public static unsafe void GenBuffersARB(Span<int> buffers)
            {
                int n = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    GenBuffersARB(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="GenBuffersARB(int, int*)"/>
            public static unsafe void GenBuffersARB(int[] buffers)
            {
                int n = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    GenBuffersARB(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="GenBuffersARB(int, int*)"/>
            public static unsafe void GenBuffersARB(int n, ref int buffers)
            {
                fixed (int* buffers_ptr = &buffers)
                {
                    GenBuffersARB(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe int GenFramebuffer()
            {
                int framebuffer;
                int n = 1;
                Unsafe.SkipInit(out framebuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
                GenFramebuffers(n, framebuffers_handle);
                return framebuffer;
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe void GenFramebuffer(out int framebuffer)
            {
                int n = 1;
                Unsafe.SkipInit(out framebuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
                GenFramebuffers(n, framebuffers_handle);
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe void GenFramebuffers(Span<int> framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    GenFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe void GenFramebuffers(int[] framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    GenFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe void GenFramebuffers(int n, ref int framebuffers)
            {
                fixed (int* framebuffers_ptr = &framebuffers)
                {
                    GenFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe int GenProgramPipeline()
            {
                int pipeline;
                int n = 1;
                Unsafe.SkipInit(out pipeline);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
                GenProgramPipelines(n, pipelines_handle);
                return pipeline;
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe void GenProgramPipeline(out int pipeline)
            {
                int n = 1;
                Unsafe.SkipInit(out pipeline);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
                GenProgramPipelines(n, pipelines_handle);
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe void GenProgramPipelines(Span<int> pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    GenProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe void GenProgramPipelines(int[] pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    GenProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe void GenProgramPipelines(int n, ref int pipelines)
            {
                fixed (int* pipelines_ptr = &pipelines)
                {
                    GenProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramsARB(int, int*)"/>
            public static unsafe void GenProgramsARB(Span<int> programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    GenProgramsARB(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramsARB(int, int*)"/>
            public static unsafe void GenProgramsARB(int[] programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    GenProgramsARB(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramsARB(int, int*)"/>
            public static unsafe void GenProgramsARB(int n, ref int programs)
            {
                fixed (int* programs_ptr = &programs)
                {
                    GenProgramsARB(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenQueriesARB(int, int*)"/>
            public static unsafe void GenQueriesARB(Span<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    GenQueriesARB(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenQueriesARB(int, int*)"/>
            public static unsafe void GenQueriesARB(int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    GenQueriesARB(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenQueriesARB(int, int*)"/>
            public static unsafe void GenQueriesARB(int n, ref int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    GenQueriesARB(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe int GenRenderbuffer()
            {
                int renderbuffer;
                int n = 1;
                Unsafe.SkipInit(out renderbuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
                GenRenderbuffers(n, renderbuffers_handle);
                return renderbuffer;
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe void GenRenderbuffer(out int renderbuffer)
            {
                int n = 1;
                Unsafe.SkipInit(out renderbuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
                GenRenderbuffers(n, renderbuffers_handle);
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe void GenRenderbuffers(Span<int> renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    GenRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe void GenRenderbuffers(int[] renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    GenRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe void GenRenderbuffers(int n, ref int renderbuffers)
            {
                fixed (int* renderbuffers_ptr = &renderbuffers)
                {
                    GenRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenSamplers(int, int*)"/>
            public static unsafe int GenSampler()
            {
                int sampler;
                int count = 1;
                Unsafe.SkipInit(out sampler);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
                GenSamplers(count, samplers_handle);
                return sampler;
            }
            /// <inheritdoc cref="GenSamplers(int, int*)"/>
            public static unsafe void GenSampler(out int sampler)
            {
                int count = 1;
                Unsafe.SkipInit(out sampler);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
                GenSamplers(count, samplers_handle);
            }
            /// <inheritdoc cref="GenSamplers(int, int*)"/>
            public static unsafe void GenSamplers(Span<int> samplers)
            {
                int count = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    GenSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="GenSamplers(int, int*)"/>
            public static unsafe void GenSamplers(int[] samplers)
            {
                int count = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    GenSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="GenSamplers(int, int*)"/>
            public static unsafe void GenSamplers(int count, ref int samplers)
            {
                fixed (int* samplers_ptr = &samplers)
                {
                    GenSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe int GenTransformFeedback()
            {
                int id;
                int n = 1;
                Unsafe.SkipInit(out id);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* ids_handle = (int*)Unsafe.AsPointer(ref id);
                GenTransformFeedbacks(n, ids_handle);
                return id;
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe void GenTransformFeedback(out int id)
            {
                int n = 1;
                Unsafe.SkipInit(out id);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* ids_handle = (int*)Unsafe.AsPointer(ref id);
                GenTransformFeedbacks(n, ids_handle);
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe void GenTransformFeedbacks(Span<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    GenTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe void GenTransformFeedbacks(int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    GenTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe void GenTransformFeedbacks(int n, ref int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    GenTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe int GenVertexArray()
            {
                int array;
                int n = 1;
                Unsafe.SkipInit(out array);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
                GenVertexArrays(n, arrays_handle);
                return array;
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe void GenVertexArray(out int array)
            {
                int n = 1;
                Unsafe.SkipInit(out array);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
                GenVertexArrays(n, arrays_handle);
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe void GenVertexArrays(Span<int> arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    GenVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe void GenVertexArrays(int[] arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    GenVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe void GenVertexArrays(int n, ref int arrays)
            {
                fixed (int* arrays_ptr = &arrays)
                {
                    GenVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
            public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
            public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
            public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
            public static unsafe int GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetActiveAttribARB(GLHandleARB, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe string GetActiveAttribARB(GLHandleARB programObj, uint index, int maxLength, Span<int> length, Span<int> size, Span<AttributeType> type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveAttribARB(GLHandleARB, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe void GetActiveAttribARB(GLHandleARB programObj, uint index, int maxLength, Span<int> length, Span<int> size, Span<AttributeType> type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetActiveAttribARB(GLHandleARB, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe string GetActiveAttribARB(GLHandleARB programObj, uint index, int maxLength, int[] length, int[] size, AttributeType[] type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveAttribARB(GLHandleARB, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe void GetActiveAttribARB(GLHandleARB programObj, uint index, int maxLength, int[] length, int[] size, AttributeType[] type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetActiveAttribARB(GLHandleARB, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe string GetActiveAttribARB(GLHandleARB programObj, uint index, int maxLength, ref int length, ref int size, ref AttributeType type)
            {
                string name;
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (AttributeType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveAttribARB(GLHandleARB, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe void GetActiveAttribARB(GLHandleARB programObj, uint index, int maxLength, ref int length, ref int size, ref AttributeType type, out string name)
            {
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (AttributeType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, int[] length)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, int[] length, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, ref int length)
            {
                string name;
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, ref int length, out string name)
            {
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
            public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, Span<int> values)
            {
                fixed (int* values_ptr = values)
                {
                    GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
            public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, int[] values)
            {
                fixed (int* values_ptr = values)
                {
                    GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
            public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, ref int values)
            {
                fixed (int* values_ptr = &values)
                {
                    GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
            public static unsafe int GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname)
            {
                int values_val;
                int* values = &values_val;
                GetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
                return values_val;
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, int[] length)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, int[] length, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, ref int length)
            {
                string name;
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, ref int length, out string name)
            {
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformARB(GLHandleARB, uint, int, int*, int*, UniformType*, byte*)"/>
            public static unsafe string GetActiveUniformARB(GLHandleARB programObj, uint index, int maxLength, Span<int> length, Span<int> size, Span<UniformType> type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (UniformType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveUniformARB(GLHandleARB, uint, int, int*, int*, UniformType*, byte*)"/>
            public static unsafe void GetActiveUniformARB(GLHandleARB programObj, uint index, int maxLength, Span<int> length, Span<int> size, Span<UniformType> type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (UniformType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetActiveUniformARB(GLHandleARB, uint, int, int*, int*, UniformType*, byte*)"/>
            public static unsafe string GetActiveUniformARB(GLHandleARB programObj, uint index, int maxLength, int[] length, int[] size, UniformType[] type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (UniformType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveUniformARB(GLHandleARB, uint, int, int*, int*, UniformType*, byte*)"/>
            public static unsafe void GetActiveUniformARB(GLHandleARB programObj, uint index, int maxLength, int[] length, int[] size, UniformType[] type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (UniformType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetActiveUniformARB(GLHandleARB, uint, int, int*, int*, UniformType*, byte*)"/>
            public static unsafe string GetActiveUniformARB(GLHandleARB programObj, uint index, int maxLength, ref int length, ref int size, ref UniformType type)
            {
                string name;
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (UniformType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveUniformARB(GLHandleARB, uint, int, int*, int*, UniformType*, byte*)"/>
            public static unsafe void GetActiveUniformARB(GLHandleARB programObj, uint index, int maxLength, ref int length, ref int size, ref UniformType type, out string name)
            {
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (UniformType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
            public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
            public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
            public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
            public static unsafe int GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, Span<int> length)
            {
                string uniformBlockName;
                fixed (int* length_ptr = length)
                {
                    var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                    uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                }
                return uniformBlockName;
            }
            /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, Span<int> length, out string uniformBlockName)
            {
                fixed (int* length_ptr = length)
                {
                    var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                    uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, int[] length)
            {
                string uniformBlockName;
                fixed (int* length_ptr = length)
                {
                    var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                    uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                }
                return uniformBlockName;
            }
            /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, int[] length, out string uniformBlockName)
            {
                fixed (int* length_ptr = length)
                {
                    var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                    uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, ref int length)
            {
                string uniformBlockName;
                fixed (int* length_ptr = &length)
                {
                    var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                    uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                }
                return uniformBlockName;
            }
            /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, ref int length, out string uniformBlockName)
            {
                fixed (int* length_ptr = &length)
                {
                    var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                    uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveUniformName(int program, uint uniformIndex, int bufSize, Span<int> length)
            {
                string uniformName;
                fixed (int* length_ptr = length)
                {
                    var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                    uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
                }
                return uniformName;
            }
            /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveUniformName(int program, uint uniformIndex, int bufSize, Span<int> length, out string uniformName)
            {
                fixed (int* length_ptr = length)
                {
                    var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                    uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveUniformName(int program, uint uniformIndex, int bufSize, int[] length)
            {
                string uniformName;
                fixed (int* length_ptr = length)
                {
                    var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                    uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
                }
                return uniformName;
            }
            /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveUniformName(int program, uint uniformIndex, int bufSize, int[] length, out string uniformName)
            {
                fixed (int* length_ptr = length)
                {
                    var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                    uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveUniformName(int program, uint uniformIndex, int bufSize, ref int length)
            {
                string uniformName;
                fixed (int* length_ptr = &length)
                {
                    var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                    uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
                }
                return uniformName;
            }
            /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveUniformName(int program, uint uniformIndex, int bufSize, ref int length, out string uniformName)
            {
                fixed (int* length_ptr = &length)
                {
                    var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                    uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
            public static unsafe void GetActiveUniformsi(int program, ReadOnlySpan<uint> uniformIndices, UniformPName pname, Span<int> parameters)
            {
                int uniformCount = (int)(uniformIndices.Length);
                fixed (uint* uniformIndices_ptr = uniformIndices)
                {
                    fixed (int* parameters_ptr = parameters)
                    {
                        GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
            public static unsafe void GetActiveUniformsi(int program, uint[] uniformIndices, UniformPName pname, int[] parameters)
            {
                int uniformCount = (int)(uniformIndices.Length);
                fixed (uint* uniformIndices_ptr = uniformIndices)
                {
                    fixed (int* parameters_ptr = parameters)
                    {
                        GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
            public static unsafe void GetActiveUniformsi(int program, int uniformCount, in uint uniformIndices, UniformPName pname, ref int parameters)
            {
                fixed (uint* uniformIndices_ptr = &uniformIndices)
                fixed (int* parameters_ptr = &parameters)
                {
                    GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
            public static unsafe int GetActiveUniformsi(int program, ReadOnlySpan<uint> uniformIndices, UniformPName pname)
            {
                int parameters_val;
                int uniformCount = (int)(uniformIndices.Length);
                fixed (uint* uniformIndices_ptr = uniformIndices)
                {
                    int* parameters = &parameters_val;
                    GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters);
                }
                return parameters_val;
            }
            /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
            public static unsafe int GetActiveUniformsi(int program, uint[] uniformIndices, UniformPName pname)
            {
                int parameters_val;
                int uniformCount = (int)(uniformIndices.Length);
                fixed (uint* uniformIndices_ptr = uniformIndices)
                {
                    int* parameters = &parameters_val;
                    GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters);
                }
                return parameters_val;
            }
            /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
            public static unsafe int GetActiveUniformsi(int program, int uniformCount, in uint uniformIndices, UniformPName pname)
            {
                int parameters_val;
                fixed (uint* uniformIndices_ptr = &uniformIndices)
                {
                    int* parameters = &parameters_val;
                    GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters);
                }
                return parameters_val;
            }
            /// <inheritdoc cref="GetAttachedObjectsARB(GLHandleARB, int, int*, GLHandleARB*)"/>
            public static unsafe void GetAttachedObjectsARB(GLHandleARB containerObj, Span<int> count, Span<GLHandleARB> obj)
            {
                fixed (int* count_ptr = count)
                {
                    int maxCount = (int)(obj.Length);
                    fixed (GLHandleARB* obj_ptr = obj)
                    {
                        GetAttachedObjectsARB(containerObj, maxCount, count_ptr, obj_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetAttachedObjectsARB(GLHandleARB, int, int*, GLHandleARB*)"/>
            public static unsafe void GetAttachedObjectsARB(GLHandleARB containerObj, int[] count, GLHandleARB[] obj)
            {
                fixed (int* count_ptr = count)
                {
                    int maxCount = (int)(obj.Length);
                    fixed (GLHandleARB* obj_ptr = obj)
                    {
                        GetAttachedObjectsARB(containerObj, maxCount, count_ptr, obj_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetAttachedObjectsARB(GLHandleARB, int, int*, GLHandleARB*)"/>
            public static unsafe void GetAttachedObjectsARB(GLHandleARB containerObj, int maxCount, ref int count, ref GLHandleARB obj)
            {
                fixed (int* count_ptr = &count)
                fixed (GLHandleARB* obj_ptr = &obj)
                {
                    GetAttachedObjectsARB(containerObj, maxCount, count_ptr, obj_ptr);
                }
            }
            /// <inheritdoc cref="GetAttachedObjectsARB(GLHandleARB, int, int*, GLHandleARB*)"/>
            public static unsafe GLHandleARB GetAttachedObjectsARB(GLHandleARB containerObj, int maxCount, Span<int> count)
            {
                GLHandleARB obj_val;
                fixed (int* count_ptr = count)
                {
                    GLHandleARB* obj = &obj_val;
                    GetAttachedObjectsARB(containerObj, maxCount, count_ptr, obj);
                }
                return obj_val;
            }
            /// <inheritdoc cref="GetAttachedObjectsARB(GLHandleARB, int, int*, GLHandleARB*)"/>
            public static unsafe GLHandleARB GetAttachedObjectsARB(GLHandleARB containerObj, int maxCount, int[] count)
            {
                GLHandleARB obj_val;
                fixed (int* count_ptr = count)
                {
                    GLHandleARB* obj = &obj_val;
                    GetAttachedObjectsARB(containerObj, maxCount, count_ptr, obj);
                }
                return obj_val;
            }
            /// <inheritdoc cref="GetAttachedObjectsARB(GLHandleARB, int, int*, GLHandleARB*)"/>
            public static unsafe GLHandleARB GetAttachedObjectsARB(GLHandleARB containerObj, int maxCount, ref int count)
            {
                GLHandleARB obj_val;
                fixed (int* count_ptr = &count)
                {
                    GLHandleARB* obj = &obj_val;
                    GetAttachedObjectsARB(containerObj, maxCount, count_ptr, obj);
                }
                return obj_val;
            }
            /// <inheritdoc cref="GetAttribLocationARB(GLHandleARB, byte*)"/>
            public static unsafe int GetAttribLocationARB(GLHandleARB programObj, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetAttribLocationARB(programObj, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetBufferParameterivARB(BufferTargetARB, BufferPNameARB, int*)"/>
            public static unsafe void GetBufferParameterivARB(BufferTargetARB target, BufferPNameARB pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetBufferParameterivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameterivARB(BufferTargetARB, BufferPNameARB, int*)"/>
            public static unsafe void GetBufferParameterivARB(BufferTargetARB target, BufferPNameARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetBufferParameterivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameterivARB(BufferTargetARB, BufferPNameARB, int*)"/>
            public static unsafe void GetBufferParameterivARB(BufferTargetARB target, BufferPNameARB pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetBufferParameterivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameterivARB(BufferTargetARB, BufferPNameARB, int*)"/>
            public static unsafe int GetBufferParameterivARB(BufferTargetARB target, BufferPNameARB pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetBufferParameterivARB(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetBufferPointervARB(BufferTargetARB, BufferPointerNameARB, void**)"/>
            public static unsafe void GetBufferPointervARB(BufferTargetARB target, BufferPointerNameARB pname, void** parameters)
            {
                GetBufferPointervARB_(target, pname, parameters);
            }
            /// <inheritdoc cref="GetBufferPointervARB(BufferTargetARB, BufferPointerNameARB, void**)"/>
            public static unsafe void* GetBufferPointervARB(BufferTargetARB target, BufferPointerNameARB pname)
            {
                void* parameters_val;
                void** parameters = &parameters_val;
                GetBufferPointervARB_(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetBufferSubDataARB(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void GetBufferSubDataARB(BufferTargetARB target, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                GetBufferSubDataARB(target, offset, size, data_vptr);
            }
            /// <inheritdoc cref="GetBufferSubDataARB(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void GetBufferSubDataARB<T1>(BufferTargetARB target, IntPtr offset, Span<T1> data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    GetBufferSubDataARB(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferSubDataARB(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void GetBufferSubDataARB<T1>(BufferTargetARB target, IntPtr offset, T1[] data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    GetBufferSubDataARB(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferSubDataARB(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void GetBufferSubDataARB<T1>(BufferTargetARB target, IntPtr offset, nint size, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    GetBufferSubDataARB(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, IntPtr table)
            {
                void* table_vptr = (void*)table;
                GetColorTable(target, format, type, table_vptr);
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, Span<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    GetColorTable(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    GetColorTable(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, ref T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    GetColorTable(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe float GetColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetColorTableParameterfv(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe int GetColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetColorTableParameteriv(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetCompressedTexImageARB(TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTexImageARB(TextureTarget target, int level, IntPtr img)
            {
                void* img_vptr = (void*)img;
                GetCompressedTexImageARB(target, level, img_vptr);
            }
            /// <inheritdoc cref="GetCompressedTexImageARB(TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTexImageARB<T1>(TextureTarget target, int level, Span<T1> img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedTexImageARB(target, level, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTexImageARB(TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTexImageARB<T1>(TextureTarget target, int level, T1[] img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedTexImageARB(target, level, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTexImageARB(TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTexImageARB<T1>(TextureTarget target, int level, ref T1 img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = &img)
                {
                    GetCompressedTexImageARB(target, level, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureImage(int texture, int level, int bufSize, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetCompressedTextureImage(texture, level, bufSize, pixels_vptr);
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, Span<T1> pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, T1[] pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, int bufSize, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_vptr);
            }
            /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, Span<T1> pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, T1[] pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                GetConvolutionFilter(target, format, type, image_vptr);
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, Span<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    GetConvolutionFilter(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    GetConvolutionFilter(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, ref T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    GetConvolutionFilter(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe float GetConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetConvolutionParameterfv(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe int GetConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetConvolutionParameteriv(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetDebugMessageLogARB(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogARB(uint count, int bufSize, Span<DebugSource> sources, Span<DebugType> types, Span<uint> ids, Span<DebugSeverity> severities, Span<int> lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = sources)
                {
                    fixed (DebugType* types_ptr = types)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugSeverity* severities_ptr = severities)
                            {
                                fixed (int* lengths_ptr = lengths)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLogARB(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogARB(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogARB(uint count, int bufSize, DebugSource[] sources, DebugType[] types, uint[] ids, DebugSeverity[] severities, int[] lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = sources)
                {
                    fixed (DebugType* types_ptr = types)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugSeverity* severities_ptr = severities)
                            {
                                fixed (int* lengths_ptr = lengths)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLogARB(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogARB(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogARB(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = &sources)
                fixed (DebugType* types_ptr = &types)
                fixed (uint* ids_ptr = &ids)
                fixed (DebugSeverity* severities_ptr = &severities)
                fixed (int* lengths_ptr = &lengths)
                {
                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    returnValue = GetDebugMessageLogARB(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
            public static unsafe void GetDouble(GetPName target, uint index, Span<double> data)
            {
                fixed (double* data_ptr = data)
                {
                    GetDoublei_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
            public static unsafe void GetDouble(GetPName target, uint index, double[] data)
            {
                fixed (double* data_ptr = data)
                {
                    GetDoublei_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
            public static unsafe void GetDouble(GetPName target, uint index, ref double data)
            {
                fixed (double* data_ptr = &data)
                {
                    GetDoublei_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
            public static unsafe double GetDouble(GetPName target, uint index)
            {
                double data_val;
                double* data = &data_val;
                GetDoublei_v(target, index, data);
                return data_val;
            }
            /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
            public static unsafe void GetFloat(GetPName target, uint index, Span<float> data)
            {
                fixed (float* data_ptr = data)
                {
                    GetFloati_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
            public static unsafe void GetFloat(GetPName target, uint index, float[] data)
            {
                fixed (float* data_ptr = data)
                {
                    GetFloati_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
            public static unsafe void GetFloat(GetPName target, uint index, ref float data)
            {
                fixed (float* data_ptr = &data)
                {
                    GetFloati_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
            public static unsafe float GetFloat(GetPName target, uint index)
            {
                float data_val;
                float* data = &data_val;
                GetFloati_v(target, index, data);
                return data_val;
            }
            /// <inheritdoc cref="GetFragDataIndex(int, byte*)"/>
            public static unsafe int GetFragDataIndex(int program, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetFragDataIndex(program, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe int GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFramebufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe int GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetFramebufferParameteriv(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetHistogram(target, reset, format, type, values_vptr);
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetHistogram(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetHistogram(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, ref T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetHistogram(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfv(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterf(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetHistogramParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfv(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterf(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetHistogramParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfv(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterf(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetHistogramParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfv(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe float GetHistogramParameterf(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetHistogramParameterfv(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetHistogramParameteriv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameteri(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameteriv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameteri(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameteriv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameteri(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetHistogramParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameteriv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe int GetHistogramParameteri(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetHistogramParameteriv(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetInfoLogARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe string GetInfoLogARB(GLHandleARB obj, int maxLength, Span<int> length)
            {
                string infoLog;
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetInfoLogARB(obj, maxLength, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetInfoLogARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe void GetInfoLogARB(GLHandleARB obj, int maxLength, Span<int> length, out string infoLog)
            {
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetInfoLogARB(obj, maxLength, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetInfoLogARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe string GetInfoLogARB(GLHandleARB obj, int maxLength, int[] length)
            {
                string infoLog;
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetInfoLogARB(obj, maxLength, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetInfoLogARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe void GetInfoLogARB(GLHandleARB obj, int maxLength, int[] length, out string infoLog)
            {
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetInfoLogARB(obj, maxLength, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetInfoLogARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe string GetInfoLogARB(GLHandleARB obj, int maxLength, ref int length)
            {
                string infoLog;
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetInfoLogARB(obj, maxLength, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetInfoLogARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe void GetInfoLogARB(GLHandleARB obj, int maxLength, ref int length, out string infoLog)
            {
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetInfoLogARB(obj, maxLength, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
            public static unsafe void GetInteger64(GetPName pname, Span<long> data)
            {
                fixed (long* data_ptr = data)
                {
                    GetInteger64v(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
            public static unsafe void GetInteger64(GetPName pname, long[] data)
            {
                fixed (long* data_ptr = data)
                {
                    GetInteger64v(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
            public static unsafe void GetInteger64(GetPName pname, ref long data)
            {
                fixed (long* data_ptr = &data)
                {
                    GetInteger64v(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
            public static unsafe long GetInteger64(GetPName pname)
            {
                long data_val;
                long* data = &data_val;
                GetInteger64v(pname, data);
                return data_val;
            }
            /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
            public static unsafe void GetInteger(GetPName target, uint index, Span<int> data)
            {
                fixed (int* data_ptr = data)
                {
                    GetIntegeri_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
            public static unsafe void GetInteger(GetPName target, uint index, int[] data)
            {
                fixed (int* data_ptr = data)
                {
                    GetIntegeri_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
            public static unsafe void GetInteger(GetPName target, uint index, ref int data)
            {
                fixed (int* data_ptr = &data)
                {
                    GetIntegeri_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
            public static unsafe int GetInteger(GetPName target, uint index)
            {
                int data_val;
                int* data = &data_val;
                GetIntegeri_v(target, index, data);
                return data_val;
            }
            /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
            public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, Span<long> parameters)
            {
                int count = (int)(parameters.Length);
                fixed (long* parameters_ptr = parameters)
                {
                    GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
            public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, long[] parameters)
            {
                int count = (int)(parameters.Length);
                fixed (long* parameters_ptr = parameters)
                {
                    GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
            public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
            public static unsafe long GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count)
            {
                long parameters_val;
                long* parameters = &parameters_val;
                GetInternalformati64v(target, internalformat, pname, count, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, Span<int> parameters)
            {
                int count = (int)(parameters.Length);
                fixed (int* parameters_ptr = parameters)
                {
                    GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int[] parameters)
            {
                int count = (int)(parameters.Length);
                fixed (int* parameters_ptr = parameters)
                {
                    GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
            public static unsafe int GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetInternalformativ(target, internalformat, pname, count, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetMinmax(target, reset, format, type, values_vptr);
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetMinmax(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetMinmax(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, ref T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetMinmax(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterf(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMinmaxParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterf(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMinmaxParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterf(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMinmaxParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe float GetMinmaxParameterf(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetMinmaxParameterfv(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMinmaxParameteriv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameteri(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMinmaxParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameteriv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameteri(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMinmaxParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameteriv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameteri(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMinmaxParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameteriv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe int GetMinmaxParameteri(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetMinmaxParameteriv(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, Span<float> val)
            {
                fixed (float* val_ptr = val)
                {
                    GetMultisamplefv(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, float[] val)
            {
                fixed (float* val_ptr = val)
                {
                    GetMultisamplefv(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, ref float val)
            {
                fixed (float* val_ptr = &val)
                {
                    GetMultisamplefv(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe float GetMultisamplef(GetMultisamplePNameNV pname, uint index)
            {
                float val_val;
                float* val = &val_val;
                GetMultisamplefv(pname, index, val);
                return val_val;
            }
            /// <inheritdoc cref="GetNamedBufferParameteri64v(int, BufferPNameARB, long*)"/>
            public static unsafe void GetNamedBufferParameteri64(int buffer, BufferPNameARB pname, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetNamedBufferParameteri64v(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameteri64v(int, BufferPNameARB, long*)"/>
            public static unsafe long GetNamedBufferParameteri64(int buffer, BufferPNameARB pname)
            {
                long parameters_val;
                long* parameters = &parameters_val;
                GetNamedBufferParameteri64v(buffer, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetNamedBufferParameteriv(int, BufferPNameARB, int*)"/>
            public static unsafe void GetNamedBufferParameteri(int buffer, BufferPNameARB pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedBufferParameteriv(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameteriv(int, BufferPNameARB, int*)"/>
            public static unsafe int GetNamedBufferParameteri(int buffer, BufferPNameARB pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetNamedBufferParameteriv(buffer, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetNamedBufferPointerv(int, BufferPointerNameARB, void**)"/>
            public static unsafe void GetNamedBufferPointer(int buffer, BufferPointerNameARB pname, void** parameters)
            {
                GetNamedBufferPointerv(buffer, pname, parameters);
            }
            /// <inheritdoc cref="GetNamedBufferPointerv(int, BufferPointerNameARB, void**)"/>
            public static unsafe void* GetNamedBufferPointer(int buffer, BufferPointerNameARB pname)
            {
                void* parameters_val;
                void** parameters = &parameters_val;
                GetNamedBufferPointerv(buffer, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData(int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                GetNamedBufferSubData(buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, Span<T1> data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    GetNamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, T1[] data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    GetNamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    GetNamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameteriv(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetNamedFramebufferAttachmentParameteri(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameteriv(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe int GetNamedFramebufferAttachmentParameteri(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetNamedFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetNamedFramebufferParameteri(int framebuffer, GetFramebufferParameter pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetNamedFramebufferParameteriv(framebuffer, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
            public static unsafe int GetNamedFramebufferParameteri(int framebuffer, GetFramebufferParameter pname)
            {
                int param_val;
                int* param = &param_val;
                GetNamedFramebufferParameteriv(framebuffer, pname, param);
                return param_val;
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameteriv(int, RenderbufferParameterName, int*)"/>
            public static unsafe void GetNamedRenderbufferParameteri(int renderbuffer, RenderbufferParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedRenderbufferParameteriv(renderbuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameteriv(int, RenderbufferParameterName, int*)"/>
            public static unsafe int GetNamedRenderbufferParameteri(int renderbuffer, RenderbufferParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetNamedRenderbufferParameteriv(renderbuffer, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetNamedStringARB(int, byte*, int, int*, byte*)"/>
            public static unsafe string GetNamedStringARB(int namelen, string name, int bufSize, Span<int> stringlen)
            {
                string str;
                fixed (int* stringlen_ptr = stringlen)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    var str_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetNamedStringARB(namelen, name_ptr, bufSize, stringlen_ptr, str_ptr);
                    str = Marshal.PtrToStringUTF8((IntPtr)str_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return str;
            }
            /// <inheritdoc cref="GetNamedStringARB(int, byte*, int, int*, byte*)"/>
            public static unsafe void GetNamedStringARB(int namelen, string name, int bufSize, Span<int> stringlen, out string str)
            {
                fixed (int* stringlen_ptr = stringlen)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    var str_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetNamedStringARB(namelen, name_ptr, bufSize, stringlen_ptr, str_ptr);
                    str = Marshal.PtrToStringUTF8((IntPtr)str_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedStringARB(int, byte*, int, int*, byte*)"/>
            public static unsafe string GetNamedStringARB(int namelen, string name, int bufSize, int[] stringlen)
            {
                string str;
                fixed (int* stringlen_ptr = stringlen)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    var str_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetNamedStringARB(namelen, name_ptr, bufSize, stringlen_ptr, str_ptr);
                    str = Marshal.PtrToStringUTF8((IntPtr)str_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return str;
            }
            /// <inheritdoc cref="GetNamedStringARB(int, byte*, int, int*, byte*)"/>
            public static unsafe void GetNamedStringARB(int namelen, string name, int bufSize, int[] stringlen, out string str)
            {
                fixed (int* stringlen_ptr = stringlen)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    var str_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetNamedStringARB(namelen, name_ptr, bufSize, stringlen_ptr, str_ptr);
                    str = Marshal.PtrToStringUTF8((IntPtr)str_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedStringARB(int, byte*, int, int*, byte*)"/>
            public static unsafe string GetNamedStringARB(int namelen, string name, int bufSize, ref int stringlen)
            {
                string str;
                fixed (int* stringlen_ptr = &stringlen)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    var str_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetNamedStringARB(namelen, name_ptr, bufSize, stringlen_ptr, str_ptr);
                    str = Marshal.PtrToStringUTF8((IntPtr)str_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return str;
            }
            /// <inheritdoc cref="GetNamedStringARB(int, byte*, int, int*, byte*)"/>
            public static unsafe void GetNamedStringARB(int namelen, string name, int bufSize, ref int stringlen, out string str)
            {
                fixed (int* stringlen_ptr = &stringlen)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    var str_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetNamedStringARB(namelen, name_ptr, bufSize, stringlen_ptr, str_ptr);
                    str = Marshal.PtrToStringUTF8((IntPtr)str_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedStringivARB(int, byte*, All, int*)"/>
            public static unsafe void GetNamedStringivARB(int namelen, string name, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    GetNamedStringivARB(namelen, name_ptr, pname, parameters_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedStringivARB(int, byte*, All, int*)"/>
            public static unsafe void GetNamedStringivARB(int namelen, string name, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    GetNamedStringivARB(namelen, name_ptr, pname, parameters_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedStringivARB(int, byte*, All, int*)"/>
            public static unsafe void GetNamedStringivARB(int namelen, string name, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    GetNamedStringivARB(namelen, name_ptr, pname, parameters_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedStringivARB(int, byte*, All, int*)"/>
            public static unsafe int GetNamedStringivARB(int namelen, string name, All pname)
            {
                int parameters_val;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                int* parameters = &parameters_val;
                GetNamedStringivARB(namelen, name_ptr, pname, parameters);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return parameters_val;
            }
            /// <inheritdoc cref="GetnColorTableARB(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnColorTableARB(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr table)
            {
                void* table_vptr = (void*)table;
                GetnColorTableARB(target, format, type, bufSize, table_vptr);
            }
            /// <inheritdoc cref="GetnColorTableARB(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnColorTableARB<T1>(ColorTableTarget target, PixelFormat format, PixelType type, Span<T1> table)
                where T1 : unmanaged
            {
                int bufSize = (int)(table.Length * sizeof(T1));
                fixed (void* table_ptr = table)
                {
                    GetnColorTableARB(target, format, type, bufSize, table_ptr);
                }
            }
            /// <inheritdoc cref="GetnColorTableARB(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnColorTableARB<T1>(ColorTableTarget target, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                int bufSize = (int)(table.Length * sizeof(T1));
                fixed (void* table_ptr = table)
                {
                    GetnColorTableARB(target, format, type, bufSize, table_ptr);
                }
            }
            /// <inheritdoc cref="GetnColorTableARB(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnColorTableARB<T1>(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, ref T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    GetnColorTableARB(target, format, type, bufSize, table_ptr);
                }
            }
            /// <inheritdoc cref="GetnCompressedTexImageARB(TextureTarget, int, int, void*)"/>
            public static unsafe void GetnCompressedTexImageARB(TextureTarget target, int lod, int bufSize, IntPtr img)
            {
                void* img_vptr = (void*)img;
                GetnCompressedTexImageARB(target, lod, bufSize, img_vptr);
            }
            /// <inheritdoc cref="GetnCompressedTexImageARB(TextureTarget, int, int, void*)"/>
            public static unsafe void GetnCompressedTexImageARB<T1>(TextureTarget target, int lod, Span<T1> img)
                where T1 : unmanaged
            {
                int bufSize = (int)(img.Length * sizeof(T1));
                fixed (void* img_ptr = img)
                {
                    GetnCompressedTexImageARB(target, lod, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnCompressedTexImageARB(TextureTarget, int, int, void*)"/>
            public static unsafe void GetnCompressedTexImageARB<T1>(TextureTarget target, int lod, T1[] img)
                where T1 : unmanaged
            {
                int bufSize = (int)(img.Length * sizeof(T1));
                fixed (void* img_ptr = img)
                {
                    GetnCompressedTexImageARB(target, lod, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnCompressedTexImageARB(TextureTarget, int, int, void*)"/>
            public static unsafe void GetnCompressedTexImageARB<T1>(TextureTarget target, int lod, int bufSize, ref T1 img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = &img)
                {
                    GetnCompressedTexImageARB(target, lod, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnConvolutionFilterARB(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnConvolutionFilterARB(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr image)
            {
                void* image_vptr = (void*)image;
                GetnConvolutionFilterARB(target, format, type, bufSize, image_vptr);
            }
            /// <inheritdoc cref="GetnConvolutionFilterARB(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnConvolutionFilterARB<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, Span<T1> image)
                where T1 : unmanaged
            {
                int bufSize = (int)(image.Length * sizeof(T1));
                fixed (void* image_ptr = image)
                {
                    GetnConvolutionFilterARB(target, format, type, bufSize, image_ptr);
                }
            }
            /// <inheritdoc cref="GetnConvolutionFilterARB(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnConvolutionFilterARB<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                int bufSize = (int)(image.Length * sizeof(T1));
                fixed (void* image_ptr = image)
                {
                    GetnConvolutionFilterARB(target, format, type, bufSize, image_ptr);
                }
            }
            /// <inheritdoc cref="GetnConvolutionFilterARB(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnConvolutionFilterARB<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, ref T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    GetnConvolutionFilterARB(target, format, type, bufSize, image_ptr);
                }
            }
            /// <inheritdoc cref="GetnHistogramARB(HistogramTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnHistogramARB(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetnHistogramARB(target, reset, format, type, bufSize, values_vptr);
            }
            /// <inheritdoc cref="GetnHistogramARB(HistogramTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnHistogramARB<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                int bufSize = (int)(values.Length * sizeof(T1));
                fixed (void* values_ptr = values)
                {
                    GetnHistogramARB(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnHistogramARB(HistogramTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnHistogramARB<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                int bufSize = (int)(values.Length * sizeof(T1));
                fixed (void* values_ptr = values)
                {
                    GetnHistogramARB(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnHistogramARB(HistogramTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnHistogramARB<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, ref T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetnHistogramARB(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapdvARB(MapTarget, MapQuery, int, double*)"/>
            public static unsafe void GetnMapdvARB(MapTarget target, MapQuery query, Span<double> v)
            {
                int bufSize = (int)(v.Length * 8);
                fixed (double* v_ptr = v)
                {
                    GetnMapdvARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapdvARB(MapTarget, MapQuery, int, double*)"/>
            public static unsafe void GetnMapdvARB(MapTarget target, MapQuery query, double[] v)
            {
                int bufSize = (int)(v.Length * 8);
                fixed (double* v_ptr = v)
                {
                    GetnMapdvARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapdvARB(MapTarget, MapQuery, int, double*)"/>
            public static unsafe void GetnMapdvARB(MapTarget target, MapQuery query, int bufSize, ref double v)
            {
                fixed (double* v_ptr = &v)
                {
                    GetnMapdvARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapdvARB(MapTarget, MapQuery, int, double*)"/>
            public static unsafe double GetnMapdvARB(MapTarget target, MapQuery query, int bufSize)
            {
                double v_val;
                double* v = &v_val;
                GetnMapdvARB(target, query, bufSize, v);
                return v_val;
            }
            /// <inheritdoc cref="GetnMapfvARB(MapTarget, MapQuery, int, float*)"/>
            public static unsafe void GetnMapfvARB(MapTarget target, MapQuery query, Span<float> v)
            {
                int bufSize = (int)(v.Length);
                fixed (float* v_ptr = v)
                {
                    GetnMapfvARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapfvARB(MapTarget, MapQuery, int, float*)"/>
            public static unsafe void GetnMapfvARB(MapTarget target, MapQuery query, float[] v)
            {
                int bufSize = (int)(v.Length);
                fixed (float* v_ptr = v)
                {
                    GetnMapfvARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapfvARB(MapTarget, MapQuery, int, float*)"/>
            public static unsafe void GetnMapfvARB(MapTarget target, MapQuery query, int bufSize, ref float v)
            {
                fixed (float* v_ptr = &v)
                {
                    GetnMapfvARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapfvARB(MapTarget, MapQuery, int, float*)"/>
            public static unsafe float GetnMapfvARB(MapTarget target, MapQuery query, int bufSize)
            {
                float v_val;
                float* v = &v_val;
                GetnMapfvARB(target, query, bufSize, v);
                return v_val;
            }
            /// <inheritdoc cref="GetnMapivARB(MapTarget, MapQuery, int, int*)"/>
            public static unsafe void GetnMapivARB(MapTarget target, MapQuery query, Span<int> v)
            {
                int bufSize = (int)(v.Length);
                fixed (int* v_ptr = v)
                {
                    GetnMapivARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapivARB(MapTarget, MapQuery, int, int*)"/>
            public static unsafe void GetnMapivARB(MapTarget target, MapQuery query, int[] v)
            {
                int bufSize = (int)(v.Length);
                fixed (int* v_ptr = v)
                {
                    GetnMapivARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapivARB(MapTarget, MapQuery, int, int*)"/>
            public static unsafe void GetnMapivARB(MapTarget target, MapQuery query, int bufSize, ref int v)
            {
                fixed (int* v_ptr = &v)
                {
                    GetnMapivARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapivARB(MapTarget, MapQuery, int, int*)"/>
            public static unsafe int GetnMapivARB(MapTarget target, MapQuery query, int bufSize)
            {
                int v_val;
                int* v = &v_val;
                GetnMapivARB(target, query, bufSize, v);
                return v_val;
            }
            /// <inheritdoc cref="GetnMinmaxARB(MinmaxTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnMinmaxARB(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetnMinmaxARB(target, reset, format, type, bufSize, values_vptr);
            }
            /// <inheritdoc cref="GetnMinmaxARB(MinmaxTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnMinmaxARB<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                int bufSize = (int)(values.Length * sizeof(T1));
                fixed (void* values_ptr = values)
                {
                    GetnMinmaxARB(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnMinmaxARB(MinmaxTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnMinmaxARB<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                int bufSize = (int)(values.Length * sizeof(T1));
                fixed (void* values_ptr = values)
                {
                    GetnMinmaxARB(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnMinmaxARB(MinmaxTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnMinmaxARB<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, ref T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetnMinmaxARB(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapfvARB(PixelMap, int, float*)"/>
            public static unsafe void GetnPixelMapfvARB(PixelMap map, Span<float> values)
            {
                int bufSize = (int)(values.Length * 4);
                fixed (float* values_ptr = values)
                {
                    GetnPixelMapfvARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapfvARB(PixelMap, int, float*)"/>
            public static unsafe void GetnPixelMapfvARB(PixelMap map, float[] values)
            {
                int bufSize = (int)(values.Length * 4);
                fixed (float* values_ptr = values)
                {
                    GetnPixelMapfvARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapfvARB(PixelMap, int, float*)"/>
            public static unsafe void GetnPixelMapfvARB(PixelMap map, int bufSize, ref float values)
            {
                fixed (float* values_ptr = &values)
                {
                    GetnPixelMapfvARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapfvARB(PixelMap, int, float*)"/>
            public static unsafe float GetnPixelMapfvARB(PixelMap map, int bufSize)
            {
                float values_val;
                float* values = &values_val;
                GetnPixelMapfvARB(map, bufSize, values);
                return values_val;
            }
            /// <inheritdoc cref="GetnPixelMapuivARB(PixelMap, int, uint*)"/>
            public static unsafe void GetnPixelMapuivARB(PixelMap map, Span<uint> values)
            {
                int bufSize = (int)(values.Length);
                fixed (uint* values_ptr = values)
                {
                    GetnPixelMapuivARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapuivARB(PixelMap, int, uint*)"/>
            public static unsafe void GetnPixelMapuivARB(PixelMap map, uint[] values)
            {
                int bufSize = (int)(values.Length);
                fixed (uint* values_ptr = values)
                {
                    GetnPixelMapuivARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapuivARB(PixelMap, int, uint*)"/>
            public static unsafe void GetnPixelMapuivARB(PixelMap map, int bufSize, ref uint values)
            {
                fixed (uint* values_ptr = &values)
                {
                    GetnPixelMapuivARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapuivARB(PixelMap, int, uint*)"/>
            public static unsafe uint GetnPixelMapuivARB(PixelMap map, int bufSize)
            {
                uint values_val;
                uint* values = &values_val;
                GetnPixelMapuivARB(map, bufSize, values);
                return values_val;
            }
            /// <inheritdoc cref="GetnPixelMapusvARB(PixelMap, int, ushort*)"/>
            public static unsafe void GetnPixelMapusvARB(PixelMap map, Span<ushort> values)
            {
                int bufSize = (int)(values.Length);
                fixed (ushort* values_ptr = values)
                {
                    GetnPixelMapusvARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapusvARB(PixelMap, int, ushort*)"/>
            public static unsafe void GetnPixelMapusvARB(PixelMap map, ushort[] values)
            {
                int bufSize = (int)(values.Length);
                fixed (ushort* values_ptr = values)
                {
                    GetnPixelMapusvARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapusvARB(PixelMap, int, ushort*)"/>
            public static unsafe void GetnPixelMapusvARB(PixelMap map, int bufSize, ref ushort values)
            {
                fixed (ushort* values_ptr = &values)
                {
                    GetnPixelMapusvARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapusvARB(PixelMap, int, ushort*)"/>
            public static unsafe ushort GetnPixelMapusvARB(PixelMap map, int bufSize)
            {
                ushort values_val;
                ushort* values = &values_val;
                GetnPixelMapusvARB(map, bufSize, values);
                return values_val;
            }
            /// <inheritdoc cref="GetnPolygonStippleARB(int, byte*)"/>
            public static unsafe void GetnPolygonStippleARB(Span<byte> pattern)
            {
                int bufSize = (int)(pattern.Length);
                fixed (byte* pattern_ptr = pattern)
                {
                    GetnPolygonStippleARB(bufSize, pattern_ptr);
                }
            }
            /// <inheritdoc cref="GetnPolygonStippleARB(int, byte*)"/>
            public static unsafe void GetnPolygonStippleARB(byte[] pattern)
            {
                int bufSize = (int)(pattern.Length);
                fixed (byte* pattern_ptr = pattern)
                {
                    GetnPolygonStippleARB(bufSize, pattern_ptr);
                }
            }
            /// <inheritdoc cref="GetnPolygonStippleARB(int, byte*)"/>
            public static unsafe void GetnPolygonStippleARB(int bufSize, ref byte pattern)
            {
                fixed (byte* pattern_ptr = &pattern)
                {
                    GetnPolygonStippleARB(bufSize, pattern_ptr);
                }
            }
            /// <inheritdoc cref="GetnPolygonStippleARB(int, byte*)"/>
            public static unsafe byte GetnPolygonStippleARB(int bufSize)
            {
                byte pattern_val;
                byte* pattern = &pattern_val;
                GetnPolygonStippleARB(bufSize, pattern);
                return pattern_val;
            }
            /// <inheritdoc cref="GetnSeparableFilterARB(SeparableTargetEXT, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
            public static unsafe void GetnSeparableFilterARB(SeparableTargetEXT target, PixelFormat format, PixelType type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span)
            {
                void* row_vptr = (void*)row;
                void* column_vptr = (void*)column;
                void* span_vptr = (void*)span;
                GetnSeparableFilterARB(target, format, type, rowBufSize, row_vptr, columnBufSize, column_vptr, span_vptr);
            }
            /// <inheritdoc cref="GetnSeparableFilterARB(SeparableTargetEXT, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
            public static unsafe void GetnSeparableFilterARB<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, Span<T3> row, Span<T2> column, Span<T1> span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                int rowBufSize = (int)(row.Length * sizeof(T3));
                fixed (void* row_ptr = row)
                {
                    int columnBufSize = (int)(column.Length * sizeof(T2));
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* span_ptr = span)
                        {
                            GetnSeparableFilterARB(target, format, type, rowBufSize, row_ptr, columnBufSize, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetnSeparableFilterARB(SeparableTargetEXT, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
            public static unsafe void GetnSeparableFilterARB<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, T3[] row, T2[] column, T1[] span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                int rowBufSize = (int)(row.Length * sizeof(T3));
                fixed (void* row_ptr = row)
                {
                    int columnBufSize = (int)(column.Length * sizeof(T2));
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* span_ptr = span)
                        {
                            GetnSeparableFilterARB(target, format, type, rowBufSize, row_ptr, columnBufSize, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetnSeparableFilterARB(SeparableTargetEXT, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
            public static unsafe void GetnSeparableFilterARB<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, int rowBufSize, ref T1 row, int columnBufSize, ref T2 column, ref T3 span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                fixed (void* span_ptr = &span)
                {
                    GetnSeparableFilterARB(target, format, type, rowBufSize, row_ptr, columnBufSize, column_ptr, span_ptr);
                }
            }
            /// <inheritdoc cref="GetnTexImageARB(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnTexImageARB(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, IntPtr img)
            {
                void* img_vptr = (void*)img;
                GetnTexImageARB(target, level, format, type, bufSize, img_vptr);
            }
            /// <inheritdoc cref="GetnTexImageARB(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnTexImageARB<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, Span<T1> img)
                where T1 : unmanaged
            {
                int bufSize = (int)(img.Length * sizeof(T1));
                fixed (void* img_ptr = img)
                {
                    GetnTexImageARB(target, level, format, type, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnTexImageARB(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnTexImageARB<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, T1[] img)
                where T1 : unmanaged
            {
                int bufSize = (int)(img.Length * sizeof(T1));
                fixed (void* img_ptr = img)
                {
                    GetnTexImageARB(target, level, format, type, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnTexImageARB(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnTexImageARB<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, ref T1 img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = &img)
                {
                    GetnTexImageARB(target, level, format, type, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformdvARB(int, int, int, double*)"/>
            public static unsafe void GetnUniformdvARB(int program, int location, Span<double> parameters)
            {
                int bufSize = (int)(parameters.Length * 8);
                fixed (double* parameters_ptr = parameters)
                {
                    GetnUniformdvARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformdvARB(int, int, int, double*)"/>
            public static unsafe void GetnUniformdvARB(int program, int location, double[] parameters)
            {
                int bufSize = (int)(parameters.Length * 8);
                fixed (double* parameters_ptr = parameters)
                {
                    GetnUniformdvARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformdvARB(int, int, int, double*)"/>
            public static unsafe void GetnUniformdvARB(int program, int location, int bufSize, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetnUniformdvARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformdvARB(int, int, int, double*)"/>
            public static unsafe double GetnUniformdvARB(int program, int location, int bufSize)
            {
                double parameters_val;
                double* parameters = &parameters_val;
                GetnUniformdvARB(program, location, bufSize, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetnUniformfvARB(int, int, int, float*)"/>
            public static unsafe void GetnUniformfvARB(int program, int location, Span<float> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfvARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfvARB(int, int, int, float*)"/>
            public static unsafe void GetnUniformfvARB(int program, int location, float[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfvARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfvARB(int, int, int, float*)"/>
            public static unsafe void GetnUniformfvARB(int program, int location, int bufSize, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetnUniformfvARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfvARB(int, int, int, float*)"/>
            public static unsafe float GetnUniformfvARB(int program, int location, int bufSize)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetnUniformfvARB(program, location, bufSize, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetnUniformi64vARB(int, int, int, long*)"/>
            public static unsafe void GetnUniformi64vARB(int program, int location, Span<long> parameters)
            {
                int bufSize = (int)(parameters.Length * 8);
                fixed (long* parameters_ptr = parameters)
                {
                    GetnUniformi64vARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformi64vARB(int, int, int, long*)"/>
            public static unsafe void GetnUniformi64vARB(int program, int location, long[] parameters)
            {
                int bufSize = (int)(parameters.Length * 8);
                fixed (long* parameters_ptr = parameters)
                {
                    GetnUniformi64vARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformi64vARB(int, int, int, long*)"/>
            public static unsafe void GetnUniformi64vARB(int program, int location, int bufSize, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetnUniformi64vARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformi64vARB(int, int, int, long*)"/>
            public static unsafe long GetnUniformi64vARB(int program, int location, int bufSize)
            {
                long parameters_val;
                long* parameters = &parameters_val;
                GetnUniformi64vARB(program, location, bufSize, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetnUniformivARB(int, int, int, int*)"/>
            public static unsafe void GetnUniformivARB(int program, int location, Span<int> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformivARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformivARB(int, int, int, int*)"/>
            public static unsafe void GetnUniformivARB(int program, int location, int[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformivARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformivARB(int, int, int, int*)"/>
            public static unsafe void GetnUniformivARB(int program, int location, int bufSize, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetnUniformivARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformivARB(int, int, int, int*)"/>
            public static unsafe int GetnUniformivARB(int program, int location, int bufSize)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetnUniformivARB(program, location, bufSize, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetnUniformui64vARB(int, int, int, ulong*)"/>
            public static unsafe void GetnUniformui64vARB(int program, int location, Span<ulong> parameters)
            {
                int bufSize = (int)(parameters.Length * 8);
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetnUniformui64vARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformui64vARB(int, int, int, ulong*)"/>
            public static unsafe void GetnUniformui64vARB(int program, int location, ulong[] parameters)
            {
                int bufSize = (int)(parameters.Length * 8);
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetnUniformui64vARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformui64vARB(int, int, int, ulong*)"/>
            public static unsafe void GetnUniformui64vARB(int program, int location, int bufSize, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetnUniformui64vARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformui64vARB(int, int, int, ulong*)"/>
            public static unsafe ulong GetnUniformui64vARB(int program, int location, int bufSize)
            {
                ulong parameters_val;
                ulong* parameters = &parameters_val;
                GetnUniformui64vARB(program, location, bufSize, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetnUniformuivARB(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuivARB(int program, int location, Span<uint> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuivARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuivARB(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuivARB(int program, int location, uint[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuivARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuivARB(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuivARB(int program, int location, int bufSize, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetnUniformuivARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuivARB(int, int, int, uint*)"/>
            public static unsafe uint GetnUniformuivARB(int program, int location, int bufSize)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetnUniformuivARB(program, location, bufSize, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetObjectParameterfvARB(GLHandleARB, All, float*)"/>
            public static unsafe void GetObjectParameterfvARB(GLHandleARB obj, All pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetObjectParameterfvARB(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterfvARB(GLHandleARB, All, float*)"/>
            public static unsafe void GetObjectParameterfvARB(GLHandleARB obj, All pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetObjectParameterfvARB(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterfvARB(GLHandleARB, All, float*)"/>
            public static unsafe void GetObjectParameterfvARB(GLHandleARB obj, All pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetObjectParameterfvARB(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterfvARB(GLHandleARB, All, float*)"/>
            public static unsafe float GetObjectParameterfvARB(GLHandleARB obj, All pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetObjectParameterfvARB(obj, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetObjectParameterivARB(GLHandleARB, All, int*)"/>
            public static unsafe void GetObjectParameterivARB(GLHandleARB obj, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectParameterivARB(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterivARB(GLHandleARB, All, int*)"/>
            public static unsafe void GetObjectParameterivARB(GLHandleARB obj, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectParameterivARB(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterivARB(GLHandleARB, All, int*)"/>
            public static unsafe void GetObjectParameterivARB(GLHandleARB obj, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetObjectParameterivARB(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterivARB(GLHandleARB, All, int*)"/>
            public static unsafe int GetObjectParameterivARB(GLHandleARB obj, All pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetObjectParameterivARB(obj, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary(int program, int bufSize, Span<int> length, Span<All> binaryFormat, IntPtr binary)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (All* binaryFormat_ptr = binaryFormat)
                    {
                        void* binary_vptr = (void*)binary;
                        GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary(int program, int bufSize, int[] length, All[] binaryFormat, IntPtr binary)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (All* binaryFormat_ptr = binaryFormat)
                    {
                        void* binary_vptr = (void*)binary;
                        GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary(int program, int bufSize, ref int length, ref All binaryFormat, IntPtr binary)
            {
                fixed (int* length_ptr = &length)
                fixed (All* binaryFormat_ptr = &binaryFormat)
                {
                    void* binary_vptr = (void*)binary;
                    GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
                }
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary<T1>(int program, Span<int> length, Span<All> binaryFormat, Span<T1> binary)
                where T1 : unmanaged
            {
                fixed (int* length_ptr = length)
                {
                    fixed (All* binaryFormat_ptr = binaryFormat)
                    {
                        int bufSize = (int)(binary.Length * sizeof(T1));
                        fixed (void* binary_ptr = binary)
                        {
                            GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary<T1>(int program, int[] length, All[] binaryFormat, T1[] binary)
                where T1 : unmanaged
            {
                fixed (int* length_ptr = length)
                {
                    fixed (All* binaryFormat_ptr = binaryFormat)
                    {
                        int bufSize = (int)(binary.Length * sizeof(T1));
                        fixed (void* binary_ptr = binary)
                        {
                            GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary<T1>(int program, int bufSize, ref int length, ref All binaryFormat, ref T1 binary)
                where T1 : unmanaged
            {
                fixed (int* length_ptr = &length)
                fixed (All* binaryFormat_ptr = &binaryFormat)
                fixed (void* binary_ptr = &binary)
                {
                    GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterdvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramEnvParameterdvARB(ProgramTarget target, uint index, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterdvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterdvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramEnvParameterdvARB(ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterdvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterdvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramEnvParameterdvARB(ProgramTarget target, uint index, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetProgramEnvParameterdvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterdvARB(ProgramTarget, uint, double*)"/>
            public static unsafe double GetProgramEnvParameterdvARB(ProgramTarget target, uint index)
            {
                double parameters_val;
                double* parameters = &parameters_val;
                GetProgramEnvParameterdvARB(target, index, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramEnvParameterfvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramEnvParameterfvARB(ProgramTarget target, uint index, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterfvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterfvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramEnvParameterfvARB(ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterfvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterfvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramEnvParameterfvARB(ProgramTarget target, uint index, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetProgramEnvParameterfvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterfvARB(ProgramTarget, uint, float*)"/>
            public static unsafe float GetProgramEnvParameterfvARB(ProgramTarget target, uint index)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetProgramEnvParameterfvARB(target, index, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
            public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
            public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
            public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
            public static unsafe int GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetProgramInterfaceiv(program, programInterface, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramivARB(ProgramTarget, ProgramPropertyARB, int*)"/>
            public static unsafe void GetProgramivARB(ProgramTarget target, ProgramPropertyARB pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramivARB(ProgramTarget, ProgramPropertyARB, int*)"/>
            public static unsafe void GetProgramivARB(ProgramTarget target, ProgramPropertyARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramivARB(ProgramTarget, ProgramPropertyARB, int*)"/>
            public static unsafe void GetProgramivARB(ProgramTarget target, ProgramPropertyARB pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramivARB(ProgramTarget, ProgramPropertyARB, int*)"/>
            public static unsafe int GetProgramivARB(ProgramTarget target, ProgramPropertyARB pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetProgramivARB(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramLocalParameterdvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramLocalParameterdvARB(ProgramTarget target, uint index, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterdvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterdvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramLocalParameterdvARB(ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterdvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterdvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramLocalParameterdvARB(ProgramTarget target, uint index, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetProgramLocalParameterdvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterdvARB(ProgramTarget, uint, double*)"/>
            public static unsafe double GetProgramLocalParameterdvARB(ProgramTarget target, uint index)
            {
                double parameters_val;
                double* parameters = &parameters_val;
                GetProgramLocalParameterdvARB(target, index, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramLocalParameterfvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramLocalParameterfvARB(ProgramTarget target, uint index, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterfvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterfvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramLocalParameterfvARB(ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterfvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterfvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramLocalParameterfvARB(ProgramTarget target, uint index, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetProgramLocalParameterfvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterfvARB(ProgramTarget, uint, float*)"/>
            public static unsafe float GetProgramLocalParameterfvARB(ProgramTarget target, uint index)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetProgramLocalParameterfvARB(target, index, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, Span<int> length)
            {
                string infoLog;
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, Span<int> length, out string infoLog)
            {
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, int[] length)
            {
                string infoLog;
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, int[] length, out string infoLog)
            {
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, ref int length)
            {
                string infoLog;
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, ref int length, out string infoLog)
            {
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
            public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramPipelineiv(pipeline, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
            public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramPipelineiv(pipeline, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
            public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramPipelineiv(pipeline, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
            public static unsafe int GetProgramPipelinei(int pipeline, PipelineParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetProgramPipelineiv(pipeline, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramResourceIndex(int, ProgramInterface, byte*)"/>
            public static unsafe uint GetProgramResourceIndex(int program, ProgramInterface programInterface, string name)
            {
                uint returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetProgramResourceIndex(program, programInterface, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
            public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, ReadOnlySpan<ProgramResourceProperty> props, Span<int> length, Span<int> parameters)
            {
                int propCount = (int)(props.Length);
                fixed (ProgramResourceProperty* props_ptr = props)
                {
                    fixed (int* length_ptr = length)
                    {
                        int count = (int)(parameters.Length);
                        fixed (int* parameters_ptr = parameters)
                        {
                            GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
            public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, ProgramResourceProperty[] props, int[] length, int[] parameters)
            {
                int propCount = (int)(props.Length);
                fixed (ProgramResourceProperty* props_ptr = props)
                {
                    fixed (int* length_ptr = length)
                    {
                        int count = (int)(parameters.Length);
                        fixed (int* parameters_ptr = parameters)
                        {
                            GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
            public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, int propCount, in ProgramResourceProperty props, int count, ref int length, ref int parameters)
            {
                fixed (ProgramResourceProperty* props_ptr = &props)
                fixed (int* length_ptr = &length)
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
            public static unsafe int GetProgramResourcei(int program, ProgramInterface programInterface, uint index, ReadOnlySpan<ProgramResourceProperty> props, int count, Span<int> length)
            {
                int parameters_val;
                int propCount = (int)(props.Length);
                fixed (ProgramResourceProperty* props_ptr = props)
                {
                    fixed (int* length_ptr = length)
                    {
                        int* parameters = &parameters_val;
                        GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters);
                    }
                }
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
            public static unsafe int GetProgramResourcei(int program, ProgramInterface programInterface, uint index, ProgramResourceProperty[] props, int count, int[] length)
            {
                int parameters_val;
                int propCount = (int)(props.Length);
                fixed (ProgramResourceProperty* props_ptr = props)
                {
                    fixed (int* length_ptr = length)
                    {
                        int* parameters = &parameters_val;
                        GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters);
                    }
                }
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
            public static unsafe int GetProgramResourcei(int program, ProgramInterface programInterface, uint index, int propCount, in ProgramResourceProperty props, int count, ref int length)
            {
                int parameters_val;
                fixed (ProgramResourceProperty* props_ptr = &props)
                fixed (int* length_ptr = &length)
                {
                    int* parameters = &parameters_val;
                    GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters);
                }
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramResourceLocation(int, ProgramInterface, byte*)"/>
            public static unsafe int GetProgramResourceLocation(int program, ProgramInterface programInterface, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetProgramResourceLocation(program, programInterface, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetProgramResourceLocationIndex(int, ProgramInterface, byte*)"/>
            public static unsafe int GetProgramResourceLocationIndex(int program, ProgramInterface programInterface, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetProgramResourceLocationIndex(program, programInterface, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
            public static unsafe string GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, Span<int> length)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
            public static unsafe void GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, Span<int> length, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
            public static unsafe string GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, int[] length)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
            public static unsafe void GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, int[] length, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
            public static unsafe string GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, ref int length)
            {
                string name;
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
            public static unsafe void GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, ref int length, out string name)
            {
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
            public static unsafe void GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname, Span<int> values)
            {
                fixed (int* values_ptr = values)
                {
                    GetProgramStageiv(program, shadertype, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
            public static unsafe void GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname, int[] values)
            {
                fixed (int* values_ptr = values)
                {
                    GetProgramStageiv(program, shadertype, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
            public static unsafe void GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname, ref int values)
            {
                fixed (int* values_ptr = &values)
                {
                    GetProgramStageiv(program, shadertype, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
            public static unsafe int GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname)
            {
                int values_val;
                int* values = &values_val;
                GetProgramStageiv(program, shadertype, pname, values);
                return values_val;
            }
            /// <inheritdoc cref="GetProgramStringARB(ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetProgramStringARB(ProgramTarget target, ProgramStringProperty pname, IntPtr str)
            {
                void* str_vptr = (void*)str;
                GetProgramStringARB(target, pname, str_vptr);
            }
            /// <inheritdoc cref="GetProgramStringARB(ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetProgramStringARB<T1>(ProgramTarget target, ProgramStringProperty pname, Span<T1> str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    GetProgramStringARB(target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStringARB(ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetProgramStringARB<T1>(ProgramTarget target, ProgramStringProperty pname, T1[] str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    GetProgramStringARB(target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStringARB(ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetProgramStringARB<T1>(ProgramTarget target, ProgramStringProperty pname, ref T1 str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = &str)
                {
                    GetProgramStringARB(target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryBufferObjecti64v(int, int, QueryObjectParameterName, IntPtr)"/>
            public static unsafe void GetQueryBufferObjecti64(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
            {
                GetQueryBufferObjecti64v(id, buffer, pname, offset);
            }
            /// <inheritdoc cref="GetQueryBufferObjectiv(int, int, QueryObjectParameterName, IntPtr)"/>
            public static unsafe void GetQueryBufferObjecti(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
            {
                GetQueryBufferObjectiv(id, buffer, pname, offset);
            }
            /// <inheritdoc cref="GetQueryBufferObjectui64v(int, int, QueryObjectParameterName, IntPtr)"/>
            public static unsafe void GetQueryBufferObjectui64(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
            {
                GetQueryBufferObjectui64v(id, buffer, pname, offset);
            }
            /// <inheritdoc cref="GetQueryBufferObjectuiv(int, int, QueryObjectParameterName, IntPtr)"/>
            public static unsafe void GetQueryBufferObjectui(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
            {
                GetQueryBufferObjectuiv(id, buffer, pname, offset);
            }
            /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
            public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryIndexediv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
            public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryIndexediv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
            public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetQueryIndexediv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
            public static unsafe int GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetQueryIndexediv(target, index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetQueryivARB(QueryTarget, QueryParameterName, int*)"/>
            public static unsafe void GetQueryivARB(QueryTarget target, QueryParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryivARB(QueryTarget, QueryParameterName, int*)"/>
            public static unsafe void GetQueryivARB(QueryTarget target, QueryParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryivARB(QueryTarget, QueryParameterName, int*)"/>
            public static unsafe void GetQueryivARB(QueryTarget target, QueryParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetQueryivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryivARB(QueryTarget, QueryParameterName, int*)"/>
            public static unsafe int GetQueryivARB(QueryTarget target, QueryParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetQueryivARB(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetQueryObjecti64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetQueryObjecti64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetQueryObjecti64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
            public static unsafe long GetQueryObjecti64(int id, QueryObjectParameterName pname)
            {
                long parameters_val;
                long* parameters = &parameters_val;
                GetQueryObjecti64v(id, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetQueryObjectivARB(int, QueryObjectParameterName, int*)"/>
            public static unsafe void GetQueryObjectivARB(int id, QueryObjectParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryObjectivARB(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectivARB(int, QueryObjectParameterName, int*)"/>
            public static unsafe void GetQueryObjectivARB(int id, QueryObjectParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryObjectivARB(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectivARB(int, QueryObjectParameterName, int*)"/>
            public static unsafe void GetQueryObjectivARB(int id, QueryObjectParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetQueryObjectivARB(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectivARB(int, QueryObjectParameterName, int*)"/>
            public static unsafe int GetQueryObjectivARB(int id, QueryObjectParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetQueryObjectivARB(id, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetQueryObjectui64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetQueryObjectui64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetQueryObjectui64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe ulong GetQueryObjectui64(int id, QueryObjectParameterName pname)
            {
                ulong parameters_val;
                ulong* parameters = &parameters_val;
                GetQueryObjectui64v(id, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetQueryObjectuivARB(int, QueryObjectParameterName, uint*)"/>
            public static unsafe void GetQueryObjectuivARB(int id, QueryObjectParameterName pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetQueryObjectuivARB(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectuivARB(int, QueryObjectParameterName, uint*)"/>
            public static unsafe void GetQueryObjectuivARB(int id, QueryObjectParameterName pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetQueryObjectuivARB(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectuivARB(int, QueryObjectParameterName, uint*)"/>
            public static unsafe void GetQueryObjectuivARB(int id, QueryObjectParameterName pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetQueryObjectuivARB(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectuivARB(int, QueryObjectParameterName, uint*)"/>
            public static unsafe uint GetQueryObjectuivARB(int id, QueryObjectParameterName pname)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetQueryObjectuivARB(id, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetRenderbufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetRenderbufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetRenderbufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe int GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetRenderbufferParameteriv(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetSamplerParameterfv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetSamplerParameterfv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetSamplerParameterfv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe float GetSamplerParameterf(int sampler, SamplerParameterF pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetSamplerParameterfv(sampler, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetSamplerParameterIiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetSamplerParameterIiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetSamplerParameterIiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe int GetSamplerParameterIi(int sampler, SamplerParameterI pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetSamplerParameterIiv(sampler, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe uint GetSamplerParameterIui(int sampler, SamplerParameterI pname)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetSamplerParameterIuiv(sampler, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetSamplerParameteriv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetSamplerParameteriv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetSamplerParameteriv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe int GetSamplerParameteri(int sampler, SamplerParameterI pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetSamplerParameteriv(sampler, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter(SeparableTargetEXT target, PixelFormat format, PixelType type, IntPtr row, IntPtr column, IntPtr span)
            {
                void* row_vptr = (void*)row;
                void* column_vptr = (void*)column;
                void* span_vptr = (void*)span;
                GetSeparableFilter(target, format, type, row_vptr, column_vptr, span_vptr);
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, Span<T3> row, Span<T2> column, Span<T1> span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* span_ptr = span)
                        {
                            GetSeparableFilter(target, format, type, row_ptr, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, T3[] row, T2[] column, T1[] span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* span_ptr = span)
                        {
                            GetSeparableFilter(target, format, type, row_ptr, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, ref T1 row, ref T2 column, ref T3 span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                fixed (void* span_ptr = &span)
                {
                    GetSeparableFilter(target, format, type, row_ptr, column_ptr, span_ptr);
                }
            }
            /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
            public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, Span<int> range, Span<int> precision)
            {
                fixed (int* range_ptr = range)
                {
                    fixed (int* precision_ptr = precision)
                    {
                        GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
            public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, int[] range, int[] precision)
            {
                fixed (int* range_ptr = range)
                {
                    fixed (int* precision_ptr = precision)
                    {
                        GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
            public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, ref int range, ref int precision)
            {
                fixed (int* range_ptr = &range)
                fixed (int* precision_ptr = &precision)
                {
                    GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                }
            }
            /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
            public static unsafe int GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, Span<int> range)
            {
                int precision_val;
                fixed (int* range_ptr = range)
                {
                    int* precision = &precision_val;
                    GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision);
                }
                return precision_val;
            }
            /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
            public static unsafe int GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, int[] range)
            {
                int precision_val;
                fixed (int* range_ptr = range)
                {
                    int* precision = &precision_val;
                    GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision);
                }
                return precision_val;
            }
            /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
            public static unsafe int GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, ref int range)
            {
                int precision_val;
                fixed (int* range_ptr = &range)
                {
                    int* precision = &precision_val;
                    GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision);
                }
                return precision_val;
            }
            /// <inheritdoc cref="GetShaderSourceARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe string GetShaderSourceARB(GLHandleARB obj, int maxLength, Span<int> length)
            {
                string source;
                fixed (int* length_ptr = length)
                {
                    var source_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetShaderSourceARB(obj, maxLength, length_ptr, source_ptr);
                    source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)source_ptr);
                }
                return source;
            }
            /// <inheritdoc cref="GetShaderSourceARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe void GetShaderSourceARB(GLHandleARB obj, int maxLength, Span<int> length, out string source)
            {
                fixed (int* length_ptr = length)
                {
                    var source_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetShaderSourceARB(obj, maxLength, length_ptr, source_ptr);
                    source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)source_ptr);
                }
            }
            /// <inheritdoc cref="GetShaderSourceARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe string GetShaderSourceARB(GLHandleARB obj, int maxLength, int[] length)
            {
                string source;
                fixed (int* length_ptr = length)
                {
                    var source_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetShaderSourceARB(obj, maxLength, length_ptr, source_ptr);
                    source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)source_ptr);
                }
                return source;
            }
            /// <inheritdoc cref="GetShaderSourceARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe void GetShaderSourceARB(GLHandleARB obj, int maxLength, int[] length, out string source)
            {
                fixed (int* length_ptr = length)
                {
                    var source_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetShaderSourceARB(obj, maxLength, length_ptr, source_ptr);
                    source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)source_ptr);
                }
            }
            /// <inheritdoc cref="GetShaderSourceARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe string GetShaderSourceARB(GLHandleARB obj, int maxLength, ref int length)
            {
                string source;
                fixed (int* length_ptr = &length)
                {
                    var source_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetShaderSourceARB(obj, maxLength, length_ptr, source_ptr);
                    source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)source_ptr);
                }
                return source;
            }
            /// <inheritdoc cref="GetShaderSourceARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe void GetShaderSourceARB(GLHandleARB obj, int maxLength, ref int length, out string source)
            {
                fixed (int* length_ptr = &length)
                {
                    var source_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetShaderSourceARB(obj, maxLength, length_ptr, source_ptr);
                    source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)source_ptr);
                }
            }
            /// <inheritdoc cref="GetSubroutineIndex(int, ShaderType, byte*)"/>
            public static unsafe uint GetSubroutineIndex(int program, ShaderType shadertype, string name)
            {
                uint returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetSubroutineIndex(program, shadertype, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetSubroutineUniformLocation(int, ShaderType, byte*)"/>
            public static unsafe int GetSubroutineUniformLocation(int program, ShaderType shadertype, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetSubroutineUniformLocation(program, shadertype, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
            public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, Span<int> length, Span<int> values)
            {
                fixed (int* length_ptr = length)
                {
                    int count = (int)(values.Length);
                    fixed (int* values_ptr = values)
                    {
                        GetSynciv(sync, pname, count, length_ptr, values_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
            public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, int[] length, int[] values)
            {
                fixed (int* length_ptr = length)
                {
                    int count = (int)(values.Length);
                    fixed (int* values_ptr = values)
                    {
                        GetSynciv(sync, pname, count, length_ptr, values_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
            public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, int count, ref int length, ref int values)
            {
                fixed (int* length_ptr = &length)
                fixed (int* values_ptr = &values)
                {
                    GetSynciv(sync, pname, count, length_ptr, values_ptr);
                }
            }
            /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
            public static unsafe int GetSynci(GLSync sync, SyncParameterName pname, int count, Span<int> length)
            {
                int values_val;
                fixed (int* length_ptr = length)
                {
                    int* values = &values_val;
                    GetSynciv(sync, pname, count, length_ptr, values);
                }
                return values_val;
            }
            /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
            public static unsafe int GetSynci(GLSync sync, SyncParameterName pname, int count, int[] length)
            {
                int values_val;
                fixed (int* length_ptr = length)
                {
                    int* values = &values_val;
                    GetSynciv(sync, pname, count, length_ptr, values);
                }
                return values_val;
            }
            /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
            public static unsafe int GetSynci(GLSync sync, SyncParameterName pname, int count, ref int length)
            {
                int values_val;
                fixed (int* length_ptr = &length)
                {
                    int* values = &values_val;
                    GetSynciv(sync, pname, count, length_ptr, values);
                }
                return values_val;
            }
            /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureImage(int texture, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetTextureImage(texture, level, format, type, bufSize, pixels_vptr);
            }
            /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, Span<T1> pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, int bufSize, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfv(int, int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureLevelParameterf(int texture, int level, GetTextureParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetTextureLevelParameterfv(texture, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfv(int, int, GetTextureParameter, float*)"/>
            public static unsafe float GetTextureLevelParameterf(int texture, int level, GetTextureParameter pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetTextureLevelParameterfv(texture, level, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTextureLevelParameteriv(int, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureLevelParameteri(int texture, int level, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureLevelParameteriv(texture, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameteriv(int, int, GetTextureParameter, int*)"/>
            public static unsafe int GetTextureLevelParameteri(int texture, int level, GetTextureParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetTextureLevelParameteriv(texture, level, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTextureParameterfv(int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureParameterf(int texture, GetTextureParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetTextureParameterfv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterfv(int, GetTextureParameter, float*)"/>
            public static unsafe float GetTextureParameterf(int texture, GetTextureParameter pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetTextureParameterfv(texture, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTextureParameterIiv(int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterIi(int texture, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureParameterIiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIiv(int, GetTextureParameter, int*)"/>
            public static unsafe int GetTextureParameterIi(int texture, GetTextureParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetTextureParameterIiv(texture, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTextureParameterIuiv(int, GetTextureParameter, uint*)"/>
            public static unsafe void GetTextureParameterIui(int texture, GetTextureParameter pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetTextureParameterIuiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIuiv(int, GetTextureParameter, uint*)"/>
            public static unsafe uint GetTextureParameterIui(int texture, GetTextureParameter pname)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetTextureParameterIuiv(texture, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTextureParameteriv(int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameteri(int texture, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureParameteriv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameteriv(int, GetTextureParameter, int*)"/>
            public static unsafe int GetTextureParameteri(int texture, GetTextureParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetTextureParameteriv(texture, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_vptr);
            }
            /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, Span<T1> pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbacki_v(int, TransformFeedbackPName, uint, int*)"/>
            public static unsafe void GetTransformFeedback(int xfb, TransformFeedbackPName pname, uint index, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetTransformFeedbacki_v(xfb, pname, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbacki_v(int, TransformFeedbackPName, uint, int*)"/>
            public static unsafe int GetTransformFeedback(int xfb, TransformFeedbackPName pname, uint index)
            {
                int param_val;
                int* param = &param_val;
                GetTransformFeedbacki_v(xfb, pname, index, param);
                return param_val;
            }
            /// <inheritdoc cref="GetTransformFeedbacki64_v(int, TransformFeedbackPName, uint, long*)"/>
            public static unsafe void GetTransformFeedbacki64_(int xfb, TransformFeedbackPName pname, uint index, ref long param)
            {
                fixed (long* param_ptr = &param)
                {
                    GetTransformFeedbacki64_v(xfb, pname, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbacki64_v(int, TransformFeedbackPName, uint, long*)"/>
            public static unsafe long GetTransformFeedbacki64_(int xfb, TransformFeedbackPName pname, uint index)
            {
                long param_val;
                long* param = &param_val;
                GetTransformFeedbacki64_v(xfb, pname, index, param);
                return param_val;
            }
            /// <inheritdoc cref="GetTransformFeedbackiv(int, TransformFeedbackPName, int*)"/>
            public static unsafe void GetTransformFeedbacki(int xfb, TransformFeedbackPName pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetTransformFeedbackiv(xfb, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackiv(int, TransformFeedbackPName, int*)"/>
            public static unsafe int GetTransformFeedbacki(int xfb, TransformFeedbackPName pname)
            {
                int param_val;
                int* param = &param_val;
                GetTransformFeedbackiv(xfb, pname, param);
                return param_val;
            }
            /// <inheritdoc cref="GetUniformBlockIndex(int, byte*)"/>
            public static unsafe uint GetUniformBlockIndex(int program, string uniformBlockName)
            {
                uint returnValue;
                byte* uniformBlockName_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(uniformBlockName);
                returnValue = GetUniformBlockIndex(program, uniformBlockName_ptr);
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
            public static unsafe void GetUniformd(int program, int location, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetUniformdv(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
            public static unsafe void GetUniformd(int program, int location, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetUniformdv(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
            public static unsafe void GetUniformd(int program, int location, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetUniformdv(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
            public static unsafe double GetUniformd(int program, int location)
            {
                double parameters_val;
                double* parameters = &parameters_val;
                GetUniformdv(program, location, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetUniformfvARB(GLHandleARB, int, float*)"/>
            public static unsafe void GetUniformfvARB(GLHandleARB programObj, int location, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetUniformfvARB(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformfvARB(GLHandleARB, int, float*)"/>
            public static unsafe void GetUniformfvARB(GLHandleARB programObj, int location, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetUniformfvARB(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformfvARB(GLHandleARB, int, float*)"/>
            public static unsafe void GetUniformfvARB(GLHandleARB programObj, int location, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetUniformfvARB(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformfvARB(GLHandleARB, int, float*)"/>
            public static unsafe float GetUniformfvARB(GLHandleARB programObj, int location)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetUniformfvARB(programObj, location, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetUniformi64vARB(int, int, long*)"/>
            public static unsafe void GetUniformi64vARB(int program, int location, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64vARB(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vARB(int, int, long*)"/>
            public static unsafe void GetUniformi64vARB(int program, int location, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64vARB(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vARB(int, int, long*)"/>
            public static unsafe void GetUniformi64vARB(int program, int location, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetUniformi64vARB(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vARB(int, int, long*)"/>
            public static unsafe long GetUniformi64vARB(int program, int location)
            {
                long parameters_val;
                long* parameters = &parameters_val;
                GetUniformi64vARB(program, location, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
            public static unsafe void GetUniformIndices(int program, int uniformCount, byte** uniformNames, Span<uint> uniformIndices)
            {
                fixed (uint* uniformIndices_ptr = uniformIndices)
                {
                    GetUniformIndices(program, uniformCount, uniformNames, uniformIndices_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
            public static unsafe void GetUniformIndices(int program, int uniformCount, byte** uniformNames, uint[] uniformIndices)
            {
                fixed (uint* uniformIndices_ptr = uniformIndices)
                {
                    GetUniformIndices(program, uniformCount, uniformNames, uniformIndices_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
            public static unsafe void GetUniformIndices(int program, int uniformCount, byte** uniformNames, ref uint uniformIndices)
            {
                fixed (uint* uniformIndices_ptr = &uniformIndices)
                {
                    GetUniformIndices(program, uniformCount, uniformNames, uniformIndices_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
            public static unsafe uint GetUniformIndices(int program, int uniformCount, byte** uniformNames)
            {
                uint uniformIndices_val;
                uint* uniformIndices = &uniformIndices_val;
                GetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
                return uniformIndices_val;
            }
            /// <inheritdoc cref="GetUniformivARB(GLHandleARB, int, int*)"/>
            public static unsafe void GetUniformivARB(GLHandleARB programObj, int location, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetUniformivARB(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformivARB(GLHandleARB, int, int*)"/>
            public static unsafe void GetUniformivARB(GLHandleARB programObj, int location, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetUniformivARB(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformivARB(GLHandleARB, int, int*)"/>
            public static unsafe void GetUniformivARB(GLHandleARB programObj, int location, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetUniformivARB(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformivARB(GLHandleARB, int, int*)"/>
            public static unsafe int GetUniformivARB(GLHandleARB programObj, int location)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetUniformivARB(programObj, location, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetUniformLocationARB(GLHandleARB, byte*)"/>
            public static unsafe int GetUniformLocationARB(GLHandleARB programObj, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetUniformLocationARB(programObj, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
            public static unsafe void GetUniformSubroutineui(ShaderType shadertype, int location, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
            public static unsafe void GetUniformSubroutineui(ShaderType shadertype, int location, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
            public static unsafe void GetUniformSubroutineui(ShaderType shadertype, int location, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
            public static unsafe uint GetUniformSubroutineui(ShaderType shadertype, int location)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetUniformSubroutineuiv(shadertype, location, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetUniformui64vARB(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vARB(int program, int location, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64vARB(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vARB(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vARB(int program, int location, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64vARB(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vARB(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vARB(int program, int location, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetUniformui64vARB(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vARB(int, int, ulong*)"/>
            public static unsafe ulong GetUniformui64vARB(int program, int location)
            {
                ulong parameters_val;
                ulong* parameters = &parameters_val;
                GetUniformui64vARB(program, location, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexArrayIndexed64iv(int, uint, VertexArrayPName, long*)"/>
            public static unsafe void GetVertexArrayIndexed64iv(int vaobj, uint index, VertexArrayPName pname, ref long param)
            {
                fixed (long* param_ptr = &param)
                {
                    GetVertexArrayIndexed64iv(vaobj, index, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIndexed64iv(int, uint, VertexArrayPName, long*)"/>
            public static unsafe long GetVertexArrayIndexed64iv(int vaobj, uint index, VertexArrayPName pname)
            {
                long param_val;
                long* param = &param_val;
                GetVertexArrayIndexed64iv(vaobj, index, pname, param);
                return param_val;
            }
            /// <inheritdoc cref="GetVertexArrayIndexediv(int, uint, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayIndexedi(int vaobj, uint index, VertexArrayPName pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetVertexArrayIndexediv(vaobj, index, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIndexediv(int, uint, VertexArrayPName, int*)"/>
            public static unsafe int GetVertexArrayIndexedi(int vaobj, uint index, VertexArrayPName pname)
            {
                int param_val;
                int* param = &param_val;
                GetVertexArrayIndexediv(vaobj, index, pname, param);
                return param_val;
            }
            /// <inheritdoc cref="GetVertexArrayiv(int, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayi(int vaobj, VertexArrayPName pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetVertexArrayiv(vaobj, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayiv(int, VertexArrayPName, int*)"/>
            public static unsafe int GetVertexArrayi(int vaobj, VertexArrayPName pname)
            {
                int param_val;
                int* param = &param_val;
                GetVertexArrayiv(vaobj, pname, param);
                return param_val;
            }
            /// <inheritdoc cref="GetVertexAttribdvARB(uint, VertexAttribPropertyARB, double*)"/>
            public static unsafe void GetVertexAttribdvARB(uint index, VertexAttribPropertyARB pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribdvARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribdvARB(uint, VertexAttribPropertyARB, double*)"/>
            public static unsafe void GetVertexAttribdvARB(uint index, VertexAttribPropertyARB pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribdvARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribdvARB(uint, VertexAttribPropertyARB, double*)"/>
            public static unsafe void GetVertexAttribdvARB(uint index, VertexAttribPropertyARB pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetVertexAttribdvARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribdvARB(uint, VertexAttribPropertyARB, double*)"/>
            public static unsafe double GetVertexAttribdvARB(uint index, VertexAttribPropertyARB pname)
            {
                double parameters_val;
                double* parameters = &parameters_val;
                GetVertexAttribdvARB(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribfvARB(uint, VertexAttribPropertyARB, float*)"/>
            public static unsafe void GetVertexAttribfvARB(uint index, VertexAttribPropertyARB pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribfvARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfvARB(uint, VertexAttribPropertyARB, float*)"/>
            public static unsafe void GetVertexAttribfvARB(uint index, VertexAttribPropertyARB pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribfvARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfvARB(uint, VertexAttribPropertyARB, float*)"/>
            public static unsafe void GetVertexAttribfvARB(uint index, VertexAttribPropertyARB pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetVertexAttribfvARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfvARB(uint, VertexAttribPropertyARB, float*)"/>
            public static unsafe float GetVertexAttribfvARB(uint index, VertexAttribPropertyARB pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetVertexAttribfvARB(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribivARB(uint, VertexAttribPropertyARB, int*)"/>
            public static unsafe void GetVertexAttribivARB(uint index, VertexAttribPropertyARB pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribivARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribivARB(uint, VertexAttribPropertyARB, int*)"/>
            public static unsafe void GetVertexAttribivARB(uint index, VertexAttribPropertyARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribivARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribivARB(uint, VertexAttribPropertyARB, int*)"/>
            public static unsafe void GetVertexAttribivARB(uint index, VertexAttribPropertyARB pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVertexAttribivARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribivARB(uint, VertexAttribPropertyARB, int*)"/>
            public static unsafe int GetVertexAttribivARB(uint index, VertexAttribPropertyARB pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetVertexAttribivARB(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribLdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribLdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetVertexAttribLdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
            public static unsafe double GetVertexAttribLd(uint index, VertexAttribEnum pname)
            {
                double parameters_val;
                double* parameters = &parameters_val;
                GetVertexAttribLdv(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribLui64vARB(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe void GetVertexAttribLui64vARB(uint index, VertexAttribEnum pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetVertexAttribLui64vARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLui64vARB(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe ulong GetVertexAttribLui64vARB(uint index, VertexAttribEnum pname)
            {
                ulong parameters_val;
                ulong* parameters = &parameters_val;
                GetVertexAttribLui64vARB(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribPointervARB(uint, VertexAttribPointerPropertyARB, void**)"/>
            public static unsafe void GetVertexAttribPointervARB(uint index, VertexAttribPointerPropertyARB pname, void** pointer)
            {
                GetVertexAttribPointervARB_(index, pname, pointer);
            }
            /// <inheritdoc cref="GetVertexAttribPointervARB(uint, VertexAttribPointerPropertyARB, void**)"/>
            public static unsafe void* GetVertexAttribPointervARB(uint index, VertexAttribPointerPropertyARB pname)
            {
                void* pointer_val;
                void** pointer = &pointer_val;
                GetVertexAttribPointervARB_(index, pname, pointer);
                return pointer_val;
            }
            /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
            public static unsafe void InvalidateFramebuffer(FramebufferTarget target, ReadOnlySpan<InvalidateFramebufferAttachment> attachments)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateFramebuffer(target, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
            public static unsafe void InvalidateFramebuffer(FramebufferTarget target, InvalidateFramebufferAttachment[] attachments)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateFramebuffer(target, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
            public static unsafe void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, in InvalidateFramebufferAttachment attachments)
            {
                fixed (InvalidateFramebufferAttachment* attachments_ptr = &attachments)
                {
                    InvalidateFramebuffer(target, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
            public static unsafe void InvalidateNamedFramebufferData(int framebuffer, ReadOnlySpan<FramebufferAttachment> attachments)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (FramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
            public static unsafe void InvalidateNamedFramebufferData(int framebuffer, FramebufferAttachment[] attachments)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (FramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
            public static unsafe void InvalidateNamedFramebufferData(int framebuffer, int numAttachments, in FramebufferAttachment attachments)
            {
                fixed (FramebufferAttachment* attachments_ptr = &attachments)
                {
                    InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, ReadOnlySpan<FramebufferAttachment> attachments, int x, int y, int width, int height)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (FramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, FramebufferAttachment[] attachments, int x, int y, int width, int height)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (FramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, int numAttachments, in FramebufferAttachment attachments, int x, int y, int width, int height)
            {
                fixed (FramebufferAttachment* attachments_ptr = &attachments)
                {
                    InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, ReadOnlySpan<InvalidateFramebufferAttachment> attachments, int x, int y, int width, int height)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, InvalidateFramebufferAttachment[] attachments, int x, int y, int width, int height)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, in InvalidateFramebufferAttachment attachments, int x, int y, int width, int height)
            {
                fixed (InvalidateFramebufferAttachment* attachments_ptr = &attachments)
                {
                    InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="IsNamedStringARB(int, byte*)"/>
            public static unsafe bool IsNamedStringARB(int namelen, string name)
            {
                bool returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = IsNamedStringARB(namelen, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="LoadTransposeMatrixdARB(double*)"/>
            public static unsafe void LoadTransposeMatrixdARB(ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    LoadTransposeMatrixdARB(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixdARB(double*)"/>
            public static unsafe void LoadTransposeMatrixdARB(double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    LoadTransposeMatrixdARB(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixdARB(double*)"/>
            public static unsafe void LoadTransposeMatrixdARB(in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    LoadTransposeMatrixdARB(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixfARB(float*)"/>
            public static unsafe void LoadTransposeMatrixfARB(ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    LoadTransposeMatrixfARB(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixfARB(float*)"/>
            public static unsafe void LoadTransposeMatrixfARB(float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    LoadTransposeMatrixfARB(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixfARB(float*)"/>
            public static unsafe void LoadTransposeMatrixfARB(in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    LoadTransposeMatrixfARB(m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexPointerARB(int, MatrixIndexPointerTypeARB, int, void*)"/>
            public static unsafe void MatrixIndexPointerARB(int size, MatrixIndexPointerTypeARB type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                MatrixIndexPointerARB(size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="MatrixIndexPointerARB(int, MatrixIndexPointerTypeARB, int, void*)"/>
            public static unsafe void MatrixIndexPointerARB<T1>(int size, MatrixIndexPointerTypeARB type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    MatrixIndexPointerARB(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexPointerARB(int, MatrixIndexPointerTypeARB, int, void*)"/>
            public static unsafe void MatrixIndexPointerARB<T1>(int size, MatrixIndexPointerTypeARB type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    MatrixIndexPointerARB(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexPointerARB(int, MatrixIndexPointerTypeARB, int, void*)"/>
            public static unsafe void MatrixIndexPointerARB<T1>(int size, MatrixIndexPointerTypeARB type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    MatrixIndexPointerARB(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexubvARB(int, byte*)"/>
            public static unsafe void MatrixIndexubvARB(ReadOnlySpan<byte> indices)
            {
                int size = (int)(indices.Length);
                fixed (byte* indices_ptr = indices)
                {
                    MatrixIndexubvARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexubvARB(int, byte*)"/>
            public static unsafe void MatrixIndexubvARB(byte[] indices)
            {
                int size = (int)(indices.Length);
                fixed (byte* indices_ptr = indices)
                {
                    MatrixIndexubvARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexubvARB(int, byte*)"/>
            public static unsafe void MatrixIndexubvARB(int size, in byte indices)
            {
                fixed (byte* indices_ptr = &indices)
                {
                    MatrixIndexubvARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexuivARB(int, uint*)"/>
            public static unsafe void MatrixIndexuivARB(ReadOnlySpan<uint> indices)
            {
                int size = (int)(indices.Length);
                fixed (uint* indices_ptr = indices)
                {
                    MatrixIndexuivARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexuivARB(int, uint*)"/>
            public static unsafe void MatrixIndexuivARB(uint[] indices)
            {
                int size = (int)(indices.Length);
                fixed (uint* indices_ptr = indices)
                {
                    MatrixIndexuivARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexuivARB(int, uint*)"/>
            public static unsafe void MatrixIndexuivARB(int size, in uint indices)
            {
                fixed (uint* indices_ptr = &indices)
                {
                    MatrixIndexuivARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexusvARB(int, ushort*)"/>
            public static unsafe void MatrixIndexusvARB(ReadOnlySpan<ushort> indices)
            {
                int size = (int)(indices.Length);
                fixed (ushort* indices_ptr = indices)
                {
                    MatrixIndexusvARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexusvARB(int, ushort*)"/>
            public static unsafe void MatrixIndexusvARB(ushort[] indices)
            {
                int size = (int)(indices.Length);
                fixed (ushort* indices_ptr = indices)
                {
                    MatrixIndexusvARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexusvARB(int, ushort*)"/>
            public static unsafe void MatrixIndexusvARB(int size, in ushort indices)
            {
                fixed (ushort* indices_ptr = &indices)
                {
                    MatrixIndexusvARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect(PrimitiveType mode, IntPtr indirect, int drawcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawArraysIndirect(mode, indirect_vptr, drawcount, stride);
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, ReadOnlySpan<T1> indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, T1[] indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, in T1 indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectCountARB(PrimitiveType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectCountARB(PrimitiveType mode, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawArraysIndirectCountARB(mode, indirect_vptr, drawcount, maxdrawcount, stride);
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectCountARB(PrimitiveType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectCountARB<T1>(PrimitiveType mode, in T1 indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawArraysIndirectCountARB(mode, indirect_ptr, drawcount, maxdrawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
            public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int drawcount, ReadOnlySpan<int> basevertex)
            {
                fixed (int* count_ptr = count)
                {
                    fixed (int* basevertex_ptr = basevertex)
                    {
                        MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
            public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int drawcount, int[] basevertex)
            {
                fixed (int* count_ptr = count)
                {
                    fixed (int* basevertex_ptr = basevertex)
                    {
                        MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
            public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, in int count, DrawElementsType type, void** indices, int drawcount, in int basevertex)
            {
                fixed (int* count_ptr = &count)
                fixed (int* basevertex_ptr = &basevertex)
                {
                    MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawElementsIndirect(mode, type, indirect_vptr, drawcount, stride);
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, T1[] indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectCountARB(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectCountARB(PrimitiveType mode, DrawElementsType type, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawElementsIndirectCountARB(mode, type, indirect_vptr, drawcount, maxdrawcount, stride);
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectCountARB(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectCountARB<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawElementsIndirectCountARB(mode, type, indirect_ptr, drawcount, maxdrawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord1dvARB(TextureUnit target, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord1dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord1dvARB(TextureUnit target, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord1dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord1dvARB(TextureUnit target, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    MultiTexCoord1dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord1fvARB(TextureUnit target, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord1fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord1fvARB(TextureUnit target, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord1fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord1fvARB(TextureUnit target, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MultiTexCoord1fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord1ivARB(TextureUnit target, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord1ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord1ivARB(TextureUnit target, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord1ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord1ivARB(TextureUnit target, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    MultiTexCoord1ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord1svARB(TextureUnit target, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord1svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord1svARB(TextureUnit target, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord1svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord1svARB(TextureUnit target, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    MultiTexCoord1svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord2dvARB(TextureUnit target, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord2dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord2dvARB(TextureUnit target, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord2dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord2dvARB(TextureUnit target, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    MultiTexCoord2dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord2fvARB(TextureUnit target, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord2fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord2fvARB(TextureUnit target, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord2fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord2fvARB(TextureUnit target, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MultiTexCoord2fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2ivARB(TextureUnit target, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord2ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2ivARB(TextureUnit target, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord2ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2ivARB(TextureUnit target, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    MultiTexCoord2ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord2svARB(TextureUnit target, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord2svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord2svARB(TextureUnit target, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord2svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord2svARB(TextureUnit target, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    MultiTexCoord2svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord3dvARB(TextureUnit target, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord3dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord3dvARB(TextureUnit target, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord3dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord3dvARB(TextureUnit target, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    MultiTexCoord3dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord3fvARB(TextureUnit target, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord3fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord3fvARB(TextureUnit target, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord3fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord3fvARB(TextureUnit target, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MultiTexCoord3fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3ivARB(TextureUnit target, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord3ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3ivARB(TextureUnit target, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord3ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3ivARB(TextureUnit target, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    MultiTexCoord3ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord3svARB(TextureUnit target, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord3svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord3svARB(TextureUnit target, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord3svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord3svARB(TextureUnit target, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    MultiTexCoord3svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord4dvARB(TextureUnit target, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord4dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord4dvARB(TextureUnit target, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord4dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord4dvARB(TextureUnit target, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    MultiTexCoord4dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord4fvARB(TextureUnit target, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord4fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord4fvARB(TextureUnit target, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord4fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord4fvARB(TextureUnit target, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MultiTexCoord4fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4ivARB(TextureUnit target, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord4ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4ivARB(TextureUnit target, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord4ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4ivARB(TextureUnit target, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    MultiTexCoord4ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord4svARB(TextureUnit target, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord4svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord4svARB(TextureUnit target, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord4svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord4svARB(TextureUnit target, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    MultiTexCoord4svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP1uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP1uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP1uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP1uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP1uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    MultiTexCoordP1uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP2uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP2uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP2uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP2uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP2uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    MultiTexCoordP2uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP3uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP3uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP3uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP3uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP3uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    MultiTexCoordP3uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP4uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP4uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP4uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP4uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP4uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    MultiTexCoordP4uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixdARB(double*)"/>
            public static unsafe void MultTransposeMatrixdARB(ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MultTransposeMatrixdARB(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixdARB(double*)"/>
            public static unsafe void MultTransposeMatrixdARB(double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MultTransposeMatrixdARB(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixdARB(double*)"/>
            public static unsafe void MultTransposeMatrixdARB(in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MultTransposeMatrixdARB(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixfARB(float*)"/>
            public static unsafe void MultTransposeMatrixfARB(ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MultTransposeMatrixfARB(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixfARB(float*)"/>
            public static unsafe void MultTransposeMatrixfARB(float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MultTransposeMatrixfARB(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixfARB(float*)"/>
            public static unsafe void MultTransposeMatrixfARB(in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MultTransposeMatrixfARB(m_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferData(int buffer, nint size, IntPtr data, VertexBufferObjectUsage usage)
            {
                void* data_vptr = (void*)data;
                NamedBufferData(buffer, size, data_vptr, usage);
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferData<T1>(int buffer, ReadOnlySpan<T1> data, VertexBufferObjectUsage usage)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferData(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferData<T1>(int buffer, T1[] data, VertexBufferObjectUsage usage)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferData(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferData<T1>(int buffer, nint size, in T1 data, VertexBufferObjectUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferData(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage(int buffer, nint size, IntPtr data, BufferStorageMask flags)
            {
                void* data_vptr = (void*)data;
                NamedBufferStorage(buffer, size, data_vptr, flags);
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage<T1>(int buffer, ReadOnlySpan<T1> data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferStorage(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage<T1>(int buffer, T1[] data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferStorage(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage<T1>(int buffer, nint size, in T1 data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferStorage(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData(int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                NamedBufferSubData(buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, T1[] data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
            public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, ReadOnlySpan<ColorBuffer> bufs)
            {
                int n = (int)(bufs.Length);
                fixed (ColorBuffer* bufs_ptr = bufs)
                {
                    NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
            public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, ColorBuffer[] bufs)
            {
                int n = (int)(bufs.Length);
                fixed (ColorBuffer* bufs_ptr = bufs)
                {
                    NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
            public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, int n, in ColorBuffer bufs)
            {
                fixed (ColorBuffer* bufs_ptr = &bufs)
                {
                    NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferSampleLocationsfvARB(int, uint, int, float*)"/>
            public static unsafe void NamedFramebufferSampleLocationsfvARB(int framebuffer, uint start, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    NamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="NamedStringARB(All, int, byte*, int, byte*)"/>
            public static unsafe void NamedStringARB(All type, int namelen, string name, int stringlen, string str)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                byte* str_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(str);
                NamedStringARB(type, namelen, name_ptr, stringlen, str_ptr);
                Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="NormalP3uiv(NormalPointerType, uint*)"/>
            public static unsafe void NormalP3ui(NormalPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    NormalP3uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalP3uiv(NormalPointerType, uint*)"/>
            public static unsafe void NormalP3ui(NormalPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    NormalP3uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalP3uiv(NormalPointerType, uint*)"/>
            public static unsafe void NormalP3ui(NormalPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    NormalP3uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
            public static unsafe void PatchParameterf(PatchParameterName pname, ReadOnlySpan<float> values)
            {
                fixed (float* values_ptr = values)
                {
                    PatchParameterfv(pname, values_ptr);
                }
            }
            /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
            public static unsafe void PatchParameterf(PatchParameterName pname, float[] values)
            {
                fixed (float* values_ptr = values)
                {
                    PatchParameterfv(pname, values_ptr);
                }
            }
            /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
            public static unsafe void PatchParameterf(PatchParameterName pname, in float values)
            {
                fixed (float* values_ptr = &values)
                {
                    PatchParameterfv(pname, values_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvARB(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvARB(PointParameterNameARB pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfvARB(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvARB(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvARB(PointParameterNameARB pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfvARB(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvARB(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvARB(PointParameterNameARB pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    PointParameterfvARB(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
            public static unsafe void ProgramBinary(int program, All binaryFormat, IntPtr binary, int length)
            {
                void* binary_vptr = (void*)binary;
                ProgramBinary(program, binaryFormat, binary_vptr, length);
            }
            /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
            public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, ReadOnlySpan<T1> binary)
                where T1 : unmanaged
            {
                int length = (int)(binary.Length * sizeof(T1));
                fixed (void* binary_ptr = binary)
                {
                    ProgramBinary(program, binaryFormat, binary_ptr, length);
                }
            }
            /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
            public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, T1[] binary)
                where T1 : unmanaged
            {
                int length = (int)(binary.Length * sizeof(T1));
                fixed (void* binary_ptr = binary)
                {
                    ProgramBinary(program, binaryFormat, binary_ptr, length);
                }
            }
            /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
            public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, in T1 binary, int length)
                where T1 : unmanaged
            {
                fixed (void* binary_ptr = &binary)
                {
                    ProgramBinary(program, binaryFormat, binary_ptr, length);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4dvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramEnvParameter4dvARB(ProgramTarget target, uint index, ReadOnlySpan<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    ProgramEnvParameter4dvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4dvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramEnvParameter4dvARB(ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    ProgramEnvParameter4dvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4dvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramEnvParameter4dvARB(ProgramTarget target, uint index, in double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    ProgramEnvParameter4dvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4fvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramEnvParameter4fvARB(ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramEnvParameter4fvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4fvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramEnvParameter4fvARB(ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramEnvParameter4fvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4fvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramEnvParameter4fvARB(ProgramTarget target, uint index, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ProgramEnvParameter4fvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4dvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramLocalParameter4dvARB(ProgramTarget target, uint index, ReadOnlySpan<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    ProgramLocalParameter4dvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4dvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramLocalParameter4dvARB(ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    ProgramLocalParameter4dvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4dvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramLocalParameter4dvARB(ProgramTarget target, uint index, in double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    ProgramLocalParameter4dvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4fvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramLocalParameter4fvARB(ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramLocalParameter4fvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4fvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramLocalParameter4fvARB(ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramLocalParameter4fvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4fvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramLocalParameter4fvARB(ProgramTarget target, uint index, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ProgramLocalParameter4fvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramStringARB(ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void ProgramStringARB(ProgramTarget target, ProgramFormat format, int len, IntPtr str)
            {
                void* str_vptr = (void*)str;
                ProgramStringARB(target, format, len, str_vptr);
            }
            /// <inheritdoc cref="ProgramStringARB(ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void ProgramStringARB<T1>(ProgramTarget target, ProgramFormat format, ReadOnlySpan<T1> str)
                where T1 : unmanaged
            {
                int len = (int)(str.Length * sizeof(T1));
                fixed (void* str_ptr = str)
                {
                    ProgramStringARB(target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="ProgramStringARB(ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void ProgramStringARB<T1>(ProgramTarget target, ProgramFormat format, T1[] str)
                where T1 : unmanaged
            {
                int len = (int)(str.Length * sizeof(T1));
                fixed (void* str_ptr = str)
                {
                    ProgramStringARB(target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="ProgramStringARB(ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void ProgramStringARB<T1>(ProgramTarget target, ProgramFormat format, int len, in T1 str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = &str)
                {
                    ProgramStringARB(target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform1d(int program, int location, int count, in double value)
            {
                fixed (double* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform1dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform1f(int program, int location, int count, in float value)
            {
                fixed (float* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform1fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform1i64vARB(int program, int location, int count, in long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform1i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform1i(int program, int location, int count, in int value)
            {
                fixed (int* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform1iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform1ui64vARB(int program, int location, int count, in ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform1ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform1ui(int program, int location, int count, in uint value)
            {
                fixed (uint* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform1uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2d(int program, int location, int count, in Vector2d value)
            {
                fixed (Vector2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2d(int program, int location, int count, ReadOnlySpan<Vector2d> value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2d(int program, int location, int count, Vector2d[] value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vARB(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vARB(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vARB(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vARB(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vARB(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vARB(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2i(int program, int location, int count, in Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2i(int program, int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2i(int program, int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vARB(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vARB(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vARB(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vARB(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vARB(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vARB(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2ui(int program, int location, int count, in Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2ui(int program, int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2ui(int program, int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3d(int program, int location, int count, in Vector3d value)
            {
                fixed (Vector3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3d(int program, int location, int count, ReadOnlySpan<Vector3d> value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3d(int program, int location, int count, Vector3d[] value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vARB(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vARB(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vARB(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vARB(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vARB(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vARB(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3i(int program, int location, int count, in Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3i(int program, int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3i(int program, int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vARB(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vARB(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vARB(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vARB(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vARB(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vARB(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3ui(int program, int location, int count, in Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3ui(int program, int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3ui(int program, int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4d(int program, int location, int count, in Vector4d value)
            {
                fixed (Vector4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4d(int program, int location, int count, ReadOnlySpan<Vector4d> value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4d(int program, int location, int count, Vector4d[] value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vARB(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vARB(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vARB(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vARB(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vARB(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vARB(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4i(int program, int location, int count, in Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4i(int program, int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4i(int program, int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vARB(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vARB(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vARB(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vARB(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vARB(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vARB(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4ui(int program, int location, int count, in Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4ui(int program, int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4ui(int program, int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64vARB(int program, int location, ReadOnlySpan<ulong> values)
            {
                int count = (int)(values.Length);
                fixed (ulong* values_ptr = values)
                {
                    ProgramUniformHandleui64vARB(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64vARB(int program, int location, ulong[] values)
            {
                int count = (int)(values.Length);
                fixed (ulong* values_ptr = values)
                {
                    ProgramUniformHandleui64vARB(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64vARB(int program, int location, int count, in ulong values)
            {
                fixed (ulong* values_ptr = &values)
                {
                    ProgramUniformHandleui64vARB(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, in Matrix2d value)
            {
                fixed (Matrix2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2d> value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, Matrix2d[] value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, in Matrix2 value)
            {
                fixed (Matrix2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2> value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, Matrix2[] value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, in Matrix2x3d value)
            {
                fixed (Matrix2x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3d> value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, Matrix2x3d[] value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, in Matrix2x3 value)
            {
                fixed (Matrix2x3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3> value)
            {
                fixed (Matrix2x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, Matrix2x3[] value)
            {
                fixed (Matrix2x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, in Matrix2x4d value)
            {
                fixed (Matrix2x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4d> value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, Matrix2x4d[] value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, in Matrix2x4 value)
            {
                fixed (Matrix2x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4> value)
            {
                fixed (Matrix2x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, Matrix2x4[] value)
            {
                fixed (Matrix2x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, in Matrix3d value)
            {
                fixed (Matrix3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3d> value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, Matrix3d[] value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, in Matrix3 value)
            {
                fixed (Matrix3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3> value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, Matrix3[] value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, in Matrix3x2d value)
            {
                fixed (Matrix3x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2d> value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, Matrix3x2d[] value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, in Matrix3x2 value)
            {
                fixed (Matrix3x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2> value)
            {
                fixed (Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, Matrix3x2[] value)
            {
                fixed (Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, in System.Numerics.Matrix3x2 value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix3x2> value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, System.Numerics.Matrix3x2[] value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, in Matrix3x4d value)
            {
                fixed (Matrix3x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4d> value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, Matrix3x4d[] value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, in Matrix3x4 value)
            {
                fixed (Matrix3x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4> value)
            {
                fixed (Matrix3x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, Matrix3x4[] value)
            {
                fixed (Matrix3x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, in Matrix4d value)
            {
                fixed (Matrix4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4d> value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, Matrix4d[] value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, in Matrix4 value)
            {
                fixed (Matrix4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4> value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, Matrix4[] value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, in System.Numerics.Matrix4x4 value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix4x4> value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, System.Numerics.Matrix4x4[] value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, in Matrix4x2d value)
            {
                fixed (Matrix4x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2d> value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, Matrix4x2d[] value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, in Matrix4x2 value)
            {
                fixed (Matrix4x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2> value)
            {
                fixed (Matrix4x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, Matrix4x2[] value)
            {
                fixed (Matrix4x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, in Matrix4x3d value)
            {
                fixed (Matrix4x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3d> value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, Matrix4x3d[] value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, in Matrix4x3 value)
            {
                fixed (Matrix4x3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3> value)
            {
                fixed (Matrix4x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, Matrix4x3[] value)
            {
                fixed (Matrix4x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixelsARB(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsARB(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ReadnPixelsARB(x, y, width, height, format, type, bufSize, data_vptr);
            }
            /// <inheritdoc cref="ReadnPixelsARB(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsARB<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, Span<T1> data)
                where T1 : unmanaged
            {
                int bufSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    ReadnPixelsARB(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixelsARB(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsARB<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                int bufSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    ReadnPixelsARB(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixelsARB(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsARB<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ReadnPixelsARB(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, ReadOnlySpan<float> param)
            {
                fixed (float* param_ptr = param)
                {
                    SamplerParameterfv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, float[] param)
            {
                fixed (float* param_ptr = param)
                {
                    SamplerParameterfv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, in float param)
            {
                fixed (float* param_ptr = &param)
                {
                    SamplerParameterfv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    SamplerParameterIiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    SamplerParameterIiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, in int param)
            {
                fixed (int* param_ptr = &param)
                {
                    SamplerParameterIiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, ReadOnlySpan<uint> param)
            {
                fixed (uint* param_ptr = param)
                {
                    SamplerParameterIuiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, uint[] param)
            {
                fixed (uint* param_ptr = param)
                {
                    SamplerParameterIuiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, in uint param)
            {
                fixed (uint* param_ptr = &param)
                {
                    SamplerParameterIuiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    SamplerParameteriv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    SamplerParameteriv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, in int param)
            {
                fixed (int* param_ptr = &param)
                {
                    SamplerParameteriv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
            public static unsafe void ScissorArray(uint first, int count, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
            public static unsafe void ScissorArray(uint first, int count, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
            public static unsafe void ScissorArray(uint first, int count, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    ScissorArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
            public static unsafe void ScissorIndexed(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorIndexedv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
            public static unsafe void ScissorIndexed(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorIndexedv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
            public static unsafe void ScissorIndexed(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    ScissorIndexedv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorP3uiv(ColorPointerType, uint*)"/>
            public static unsafe void SecondaryColorP3ui(ColorPointerType type, ReadOnlySpan<uint> color)
            {
                fixed (uint* color_ptr = color)
                {
                    SecondaryColorP3uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorP3uiv(ColorPointerType, uint*)"/>
            public static unsafe void SecondaryColorP3ui(ColorPointerType type, uint[] color)
            {
                fixed (uint* color_ptr = color)
                {
                    SecondaryColorP3uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorP3uiv(ColorPointerType, uint*)"/>
            public static unsafe void SecondaryColorP3ui(ColorPointerType type, in uint color)
            {
                fixed (uint* color_ptr = &color)
                {
                    SecondaryColorP3uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column)
            {
                void* row_vptr = (void*)row;
                void* column_vptr = (void*)column;
                SeparableFilter2D(target, internalformat, width, height, format, type, row_vptr, column_vptr);
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T2> row, ReadOnlySpan<T1> column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        SeparableFilter2D(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T2[] row, T1[] column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        SeparableFilter2D(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, in T1 row, in T2 column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                {
                    SeparableFilter2D(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary(ReadOnlySpan<int> shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
            {
                int count = (int)(shaders.Length);
                fixed (int* shaders_ptr = shaders)
                {
                    void* binary_vptr = (void*)binary;
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary(int[] shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
            {
                int count = (int)(shaders.Length);
                fixed (int* shaders_ptr = shaders)
                {
                    void* binary_vptr = (void*)binary;
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary(int count, in int shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
            {
                fixed (int* shaders_ptr = &shaders)
                {
                    void* binary_vptr = (void*)binary;
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary<T1>(ReadOnlySpan<int> shaders, ShaderBinaryFormat binaryFormat, ReadOnlySpan<T1> binary)
                where T1 : unmanaged
            {
                int count = (int)(shaders.Length);
                fixed (int* shaders_ptr = shaders)
                {
                    int length = (int)(binary.Length * sizeof(T1));
                    fixed (void* binary_ptr = binary)
                    {
                        ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
                    }
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary<T1>(int[] shaders, ShaderBinaryFormat binaryFormat, T1[] binary)
                where T1 : unmanaged
            {
                int count = (int)(shaders.Length);
                fixed (int* shaders_ptr = shaders)
                {
                    int length = (int)(binary.Length * sizeof(T1));
                    fixed (void* binary_ptr = binary)
                    {
                        ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
                    }
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary<T1>(int count, in int shaders, ShaderBinaryFormat binaryFormat, in T1 binary, int length)
                where T1 : unmanaged
            {
                fixed (int* shaders_ptr = &shaders)
                fixed (void* binary_ptr = &binary)
                {
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
                }
            }
            /// <inheritdoc cref="ShaderSourceARB(GLHandleARB, int, byte**, int*)"/>
            public static unsafe void ShaderSourceARB(GLHandleARB shaderObj, int count, byte** str, ReadOnlySpan<int> length)
            {
                fixed (int* length_ptr = length)
                {
                    ShaderSourceARB(shaderObj, count, str, length_ptr);
                }
            }
            /// <inheritdoc cref="ShaderSourceARB(GLHandleARB, int, byte**, int*)"/>
            public static unsafe void ShaderSourceARB(GLHandleARB shaderObj, int count, byte** str, int[] length)
            {
                fixed (int* length_ptr = length)
                {
                    ShaderSourceARB(shaderObj, count, str, length_ptr);
                }
            }
            /// <inheritdoc cref="ShaderSourceARB(GLHandleARB, int, byte**, int*)"/>
            public static unsafe void ShaderSourceARB(GLHandleARB shaderObj, int count, byte** str, in int length)
            {
                fixed (int* length_ptr = &length)
                {
                    ShaderSourceARB(shaderObj, count, str, length_ptr);
                }
            }
            /// <inheritdoc cref="SpecializeShaderARB(int, byte*, uint, uint*, uint*)"/>
            public static unsafe void SpecializeShaderARB(int shader, string pEntryPoint, uint numSpecializationConstants, in uint pConstantIndex, in uint pConstantValue)
            {
                fixed (uint* pConstantIndex_ptr = &pConstantIndex)
                fixed (uint* pConstantValue_ptr = &pConstantValue)
                {
                    byte* pEntryPoint_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(pEntryPoint);
                    SpecializeShaderARB(shader, pEntryPoint_ptr, numSpecializationConstants, pConstantIndex_ptr, pConstantValue_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)pEntryPoint_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP1uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP1ui(TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP1uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP1uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP1ui(TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP1uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP1uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP1ui(TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    TexCoordP1uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP2uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP2ui(TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP2uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP2uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP2ui(TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP2uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP2uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP2ui(TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    TexCoordP2uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP3uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP3ui(TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP3uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP3uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP3ui(TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP3uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP3uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP3ui(TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    TexCoordP3uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP4uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP4ui(TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP4uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP4uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP4ui(TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP4uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP4uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP4ui(TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    TexCoordP4uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterf(int texture, TextureParameterName pname, ReadOnlySpan<float> param)
            {
                fixed (float* param_ptr = param)
                {
                    TextureParameterfv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterf(int texture, TextureParameterName pname, float[] param)
            {
                fixed (float* param_ptr = param)
                {
                    TextureParameterfv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterf(int texture, TextureParameterName pname, in float param)
            {
                fixed (float* param_ptr = &param)
                {
                    TextureParameterfv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterIiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterIiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TextureParameterIiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TextureParameterIuiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TextureParameterIuiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    TextureParameterIuiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameteri(int texture, TextureParameterName pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    TextureParameteriv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameteri(int texture, TextureParameterName pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    TextureParameteriv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameteri(int texture, TextureParameterName pname, in int param)
            {
                fixed (int* param_ptr = &param)
                {
                    TextureParameteriv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1D(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1D<T1>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
            public static unsafe void Uniform1d(int location, int count, in double value)
            {
                fixed (double* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform1dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
            public static unsafe void Uniform1d(int location, int count, ReadOnlySpan<double> value)
            {
                fixed (double* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform1dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
            public static unsafe void Uniform1d(int location, int count, double[] value)
            {
                fixed (double* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform1dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1fvARB(int, int, float*)"/>
            public static unsafe void Uniform1fvARB(int location, int count, in float value)
            {
                fixed (float* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform1fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1fvARB(int, int, float*)"/>
            public static unsafe void Uniform1fvARB(int location, int count, ReadOnlySpan<float> value)
            {
                fixed (float* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform1fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1fvARB(int, int, float*)"/>
            public static unsafe void Uniform1fvARB(int location, int count, float[] value)
            {
                fixed (float* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform1fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vARB(int, int, long*)"/>
            public static unsafe void Uniform1i64vARB(int location, int count, in long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vARB(int, int, long*)"/>
            public static unsafe void Uniform1i64vARB(int location, int count, ReadOnlySpan<long> value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vARB(int, int, long*)"/>
            public static unsafe void Uniform1i64vARB(int location, int count, long[] value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ivARB(int, int, int*)"/>
            public static unsafe void Uniform1ivARB(int location, int count, in int value)
            {
                fixed (int* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform1ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ivARB(int, int, int*)"/>
            public static unsafe void Uniform1ivARB(int location, int count, ReadOnlySpan<int> value)
            {
                fixed (int* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform1ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ivARB(int, int, int*)"/>
            public static unsafe void Uniform1ivARB(int location, int count, int[] value)
            {
                fixed (int* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform1ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vARB(int location, int count, in ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vARB(int location, int count, ReadOnlySpan<ulong> value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vARB(int location, int count, ulong[] value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
            public static unsafe void Uniform2d(int location, int count, in Vector2d value)
            {
                fixed (Vector2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform2dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
            public static unsafe void Uniform2d(int location, int count, ReadOnlySpan<Vector2d> value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform2dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
            public static unsafe void Uniform2d(int location, int count, Vector2d[] value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform2dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fvARB(int, int, float*)"/>
            public static unsafe void Uniform2fvARB(int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fvARB(int, int, float*)"/>
            public static unsafe void Uniform2fvARB(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fvARB(int, int, float*)"/>
            public static unsafe void Uniform2fvARB(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fvARB(int, int, float*)"/>
            public static unsafe void Uniform2fvARB(int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fvARB(int, int, float*)"/>
            public static unsafe void Uniform2fvARB(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fvARB(int, int, float*)"/>
            public static unsafe void Uniform2fvARB(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vARB(int, int, long*)"/>
            public static unsafe void Uniform2i64vARB(int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vARB(int, int, long*)"/>
            public static unsafe void Uniform2i64vARB(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vARB(int, int, long*)"/>
            public static unsafe void Uniform2i64vARB(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vARB(int, int, long*)"/>
            public static unsafe void Uniform2i64vARB(int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vARB(int, int, long*)"/>
            public static unsafe void Uniform2i64vARB(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vARB(int, int, long*)"/>
            public static unsafe void Uniform2i64vARB(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ivARB(int, int, int*)"/>
            public static unsafe void Uniform2ivARB(int location, int count, in Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform2ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ivARB(int, int, int*)"/>
            public static unsafe void Uniform2ivARB(int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform2ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ivARB(int, int, int*)"/>
            public static unsafe void Uniform2ivARB(int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform2ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vARB(int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vARB(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vARB(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vARB(int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vARB(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vARB(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
            public static unsafe void Uniform3d(int location, int count, in Vector3d value)
            {
                fixed (Vector3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform3dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
            public static unsafe void Uniform3d(int location, int count, ReadOnlySpan<Vector3d> value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform3dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
            public static unsafe void Uniform3d(int location, int count, Vector3d[] value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform3dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fvARB(int, int, float*)"/>
            public static unsafe void Uniform3fvARB(int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fvARB(int, int, float*)"/>
            public static unsafe void Uniform3fvARB(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fvARB(int, int, float*)"/>
            public static unsafe void Uniform3fvARB(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fvARB(int, int, float*)"/>
            public static unsafe void Uniform3fvARB(int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fvARB(int, int, float*)"/>
            public static unsafe void Uniform3fvARB(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fvARB(int, int, float*)"/>
            public static unsafe void Uniform3fvARB(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vARB(int, int, long*)"/>
            public static unsafe void Uniform3i64vARB(int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vARB(int, int, long*)"/>
            public static unsafe void Uniform3i64vARB(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vARB(int, int, long*)"/>
            public static unsafe void Uniform3i64vARB(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vARB(int, int, long*)"/>
            public static unsafe void Uniform3i64vARB(int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vARB(int, int, long*)"/>
            public static unsafe void Uniform3i64vARB(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vARB(int, int, long*)"/>
            public static unsafe void Uniform3i64vARB(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ivARB(int, int, int*)"/>
            public static unsafe void Uniform3ivARB(int location, int count, in Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform3ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ivARB(int, int, int*)"/>
            public static unsafe void Uniform3ivARB(int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform3ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ivARB(int, int, int*)"/>
            public static unsafe void Uniform3ivARB(int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform3ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vARB(int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vARB(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vARB(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vARB(int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vARB(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vARB(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
            public static unsafe void Uniform4d(int location, int count, in Vector4d value)
            {
                fixed (Vector4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform4dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
            public static unsafe void Uniform4d(int location, int count, ReadOnlySpan<Vector4d> value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform4dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
            public static unsafe void Uniform4d(int location, int count, Vector4d[] value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform4dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fvARB(int, int, float*)"/>
            public static unsafe void Uniform4fvARB(int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fvARB(int, int, float*)"/>
            public static unsafe void Uniform4fvARB(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fvARB(int, int, float*)"/>
            public static unsafe void Uniform4fvARB(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fvARB(int, int, float*)"/>
            public static unsafe void Uniform4fvARB(int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fvARB(int, int, float*)"/>
            public static unsafe void Uniform4fvARB(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fvARB(int, int, float*)"/>
            public static unsafe void Uniform4fvARB(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vARB(int, int, long*)"/>
            public static unsafe void Uniform4i64vARB(int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vARB(int, int, long*)"/>
            public static unsafe void Uniform4i64vARB(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vARB(int, int, long*)"/>
            public static unsafe void Uniform4i64vARB(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vARB(int, int, long*)"/>
            public static unsafe void Uniform4i64vARB(int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vARB(int, int, long*)"/>
            public static unsafe void Uniform4i64vARB(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vARB(int, int, long*)"/>
            public static unsafe void Uniform4i64vARB(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ivARB(int, int, int*)"/>
            public static unsafe void Uniform4ivARB(int location, int count, in Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform4ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ivARB(int, int, int*)"/>
            public static unsafe void Uniform4ivARB(int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform4ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ivARB(int, int, int*)"/>
            public static unsafe void Uniform4ivARB(int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform4ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vARB(int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vARB(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vARB(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vARB(int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vARB(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vARB(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64vARB(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64vARB(int location, ReadOnlySpan<ulong> value)
            {
                int count = (int)(value.Length);
                fixed (ulong* value_ptr = value)
                {
                    UniformHandleui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64vARB(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64vARB(int location, ulong[] value)
            {
                int count = (int)(value.Length);
                fixed (ulong* value_ptr = value)
                {
                    UniformHandleui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64vARB(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64vARB(int location, int count, in ulong value)
            {
                fixed (ulong* value_ptr = &value)
                {
                    UniformHandleui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2d(int location, int count, bool transpose, in Matrix2d value)
            {
                fixed (Matrix2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2d(int location, int count, bool transpose, ReadOnlySpan<Matrix2d> value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2d(int location, int count, bool transpose, Matrix2d[] value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix2fvARB(int location, int count, bool transpose, in Matrix2 value)
            {
                fixed (Matrix2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix2fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix2fvARB(int location, int count, bool transpose, ReadOnlySpan<Matrix2> value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix2fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix2fvARB(int location, int count, bool transpose, Matrix2[] value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix2fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, in Matrix2x3d value)
            {
                fixed (Matrix2x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, ReadOnlySpan<Matrix2x3d> value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, Matrix2x3d[] value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, in Matrix2x4d value)
            {
                fixed (Matrix2x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, ReadOnlySpan<Matrix2x4d> value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, Matrix2x4d[] value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3d(int location, int count, bool transpose, in Matrix3d value)
            {
                fixed (Matrix3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3d(int location, int count, bool transpose, ReadOnlySpan<Matrix3d> value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3d(int location, int count, bool transpose, Matrix3d[] value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix3fvARB(int location, int count, bool transpose, in Matrix3 value)
            {
                fixed (Matrix3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix3fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix3fvARB(int location, int count, bool transpose, ReadOnlySpan<Matrix3> value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix3fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix3fvARB(int location, int count, bool transpose, Matrix3[] value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix3fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, in Matrix3x2d value)
            {
                fixed (Matrix3x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, ReadOnlySpan<Matrix3x2d> value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, Matrix3x2d[] value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, in Matrix3x4d value)
            {
                fixed (Matrix3x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, ReadOnlySpan<Matrix3x4d> value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, Matrix3x4d[] value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4d(int location, int count, bool transpose, in Matrix4d value)
            {
                fixed (Matrix4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4d(int location, int count, bool transpose, ReadOnlySpan<Matrix4d> value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4d(int location, int count, bool transpose, Matrix4d[] value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fvARB(int location, int count, bool transpose, in Matrix4 value)
            {
                fixed (Matrix4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fvARB(int location, int count, bool transpose, ReadOnlySpan<Matrix4> value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fvARB(int location, int count, bool transpose, Matrix4[] value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fvARB(int location, int count, bool transpose, in System.Numerics.Matrix4x4 value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fvARB(int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix4x4> value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fvARB(int location, int count, bool transpose, System.Numerics.Matrix4x4[] value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, in Matrix4x2d value)
            {
                fixed (Matrix4x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, ReadOnlySpan<Matrix4x2d> value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, Matrix4x2d[] value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, in Matrix4x3d value)
            {
                fixed (Matrix4x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, ReadOnlySpan<Matrix4x3d> value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, Matrix4x3d[] value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
            public static unsafe void UniformSubroutinesui(ShaderType shadertype, ReadOnlySpan<uint> indices)
            {
                int count = (int)(indices.Length);
                fixed (uint* indices_ptr = indices)
                {
                    UniformSubroutinesuiv(shadertype, count, indices_ptr);
                }
            }
            /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
            public static unsafe void UniformSubroutinesui(ShaderType shadertype, uint[] indices)
            {
                int count = (int)(indices.Length);
                fixed (uint* indices_ptr = indices)
                {
                    UniformSubroutinesuiv(shadertype, count, indices_ptr);
                }
            }
            /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
            public static unsafe void UniformSubroutinesui(ShaderType shadertype, int count, in uint indices)
            {
                fixed (uint* indices_ptr = &indices)
                {
                    UniformSubroutinesuiv(shadertype, count, indices_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<int> strides)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (int* strides_ptr = strides)
                        {
                            VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, int[] buffers, IntPtr[] offsets, int[] strides)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (int* strides_ptr = strides)
                        {
                            VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, in int buffers, in IntPtr offsets, in int strides)
            {
                fixed (int* buffers_ptr = &buffers)
                fixed (IntPtr* offsets_ptr = &offsets)
                fixed (int* strides_ptr = &strides)
                {
                    VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib1dvARB(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib1dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib1dvARB(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib1dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib1dvARB(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib1dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib1fvARB(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib1fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib1fvARB(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib1fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib1fvARB(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib1fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1svARB(uint, short*)"/>
            public static unsafe void VertexAttrib1svARB(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib1svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1svARB(uint, short*)"/>
            public static unsafe void VertexAttrib1svARB(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib1svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1svARB(uint, short*)"/>
            public static unsafe void VertexAttrib1svARB(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib1svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib2dvARB(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib2dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib2dvARB(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib2dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib2dvARB(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib2dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib2fvARB(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib2fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib2fvARB(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib2fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib2fvARB(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib2fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2svARB(uint, short*)"/>
            public static unsafe void VertexAttrib2svARB(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib2svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2svARB(uint, short*)"/>
            public static unsafe void VertexAttrib2svARB(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib2svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2svARB(uint, short*)"/>
            public static unsafe void VertexAttrib2svARB(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib2svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib3dvARB(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib3dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib3dvARB(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib3dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib3dvARB(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib3dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib3fvARB(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib3fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib3fvARB(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib3fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib3fvARB(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib3fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3svARB(uint, short*)"/>
            public static unsafe void VertexAttrib3svARB(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib3svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3svARB(uint, short*)"/>
            public static unsafe void VertexAttrib3svARB(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib3svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3svARB(uint, short*)"/>
            public static unsafe void VertexAttrib3svARB(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib3svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4bvARB(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4bvARB(uint index, ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttrib4bvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4bvARB(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4bvARB(uint index, sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttrib4bvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4bvARB(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4bvARB(uint index, in sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    VertexAttrib4bvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib4dvARB(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib4dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib4dvARB(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib4dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib4dvARB(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib4dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib4fvARB(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib4fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib4fvARB(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib4fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib4fvARB(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib4fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ivARB(uint, int*)"/>
            public static unsafe void VertexAttrib4ivARB(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttrib4ivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ivARB(uint, int*)"/>
            public static unsafe void VertexAttrib4ivARB(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttrib4ivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ivARB(uint, int*)"/>
            public static unsafe void VertexAttrib4ivARB(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttrib4ivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NbvARB(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4NbvARB(uint index, ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttrib4NbvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NbvARB(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4NbvARB(uint index, sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttrib4NbvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NbvARB(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4NbvARB(uint index, in sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    VertexAttrib4NbvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NivARB(uint, int*)"/>
            public static unsafe void VertexAttrib4NivARB(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttrib4NivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NivARB(uint, int*)"/>
            public static unsafe void VertexAttrib4NivARB(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttrib4NivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NivARB(uint, int*)"/>
            public static unsafe void VertexAttrib4NivARB(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttrib4NivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NsvARB(uint, short*)"/>
            public static unsafe void VertexAttrib4NsvARB(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4NsvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NsvARB(uint, short*)"/>
            public static unsafe void VertexAttrib4NsvARB(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4NsvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NsvARB(uint, short*)"/>
            public static unsafe void VertexAttrib4NsvARB(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib4NsvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NubvARB(uint, byte*)"/>
            public static unsafe void VertexAttrib4NubvARB(uint index, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4NubvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NubvARB(uint, byte*)"/>
            public static unsafe void VertexAttrib4NubvARB(uint index, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4NubvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NubvARB(uint, byte*)"/>
            public static unsafe void VertexAttrib4NubvARB(uint index, in byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttrib4NubvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NuivARB(uint, uint*)"/>
            public static unsafe void VertexAttrib4NuivARB(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttrib4NuivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NuivARB(uint, uint*)"/>
            public static unsafe void VertexAttrib4NuivARB(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttrib4NuivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NuivARB(uint, uint*)"/>
            public static unsafe void VertexAttrib4NuivARB(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttrib4NuivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NusvARB(uint, ushort*)"/>
            public static unsafe void VertexAttrib4NusvARB(uint index, ReadOnlySpan<ushort> v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttrib4NusvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NusvARB(uint, ushort*)"/>
            public static unsafe void VertexAttrib4NusvARB(uint index, ushort[] v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttrib4NusvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NusvARB(uint, ushort*)"/>
            public static unsafe void VertexAttrib4NusvARB(uint index, in ushort v)
            {
                fixed (ushort* v_ptr = &v)
                {
                    VertexAttrib4NusvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4svARB(uint, short*)"/>
            public static unsafe void VertexAttrib4svARB(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4svARB(uint, short*)"/>
            public static unsafe void VertexAttrib4svARB(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4svARB(uint, short*)"/>
            public static unsafe void VertexAttrib4svARB(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib4svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubvARB(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubvARB(uint index, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4ubvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubvARB(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubvARB(uint index, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4ubvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubvARB(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubvARB(uint index, in byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttrib4ubvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4uivARB(uint, uint*)"/>
            public static unsafe void VertexAttrib4uivARB(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttrib4uivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4uivARB(uint, uint*)"/>
            public static unsafe void VertexAttrib4uivARB(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttrib4uivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4uivARB(uint, uint*)"/>
            public static unsafe void VertexAttrib4uivARB(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttrib4uivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4usvARB(uint, ushort*)"/>
            public static unsafe void VertexAttrib4usvARB(uint index, ReadOnlySpan<ushort> v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttrib4usvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4usvARB(uint, ushort*)"/>
            public static unsafe void VertexAttrib4usvARB(uint index, ushort[] v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttrib4usvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4usvARB(uint, ushort*)"/>
            public static unsafe void VertexAttrib4usvARB(uint index, in ushort v)
            {
                fixed (ushort* v_ptr = &v)
                {
                    VertexAttrib4usvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1dv(uint, double*)"/>
            public static unsafe void VertexAttribL1d(uint index, in double v)
            {
                fixed (double* tmp_v = &v)
                {
                    double* v_ptr = (double*)tmp_v;
                    VertexAttribL1dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1ui64vARB(uint, ulong*)"/>
            public static unsafe void VertexAttribL1ui64vARB(uint index, in ulong v)
            {
                fixed (ulong* v_ptr = &v)
                {
                    VertexAttribL1ui64vARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2dv(uint, double*)"/>
            public static unsafe void VertexAttribL2d(uint index, in Vector2d v)
            {
                fixed (Vector2d* tmp_v = &v)
                {
                    double* v_ptr = (double*)tmp_v;
                    VertexAttribL2dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3dv(uint, double*)"/>
            public static unsafe void VertexAttribL3d(uint index, in Vector3d v)
            {
                fixed (Vector3d* tmp_v = &v)
                {
                    double* v_ptr = (double*)tmp_v;
                    VertexAttribL3dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4dv(uint, double*)"/>
            public static unsafe void VertexAttribL4d(uint index, in Vector4d v)
            {
                fixed (Vector4d* tmp_v = &v)
                {
                    double* v_ptr = (double*)tmp_v;
                    VertexAttribL4dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribLPointer(uint, int, VertexAttribLType, int, void*)"/>
            public static unsafe void VertexAttribLPointer(uint index, int size, VertexAttribLType type, int stride, nint offset)
            {
                void* pointer = (void*)offset;
                VertexAttribLPointer(index, size, type, stride, pointer);
            }
            /// <inheritdoc cref="VertexAttribP1uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP1uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP1uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP1uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP1uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexAttribP1uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP2uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP2uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP2uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP2uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP2uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexAttribP2uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP3uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP3uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP3uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP3uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP3uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexAttribP3uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP4uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP4uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP4uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP4uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP4uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexAttribP4uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointerARB(uint, int, VertexAttribPointerType, bool, int, void*)"/>
            public static unsafe void VertexAttribPointerARB(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexAttribPointerARB(index, size, type, normalized, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexAttribPointerARB(uint, int, VertexAttribPointerType, bool, int, void*)"/>
            public static unsafe void VertexAttribPointerARB<T1>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribPointerARB(index, size, type, normalized, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointerARB(uint, int, VertexAttribPointerType, bool, int, void*)"/>
            public static unsafe void VertexAttribPointerARB<T1>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribPointerARB(index, size, type, normalized, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointerARB(uint, int, VertexAttribPointerType, bool, int, void*)"/>
            public static unsafe void VertexAttribPointerARB<T1>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexAttribPointerARB(index, size, type, normalized, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexP2uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP2ui(VertexPointerType type, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexP2uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP2uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP2ui(VertexPointerType type, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexP2uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP2uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP2ui(VertexPointerType type, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexP2uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP3uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP3ui(VertexPointerType type, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexP3uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP3uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP3ui(VertexPointerType type, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexP3uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP3uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP3ui(VertexPointerType type, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexP3uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP4uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP4ui(VertexPointerType type, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexP4uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP4uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP4ui(VertexPointerType type, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexP4uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP4uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP4ui(VertexPointerType type, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexP4uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
            public static unsafe void ViewportArray(uint first, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    ViewportArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
            public static unsafe void ViewportArray(uint first, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    ViewportArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
            public static unsafe void ViewportArray(uint first, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    ViewportArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
            public static unsafe void ViewportIndexedf(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    ViewportIndexedfv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
            public static unsafe void ViewportIndexedf(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    ViewportIndexedfv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
            public static unsafe void ViewportIndexedf(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    ViewportIndexedfv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="WeightbvARB(int, sbyte*)"/>
            public static unsafe void WeightbvARB(ReadOnlySpan<sbyte> weights)
            {
                int size = (int)(weights.Length);
                fixed (sbyte* weights_ptr = weights)
                {
                    WeightbvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightbvARB(int, sbyte*)"/>
            public static unsafe void WeightbvARB(sbyte[] weights)
            {
                int size = (int)(weights.Length);
                fixed (sbyte* weights_ptr = weights)
                {
                    WeightbvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightbvARB(int, sbyte*)"/>
            public static unsafe void WeightbvARB(int size, in sbyte weights)
            {
                fixed (sbyte* weights_ptr = &weights)
                {
                    WeightbvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightdvARB(int, double*)"/>
            public static unsafe void WeightdvARB(ReadOnlySpan<double> weights)
            {
                int size = (int)(weights.Length);
                fixed (double* weights_ptr = weights)
                {
                    WeightdvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightdvARB(int, double*)"/>
            public static unsafe void WeightdvARB(double[] weights)
            {
                int size = (int)(weights.Length);
                fixed (double* weights_ptr = weights)
                {
                    WeightdvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightdvARB(int, double*)"/>
            public static unsafe void WeightdvARB(int size, in double weights)
            {
                fixed (double* weights_ptr = &weights)
                {
                    WeightdvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightfvARB(int, float*)"/>
            public static unsafe void WeightfvARB(ReadOnlySpan<float> weights)
            {
                int size = (int)(weights.Length);
                fixed (float* weights_ptr = weights)
                {
                    WeightfvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightfvARB(int, float*)"/>
            public static unsafe void WeightfvARB(float[] weights)
            {
                int size = (int)(weights.Length);
                fixed (float* weights_ptr = weights)
                {
                    WeightfvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightfvARB(int, float*)"/>
            public static unsafe void WeightfvARB(int size, in float weights)
            {
                fixed (float* weights_ptr = &weights)
                {
                    WeightfvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightivARB(int, int*)"/>
            public static unsafe void WeightivARB(ReadOnlySpan<int> weights)
            {
                int size = (int)(weights.Length);
                fixed (int* weights_ptr = weights)
                {
                    WeightivARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightivARB(int, int*)"/>
            public static unsafe void WeightivARB(int[] weights)
            {
                int size = (int)(weights.Length);
                fixed (int* weights_ptr = weights)
                {
                    WeightivARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightivARB(int, int*)"/>
            public static unsafe void WeightivARB(int size, in int weights)
            {
                fixed (int* weights_ptr = &weights)
                {
                    WeightivARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightPointerARB(int, WeightPointerTypeARB, int, void*)"/>
            public static unsafe void WeightPointerARB(int size, WeightPointerTypeARB type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                WeightPointerARB(size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="WeightPointerARB(int, WeightPointerTypeARB, int, void*)"/>
            public static unsafe void WeightPointerARB<T1>(int size, WeightPointerTypeARB type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    WeightPointerARB(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="WeightPointerARB(int, WeightPointerTypeARB, int, void*)"/>
            public static unsafe void WeightPointerARB<T1>(int size, WeightPointerTypeARB type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    WeightPointerARB(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="WeightPointerARB(int, WeightPointerTypeARB, int, void*)"/>
            public static unsafe void WeightPointerARB<T1>(int size, WeightPointerTypeARB type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    WeightPointerARB(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="WeightsvARB(int, short*)"/>
            public static unsafe void WeightsvARB(ReadOnlySpan<short> weights)
            {
                int size = (int)(weights.Length);
                fixed (short* weights_ptr = weights)
                {
                    WeightsvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightsvARB(int, short*)"/>
            public static unsafe void WeightsvARB(short[] weights)
            {
                int size = (int)(weights.Length);
                fixed (short* weights_ptr = weights)
                {
                    WeightsvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightsvARB(int, short*)"/>
            public static unsafe void WeightsvARB(int size, in short weights)
            {
                fixed (short* weights_ptr = &weights)
                {
                    WeightsvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightubvARB(int, byte*)"/>
            public static unsafe void WeightubvARB(ReadOnlySpan<byte> weights)
            {
                int size = (int)(weights.Length);
                fixed (byte* weights_ptr = weights)
                {
                    WeightubvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightubvARB(int, byte*)"/>
            public static unsafe void WeightubvARB(byte[] weights)
            {
                int size = (int)(weights.Length);
                fixed (byte* weights_ptr = weights)
                {
                    WeightubvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightubvARB(int, byte*)"/>
            public static unsafe void WeightubvARB(int size, in byte weights)
            {
                fixed (byte* weights_ptr = &weights)
                {
                    WeightubvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightuivARB(int, uint*)"/>
            public static unsafe void WeightuivARB(ReadOnlySpan<uint> weights)
            {
                int size = (int)(weights.Length);
                fixed (uint* weights_ptr = weights)
                {
                    WeightuivARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightuivARB(int, uint*)"/>
            public static unsafe void WeightuivARB(uint[] weights)
            {
                int size = (int)(weights.Length);
                fixed (uint* weights_ptr = weights)
                {
                    WeightuivARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightuivARB(int, uint*)"/>
            public static unsafe void WeightuivARB(int size, in uint weights)
            {
                fixed (uint* weights_ptr = &weights)
                {
                    WeightuivARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightusvARB(int, ushort*)"/>
            public static unsafe void WeightusvARB(ReadOnlySpan<ushort> weights)
            {
                int size = (int)(weights.Length);
                fixed (ushort* weights_ptr = weights)
                {
                    WeightusvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightusvARB(int, ushort*)"/>
            public static unsafe void WeightusvARB(ushort[] weights)
            {
                int size = (int)(weights.Length);
                fixed (ushort* weights_ptr = weights)
                {
                    WeightusvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightusvARB(int, ushort*)"/>
            public static unsafe void WeightusvARB(int size, in ushort weights)
            {
                fixed (ushort* weights_ptr = &weights)
                {
                    WeightusvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dvARB(double*)"/>
            public static unsafe void WindowPos2dvARB(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos2dvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dvARB(double*)"/>
            public static unsafe void WindowPos2dvARB(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos2dvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dvARB(double*)"/>
            public static unsafe void WindowPos2dvARB(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    WindowPos2dvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fvARB(float*)"/>
            public static unsafe void WindowPos2fvARB(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos2fvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fvARB(float*)"/>
            public static unsafe void WindowPos2fvARB(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos2fvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fvARB(float*)"/>
            public static unsafe void WindowPos2fvARB(in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    WindowPos2fvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2ivARB(int*)"/>
            public static unsafe void WindowPos2ivARB(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos2ivARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2ivARB(int*)"/>
            public static unsafe void WindowPos2ivARB(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos2ivARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2ivARB(int*)"/>
            public static unsafe void WindowPos2ivARB(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    WindowPos2ivARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2svARB(short*)"/>
            public static unsafe void WindowPos2svARB(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos2svARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2svARB(short*)"/>
            public static unsafe void WindowPos2svARB(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos2svARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2svARB(short*)"/>
            public static unsafe void WindowPos2svARB(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    WindowPos2svARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dvARB(double*)"/>
            public static unsafe void WindowPos3dvARB(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos3dvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dvARB(double*)"/>
            public static unsafe void WindowPos3dvARB(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos3dvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dvARB(double*)"/>
            public static unsafe void WindowPos3dvARB(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    WindowPos3dvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fvARB(float*)"/>
            public static unsafe void WindowPos3fvARB(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos3fvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fvARB(float*)"/>
            public static unsafe void WindowPos3fvARB(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos3fvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fvARB(float*)"/>
            public static unsafe void WindowPos3fvARB(in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    WindowPos3fvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3ivARB(int*)"/>
            public static unsafe void WindowPos3ivARB(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos3ivARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3ivARB(int*)"/>
            public static unsafe void WindowPos3ivARB(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos3ivARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3ivARB(int*)"/>
            public static unsafe void WindowPos3ivARB(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    WindowPos3ivARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3svARB(short*)"/>
            public static unsafe void WindowPos3svARB(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos3svARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3svARB(short*)"/>
            public static unsafe void WindowPos3svARB(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos3svARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3svARB(short*)"/>
            public static unsafe void WindowPos3svARB(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    WindowPos3svARB(v_ptr);
                }
            }
        }
        public static unsafe partial class ATI
        {
            /// <inheritdoc cref="DrawBuffersATI(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffersATI(ReadOnlySpan<DrawBufferMode> bufs)
            {
                int n = (int)(bufs.Length);
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    DrawBuffersATI(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="DrawBuffersATI(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffersATI(DrawBufferMode[] bufs)
            {
                int n = (int)(bufs.Length);
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    DrawBuffersATI(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="DrawBuffersATI(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffersATI(int n, in DrawBufferMode bufs)
            {
                fixed (DrawBufferMode* bufs_ptr = &bufs)
                {
                    DrawBuffersATI(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointerATI(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerATI(ElementPointerTypeATI type, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                ElementPointerATI(type, pointer_vptr);
            }
            /// <inheritdoc cref="ElementPointerATI(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerATI<T1>(ElementPointerTypeATI type, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ElementPointerATI(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointerATI(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerATI<T1>(ElementPointerTypeATI type, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ElementPointerATI(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointerATI(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerATI<T1>(ElementPointerTypeATI type, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    ElementPointerATI(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="GetArrayObjectfvATI(EnableCap, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetArrayObjectfvATI(EnableCap array, ArrayObjectPNameATI pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetArrayObjectfvATI(array, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetArrayObjectfvATI(EnableCap, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetArrayObjectfvATI(EnableCap array, ArrayObjectPNameATI pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetArrayObjectfvATI(array, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetArrayObjectfvATI(EnableCap, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetArrayObjectfvATI(EnableCap array, ArrayObjectPNameATI pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetArrayObjectfvATI(array, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetArrayObjectfvATI(EnableCap, ArrayObjectPNameATI, float*)"/>
            public static unsafe float GetArrayObjectfvATI(EnableCap array, ArrayObjectPNameATI pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetArrayObjectfvATI(array, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetArrayObjectivATI(EnableCap, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetArrayObjectivATI(EnableCap array, ArrayObjectPNameATI pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetArrayObjectivATI(array, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetArrayObjectivATI(EnableCap, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetArrayObjectivATI(EnableCap array, ArrayObjectPNameATI pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetArrayObjectivATI(array, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetArrayObjectivATI(EnableCap, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetArrayObjectivATI(EnableCap array, ArrayObjectPNameATI pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetArrayObjectivATI(array, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetArrayObjectivATI(EnableCap, ArrayObjectPNameATI, int*)"/>
            public static unsafe int GetArrayObjectivATI(EnableCap array, ArrayObjectPNameATI pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetArrayObjectivATI(array, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetObjectBufferfvATI(int, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetObjectBufferfvATI(int buffer, ArrayObjectPNameATI pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetObjectBufferfvATI(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectBufferfvATI(int, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetObjectBufferfvATI(int buffer, ArrayObjectPNameATI pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetObjectBufferfvATI(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectBufferfvATI(int, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetObjectBufferfvATI(int buffer, ArrayObjectPNameATI pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetObjectBufferfvATI(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectBufferfvATI(int, ArrayObjectPNameATI, float*)"/>
            public static unsafe float GetObjectBufferfvATI(int buffer, ArrayObjectPNameATI pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetObjectBufferfvATI(buffer, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetObjectBufferivATI(int, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetObjectBufferivATI(int buffer, ArrayObjectPNameATI pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectBufferivATI(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectBufferivATI(int, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetObjectBufferivATI(int buffer, ArrayObjectPNameATI pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectBufferivATI(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectBufferivATI(int, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetObjectBufferivATI(int buffer, ArrayObjectPNameATI pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetObjectBufferivATI(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectBufferivATI(int, ArrayObjectPNameATI, int*)"/>
            public static unsafe int GetObjectBufferivATI(int buffer, ArrayObjectPNameATI pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetObjectBufferivATI(buffer, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTexBumpParameterfvATI(GetTexBumpParameterATI, float*)"/>
            public static unsafe void GetTexBumpParameterfvATI(GetTexBumpParameterATI pname, Span<float> param)
            {
                fixed (float* param_ptr = param)
                {
                    GetTexBumpParameterfvATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameterfvATI(GetTexBumpParameterATI, float*)"/>
            public static unsafe void GetTexBumpParameterfvATI(GetTexBumpParameterATI pname, float[] param)
            {
                fixed (float* param_ptr = param)
                {
                    GetTexBumpParameterfvATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameterfvATI(GetTexBumpParameterATI, float*)"/>
            public static unsafe void GetTexBumpParameterfvATI(GetTexBumpParameterATI pname, ref float param)
            {
                fixed (float* param_ptr = &param)
                {
                    GetTexBumpParameterfvATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameterfvATI(GetTexBumpParameterATI, float*)"/>
            public static unsafe float GetTexBumpParameterfvATI(GetTexBumpParameterATI pname)
            {
                float param_val;
                float* param = &param_val;
                GetTexBumpParameterfvATI(pname, param);
                return param_val;
            }
            /// <inheritdoc cref="GetTexBumpParameterivATI(GetTexBumpParameterATI, int*)"/>
            public static unsafe void GetTexBumpParameterivATI(GetTexBumpParameterATI pname, Span<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    GetTexBumpParameterivATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameterivATI(GetTexBumpParameterATI, int*)"/>
            public static unsafe void GetTexBumpParameterivATI(GetTexBumpParameterATI pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    GetTexBumpParameterivATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameterivATI(GetTexBumpParameterATI, int*)"/>
            public static unsafe void GetTexBumpParameterivATI(GetTexBumpParameterATI pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetTexBumpParameterivATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameterivATI(GetTexBumpParameterATI, int*)"/>
            public static unsafe int GetTexBumpParameterivATI(GetTexBumpParameterATI pname)
            {
                int param_val;
                int* param = &param_val;
                GetTexBumpParameterivATI(pname, param);
                return param_val;
            }
            /// <inheritdoc cref="GetVariantArrayObjectfvATI(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVariantArrayObjectfvATI(uint id, ArrayObjectPNameATI pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVariantArrayObjectfvATI(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantArrayObjectfvATI(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVariantArrayObjectfvATI(uint id, ArrayObjectPNameATI pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVariantArrayObjectfvATI(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantArrayObjectfvATI(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVariantArrayObjectfvATI(uint id, ArrayObjectPNameATI pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetVariantArrayObjectfvATI(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantArrayObjectfvATI(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe float GetVariantArrayObjectfvATI(uint id, ArrayObjectPNameATI pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetVariantArrayObjectfvATI(id, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVariantArrayObjectivATI(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVariantArrayObjectivATI(uint id, ArrayObjectPNameATI pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVariantArrayObjectivATI(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantArrayObjectivATI(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVariantArrayObjectivATI(uint id, ArrayObjectPNameATI pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVariantArrayObjectivATI(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantArrayObjectivATI(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVariantArrayObjectivATI(uint id, ArrayObjectPNameATI pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVariantArrayObjectivATI(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantArrayObjectivATI(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe int GetVariantArrayObjectivATI(uint id, ArrayObjectPNameATI pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetVariantArrayObjectivATI(id, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectfvATI(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVertexAttribArrayObjectfvATI(uint index, ArrayObjectPNameATI pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribArrayObjectfvATI(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectfvATI(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVertexAttribArrayObjectfvATI(uint index, ArrayObjectPNameATI pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribArrayObjectfvATI(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectfvATI(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVertexAttribArrayObjectfvATI(uint index, ArrayObjectPNameATI pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetVertexAttribArrayObjectfvATI(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectfvATI(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe float GetVertexAttribArrayObjectfvATI(uint index, ArrayObjectPNameATI pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetVertexAttribArrayObjectfvATI(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectivATI(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVertexAttribArrayObjectivATI(uint index, ArrayObjectPNameATI pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribArrayObjectivATI(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectivATI(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVertexAttribArrayObjectivATI(uint index, ArrayObjectPNameATI pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribArrayObjectivATI(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectivATI(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVertexAttribArrayObjectivATI(uint index, ArrayObjectPNameATI pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVertexAttribArrayObjectivATI(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectivATI(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe int GetVertexAttribArrayObjectivATI(uint index, ArrayObjectPNameATI pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetVertexAttribArrayObjectivATI(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="NewObjectBufferATI(int, void*, ArrayObjectUsageATI)"/>
            public static unsafe uint NewObjectBufferATI(int size, IntPtr pointer, ArrayObjectUsageATI usage)
            {
                uint returnValue;
                void* pointer_vptr = (void*)pointer;
                returnValue = NewObjectBufferATI(size, pointer_vptr, usage);
                return returnValue;
            }
            /// <inheritdoc cref="NewObjectBufferATI(int, void*, ArrayObjectUsageATI)"/>
            public static unsafe uint NewObjectBufferATI<T1>(ReadOnlySpan<T1> pointer, ArrayObjectUsageATI usage)
                where T1 : unmanaged
            {
                uint returnValue;
                int size = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    returnValue = NewObjectBufferATI(size, pointer_ptr, usage);
                }
                return returnValue;
            }
            /// <inheritdoc cref="NewObjectBufferATI(int, void*, ArrayObjectUsageATI)"/>
            public static unsafe uint NewObjectBufferATI<T1>(T1[] pointer, ArrayObjectUsageATI usage)
                where T1 : unmanaged
            {
                uint returnValue;
                int size = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    returnValue = NewObjectBufferATI(size, pointer_ptr, usage);
                }
                return returnValue;
            }
            /// <inheritdoc cref="NewObjectBufferATI(int, void*, ArrayObjectUsageATI)"/>
            public static unsafe uint NewObjectBufferATI<T1>(int size, in T1 pointer, ArrayObjectUsageATI usage)
                where T1 : unmanaged
            {
                uint returnValue;
                fixed (void* pointer_ptr = &pointer)
                {
                    returnValue = NewObjectBufferATI(size, pointer_ptr, usage);
                }
                return returnValue;
            }
            /// <inheritdoc cref="NormalStream3bvATI(VertexStreamATI, sbyte*)"/>
            public static unsafe void NormalStream3bvATI(VertexStreamATI stream, ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    NormalStream3bvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3bvATI(VertexStreamATI, sbyte*)"/>
            public static unsafe void NormalStream3bvATI(VertexStreamATI stream, sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    NormalStream3bvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3bvATI(VertexStreamATI, sbyte*)"/>
            public static unsafe void NormalStream3bvATI(VertexStreamATI stream, in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    NormalStream3bvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3dvATI(VertexStreamATI, double*)"/>
            public static unsafe void NormalStream3dvATI(VertexStreamATI stream, ReadOnlySpan<double> coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    NormalStream3dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3dvATI(VertexStreamATI, double*)"/>
            public static unsafe void NormalStream3dvATI(VertexStreamATI stream, double[] coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    NormalStream3dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3dvATI(VertexStreamATI, double*)"/>
            public static unsafe void NormalStream3dvATI(VertexStreamATI stream, in double coords)
            {
                fixed (double* coords_ptr = &coords)
                {
                    NormalStream3dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3fvATI(VertexStreamATI, float*)"/>
            public static unsafe void NormalStream3fvATI(VertexStreamATI stream, ReadOnlySpan<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    NormalStream3fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3fvATI(VertexStreamATI, float*)"/>
            public static unsafe void NormalStream3fvATI(VertexStreamATI stream, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    NormalStream3fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3fvATI(VertexStreamATI, float*)"/>
            public static unsafe void NormalStream3fvATI(VertexStreamATI stream, in float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    NormalStream3fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3ivATI(VertexStreamATI, int*)"/>
            public static unsafe void NormalStream3ivATI(VertexStreamATI stream, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    NormalStream3ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3ivATI(VertexStreamATI, int*)"/>
            public static unsafe void NormalStream3ivATI(VertexStreamATI stream, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    NormalStream3ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3ivATI(VertexStreamATI, int*)"/>
            public static unsafe void NormalStream3ivATI(VertexStreamATI stream, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    NormalStream3ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3svATI(VertexStreamATI, short*)"/>
            public static unsafe void NormalStream3svATI(VertexStreamATI stream, ReadOnlySpan<short> coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    NormalStream3svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3svATI(VertexStreamATI, short*)"/>
            public static unsafe void NormalStream3svATI(VertexStreamATI stream, short[] coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    NormalStream3svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3svATI(VertexStreamATI, short*)"/>
            public static unsafe void NormalStream3svATI(VertexStreamATI stream, in short coords)
            {
                fixed (short* coords_ptr = &coords)
                {
                    NormalStream3svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="SetFragmentShaderConstantATI(FragmentShaderConATI, float*)"/>
            public static unsafe void SetFragmentShaderConstantATI(FragmentShaderConATI dst, ReadOnlySpan<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    SetFragmentShaderConstantATI(dst, value_ptr);
                }
            }
            /// <inheritdoc cref="SetFragmentShaderConstantATI(FragmentShaderConATI, float*)"/>
            public static unsafe void SetFragmentShaderConstantATI(FragmentShaderConATI dst, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    SetFragmentShaderConstantATI(dst, value_ptr);
                }
            }
            /// <inheritdoc cref="SetFragmentShaderConstantATI(FragmentShaderConATI, float*)"/>
            public static unsafe void SetFragmentShaderConstantATI(FragmentShaderConATI dst, in float value)
            {
                fixed (float* value_ptr = &value)
                {
                    SetFragmentShaderConstantATI(dst, value_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameterfvATI(TexBumpParameterATI, float*)"/>
            public static unsafe void TexBumpParameterfvATI(TexBumpParameterATI pname, ReadOnlySpan<float> param)
            {
                fixed (float* param_ptr = param)
                {
                    TexBumpParameterfvATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameterfvATI(TexBumpParameterATI, float*)"/>
            public static unsafe void TexBumpParameterfvATI(TexBumpParameterATI pname, float[] param)
            {
                fixed (float* param_ptr = param)
                {
                    TexBumpParameterfvATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameterfvATI(TexBumpParameterATI, float*)"/>
            public static unsafe void TexBumpParameterfvATI(TexBumpParameterATI pname, in float param)
            {
                fixed (float* param_ptr = &param)
                {
                    TexBumpParameterfvATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameterivATI(TexBumpParameterATI, int*)"/>
            public static unsafe void TexBumpParameterivATI(TexBumpParameterATI pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    TexBumpParameterivATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameterivATI(TexBumpParameterATI, int*)"/>
            public static unsafe void TexBumpParameterivATI(TexBumpParameterATI pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    TexBumpParameterivATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameterivATI(TexBumpParameterATI, int*)"/>
            public static unsafe void TexBumpParameterivATI(TexBumpParameterATI pname, in int param)
            {
                fixed (int* param_ptr = &param)
                {
                    TexBumpParameterivATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="UpdateObjectBufferATI(int, uint, int, void*, PreserveModeATI)"/>
            public static unsafe void UpdateObjectBufferATI(int buffer, uint offset, int size, IntPtr pointer, PreserveModeATI preserve)
            {
                void* pointer_vptr = (void*)pointer;
                UpdateObjectBufferATI(buffer, offset, size, pointer_vptr, preserve);
            }
            /// <inheritdoc cref="UpdateObjectBufferATI(int, uint, int, void*, PreserveModeATI)"/>
            public static unsafe void UpdateObjectBufferATI<T1>(int buffer, uint offset, ReadOnlySpan<T1> pointer, PreserveModeATI preserve)
                where T1 : unmanaged
            {
                int size = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    UpdateObjectBufferATI(buffer, offset, size, pointer_ptr, preserve);
                }
            }
            /// <inheritdoc cref="UpdateObjectBufferATI(int, uint, int, void*, PreserveModeATI)"/>
            public static unsafe void UpdateObjectBufferATI<T1>(int buffer, uint offset, T1[] pointer, PreserveModeATI preserve)
                where T1 : unmanaged
            {
                int size = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    UpdateObjectBufferATI(buffer, offset, size, pointer_ptr, preserve);
                }
            }
            /// <inheritdoc cref="UpdateObjectBufferATI(int, uint, int, void*, PreserveModeATI)"/>
            public static unsafe void UpdateObjectBufferATI<T1>(int buffer, uint offset, int size, in T1 pointer, PreserveModeATI preserve)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    UpdateObjectBufferATI(buffer, offset, size, pointer_ptr, preserve);
                }
            }
            /// <inheritdoc cref="VertexStream1dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream1dvATI(VertexStreamATI stream, ReadOnlySpan<double> coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream1dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream1dvATI(VertexStreamATI stream, double[] coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream1dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream1dvATI(VertexStreamATI stream, in double coords)
            {
                fixed (double* coords_ptr = &coords)
                {
                    VertexStream1dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream1fvATI(VertexStreamATI stream, ReadOnlySpan<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream1fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream1fvATI(VertexStreamATI stream, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream1fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream1fvATI(VertexStreamATI stream, in float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    VertexStream1fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream1ivATI(VertexStreamATI stream, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream1ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream1ivATI(VertexStreamATI stream, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream1ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream1ivATI(VertexStreamATI stream, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    VertexStream1ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream1svATI(VertexStreamATI stream, ReadOnlySpan<short> coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream1svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream1svATI(VertexStreamATI stream, short[] coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream1svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream1svATI(VertexStreamATI stream, in short coords)
            {
                fixed (short* coords_ptr = &coords)
                {
                    VertexStream1svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream2dvATI(VertexStreamATI stream, ReadOnlySpan<double> coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream2dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream2dvATI(VertexStreamATI stream, double[] coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream2dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream2dvATI(VertexStreamATI stream, in double coords)
            {
                fixed (double* coords_ptr = &coords)
                {
                    VertexStream2dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream2fvATI(VertexStreamATI stream, ReadOnlySpan<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream2fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream2fvATI(VertexStreamATI stream, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream2fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream2fvATI(VertexStreamATI stream, in float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    VertexStream2fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream2ivATI(VertexStreamATI stream, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream2ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream2ivATI(VertexStreamATI stream, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream2ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream2ivATI(VertexStreamATI stream, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    VertexStream2ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream2svATI(VertexStreamATI stream, ReadOnlySpan<short> coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream2svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream2svATI(VertexStreamATI stream, short[] coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream2svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream2svATI(VertexStreamATI stream, in short coords)
            {
                fixed (short* coords_ptr = &coords)
                {
                    VertexStream2svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream3dvATI(VertexStreamATI stream, ReadOnlySpan<double> coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream3dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream3dvATI(VertexStreamATI stream, double[] coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream3dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream3dvATI(VertexStreamATI stream, in double coords)
            {
                fixed (double* coords_ptr = &coords)
                {
                    VertexStream3dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream3fvATI(VertexStreamATI stream, ReadOnlySpan<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream3fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream3fvATI(VertexStreamATI stream, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream3fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream3fvATI(VertexStreamATI stream, in float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    VertexStream3fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream3ivATI(VertexStreamATI stream, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream3ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream3ivATI(VertexStreamATI stream, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream3ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream3ivATI(VertexStreamATI stream, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    VertexStream3ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream3svATI(VertexStreamATI stream, ReadOnlySpan<short> coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream3svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream3svATI(VertexStreamATI stream, short[] coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream3svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream3svATI(VertexStreamATI stream, in short coords)
            {
                fixed (short* coords_ptr = &coords)
                {
                    VertexStream3svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream4dvATI(VertexStreamATI stream, ReadOnlySpan<double> coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream4dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream4dvATI(VertexStreamATI stream, double[] coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream4dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream4dvATI(VertexStreamATI stream, in double coords)
            {
                fixed (double* coords_ptr = &coords)
                {
                    VertexStream4dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream4fvATI(VertexStreamATI stream, ReadOnlySpan<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream4fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream4fvATI(VertexStreamATI stream, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream4fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream4fvATI(VertexStreamATI stream, in float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    VertexStream4fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream4ivATI(VertexStreamATI stream, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream4ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream4ivATI(VertexStreamATI stream, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream4ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream4ivATI(VertexStreamATI stream, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    VertexStream4ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream4svATI(VertexStreamATI stream, ReadOnlySpan<short> coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream4svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream4svATI(VertexStreamATI stream, short[] coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream4svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream4svATI(VertexStreamATI stream, in short coords)
            {
                fixed (short* coords_ptr = &coords)
                {
                    VertexStream4svATI(stream, coords_ptr);
                }
            }
        }
        public static unsafe partial class EXT
        {
            /// <inheritdoc cref="AreTexturesResidentEXT(int, int*, bool*)"/>
            public static unsafe bool AreTexturesResidentEXT(int n, ReadOnlySpan<int> textures, Span<bool> residences)
            {
                bool returnValue;
                fixed (int* textures_ptr = textures)
                {
                    fixed (bool* residences_ptr = residences)
                    {
                        returnValue = AreTexturesResidentEXT(n, textures_ptr, residences_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AreTexturesResidentEXT(int, int*, bool*)"/>
            public static unsafe bool AreTexturesResidentEXT(int n, int[] textures, bool[] residences)
            {
                bool returnValue;
                fixed (int* textures_ptr = textures)
                {
                    fixed (bool* residences_ptr = residences)
                    {
                        returnValue = AreTexturesResidentEXT(n, textures_ptr, residences_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AreTexturesResidentEXT(int, int*, bool*)"/>
            public static unsafe bool AreTexturesResidentEXT(int n, in int textures, ref bool residences)
            {
                bool returnValue;
                fixed (int* textures_ptr = &textures)
                fixed (bool* residences_ptr = &residences)
                {
                    returnValue = AreTexturesResidentEXT(n, textures_ptr, residences_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="BindFragDataLocationEXT(int, uint, byte*)"/>
            public static unsafe void BindFragDataLocationEXT(int program, uint color, string name)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                BindFragDataLocationEXT(program, color, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="Binormal3bvEXT(sbyte*)"/>
            public static unsafe void Binormal3bvEXT(ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    Binormal3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3bvEXT(sbyte*)"/>
            public static unsafe void Binormal3bvEXT(sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    Binormal3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3bvEXT(sbyte*)"/>
            public static unsafe void Binormal3bvEXT(in sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    Binormal3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3dvEXT(double*)"/>
            public static unsafe void Binormal3dvEXT(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    Binormal3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3dvEXT(double*)"/>
            public static unsafe void Binormal3dvEXT(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    Binormal3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3dvEXT(double*)"/>
            public static unsafe void Binormal3dvEXT(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    Binormal3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3fvEXT(float*)"/>
            public static unsafe void Binormal3fvEXT(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    Binormal3fvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3fvEXT(float*)"/>
            public static unsafe void Binormal3fvEXT(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    Binormal3fvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3fvEXT(float*)"/>
            public static unsafe void Binormal3fvEXT(in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    Binormal3fvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3ivEXT(int*)"/>
            public static unsafe void Binormal3ivEXT(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    Binormal3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3ivEXT(int*)"/>
            public static unsafe void Binormal3ivEXT(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    Binormal3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3ivEXT(int*)"/>
            public static unsafe void Binormal3ivEXT(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    Binormal3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3svEXT(short*)"/>
            public static unsafe void Binormal3svEXT(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    Binormal3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3svEXT(short*)"/>
            public static unsafe void Binormal3svEXT(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    Binormal3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3svEXT(short*)"/>
            public static unsafe void Binormal3svEXT(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    Binormal3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="BinormalPointerEXT(BinormalPointerTypeEXT, int, void*)"/>
            public static unsafe void BinormalPointerEXT(BinormalPointerTypeEXT type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                BinormalPointerEXT(type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="BinormalPointerEXT(BinormalPointerTypeEXT, int, void*)"/>
            public static unsafe void BinormalPointerEXT<T1>(BinormalPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    BinormalPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="BinormalPointerEXT(BinormalPointerTypeEXT, int, void*)"/>
            public static unsafe void BinormalPointerEXT<T1>(BinormalPointerTypeEXT type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    BinormalPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="BinormalPointerEXT(BinormalPointerTypeEXT, int, void*)"/>
            public static unsafe void BinormalPointerEXT<T1>(BinormalPointerTypeEXT type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    BinormalPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="BufferStorageExternalEXT(All, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorageExternalEXT(All target, IntPtr offset, nint size, IntPtr clientBuffer, BufferStorageMask flags)
            {
                void* clientBuffer_vptr = (void*)clientBuffer;
                BufferStorageExternalEXT(target, offset, size, clientBuffer_vptr, flags);
            }
            /// <inheritdoc cref="BufferStorageExternalEXT(All, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorageExternalEXT<T1>(All target, IntPtr offset, nint size, ref T1 clientBuffer, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* clientBuffer_ptr = &clientBuffer)
                {
                    BufferStorageExternalEXT(target, offset, size, clientBuffer_ptr, flags);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferDataEXT(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferDataEXT(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearNamedBufferDataEXT(buffer, internalformat, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearNamedBufferDataEXT(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferDataEXT<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferDataEXT(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferDataEXT(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferDataEXT<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferDataEXT(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferDataEXT(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferDataEXT<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearNamedBufferDataEXT(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubDataEXT(int, SizedInternalFormat, nint, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubDataEXT(int buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearNamedBufferSubDataEXT(int, SizedInternalFormat, nint, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubDataEXT<T1>(int buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubDataEXT(int, SizedInternalFormat, nint, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubDataEXT<T1>(int buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubDataEXT(int, SizedInternalFormat, nint, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubDataEXT<T1>(int buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorPointerEXT(int, ColorPointerType, int, int, void*)"/>
            public static unsafe void ColorPointerEXT(int size, ColorPointerType type, int stride, int count, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                ColorPointerEXT(size, type, stride, count, pointer_vptr);
            }
            /// <inheritdoc cref="ColorPointerEXT(int, ColorPointerType, int, int, void*)"/>
            public static unsafe void ColorPointerEXT<T1>(int size, ColorPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ColorPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ColorPointerEXT(int, ColorPointerType, int, int, void*)"/>
            public static unsafe void ColorPointerEXT<T1>(int size, ColorPointerType type, int stride, int count, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ColorPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ColorPointerEXT(int, ColorPointerType, int, int, void*)"/>
            public static unsafe void ColorPointerEXT<T1>(int size, ColorPointerType type, int stride, int count, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    ColorPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTableEXT(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTableEXT(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ColorSubTableEXT(target, start, count, format, type, data_vptr);
            }
            /// <inheritdoc cref="ColorSubTableEXT(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTableEXT<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ColorSubTableEXT(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTableEXT(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTableEXT<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ColorSubTableEXT(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTableEXT(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTableEXT<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ColorSubTableEXT(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableEXT(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableEXT(ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, IntPtr table)
            {
                void* table_vptr = (void*)table;
                ColorTableEXT(target, internalFormat, width, format, type, table_vptr);
            }
            /// <inheritdoc cref="ColorTableEXT(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableEXT<T1>(ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTableEXT(target, internalFormat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableEXT(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableEXT<T1>(ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTableEXT(target, internalFormat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableEXT(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableEXT<T1>(ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, in T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    ColorTableEXT(target, internalFormat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage1DEXT(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage1DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage1DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage1DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage2DEXT(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage2DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage2DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage2DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage3DEXT(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage3DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage3DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage3DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1DEXT(int, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1DEXT(int texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage1DEXT(int, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1DEXT(int, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1DEXT(int, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2DEXT(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3DEXT(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1DEXT(ConvolutionTargetEXT, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                ConvolutionFilter1DEXT(target, internalformat, width, format, type, image_vptr);
            }
            /// <inheritdoc cref="ConvolutionFilter1DEXT(ConvolutionTargetEXT, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1DEXT<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter1DEXT(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1DEXT(ConvolutionTargetEXT, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1DEXT<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter1DEXT(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1DEXT(ConvolutionTargetEXT, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1DEXT<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, in T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    ConvolutionFilter1DEXT(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2DEXT(ConvolutionTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                ConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image_vptr);
            }
            /// <inheritdoc cref="ConvolutionFilter2DEXT(ConvolutionTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2DEXT<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2DEXT(ConvolutionTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2DEXT<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2DEXT(ConvolutionTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2DEXT<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, in T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    ConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfvEXT(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ConvolutionParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfvEXT(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ConvolutionParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfvEXT(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ConvolutionParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterivEXT(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterivEXT(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterivEXT(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ConvolutionParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CreateMemoryObjectsEXT(int, uint*)"/>
            public static unsafe void CreateMemoryObjectsEXT(int n, ref uint memoryObjects)
            {
                fixed (uint* memoryObjects_ptr = &memoryObjects)
                {
                    CreateMemoryObjectsEXT(n, memoryObjects_ptr);
                }
            }
            /// <inheritdoc cref="CreateShaderProgramEXT(ShaderType, byte*)"/>
            public static unsafe int CreateShaderProgramEXT(ShaderType type, string str)
            {
                int returnValue;
                byte* str_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(str);
                returnValue = CreateShaderProgramEXT(type, str_ptr);
                Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="CullParameterdvEXT(CullParameterEXT, double*)"/>
            public static unsafe void CullParameterdvEXT(CullParameterEXT pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    CullParameterdvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterdvEXT(CullParameterEXT, double*)"/>
            public static unsafe void CullParameterdvEXT(CullParameterEXT pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    CullParameterdvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterdvEXT(CullParameterEXT, double*)"/>
            public static unsafe void CullParameterdvEXT(CullParameterEXT pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    CullParameterdvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterfvEXT(CullParameterEXT, float*)"/>
            public static unsafe void CullParameterfvEXT(CullParameterEXT pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CullParameterfvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterfvEXT(CullParameterEXT, float*)"/>
            public static unsafe void CullParameterfvEXT(CullParameterEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CullParameterfvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterfvEXT(CullParameterEXT, float*)"/>
            public static unsafe void CullParameterfvEXT(CullParameterEXT pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    CullParameterfvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffersEXT(int, int*)"/>
            public static unsafe void DeleteFramebuffersEXT(ReadOnlySpan<int> framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    DeleteFramebuffersEXT(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffersEXT(int, int*)"/>
            public static unsafe void DeleteFramebuffersEXT(int[] framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    DeleteFramebuffersEXT(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffersEXT(int, int*)"/>
            public static unsafe void DeleteFramebuffersEXT(int n, in int framebuffers)
            {
                fixed (int* framebuffers_ptr = &framebuffers)
                {
                    DeleteFramebuffersEXT(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteMemoryObjectsEXT(int, uint*)"/>
            public static unsafe void DeleteMemoryObjectsEXT(ReadOnlySpan<uint> memoryObjects)
            {
                int n = (int)(memoryObjects.Length);
                fixed (uint* memoryObjects_ptr = memoryObjects)
                {
                    DeleteMemoryObjectsEXT(n, memoryObjects_ptr);
                }
            }
            /// <inheritdoc cref="DeleteMemoryObjectsEXT(int, uint*)"/>
            public static unsafe void DeleteMemoryObjectsEXT(uint[] memoryObjects)
            {
                int n = (int)(memoryObjects.Length);
                fixed (uint* memoryObjects_ptr = memoryObjects)
                {
                    DeleteMemoryObjectsEXT(n, memoryObjects_ptr);
                }
            }
            /// <inheritdoc cref="DeleteMemoryObjectsEXT(int, uint*)"/>
            public static unsafe void DeleteMemoryObjectsEXT(int n, in uint memoryObjects)
            {
                fixed (uint* memoryObjects_ptr = &memoryObjects)
                {
                    DeleteMemoryObjectsEXT(n, memoryObjects_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelinesEXT(int, int*)"/>
            public static unsafe void DeleteProgramPipelinesEXT(ReadOnlySpan<int> pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    DeleteProgramPipelinesEXT(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelinesEXT(int, int*)"/>
            public static unsafe void DeleteProgramPipelinesEXT(int[] pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    DeleteProgramPipelinesEXT(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelinesEXT(int, int*)"/>
            public static unsafe void DeleteProgramPipelinesEXT(int n, in int pipelines)
            {
                fixed (int* pipelines_ptr = &pipelines)
                {
                    DeleteProgramPipelinesEXT(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffersEXT(int, int*)"/>
            public static unsafe void DeleteRenderbuffersEXT(ReadOnlySpan<int> renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    DeleteRenderbuffersEXT(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffersEXT(int, int*)"/>
            public static unsafe void DeleteRenderbuffersEXT(int[] renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    DeleteRenderbuffersEXT(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffersEXT(int, int*)"/>
            public static unsafe void DeleteRenderbuffersEXT(int n, in int renderbuffers)
            {
                fixed (int* renderbuffers_ptr = &renderbuffers)
                {
                    DeleteRenderbuffersEXT(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSemaphoresEXT(int, uint*)"/>
            public static unsafe void DeleteSemaphoresEXT(ReadOnlySpan<uint> semaphores)
            {
                int n = (int)(semaphores.Length);
                fixed (uint* semaphores_ptr = semaphores)
                {
                    DeleteSemaphoresEXT(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSemaphoresEXT(int, uint*)"/>
            public static unsafe void DeleteSemaphoresEXT(uint[] semaphores)
            {
                int n = (int)(semaphores.Length);
                fixed (uint* semaphores_ptr = semaphores)
                {
                    DeleteSemaphoresEXT(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSemaphoresEXT(int, uint*)"/>
            public static unsafe void DeleteSemaphoresEXT(int n, in uint semaphores)
            {
                fixed (uint* semaphores_ptr = &semaphores)
                {
                    DeleteSemaphoresEXT(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTexturesEXT(int, int*)"/>
            public static unsafe void DeleteTexturesEXT(ReadOnlySpan<int> textures)
            {
                int n = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    DeleteTexturesEXT(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTexturesEXT(int, int*)"/>
            public static unsafe void DeleteTexturesEXT(int[] textures)
            {
                int n = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    DeleteTexturesEXT(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTexturesEXT(int, int*)"/>
            public static unsafe void DeleteTexturesEXT(int n, in int textures)
            {
                fixed (int* textures_ptr = &textures)
                {
                    DeleteTexturesEXT(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="DrawElementsInstancedEXT(PrimitiveType, int, DrawElementsType, void*, int)"/>
            public static unsafe void DrawElementsInstancedEXT(PrimitiveType mode, int count, DrawElementsType type, nint offset, int primcount)
            {
                void* indices = (void*)offset;
                DrawElementsInstancedEXT(mode, count, type, indices, primcount);
            }
            /// <inheritdoc cref="DrawRangeElementsEXT(PrimitiveType, uint, uint, int, DrawElementsType, void*)"/>
            public static unsafe void DrawRangeElementsEXT(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint offset)
            {
                void* indices = (void*)offset;
                DrawRangeElementsEXT(mode, start, end, count, type, indices);
            }
            /// <inheritdoc cref="EdgeFlagPointerEXT(int, int, bool*)"/>
            public static unsafe void EdgeFlagPointerEXT(int stride, int count, ReadOnlySpan<bool> pointer)
            {
                fixed (bool* pointer_ptr = pointer)
                {
                    EdgeFlagPointerEXT(stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="EdgeFlagPointerEXT(int, int, bool*)"/>
            public static unsafe void EdgeFlagPointerEXT(int stride, int count, bool[] pointer)
            {
                fixed (bool* pointer_ptr = pointer)
                {
                    EdgeFlagPointerEXT(stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="EdgeFlagPointerEXT(int, int, bool*)"/>
            public static unsafe void EdgeFlagPointerEXT(int stride, int count, in bool pointer)
            {
                fixed (bool* pointer_ptr = &pointer)
                {
                    EdgeFlagPointerEXT(stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="EGLImageTargetTexStorageEXT(All, void*, int*)"/>
            public static unsafe void EGLImageTargetTexStorageEXT(All target, IntPtr image, in int attrib_list)
            {
                fixed (int* attrib_list_ptr = &attrib_list)
                {
                    void* image_vptr = (void*)image;
                    EGLImageTargetTexStorageEXT(target, image_vptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="EGLImageTargetTexStorageEXT(All, void*, int*)"/>
            public static unsafe void EGLImageTargetTexStorageEXT<T1>(All target, ref T1 image, in int attrib_list)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                fixed (int* attrib_list_ptr = &attrib_list)
                {
                    EGLImageTargetTexStorageEXT(target, image_ptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="EGLImageTargetTextureStorageEXT(int, void*, int*)"/>
            public static unsafe void EGLImageTargetTextureStorageEXT(int texture, IntPtr image, in int attrib_list)
            {
                fixed (int* attrib_list_ptr = &attrib_list)
                {
                    void* image_vptr = (void*)image;
                    EGLImageTargetTextureStorageEXT(texture, image_vptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="EGLImageTargetTextureStorageEXT(int, void*, int*)"/>
            public static unsafe void EGLImageTargetTextureStorageEXT<T1>(int texture, ref T1 image, in int attrib_list)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                fixed (int* attrib_list_ptr = &attrib_list)
                {
                    EGLImageTargetTextureStorageEXT(texture, image_ptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="FogCoorddvEXT(double*)"/>
            public static unsafe void FogCoorddvEXT(ReadOnlySpan<double> coord)
            {
                fixed (double* coord_ptr = coord)
                {
                    FogCoorddvEXT(coord_ptr);
                }
            }
            /// <inheritdoc cref="FogCoorddvEXT(double*)"/>
            public static unsafe void FogCoorddvEXT(double[] coord)
            {
                fixed (double* coord_ptr = coord)
                {
                    FogCoorddvEXT(coord_ptr);
                }
            }
            /// <inheritdoc cref="FogCoorddvEXT(double*)"/>
            public static unsafe void FogCoorddvEXT(in double coord)
            {
                fixed (double* coord_ptr = &coord)
                {
                    FogCoorddvEXT(coord_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordfvEXT(float*)"/>
            public static unsafe void FogCoordfvEXT(ReadOnlySpan<float> coord)
            {
                fixed (float* coord_ptr = coord)
                {
                    FogCoordfvEXT(coord_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordfvEXT(float*)"/>
            public static unsafe void FogCoordfvEXT(float[] coord)
            {
                fixed (float* coord_ptr = coord)
                {
                    FogCoordfvEXT(coord_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordfvEXT(float*)"/>
            public static unsafe void FogCoordfvEXT(in float coord)
            {
                fixed (float* coord_ptr = &coord)
                {
                    FogCoordfvEXT(coord_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordPointerEXT(FogPointerTypeEXT, int, void*)"/>
            public static unsafe void FogCoordPointerEXT(FogPointerTypeEXT type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                FogCoordPointerEXT(type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="FogCoordPointerEXT(FogPointerTypeEXT, int, void*)"/>
            public static unsafe void FogCoordPointerEXT<T1>(FogPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    FogCoordPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordPointerEXT(FogPointerTypeEXT, int, void*)"/>
            public static unsafe void FogCoordPointerEXT<T1>(FogPointerTypeEXT type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    FogCoordPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordPointerEXT(FogPointerTypeEXT, int, void*)"/>
            public static unsafe void FogCoordPointerEXT<T1>(FogPointerTypeEXT type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    FogCoordPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferDrawBuffersEXT(int, int, DrawBufferMode*)"/>
            public static unsafe void FramebufferDrawBuffersEXT(int framebuffer, ReadOnlySpan<DrawBufferMode> bufs)
            {
                int n = (int)(bufs.Length);
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    FramebufferDrawBuffersEXT(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferDrawBuffersEXT(int, int, DrawBufferMode*)"/>
            public static unsafe void FramebufferDrawBuffersEXT(int framebuffer, DrawBufferMode[] bufs)
            {
                int n = (int)(bufs.Length);
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    FramebufferDrawBuffersEXT(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferDrawBuffersEXT(int, int, DrawBufferMode*)"/>
            public static unsafe void FramebufferDrawBuffersEXT(int framebuffer, int n, in DrawBufferMode bufs)
            {
                fixed (DrawBufferMode* bufs_ptr = &bufs)
                {
                    FramebufferDrawBuffersEXT(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffersEXT(int, int*)"/>
            public static unsafe void GenFramebuffersEXT(Span<int> framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    GenFramebuffersEXT(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffersEXT(int, int*)"/>
            public static unsafe void GenFramebuffersEXT(int[] framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    GenFramebuffersEXT(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffersEXT(int, int*)"/>
            public static unsafe void GenFramebuffersEXT(int n, ref int framebuffers)
            {
                fixed (int* framebuffers_ptr = &framebuffers)
                {
                    GenFramebuffersEXT(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelinesEXT(int, int*)"/>
            public static unsafe void GenProgramPipelinesEXT(Span<int> pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    GenProgramPipelinesEXT(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelinesEXT(int, int*)"/>
            public static unsafe void GenProgramPipelinesEXT(int[] pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    GenProgramPipelinesEXT(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelinesEXT(int, int*)"/>
            public static unsafe void GenProgramPipelinesEXT(int n, ref int pipelines)
            {
                fixed (int* pipelines_ptr = &pipelines)
                {
                    GenProgramPipelinesEXT(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffersEXT(int, int*)"/>
            public static unsafe void GenRenderbuffersEXT(Span<int> renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    GenRenderbuffersEXT(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffersEXT(int, int*)"/>
            public static unsafe void GenRenderbuffersEXT(int[] renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    GenRenderbuffersEXT(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffersEXT(int, int*)"/>
            public static unsafe void GenRenderbuffersEXT(int n, ref int renderbuffers)
            {
                fixed (int* renderbuffers_ptr = &renderbuffers)
                {
                    GenRenderbuffersEXT(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenSemaphoresEXT(int, uint*)"/>
            public static unsafe void GenSemaphoresEXT(Span<uint> semaphores)
            {
                int n = (int)(semaphores.Length);
                fixed (uint* semaphores_ptr = semaphores)
                {
                    GenSemaphoresEXT(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="GenSemaphoresEXT(int, uint*)"/>
            public static unsafe void GenSemaphoresEXT(uint[] semaphores)
            {
                int n = (int)(semaphores.Length);
                fixed (uint* semaphores_ptr = semaphores)
                {
                    GenSemaphoresEXT(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="GenSemaphoresEXT(int, uint*)"/>
            public static unsafe void GenSemaphoresEXT(int n, ref uint semaphores)
            {
                fixed (uint* semaphores_ptr = &semaphores)
                {
                    GenSemaphoresEXT(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="GenTexturesEXT(int, int*)"/>
            public static unsafe void GenTexturesEXT(Span<int> textures)
            {
                int n = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    GenTexturesEXT(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="GenTexturesEXT(int, int*)"/>
            public static unsafe void GenTexturesEXT(int[] textures)
            {
                int n = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    GenTexturesEXT(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="GenTexturesEXT(int, int*)"/>
            public static unsafe void GenTexturesEXT(int n, ref int textures)
            {
                fixed (int* textures_ptr = &textures)
                {
                    GenTexturesEXT(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="GetBooleanIndexedvEXT(BufferTargetARB, uint, bool*)"/>
            public static unsafe void GetBooleanIndexedvEXT(BufferTargetARB target, uint index, Span<bool> data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetBooleanIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBooleanIndexedvEXT(BufferTargetARB, uint, bool*)"/>
            public static unsafe void GetBooleanIndexedvEXT(BufferTargetARB target, uint index, bool[] data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetBooleanIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBooleanIndexedvEXT(BufferTargetARB, uint, bool*)"/>
            public static unsafe void GetBooleanIndexedvEXT(BufferTargetARB target, uint index, ref bool data)
            {
                fixed (bool* data_ptr = &data)
                {
                    GetBooleanIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBooleanIndexedvEXT(BufferTargetARB, uint, bool*)"/>
            public static unsafe bool GetBooleanIndexedvEXT(BufferTargetARB target, uint index)
            {
                bool data_val;
                bool* data = &data_val;
                GetBooleanIndexedvEXT(target, index, data);
                return data_val;
            }
            /// <inheritdoc cref="GetColorTableEXT(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableEXT(ColorTableTarget target, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                GetColorTableEXT(target, format, type, data_vptr);
            }
            /// <inheritdoc cref="GetColorTableEXT(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableEXT<T1>(ColorTableTarget target, PixelFormat format, PixelType type, Span<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetColorTableEXT(target, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableEXT(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableEXT<T1>(ColorTableTarget target, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetColorTableEXT(target, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableEXT(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableEXT<T1>(ColorTableTarget target, PixelFormat format, PixelType type, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    GetColorTableEXT(target, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfvEXT(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfvEXT(ColorTableTarget target, ColorTableParameterPName pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfvEXT(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfvEXT(ColorTableTarget target, ColorTableParameterPName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfvEXT(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfvEXT(ColorTableTarget target, ColorTableParameterPName pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetColorTableParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfvEXT(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe float GetColorTableParameterfvEXT(ColorTableTarget target, ColorTableParameterPName pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetColorTableParameterfvEXT(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetColorTableParameterivEXT(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameterivEXT(ColorTableTarget target, ColorTableParameterPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterivEXT(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameterivEXT(ColorTableTarget target, ColorTableParameterPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterivEXT(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameterivEXT(ColorTableTarget target, ColorTableParameterPName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetColorTableParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterivEXT(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe int GetColorTableParameterivEXT(ColorTableTarget target, ColorTableParameterPName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetColorTableParameterivEXT(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetCompressedMultiTexImageEXT(TextureUnit, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int lod, IntPtr img)
            {
                void* img_vptr = (void*)img;
                GetCompressedMultiTexImageEXT(texunit, target, lod, img_vptr);
            }
            /// <inheritdoc cref="GetCompressedMultiTexImageEXT(TextureUnit, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedMultiTexImageEXT<T1>(TextureUnit texunit, TextureTarget target, int lod, Span<T1> img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedMultiTexImageEXT(texunit, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedMultiTexImageEXT(TextureUnit, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedMultiTexImageEXT<T1>(TextureUnit texunit, TextureTarget target, int lod, T1[] img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedMultiTexImageEXT(texunit, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedMultiTexImageEXT(TextureUnit, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedMultiTexImageEXT<T1>(TextureUnit texunit, TextureTarget target, int lod, ref T1 img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = &img)
                {
                    GetCompressedMultiTexImageEXT(texunit, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImageEXT(int, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTextureImageEXT(int texture, TextureTarget target, int lod, IntPtr img)
            {
                void* img_vptr = (void*)img;
                GetCompressedTextureImageEXT(texture, target, lod, img_vptr);
            }
            /// <inheritdoc cref="GetCompressedTextureImageEXT(int, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTextureImageEXT<T1>(int texture, TextureTarget target, int lod, Span<T1> img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedTextureImageEXT(texture, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImageEXT(int, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTextureImageEXT<T1>(int texture, TextureTarget target, int lod, T1[] img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedTextureImageEXT(texture, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImageEXT(int, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTextureImageEXT<T1>(int texture, TextureTarget target, int lod, ref T1 img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = &img)
                {
                    GetCompressedTextureImageEXT(texture, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilterEXT(ConvolutionTargetEXT, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilterEXT(ConvolutionTargetEXT target, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                GetConvolutionFilterEXT(target, format, type, image_vptr);
            }
            /// <inheritdoc cref="GetConvolutionFilterEXT(ConvolutionTargetEXT, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilterEXT<T1>(ConvolutionTargetEXT target, PixelFormat format, PixelType type, Span<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    GetConvolutionFilterEXT(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilterEXT(ConvolutionTargetEXT, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilterEXT<T1>(ConvolutionTargetEXT target, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    GetConvolutionFilterEXT(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilterEXT(ConvolutionTargetEXT, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilterEXT<T1>(ConvolutionTargetEXT target, PixelFormat format, PixelType type, ref T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    GetConvolutionFilterEXT(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfvEXT(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetConvolutionParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfvEXT(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetConvolutionParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfvEXT(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetConvolutionParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfvEXT(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe float GetConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetConvolutionParameterfvEXT(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetConvolutionParameterivEXT(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterivEXT(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterivEXT(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetConvolutionParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterivEXT(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe int GetConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetConvolutionParameterivEXT(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetDoublei_vEXT(GetPName, uint, double*)"/>
            public static unsafe void GetDoublei_vEXT(GetPName pname, uint index, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetDoublei_vEXT(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_vEXT(GetPName, uint, double*)"/>
            public static unsafe void GetDoublei_vEXT(GetPName pname, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetDoublei_vEXT(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_vEXT(GetPName, uint, double*)"/>
            public static unsafe void GetDoublei_vEXT(GetPName pname, uint index, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetDoublei_vEXT(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_vEXT(GetPName, uint, double*)"/>
            public static unsafe double GetDoublei_vEXT(GetPName pname, uint index)
            {
                double parameters_val;
                double* parameters = &parameters_val;
                GetDoublei_vEXT(pname, index, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetDoubleIndexedvEXT(GetPName, uint, double*)"/>
            public static unsafe void GetDoubleIndexedvEXT(GetPName target, uint index, Span<double> data)
            {
                fixed (double* data_ptr = data)
                {
                    GetDoubleIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoubleIndexedvEXT(GetPName, uint, double*)"/>
            public static unsafe void GetDoubleIndexedvEXT(GetPName target, uint index, double[] data)
            {
                fixed (double* data_ptr = data)
                {
                    GetDoubleIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoubleIndexedvEXT(GetPName, uint, double*)"/>
            public static unsafe void GetDoubleIndexedvEXT(GetPName target, uint index, ref double data)
            {
                fixed (double* data_ptr = &data)
                {
                    GetDoubleIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoubleIndexedvEXT(GetPName, uint, double*)"/>
            public static unsafe double GetDoubleIndexedvEXT(GetPName target, uint index)
            {
                double data_val;
                double* data = &data_val;
                GetDoubleIndexedvEXT(target, index, data);
                return data_val;
            }
            /// <inheritdoc cref="GetFloati_vEXT(GetPName, uint, float*)"/>
            public static unsafe void GetFloati_vEXT(GetPName pname, uint index, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFloati_vEXT(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_vEXT(GetPName, uint, float*)"/>
            public static unsafe void GetFloati_vEXT(GetPName pname, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFloati_vEXT(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_vEXT(GetPName, uint, float*)"/>
            public static unsafe void GetFloati_vEXT(GetPName pname, uint index, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetFloati_vEXT(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_vEXT(GetPName, uint, float*)"/>
            public static unsafe float GetFloati_vEXT(GetPName pname, uint index)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetFloati_vEXT(pname, index, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetFloatIndexedvEXT(GetPName, uint, float*)"/>
            public static unsafe void GetFloatIndexedvEXT(GetPName target, uint index, Span<float> data)
            {
                fixed (float* data_ptr = data)
                {
                    GetFloatIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloatIndexedvEXT(GetPName, uint, float*)"/>
            public static unsafe void GetFloatIndexedvEXT(GetPName target, uint index, float[] data)
            {
                fixed (float* data_ptr = data)
                {
                    GetFloatIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloatIndexedvEXT(GetPName, uint, float*)"/>
            public static unsafe void GetFloatIndexedvEXT(GetPName target, uint index, ref float data)
            {
                fixed (float* data_ptr = &data)
                {
                    GetFloatIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloatIndexedvEXT(GetPName, uint, float*)"/>
            public static unsafe float GetFloatIndexedvEXT(GetPName target, uint index)
            {
                float data_val;
                float* data = &data_val;
                GetFloatIndexedvEXT(target, index, data);
                return data_val;
            }
            /// <inheritdoc cref="GetFragDataLocationEXT(int, byte*)"/>
            public static unsafe int GetFragDataLocationEXT(int program, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetFragDataLocationEXT(program, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameterivEXT(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameterivEXT(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferAttachmentParameterivEXT(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameterivEXT(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameterivEXT(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferAttachmentParameterivEXT(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameterivEXT(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameterivEXT(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFramebufferAttachmentParameterivEXT(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameterivEXT(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe int GetFramebufferAttachmentParameterivEXT(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetFramebufferAttachmentParameterivEXT(target, attachment, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe int GetFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetFramebufferParameterivEXT(framebuffer, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetHistogramEXT(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogramEXT(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetHistogramEXT(target, reset, format, type, values_vptr);
            }
            /// <inheritdoc cref="GetHistogramEXT(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogramEXT<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetHistogramEXT(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramEXT(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogramEXT<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetHistogramEXT(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramEXT(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogramEXT<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, ref T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetHistogramEXT(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfvEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterfvEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetHistogramParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfvEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterfvEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetHistogramParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfvEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterfvEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetHistogramParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfvEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe float GetHistogramParameterfvEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetHistogramParameterfvEXT(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetHistogramParameterivEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameterivEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterivEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameterivEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterivEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameterivEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetHistogramParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterivEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe int GetHistogramParameterivEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetHistogramParameterivEXT(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetIntegerIndexedvEXT(GetPName, uint, int*)"/>
            public static unsafe void GetIntegerIndexedvEXT(GetPName target, uint index, Span<int> data)
            {
                fixed (int* data_ptr = data)
                {
                    GetIntegerIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerIndexedvEXT(GetPName, uint, int*)"/>
            public static unsafe void GetIntegerIndexedvEXT(GetPName target, uint index, int[] data)
            {
                fixed (int* data_ptr = data)
                {
                    GetIntegerIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerIndexedvEXT(GetPName, uint, int*)"/>
            public static unsafe void GetIntegerIndexedvEXT(GetPName target, uint index, ref int data)
            {
                fixed (int* data_ptr = &data)
                {
                    GetIntegerIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerIndexedvEXT(GetPName, uint, int*)"/>
            public static unsafe int GetIntegerIndexedvEXT(GetPName target, uint index)
            {
                int data_val;
                int* data = &data_val;
                GetIntegerIndexedvEXT(target, index, data);
                return data_val;
            }
            /// <inheritdoc cref="GetInvariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetInvariantBooleanvEXT(uint id, GetVariantValueEXT value, Span<bool> data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetInvariantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetInvariantBooleanvEXT(uint id, GetVariantValueEXT value, bool[] data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetInvariantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetInvariantBooleanvEXT(uint id, GetVariantValueEXT value, ref bool data)
            {
                fixed (bool* data_ptr = &data)
                {
                    GetInvariantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe bool GetInvariantBooleanvEXT(uint id, GetVariantValueEXT value)
            {
                bool data_val;
                bool* data = &data_val;
                GetInvariantBooleanvEXT(id, value, data);
                return data_val;
            }
            /// <inheritdoc cref="GetInvariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetInvariantFloatvEXT(uint id, GetVariantValueEXT value, Span<float> data)
            {
                fixed (float* data_ptr = data)
                {
                    GetInvariantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetInvariantFloatvEXT(uint id, GetVariantValueEXT value, float[] data)
            {
                fixed (float* data_ptr = data)
                {
                    GetInvariantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetInvariantFloatvEXT(uint id, GetVariantValueEXT value, ref float data)
            {
                fixed (float* data_ptr = &data)
                {
                    GetInvariantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe float GetInvariantFloatvEXT(uint id, GetVariantValueEXT value)
            {
                float data_val;
                float* data = &data_val;
                GetInvariantFloatvEXT(id, value, data);
                return data_val;
            }
            /// <inheritdoc cref="GetInvariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetInvariantIntegervEXT(uint id, GetVariantValueEXT value, Span<int> data)
            {
                fixed (int* data_ptr = data)
                {
                    GetInvariantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetInvariantIntegervEXT(uint id, GetVariantValueEXT value, int[] data)
            {
                fixed (int* data_ptr = data)
                {
                    GetInvariantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetInvariantIntegervEXT(uint id, GetVariantValueEXT value, ref int data)
            {
                fixed (int* data_ptr = &data)
                {
                    GetInvariantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe int GetInvariantIntegervEXT(uint id, GetVariantValueEXT value)
            {
                int data_val;
                int* data = &data_val;
                GetInvariantIntegervEXT(id, value, data);
                return data_val;
            }
            /// <inheritdoc cref="GetLocalConstantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetLocalConstantBooleanvEXT(uint id, GetVariantValueEXT value, Span<bool> data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetLocalConstantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetLocalConstantBooleanvEXT(uint id, GetVariantValueEXT value, bool[] data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetLocalConstantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetLocalConstantBooleanvEXT(uint id, GetVariantValueEXT value, ref bool data)
            {
                fixed (bool* data_ptr = &data)
                {
                    GetLocalConstantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe bool GetLocalConstantBooleanvEXT(uint id, GetVariantValueEXT value)
            {
                bool data_val;
                bool* data = &data_val;
                GetLocalConstantBooleanvEXT(id, value, data);
                return data_val;
            }
            /// <inheritdoc cref="GetLocalConstantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetLocalConstantFloatvEXT(uint id, GetVariantValueEXT value, Span<float> data)
            {
                fixed (float* data_ptr = data)
                {
                    GetLocalConstantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetLocalConstantFloatvEXT(uint id, GetVariantValueEXT value, float[] data)
            {
                fixed (float* data_ptr = data)
                {
                    GetLocalConstantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetLocalConstantFloatvEXT(uint id, GetVariantValueEXT value, ref float data)
            {
                fixed (float* data_ptr = &data)
                {
                    GetLocalConstantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe float GetLocalConstantFloatvEXT(uint id, GetVariantValueEXT value)
            {
                float data_val;
                float* data = &data_val;
                GetLocalConstantFloatvEXT(id, value, data);
                return data_val;
            }
            /// <inheritdoc cref="GetLocalConstantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetLocalConstantIntegervEXT(uint id, GetVariantValueEXT value, Span<int> data)
            {
                fixed (int* data_ptr = data)
                {
                    GetLocalConstantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetLocalConstantIntegervEXT(uint id, GetVariantValueEXT value, int[] data)
            {
                fixed (int* data_ptr = data)
                {
                    GetLocalConstantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetLocalConstantIntegervEXT(uint id, GetVariantValueEXT value, ref int data)
            {
                fixed (int* data_ptr = &data)
                {
                    GetLocalConstantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe int GetLocalConstantIntegervEXT(uint id, GetVariantValueEXT value)
            {
                int data_val;
                int* data = &data_val;
                GetLocalConstantIntegervEXT(id, value, data);
                return data_val;
            }
            /// <inheritdoc cref="GetMemoryObjectParameterivEXT(uint, MemoryObjectParameterName, int*)"/>
            public static unsafe void GetMemoryObjectParameterivEXT(uint memoryObject, MemoryObjectParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMemoryObjectParameterivEXT(memoryObject, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMemoryObjectParameterivEXT(uint, MemoryObjectParameterName, int*)"/>
            public static unsafe int GetMemoryObjectParameterivEXT(uint memoryObject, MemoryObjectParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetMemoryObjectParameterivEXT(memoryObject, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMinmaxEXT(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmaxEXT(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetMinmaxEXT(target, reset, format, type, values_vptr);
            }
            /// <inheritdoc cref="GetMinmaxEXT(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmaxEXT<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetMinmaxEXT(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxEXT(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmaxEXT<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetMinmaxEXT(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxEXT(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmaxEXT<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, ref T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetMinmaxEXT(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfvEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterfvEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMinmaxParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfvEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterfvEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMinmaxParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfvEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterfvEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMinmaxParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfvEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe float GetMinmaxParameterfvEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetMinmaxParameterfvEXT(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMinmaxParameterivEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameterivEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMinmaxParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterivEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameterivEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMinmaxParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterivEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameterivEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMinmaxParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterivEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe int GetMinmaxParameterivEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetMinmaxParameterivEXT(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMultiTexEnvfvEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void GetMultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnvfvEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void GetMultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnvfvEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void GetMultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnvfvEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe float GetMultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetMultiTexEnvfvEXT(texunit, target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMultiTexEnvivEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetMultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnvivEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetMultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnvivEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetMultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnvivEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe int GetMultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetMultiTexEnvivEXT(texunit, target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMultiTexGendvEXT(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void GetMultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetMultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGendvEXT(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void GetMultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetMultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGendvEXT(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void GetMultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetMultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGendvEXT(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe double GetMultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname)
            {
                double parameters_val;
                double* parameters = &parameters_val;
                GetMultiTexGendvEXT(texunit, coord, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMultiTexGenfvEXT(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void GetMultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGenfvEXT(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void GetMultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGenfvEXT(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void GetMultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGenfvEXT(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe float GetMultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetMultiTexGenfvEXT(texunit, coord, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMultiTexGenivEXT(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetMultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGenivEXT(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetMultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGenivEXT(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetMultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGenivEXT(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe int GetMultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetMultiTexGenivEXT(texunit, coord, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMultiTexImageEXT(TextureUnit, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetMultiTexImageEXT(texunit, target, level, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="GetMultiTexImageEXT(TextureUnit, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMultiTexImageEXT<T1>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, Span<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetMultiTexImageEXT(texunit, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexImageEXT(TextureUnit, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMultiTexImageEXT<T1>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetMultiTexImageEXT(texunit, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexImageEXT(TextureUnit, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMultiTexImageEXT<T1>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetMultiTexImageEXT(texunit, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterfvEXT(TextureUnit, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexLevelParameterfvEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexLevelParameterfvEXT(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterfvEXT(TextureUnit, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexLevelParameterfvEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexLevelParameterfvEXT(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterfvEXT(TextureUnit, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexLevelParameterfvEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMultiTexLevelParameterfvEXT(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterfvEXT(TextureUnit, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe float GetMultiTexLevelParameterfvEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetMultiTexLevelParameterfvEXT(texunit, target, level, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterivEXT(TextureUnit, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexLevelParameterivEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexLevelParameterivEXT(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterivEXT(TextureUnit, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexLevelParameterivEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexLevelParameterivEXT(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterivEXT(TextureUnit, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexLevelParameterivEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMultiTexLevelParameterivEXT(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterivEXT(TextureUnit, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe int GetMultiTexLevelParameterivEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetMultiTexLevelParameterivEXT(texunit, target, level, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMultiTexParameterfvEXT(TextureUnit, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterfvEXT(TextureUnit, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterfvEXT(TextureUnit, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterfvEXT(TextureUnit, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe float GetMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetMultiTexParameterfvEXT(texunit, target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMultiTexParameterIivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe int GetMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetMultiTexParameterIivEXT(texunit, target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMultiTexParameterIuivEXT(TextureUnit, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetMultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIuivEXT(TextureUnit, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetMultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIuivEXT(TextureUnit, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetMultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIuivEXT(TextureUnit, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe uint GetMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetMultiTexParameterIuivEXT(texunit, target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMultiTexParameterivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe int GetMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetMultiTexParameterivEXT(texunit, target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetNamedBufferParameterivEXT(int, BufferPNameARB, int*)"/>
            public static unsafe void GetNamedBufferParameterivEXT(int buffer, BufferPNameARB pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedBufferParameterivEXT(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameterivEXT(int, BufferPNameARB, int*)"/>
            public static unsafe void GetNamedBufferParameterivEXT(int buffer, BufferPNameARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedBufferParameterivEXT(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameterivEXT(int, BufferPNameARB, int*)"/>
            public static unsafe void GetNamedBufferParameterivEXT(int buffer, BufferPNameARB pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedBufferParameterivEXT(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameterivEXT(int, BufferPNameARB, int*)"/>
            public static unsafe int GetNamedBufferParameterivEXT(int buffer, BufferPNameARB pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetNamedBufferParameterivEXT(buffer, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetNamedBufferPointervEXT(int, BufferPointerNameARB, void**)"/>
            public static unsafe void GetNamedBufferPointervEXT(int buffer, BufferPointerNameARB pname, void** parameters)
            {
                GetNamedBufferPointervEXT_(buffer, pname, parameters);
            }
            /// <inheritdoc cref="GetNamedBufferPointervEXT(int, BufferPointerNameARB, void**)"/>
            public static unsafe void* GetNamedBufferPointervEXT(int buffer, BufferPointerNameARB pname)
            {
                void* parameters_val;
                void** parameters = &parameters_val;
                GetNamedBufferPointervEXT_(buffer, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetNamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubDataEXT(int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                GetNamedBufferSubDataEXT(buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="GetNamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubDataEXT<T1>(int buffer, IntPtr offset, nint size, Span<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetNamedBufferSubDataEXT(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubDataEXT<T1>(int buffer, IntPtr offset, nint size, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetNamedBufferSubDataEXT(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubDataEXT<T1>(int buffer, IntPtr offset, nint size, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    GetNamedBufferSubDataEXT(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameterivEXT(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetNamedFramebufferAttachmentParameterivEXT(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameterivEXT(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetNamedFramebufferAttachmentParameterivEXT(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameterivEXT(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetNamedFramebufferAttachmentParameterivEXT(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameterivEXT(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe int GetNamedFramebufferAttachmentParameterivEXT(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetNamedFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetNamedFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetNamedFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetNamedFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe int GetNamedFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetNamedFramebufferParameterivEXT(framebuffer, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetNamedProgramivEXT(int, ProgramTarget, ProgramPropertyARB, int*)"/>
            public static unsafe void GetNamedProgramivEXT(int program, ProgramTarget target, ProgramPropertyARB pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedProgramivEXT(program, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramivEXT(int, ProgramTarget, ProgramPropertyARB, int*)"/>
            public static unsafe void GetNamedProgramivEXT(int program, ProgramTarget target, ProgramPropertyARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedProgramivEXT(program, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramivEXT(int, ProgramTarget, ProgramPropertyARB, int*)"/>
            public static unsafe void GetNamedProgramivEXT(int program, ProgramTarget target, ProgramPropertyARB pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedProgramivEXT(program, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramivEXT(int, ProgramTarget, ProgramPropertyARB, int*)"/>
            public static unsafe int GetNamedProgramivEXT(int program, ProgramTarget target, ProgramPropertyARB pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetNamedProgramivEXT(program, target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterdvEXT(int, ProgramTarget, uint, double*)"/>
            public static unsafe void GetNamedProgramLocalParameterdvEXT(int program, ProgramTarget target, uint index, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterdvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterdvEXT(int, ProgramTarget, uint, double*)"/>
            public static unsafe void GetNamedProgramLocalParameterdvEXT(int program, ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterdvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterdvEXT(int, ProgramTarget, uint, double*)"/>
            public static unsafe void GetNamedProgramLocalParameterdvEXT(int program, ProgramTarget target, uint index, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetNamedProgramLocalParameterdvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterdvEXT(int, ProgramTarget, uint, double*)"/>
            public static unsafe double GetNamedProgramLocalParameterdvEXT(int program, ProgramTarget target, uint index)
            {
                double parameters_val;
                double* parameters = &parameters_val;
                GetNamedProgramLocalParameterdvEXT(program, target, index, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterfvEXT(int, ProgramTarget, uint, float*)"/>
            public static unsafe void GetNamedProgramLocalParameterfvEXT(int program, ProgramTarget target, uint index, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterfvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterfvEXT(int, ProgramTarget, uint, float*)"/>
            public static unsafe void GetNamedProgramLocalParameterfvEXT(int program, ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterfvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterfvEXT(int, ProgramTarget, uint, float*)"/>
            public static unsafe void GetNamedProgramLocalParameterfvEXT(int program, ProgramTarget target, uint index, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetNamedProgramLocalParameterfvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterfvEXT(int, ProgramTarget, uint, float*)"/>
            public static unsafe float GetNamedProgramLocalParameterfvEXT(int program, ProgramTarget target, uint index)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetNamedProgramLocalParameterfvEXT(program, target, index, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIivEXT(int, ProgramTarget, uint, int*)"/>
            public static unsafe void GetNamedProgramLocalParameterIivEXT(int program, ProgramTarget target, uint index, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterIivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIivEXT(int, ProgramTarget, uint, int*)"/>
            public static unsafe void GetNamedProgramLocalParameterIivEXT(int program, ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterIivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIivEXT(int, ProgramTarget, uint, int*)"/>
            public static unsafe void GetNamedProgramLocalParameterIivEXT(int program, ProgramTarget target, uint index, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedProgramLocalParameterIivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIivEXT(int, ProgramTarget, uint, int*)"/>
            public static unsafe int GetNamedProgramLocalParameterIivEXT(int program, ProgramTarget target, uint index)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetNamedProgramLocalParameterIivEXT(program, target, index, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIuivEXT(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void GetNamedProgramLocalParameterIuivEXT(int program, ProgramTarget target, uint index, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterIuivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIuivEXT(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void GetNamedProgramLocalParameterIuivEXT(int program, ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterIuivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIuivEXT(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void GetNamedProgramLocalParameterIuivEXT(int program, ProgramTarget target, uint index, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetNamedProgramLocalParameterIuivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIuivEXT(int, ProgramTarget, uint, uint*)"/>
            public static unsafe uint GetNamedProgramLocalParameterIuivEXT(int program, ProgramTarget target, uint index)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetNamedProgramLocalParameterIuivEXT(program, target, index, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetNamedProgramStringEXT(int, ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetNamedProgramStringEXT(int program, ProgramTarget target, ProgramStringProperty pname, IntPtr str)
            {
                void* str_vptr = (void*)str;
                GetNamedProgramStringEXT(program, target, pname, str_vptr);
            }
            /// <inheritdoc cref="GetNamedProgramStringEXT(int, ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetNamedProgramStringEXT<T1>(int program, ProgramTarget target, ProgramStringProperty pname, Span<T1> str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    GetNamedProgramStringEXT(program, target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramStringEXT(int, ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetNamedProgramStringEXT<T1>(int program, ProgramTarget target, ProgramStringProperty pname, T1[] str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    GetNamedProgramStringEXT(program, target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramStringEXT(int, ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetNamedProgramStringEXT<T1>(int program, ProgramTarget target, ProgramStringProperty pname, ref T1 str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = &str)
                {
                    GetNamedProgramStringEXT(program, target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameterivEXT(int, RenderbufferParameterName, int*)"/>
            public static unsafe void GetNamedRenderbufferParameterivEXT(int renderbuffer, RenderbufferParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedRenderbufferParameterivEXT(renderbuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameterivEXT(int, RenderbufferParameterName, int*)"/>
            public static unsafe void GetNamedRenderbufferParameterivEXT(int renderbuffer, RenderbufferParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedRenderbufferParameterivEXT(renderbuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameterivEXT(int, RenderbufferParameterName, int*)"/>
            public static unsafe void GetNamedRenderbufferParameterivEXT(int renderbuffer, RenderbufferParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedRenderbufferParameterivEXT(renderbuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameterivEXT(int, RenderbufferParameterName, int*)"/>
            public static unsafe int GetNamedRenderbufferParameterivEXT(int renderbuffer, RenderbufferParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetNamedRenderbufferParameterivEXT(renderbuffer, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetObjectLabelEXT(All, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabelEXT(All type, uint obj, int bufSize, Span<int> length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabelEXT(All, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabelEXT(All type, uint obj, int bufSize, Span<int> length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectLabelEXT(All, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabelEXT(All type, uint obj, int bufSize, int[] length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabelEXT(All, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabelEXT(All type, uint obj, int bufSize, int[] length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectLabelEXT(All, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabelEXT(All type, uint obj, int bufSize, ref int length)
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabelEXT(All, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabelEXT(All type, uint obj, int bufSize, ref int length, out string label)
            {
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterfvEXT(All, All, float*)"/>
            public static unsafe void GetPixelTransformParameterfvEXT(All target, All pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetPixelTransformParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterfvEXT(All, All, float*)"/>
            public static unsafe void GetPixelTransformParameterfvEXT(All target, All pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetPixelTransformParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterfvEXT(All, All, float*)"/>
            public static unsafe void GetPixelTransformParameterfvEXT(All target, All pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetPixelTransformParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterfvEXT(All, All, float*)"/>
            public static unsafe float GetPixelTransformParameterfvEXT(All target, All pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetPixelTransformParameterfvEXT(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetPixelTransformParameterivEXT(All, All, int*)"/>
            public static unsafe void GetPixelTransformParameterivEXT(All target, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetPixelTransformParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterivEXT(All, All, int*)"/>
            public static unsafe void GetPixelTransformParameterivEXT(All target, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetPixelTransformParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterivEXT(All, All, int*)"/>
            public static unsafe void GetPixelTransformParameterivEXT(All target, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetPixelTransformParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterivEXT(All, All, int*)"/>
            public static unsafe int GetPixelTransformParameterivEXT(All target, All pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetPixelTransformParameterivEXT(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetPointeri_vEXT(All, uint, void**)"/>
            public static unsafe void GetPointeri_vEXT(All pname, uint index, void** parameters)
            {
                GetPointeri_vEXT_(pname, index, parameters);
            }
            /// <inheritdoc cref="GetPointeri_vEXT(All, uint, void**)"/>
            public static unsafe void* GetPointeri_vEXT(All pname, uint index)
            {
                void* parameters_val;
                void** parameters = &parameters_val;
                GetPointeri_vEXT_(pname, index, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetPointerIndexedvEXT(All, uint, void**)"/>
            public static unsafe void GetPointerIndexedvEXT(All target, uint index, void** data)
            {
                GetPointerIndexedvEXT_(target, index, data);
            }
            /// <inheritdoc cref="GetPointerIndexedvEXT(All, uint, void**)"/>
            public static unsafe void* GetPointerIndexedvEXT(All target, uint index)
            {
                void* data_val;
                void** data = &data_val;
                GetPointerIndexedvEXT_(target, index, data);
                return data_val;
            }
            /// <inheritdoc cref="GetPointervEXT(GetPointervPName, void**)"/>
            public static unsafe void GetPointervEXT(GetPointervPName pname, void** parameters)
            {
                GetPointervEXT_(pname, parameters);
            }
            /// <inheritdoc cref="GetPointervEXT(GetPointervPName, void**)"/>
            public static unsafe void* GetPointervEXT(GetPointervPName pname)
            {
                void* parameters_val;
                void** parameters = &parameters_val;
                GetPointervEXT_(pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLogEXT(int, int, int*, byte*)"/>
            public static unsafe string GetProgramPipelineInfoLogEXT(int pipeline, int bufSize, Span<int> length)
            {
                string infoLog;
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLogEXT(int, int, int*, byte*)"/>
            public static unsafe void GetProgramPipelineInfoLogEXT(int pipeline, int bufSize, Span<int> length, out string infoLog)
            {
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLogEXT(int, int, int*, byte*)"/>
            public static unsafe string GetProgramPipelineInfoLogEXT(int pipeline, int bufSize, int[] length)
            {
                string infoLog;
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLogEXT(int, int, int*, byte*)"/>
            public static unsafe void GetProgramPipelineInfoLogEXT(int pipeline, int bufSize, int[] length, out string infoLog)
            {
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLogEXT(int, int, int*, byte*)"/>
            public static unsafe string GetProgramPipelineInfoLogEXT(int pipeline, int bufSize, ref int length)
            {
                string infoLog;
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLogEXT(int, int, int*, byte*)"/>
            public static unsafe void GetProgramPipelineInfoLogEXT(int pipeline, int bufSize, ref int length, out string infoLog)
            {
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineivEXT(int, PipelineParameterName, int*)"/>
            public static unsafe void GetProgramPipelineivEXT(int pipeline, PipelineParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramPipelineivEXT(pipeline, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineivEXT(int, PipelineParameterName, int*)"/>
            public static unsafe int GetProgramPipelineivEXT(int pipeline, PipelineParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetProgramPipelineivEXT(pipeline, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetQueryObjecti64vEXT(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64vEXT(int id, QueryObjectParameterName pname, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetQueryObjecti64vEXT(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64vEXT(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64vEXT(int id, QueryObjectParameterName pname, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetQueryObjecti64vEXT(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64vEXT(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64vEXT(int id, QueryObjectParameterName pname, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetQueryObjecti64vEXT(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64vEXT(int, QueryObjectParameterName, long*)"/>
            public static unsafe long GetQueryObjecti64vEXT(int id, QueryObjectParameterName pname)
            {
                long parameters_val;
                long* parameters = &parameters_val;
                GetQueryObjecti64vEXT(id, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetQueryObjectui64vEXT(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64vEXT(int id, QueryObjectParameterName pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetQueryObjectui64vEXT(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64vEXT(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64vEXT(int id, QueryObjectParameterName pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetQueryObjectui64vEXT(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64vEXT(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64vEXT(int id, QueryObjectParameterName pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetQueryObjectui64vEXT(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64vEXT(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe ulong GetQueryObjectui64vEXT(int id, QueryObjectParameterName pname)
            {
                ulong parameters_val;
                ulong* parameters = &parameters_val;
                GetQueryObjectui64vEXT(id, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetRenderbufferParameterivEXT(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameterivEXT(RenderbufferTarget target, RenderbufferParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetRenderbufferParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameterivEXT(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameterivEXT(RenderbufferTarget target, RenderbufferParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetRenderbufferParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameterivEXT(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameterivEXT(RenderbufferTarget target, RenderbufferParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetRenderbufferParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameterivEXT(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe int GetRenderbufferParameterivEXT(RenderbufferTarget target, RenderbufferParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetRenderbufferParameterivEXT(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetSemaphoreParameterui64vEXT(uint, SemaphoreParameterName, ulong*)"/>
            public static unsafe void GetSemaphoreParameterui64vEXT(uint semaphore, SemaphoreParameterName pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetSemaphoreParameterui64vEXT(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSemaphoreParameterui64vEXT(uint, SemaphoreParameterName, ulong*)"/>
            public static unsafe ulong GetSemaphoreParameterui64vEXT(uint semaphore, SemaphoreParameterName pname)
            {
                ulong parameters_val;
                ulong* parameters = &parameters_val;
                GetSemaphoreParameterui64vEXT(semaphore, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetSeparableFilterEXT(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilterEXT(SeparableTargetEXT target, PixelFormat format, PixelType type, IntPtr row, IntPtr column, IntPtr span)
            {
                void* row_vptr = (void*)row;
                void* column_vptr = (void*)column;
                void* span_vptr = (void*)span;
                GetSeparableFilterEXT(target, format, type, row_vptr, column_vptr, span_vptr);
            }
            /// <inheritdoc cref="GetSeparableFilterEXT(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilterEXT<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, Span<T3> row, Span<T2> column, Span<T1> span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* span_ptr = span)
                        {
                            GetSeparableFilterEXT(target, format, type, row_ptr, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetSeparableFilterEXT(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilterEXT<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, T3[] row, T2[] column, T1[] span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* span_ptr = span)
                        {
                            GetSeparableFilterEXT(target, format, type, row_ptr, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetSeparableFilterEXT(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilterEXT<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, ref T1 row, ref T2 column, ref T3 span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                fixed (void* span_ptr = &span)
                {
                    GetSeparableFilterEXT(target, format, type, row_ptr, column_ptr, span_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIivEXT(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterIivEXT(TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexParameterIivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIivEXT(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterIivEXT(TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexParameterIivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIivEXT(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterIivEXT(TextureTarget target, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTexParameterIivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIivEXT(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe int GetTexParameterIivEXT(TextureTarget target, GetTextureParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetTexParameterIivEXT(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTexParameterIuivEXT(TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTexParameterIuivEXT(TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetTexParameterIuivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIuivEXT(TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTexParameterIuivEXT(TextureTarget target, GetTextureParameter pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetTexParameterIuivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIuivEXT(TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTexParameterIuivEXT(TextureTarget target, GetTextureParameter pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetTexParameterIuivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIuivEXT(TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe uint GetTexParameterIuivEXT(TextureTarget target, GetTextureParameter pname)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetTexParameterIuivEXT(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTextureImageEXT(int, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetTextureImageEXT(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetTextureImageEXT(texture, target, level, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="GetTextureImageEXT(int, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetTextureImageEXT<T1>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, Span<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureImageEXT(texture, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImageEXT(int, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetTextureImageEXT<T1>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureImageEXT(texture, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImageEXT(int, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetTextureImageEXT<T1>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetTextureImageEXT(texture, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfvEXT(int, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureLevelParameterfvEXT(int texture, TextureTarget target, int level, GetTextureParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureLevelParameterfvEXT(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfvEXT(int, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureLevelParameterfvEXT(int texture, TextureTarget target, int level, GetTextureParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureLevelParameterfvEXT(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfvEXT(int, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureLevelParameterfvEXT(int texture, TextureTarget target, int level, GetTextureParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetTextureLevelParameterfvEXT(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfvEXT(int, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe float GetTextureLevelParameterfvEXT(int texture, TextureTarget target, int level, GetTextureParameter pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetTextureLevelParameterfvEXT(texture, target, level, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTextureLevelParameterivEXT(int, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureLevelParameterivEXT(int texture, TextureTarget target, int level, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureLevelParameterivEXT(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterivEXT(int, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureLevelParameterivEXT(int texture, TextureTarget target, int level, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureLevelParameterivEXT(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterivEXT(int, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureLevelParameterivEXT(int texture, TextureTarget target, int level, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureLevelParameterivEXT(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterivEXT(int, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe int GetTextureLevelParameterivEXT(int texture, TextureTarget target, int level, GetTextureParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetTextureLevelParameterivEXT(texture, target, level, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTextureParameterfvEXT(int, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureParameterfvEXT(int texture, TextureTarget target, GetTextureParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureParameterfvEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterfvEXT(int, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureParameterfvEXT(int texture, TextureTarget target, GetTextureParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureParameterfvEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterfvEXT(int, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureParameterfvEXT(int texture, TextureTarget target, GetTextureParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetTextureParameterfvEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterfvEXT(int, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe float GetTextureParameterfvEXT(int texture, TextureTarget target, GetTextureParameter pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetTextureParameterfvEXT(texture, target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTextureParameterIivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterIivEXT(int texture, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameterIivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterIivEXT(int texture, TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameterIivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterIivEXT(int texture, TextureTarget target, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureParameterIivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe int GetTextureParameterIivEXT(int texture, TextureTarget target, GetTextureParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetTextureParameterIivEXT(texture, target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTextureParameterIuivEXT(int, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTextureParameterIuivEXT(int texture, TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetTextureParameterIuivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIuivEXT(int, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTextureParameterIuivEXT(int texture, TextureTarget target, GetTextureParameter pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetTextureParameterIuivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIuivEXT(int, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTextureParameterIuivEXT(int texture, TextureTarget target, GetTextureParameter pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetTextureParameterIuivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIuivEXT(int, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe uint GetTextureParameterIuivEXT(int texture, TextureTarget target, GetTextureParameter pname)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetTextureParameterIuivEXT(texture, target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTextureParameterivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterivEXT(int texture, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameterivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterivEXT(int texture, TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameterivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterivEXT(int texture, TextureTarget target, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureParameterivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe int GetTextureParameterivEXT(int texture, TextureTarget target, GetTextureParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetTextureParameterivEXT(texture, target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTransformFeedbackVaryingEXT(int, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe string GetTransformFeedbackVaryingEXT(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<AttributeType> type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetTransformFeedbackVaryingEXT(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetTransformFeedbackVaryingEXT(int, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe void GetTransformFeedbackVaryingEXT(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<AttributeType> type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetTransformFeedbackVaryingEXT(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackVaryingEXT(int, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe string GetTransformFeedbackVaryingEXT(int program, uint index, int bufSize, int[] length, int[] size, AttributeType[] type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetTransformFeedbackVaryingEXT(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetTransformFeedbackVaryingEXT(int, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe void GetTransformFeedbackVaryingEXT(int program, uint index, int bufSize, int[] length, int[] size, AttributeType[] type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetTransformFeedbackVaryingEXT(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackVaryingEXT(int, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe string GetTransformFeedbackVaryingEXT(int program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type)
            {
                string name;
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (AttributeType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetTransformFeedbackVaryingEXT(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetTransformFeedbackVaryingEXT(int, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe void GetTransformFeedbackVaryingEXT(int program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type, out string name)
            {
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (AttributeType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetTransformFeedbackVaryingEXT(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformuivEXT(int, int, uint*)"/>
            public static unsafe void GetUniformuivEXT(int program, int location, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetUniformuivEXT(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformuivEXT(int, int, uint*)"/>
            public static unsafe void GetUniformuivEXT(int program, int location, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetUniformuivEXT(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformuivEXT(int, int, uint*)"/>
            public static unsafe void GetUniformuivEXT(int program, int location, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetUniformuivEXT(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformuivEXT(int, int, uint*)"/>
            public static unsafe uint GetUniformuivEXT(int program, int location)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetUniformuivEXT(program, location, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetUnsignedBytei_vEXT(All, uint, byte*)"/>
            public static unsafe void GetUnsignedBytei_vEXT(All target, uint index, Span<byte> data)
            {
                fixed (byte* data_ptr = data)
                {
                    GetUnsignedBytei_vEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytei_vEXT(All, uint, byte*)"/>
            public static unsafe void GetUnsignedBytei_vEXT(All target, uint index, byte[] data)
            {
                fixed (byte* data_ptr = data)
                {
                    GetUnsignedBytei_vEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytei_vEXT(All, uint, byte*)"/>
            public static unsafe void GetUnsignedBytei_vEXT(All target, uint index, ref byte data)
            {
                fixed (byte* data_ptr = &data)
                {
                    GetUnsignedBytei_vEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytei_vEXT(All, uint, byte*)"/>
            public static unsafe byte GetUnsignedBytei_vEXT(All target, uint index)
            {
                byte data_val;
                byte* data = &data_val;
                GetUnsignedBytei_vEXT(target, index, data);
                return data_val;
            }
            /// <inheritdoc cref="GetUnsignedBytevEXT(GetPName, byte*)"/>
            public static unsafe void GetUnsignedBytevEXT(GetPName pname, Span<byte> data)
            {
                fixed (byte* data_ptr = data)
                {
                    GetUnsignedBytevEXT(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytevEXT(GetPName, byte*)"/>
            public static unsafe void GetUnsignedBytevEXT(GetPName pname, byte[] data)
            {
                fixed (byte* data_ptr = data)
                {
                    GetUnsignedBytevEXT(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytevEXT(GetPName, byte*)"/>
            public static unsafe void GetUnsignedBytevEXT(GetPName pname, ref byte data)
            {
                fixed (byte* data_ptr = &data)
                {
                    GetUnsignedBytevEXT(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytevEXT(GetPName, byte*)"/>
            public static unsafe byte GetUnsignedBytevEXT(GetPName pname)
            {
                byte data_val;
                byte* data = &data_val;
                GetUnsignedBytevEXT(pname, data);
                return data_val;
            }
            /// <inheritdoc cref="GetVariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetVariantBooleanvEXT(uint id, GetVariantValueEXT value, Span<bool> data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetVariantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetVariantBooleanvEXT(uint id, GetVariantValueEXT value, bool[] data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetVariantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetVariantBooleanvEXT(uint id, GetVariantValueEXT value, ref bool data)
            {
                fixed (bool* data_ptr = &data)
                {
                    GetVariantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe bool GetVariantBooleanvEXT(uint id, GetVariantValueEXT value)
            {
                bool data_val;
                bool* data = &data_val;
                GetVariantBooleanvEXT(id, value, data);
                return data_val;
            }
            /// <inheritdoc cref="GetVariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetVariantFloatvEXT(uint id, GetVariantValueEXT value, Span<float> data)
            {
                fixed (float* data_ptr = data)
                {
                    GetVariantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetVariantFloatvEXT(uint id, GetVariantValueEXT value, float[] data)
            {
                fixed (float* data_ptr = data)
                {
                    GetVariantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetVariantFloatvEXT(uint id, GetVariantValueEXT value, ref float data)
            {
                fixed (float* data_ptr = &data)
                {
                    GetVariantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe float GetVariantFloatvEXT(uint id, GetVariantValueEXT value)
            {
                float data_val;
                float* data = &data_val;
                GetVariantFloatvEXT(id, value, data);
                return data_val;
            }
            /// <inheritdoc cref="GetVariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetVariantIntegervEXT(uint id, GetVariantValueEXT value, Span<int> data)
            {
                fixed (int* data_ptr = data)
                {
                    GetVariantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetVariantIntegervEXT(uint id, GetVariantValueEXT value, int[] data)
            {
                fixed (int* data_ptr = data)
                {
                    GetVariantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetVariantIntegervEXT(uint id, GetVariantValueEXT value, ref int data)
            {
                fixed (int* data_ptr = &data)
                {
                    GetVariantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe int GetVariantIntegervEXT(uint id, GetVariantValueEXT value)
            {
                int data_val;
                int* data = &data_val;
                GetVariantIntegervEXT(id, value, data);
                return data_val;
            }
            /// <inheritdoc cref="GetVariantPointervEXT(uint, GetVariantValueEXT, void**)"/>
            public static unsafe void GetVariantPointervEXT(uint id, GetVariantValueEXT value, void** data)
            {
                GetVariantPointervEXT_(id, value, data);
            }
            /// <inheritdoc cref="GetVariantPointervEXT(uint, GetVariantValueEXT, void**)"/>
            public static unsafe void* GetVariantPointervEXT(uint id, GetVariantValueEXT value)
            {
                void* data_val;
                void** data = &data_val;
                GetVariantPointervEXT_(id, value, data);
                return data_val;
            }
            /// <inheritdoc cref="GetVertexArrayIntegeri_vEXT(int, uint, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayIntegeri_vEXT(int vaobj, uint index, VertexArrayPName pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetVertexArrayIntegeri_vEXT(vaobj, index, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIntegeri_vEXT(int, uint, VertexArrayPName, int*)"/>
            public static unsafe int GetVertexArrayIntegeri_vEXT(int vaobj, uint index, VertexArrayPName pname)
            {
                int param_val;
                int* param = &param_val;
                GetVertexArrayIntegeri_vEXT(vaobj, index, pname, param);
                return param_val;
            }
            /// <inheritdoc cref="GetVertexArrayIntegervEXT(int, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayIntegervEXT(int vaobj, VertexArrayPName pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetVertexArrayIntegervEXT(vaobj, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIntegervEXT(int, VertexArrayPName, int*)"/>
            public static unsafe int GetVertexArrayIntegervEXT(int vaobj, VertexArrayPName pname)
            {
                int param_val;
                int* param = &param_val;
                GetVertexArrayIntegervEXT(vaobj, pname, param);
                return param_val;
            }
            /// <inheritdoc cref="GetVertexArrayPointeri_vEXT(int, uint, VertexArrayPName, void**)"/>
            public static unsafe void GetVertexArrayPointeri_vEXT(int vaobj, uint index, VertexArrayPName pname, void** param)
            {
                GetVertexArrayPointeri_vEXT_(vaobj, index, pname, param);
            }
            /// <inheritdoc cref="GetVertexArrayPointeri_vEXT(int, uint, VertexArrayPName, void**)"/>
            public static unsafe void* GetVertexArrayPointeri_vEXT(int vaobj, uint index, VertexArrayPName pname)
            {
                void* param_val;
                void** param = &param_val;
                GetVertexArrayPointeri_vEXT_(vaobj, index, pname, param);
                return param_val;
            }
            /// <inheritdoc cref="GetVertexArrayPointervEXT(int, VertexArrayPName, void**)"/>
            public static unsafe void GetVertexArrayPointervEXT(int vaobj, VertexArrayPName pname, void** param)
            {
                GetVertexArrayPointervEXT_(vaobj, pname, param);
            }
            /// <inheritdoc cref="GetVertexArrayPointervEXT(int, VertexArrayPName, void**)"/>
            public static unsafe void* GetVertexArrayPointervEXT(int vaobj, VertexArrayPName pname)
            {
                void* param_val;
                void** param = &param_val;
                GetVertexArrayPointervEXT_(vaobj, pname, param);
                return param_val;
            }
            /// <inheritdoc cref="GetVertexAttribIivEXT(uint, VertexAttribEnum, int*)"/>
            public static unsafe void GetVertexAttribIivEXT(uint index, VertexAttribEnum pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribIivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIivEXT(uint, VertexAttribEnum, int*)"/>
            public static unsafe void GetVertexAttribIivEXT(uint index, VertexAttribEnum pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribIivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIivEXT(uint, VertexAttribEnum, int*)"/>
            public static unsafe void GetVertexAttribIivEXT(uint index, VertexAttribEnum pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVertexAttribIivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIivEXT(uint, VertexAttribEnum, int*)"/>
            public static unsafe int GetVertexAttribIivEXT(uint index, VertexAttribEnum pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetVertexAttribIivEXT(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribIuivEXT(uint, VertexAttribEnum, uint*)"/>
            public static unsafe void GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetVertexAttribIuivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIuivEXT(uint, VertexAttribEnum, uint*)"/>
            public static unsafe void GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetVertexAttribIuivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIuivEXT(uint, VertexAttribEnum, uint*)"/>
            public static unsafe void GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetVertexAttribIuivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIuivEXT(uint, VertexAttribEnum, uint*)"/>
            public static unsafe uint GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetVertexAttribIuivEXT(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribLdvEXT(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLdvEXT(uint index, VertexAttribEnum pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribLdvEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdvEXT(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLdvEXT(uint index, VertexAttribEnum pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribLdvEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdvEXT(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLdvEXT(uint index, VertexAttribEnum pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetVertexAttribLdvEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdvEXT(uint, VertexAttribEnum, double*)"/>
            public static unsafe double GetVertexAttribLdvEXT(uint index, VertexAttribEnum pname)
            {
                double parameters_val;
                double* parameters = &parameters_val;
                GetVertexAttribLdvEXT(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="ImportMemoryWin32HandleEXT(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32HandleEXT(uint memory, ulong size, ExternalHandleType handleType, IntPtr handle)
            {
                void* handle_vptr = (void*)handle;
                ImportMemoryWin32HandleEXT(memory, size, handleType, handle_vptr);
            }
            /// <inheritdoc cref="ImportMemoryWin32HandleEXT(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32HandleEXT<T1>(uint memory, ulong size, ExternalHandleType handleType, ref T1 handle)
                where T1 : unmanaged
            {
                fixed (void* handle_ptr = &handle)
                {
                    ImportMemoryWin32HandleEXT(memory, size, handleType, handle_ptr);
                }
            }
            /// <inheritdoc cref="ImportMemoryWin32NameEXT(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32NameEXT(uint memory, ulong size, ExternalHandleType handleType, IntPtr name)
            {
                void* name_vptr = (void*)name;
                ImportMemoryWin32NameEXT(memory, size, handleType, name_vptr);
            }
            /// <inheritdoc cref="ImportMemoryWin32NameEXT(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32NameEXT<T1>(uint memory, ulong size, ExternalHandleType handleType, in T1 name)
                where T1 : unmanaged
            {
                fixed (void* name_ptr = &name)
                {
                    ImportMemoryWin32NameEXT(memory, size, handleType, name_ptr);
                }
            }
            /// <inheritdoc cref="ImportSemaphoreWin32HandleEXT(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32HandleEXT(uint semaphore, ExternalHandleType handleType, IntPtr handle)
            {
                void* handle_vptr = (void*)handle;
                ImportSemaphoreWin32HandleEXT(semaphore, handleType, handle_vptr);
            }
            /// <inheritdoc cref="ImportSemaphoreWin32HandleEXT(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32HandleEXT<T1>(uint semaphore, ExternalHandleType handleType, ref T1 handle)
                where T1 : unmanaged
            {
                fixed (void* handle_ptr = &handle)
                {
                    ImportSemaphoreWin32HandleEXT(semaphore, handleType, handle_ptr);
                }
            }
            /// <inheritdoc cref="ImportSemaphoreWin32NameEXT(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32NameEXT(uint semaphore, ExternalHandleType handleType, IntPtr name)
            {
                void* name_vptr = (void*)name;
                ImportSemaphoreWin32NameEXT(semaphore, handleType, name_vptr);
            }
            /// <inheritdoc cref="ImportSemaphoreWin32NameEXT(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32NameEXT<T1>(uint semaphore, ExternalHandleType handleType, in T1 name)
                where T1 : unmanaged
            {
                fixed (void* name_ptr = &name)
                {
                    ImportSemaphoreWin32NameEXT(semaphore, handleType, name_ptr);
                }
            }
            /// <inheritdoc cref="IndexPointerEXT(IndexPointerType, int, int, void*)"/>
            public static unsafe void IndexPointerEXT(IndexPointerType type, int stride, int count, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                IndexPointerEXT(type, stride, count, pointer_vptr);
            }
            /// <inheritdoc cref="IndexPointerEXT(IndexPointerType, int, int, void*)"/>
            public static unsafe void IndexPointerEXT<T1>(IndexPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    IndexPointerEXT(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="IndexPointerEXT(IndexPointerType, int, int, void*)"/>
            public static unsafe void IndexPointerEXT<T1>(IndexPointerType type, int stride, int count, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    IndexPointerEXT(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="IndexPointerEXT(IndexPointerType, int, int, void*)"/>
            public static unsafe void IndexPointerEXT<T1>(IndexPointerType type, int stride, int count, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    IndexPointerEXT(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="InsertEventMarkerEXT(int, byte*)"/>
            public static unsafe void InsertEventMarkerEXT(int length, string marker)
            {
                byte* marker_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(marker);
                InsertEventMarkerEXT(length, marker_ptr);
                Marshal.FreeCoTaskMem((IntPtr)marker_ptr);
            }
            /// <inheritdoc cref="LabelObjectEXT(All, uint, int, byte*)"/>
            public static unsafe void LabelObjectEXT(All type, uint obj, int length, string label)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                LabelObjectEXT(type, obj, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            /// <inheritdoc cref="MatrixLoaddEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoaddEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoaddEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoaddEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoaddEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoaddEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoaddEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoaddEXT(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixLoaddEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadfEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadfEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadfEXT(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoadfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposedEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoadTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposedEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoadTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposedEXT(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixLoadTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposefEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposefEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposefEXT(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoadTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultdEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultdEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultdEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultdEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultdEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultdEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultdEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultdEXT(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixMultdEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultfEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultfEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultfEXT(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMultfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposedEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposedEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposedEXT(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixMultTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposefEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposefEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposefEXT(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMultTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MemoryObjectParameterivEXT(uint, MemoryObjectParameterName, int*)"/>
            public static unsafe void MemoryObjectParameterivEXT(uint memoryObject, MemoryObjectParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MemoryObjectParameterivEXT(memoryObject, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysEXT(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawArraysEXT(PrimitiveType mode, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int primcount)
            {
                fixed (int* first_ptr = first)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawArraysEXT(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawArraysEXT(PrimitiveType mode, int[] first, int[] count, int primcount)
            {
                fixed (int* first_ptr = first)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawArraysEXT(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawArraysEXT(PrimitiveType mode, in int first, in int count, int primcount)
            {
                fixed (int* first_ptr = &first)
                fixed (int* count_ptr = &count)
                {
                    MultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsEXT(PrimitiveType, int*, DrawElementsType, void**, int)"/>
            public static unsafe void MultiDrawElementsEXT(PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int primcount)
            {
                fixed (int* count_ptr = count)
                {
                    MultiDrawElementsEXT(mode, count_ptr, type, indices, primcount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsEXT(PrimitiveType, int*, DrawElementsType, void**, int)"/>
            public static unsafe void MultiDrawElementsEXT(PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int primcount)
            {
                fixed (int* count_ptr = count)
                {
                    MultiDrawElementsEXT(mode, count_ptr, type, indices, primcount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsEXT(PrimitiveType, int*, DrawElementsType, void**, int)"/>
            public static unsafe void MultiDrawElementsEXT(PrimitiveType mode, in int count, DrawElementsType type, void** indices, int primcount)
            {
                fixed (int* count_ptr = &count)
                {
                    MultiDrawElementsEXT(mode, count_ptr, type, indices, primcount);
                }
            }
            /// <inheritdoc cref="MultiTexCoordPointerEXT(TextureUnit, int, TexCoordPointerType, int, void*)"/>
            public static unsafe void MultiTexCoordPointerEXT(TextureUnit texunit, int size, TexCoordPointerType type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                MultiTexCoordPointerEXT(texunit, size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="MultiTexCoordPointerEXT(TextureUnit, int, TexCoordPointerType, int, void*)"/>
            public static unsafe void MultiTexCoordPointerEXT<T1>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    MultiTexCoordPointerEXT(texunit, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordPointerEXT(TextureUnit, int, TexCoordPointerType, int, void*)"/>
            public static unsafe void MultiTexCoordPointerEXT<T1>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    MultiTexCoordPointerEXT(texunit, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordPointerEXT(TextureUnit, int, TexCoordPointerType, int, void*)"/>
            public static unsafe void MultiTexCoordPointerEXT<T1>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    MultiTexCoordPointerEXT(texunit, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnvfvEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void MultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnvfvEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void MultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnvfvEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void MultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    MultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnvivEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void MultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnvivEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void MultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnvivEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void MultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGendvEXT(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void MultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    MultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGendvEXT(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void MultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    MultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGendvEXT(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void MultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, in double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    MultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGenfvEXT(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void MultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGenfvEXT(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void MultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGenfvEXT(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void MultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    MultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGenivEXT(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void MultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGenivEXT(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void MultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGenivEXT(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void MultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterfvEXT(TextureUnit, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void MultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterfvEXT(TextureUnit, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void MultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterfvEXT(TextureUnit, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void MultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    MultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIivEXT(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIivEXT(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIivEXT(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIuivEXT(TextureUnit, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void MultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    MultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIuivEXT(TextureUnit, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void MultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    MultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIuivEXT(TextureUnit, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void MultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    MultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterivEXT(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterivEXT(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterivEXT(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferDataEXT(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferDataEXT(int buffer, nint size, IntPtr data, VertexBufferObjectUsage usage)
            {
                void* data_vptr = (void*)data;
                NamedBufferDataEXT(buffer, size, data_vptr, usage);
            }
            /// <inheritdoc cref="NamedBufferDataEXT(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferDataEXT<T1>(int buffer, nint size, ReadOnlySpan<T1> data, VertexBufferObjectUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferDataEXT(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferDataEXT(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferDataEXT<T1>(int buffer, nint size, T1[] data, VertexBufferObjectUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferDataEXT(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferDataEXT(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferDataEXT<T1>(int buffer, nint size, in T1 data, VertexBufferObjectUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferDataEXT(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferStorageEXT(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageEXT(int buffer, nint size, IntPtr data, BufferStorageMask flags)
            {
                void* data_vptr = (void*)data;
                NamedBufferStorageEXT(buffer, size, data_vptr, flags);
            }
            /// <inheritdoc cref="NamedBufferStorageEXT(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageEXT<T1>(int buffer, ReadOnlySpan<T1> data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferStorageEXT(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorageEXT(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageEXT<T1>(int buffer, T1[] data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferStorageEXT(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorageEXT(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageEXT<T1>(int buffer, nint size, in T1 data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferStorageEXT(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorageExternalEXT(int, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageExternalEXT(int buffer, IntPtr offset, nint size, IntPtr clientBuffer, BufferStorageMask flags)
            {
                void* clientBuffer_vptr = (void*)clientBuffer;
                NamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer_vptr, flags);
            }
            /// <inheritdoc cref="NamedBufferStorageExternalEXT(int, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageExternalEXT<T1>(int buffer, IntPtr offset, nint size, ref T1 clientBuffer, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* clientBuffer_ptr = &clientBuffer)
                {
                    NamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubDataEXT(int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                NamedBufferSubDataEXT(buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="NamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubDataEXT<T1>(int buffer, IntPtr offset, nint size, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferSubDataEXT(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubDataEXT<T1>(int buffer, IntPtr offset, nint size, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferSubDataEXT(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubDataEXT<T1>(int buffer, IntPtr offset, nint size, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferSubDataEXT(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4dvEXT(int, ProgramTarget, uint, double*)"/>
            public static unsafe void NamedProgramLocalParameter4dvEXT(int program, ProgramTarget target, uint index, ReadOnlySpan<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameter4dvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4dvEXT(int, ProgramTarget, uint, double*)"/>
            public static unsafe void NamedProgramLocalParameter4dvEXT(int program, ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameter4dvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4dvEXT(int, ProgramTarget, uint, double*)"/>
            public static unsafe void NamedProgramLocalParameter4dvEXT(int program, ProgramTarget target, uint index, in double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParameter4dvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4fvEXT(int, ProgramTarget, uint, float*)"/>
            public static unsafe void NamedProgramLocalParameter4fvEXT(int program, ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameter4fvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4fvEXT(int, ProgramTarget, uint, float*)"/>
            public static unsafe void NamedProgramLocalParameter4fvEXT(int program, ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameter4fvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4fvEXT(int, ProgramTarget, uint, float*)"/>
            public static unsafe void NamedProgramLocalParameter4fvEXT(int program, ProgramTarget target, uint index, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParameter4fvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4ivEXT(int, ProgramTarget, uint, int*)"/>
            public static unsafe void NamedProgramLocalParameterI4ivEXT(int program, ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameterI4ivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4ivEXT(int, ProgramTarget, uint, int*)"/>
            public static unsafe void NamedProgramLocalParameterI4ivEXT(int program, ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameterI4ivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4ivEXT(int, ProgramTarget, uint, int*)"/>
            public static unsafe void NamedProgramLocalParameterI4ivEXT(int program, ProgramTarget target, uint index, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParameterI4ivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4uivEXT(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void NamedProgramLocalParameterI4uivEXT(int program, ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameterI4uivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4uivEXT(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void NamedProgramLocalParameterI4uivEXT(int program, ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameterI4uivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4uivEXT(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void NamedProgramLocalParameterI4uivEXT(int program, ProgramTarget target, uint index, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParameterI4uivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameters4fvEXT(int, ProgramTarget, uint, int, float*)"/>
            public static unsafe void NamedProgramLocalParameters4fvEXT(int program, ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (float* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameters4fvEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameters4fvEXT(int, ProgramTarget, uint, int, float*)"/>
            public static unsafe void NamedProgramLocalParameters4fvEXT(int program, ProgramTarget target, uint index, float[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (float* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameters4fvEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameters4fvEXT(int, ProgramTarget, uint, int, float*)"/>
            public static unsafe void NamedProgramLocalParameters4fvEXT(int program, ProgramTarget target, uint index, int count, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParameters4fvEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4ivEXT(int, ProgramTarget, uint, int, int*)"/>
            public static unsafe void NamedProgramLocalParametersI4ivEXT(int program, ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (int* parameters_ptr = parameters)
                {
                    NamedProgramLocalParametersI4ivEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4ivEXT(int, ProgramTarget, uint, int, int*)"/>
            public static unsafe void NamedProgramLocalParametersI4ivEXT(int program, ProgramTarget target, uint index, int[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (int* parameters_ptr = parameters)
                {
                    NamedProgramLocalParametersI4ivEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4ivEXT(int, ProgramTarget, uint, int, int*)"/>
            public static unsafe void NamedProgramLocalParametersI4ivEXT(int program, ProgramTarget target, uint index, int count, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParametersI4ivEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4uivEXT(int, ProgramTarget, uint, int, uint*)"/>
            public static unsafe void NamedProgramLocalParametersI4uivEXT(int program, ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    NamedProgramLocalParametersI4uivEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4uivEXT(int, ProgramTarget, uint, int, uint*)"/>
            public static unsafe void NamedProgramLocalParametersI4uivEXT(int program, ProgramTarget target, uint index, uint[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    NamedProgramLocalParametersI4uivEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4uivEXT(int, ProgramTarget, uint, int, uint*)"/>
            public static unsafe void NamedProgramLocalParametersI4uivEXT(int program, ProgramTarget target, uint index, int count, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParametersI4uivEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramStringEXT(int, ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void NamedProgramStringEXT(int program, ProgramTarget target, ProgramFormat format, int len, IntPtr str)
            {
                void* str_vptr = (void*)str;
                NamedProgramStringEXT(program, target, format, len, str_vptr);
            }
            /// <inheritdoc cref="NamedProgramStringEXT(int, ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void NamedProgramStringEXT<T1>(int program, ProgramTarget target, ProgramFormat format, ReadOnlySpan<T1> str)
                where T1 : unmanaged
            {
                int len = (int)(str.Length * sizeof(T1));
                fixed (void* str_ptr = str)
                {
                    NamedProgramStringEXT(program, target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramStringEXT(int, ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void NamedProgramStringEXT<T1>(int program, ProgramTarget target, ProgramFormat format, T1[] str)
                where T1 : unmanaged
            {
                int len = (int)(str.Length * sizeof(T1));
                fixed (void* str_ptr = str)
                {
                    NamedProgramStringEXT(program, target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramStringEXT(int, ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void NamedProgramStringEXT<T1>(int program, ProgramTarget target, ProgramFormat format, int len, in T1 str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = &str)
                {
                    NamedProgramStringEXT(program, target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="NormalPointerEXT(NormalPointerType, int, int, void*)"/>
            public static unsafe void NormalPointerEXT(NormalPointerType type, int stride, int count, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                NormalPointerEXT(type, stride, count, pointer_vptr);
            }
            /// <inheritdoc cref="NormalPointerEXT(NormalPointerType, int, int, void*)"/>
            public static unsafe void NormalPointerEXT<T1>(NormalPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    NormalPointerEXT(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="NormalPointerEXT(NormalPointerType, int, int, void*)"/>
            public static unsafe void NormalPointerEXT<T1>(NormalPointerType type, int stride, int count, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    NormalPointerEXT(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="NormalPointerEXT(NormalPointerType, int, int, void*)"/>
            public static unsafe void NormalPointerEXT<T1>(NormalPointerType type, int stride, int count, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    NormalPointerEXT(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="PixelTransformParameterfvEXT(PixelTransformTargetEXT, PixelTransformPNameEXT, float*)"/>
            public static unsafe void PixelTransformParameterfvEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PixelTransformParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTransformParameterfvEXT(PixelTransformTargetEXT, PixelTransformPNameEXT, float*)"/>
            public static unsafe void PixelTransformParameterfvEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PixelTransformParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTransformParameterfvEXT(PixelTransformTargetEXT, PixelTransformPNameEXT, float*)"/>
            public static unsafe void PixelTransformParameterfvEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    PixelTransformParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTransformParameterivEXT(PixelTransformTargetEXT, PixelTransformPNameEXT, int*)"/>
            public static unsafe void PixelTransformParameterivEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PixelTransformParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTransformParameterivEXT(PixelTransformTargetEXT, PixelTransformPNameEXT, int*)"/>
            public static unsafe void PixelTransformParameterivEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PixelTransformParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTransformParameterivEXT(PixelTransformTargetEXT, PixelTransformPNameEXT, int*)"/>
            public static unsafe void PixelTransformParameterivEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    PixelTransformParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvEXT(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvEXT(PointParameterNameARB pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvEXT(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvEXT(PointParameterNameARB pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvEXT(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvEXT(PointParameterNameARB pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    PointParameterfvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PrioritizeTexturesEXT(int, int*, float*)"/>
            public static unsafe void PrioritizeTexturesEXT(int n, ReadOnlySpan<int> textures, ReadOnlySpan<float> priorities)
            {
                fixed (int* textures_ptr = textures)
                {
                    fixed (float* priorities_ptr = priorities)
                    {
                        PrioritizeTexturesEXT(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PrioritizeTexturesEXT(int, int*, float*)"/>
            public static unsafe void PrioritizeTexturesEXT(int n, int[] textures, float[] priorities)
            {
                fixed (int* textures_ptr = textures)
                {
                    fixed (float* priorities_ptr = priorities)
                    {
                        PrioritizeTexturesEXT(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PrioritizeTexturesEXT(int, int*, float*)"/>
            public static unsafe void PrioritizeTexturesEXT(int n, in int textures, in float priorities)
            {
                fixed (int* textures_ptr = &textures)
                fixed (float* priorities_ptr = &priorities)
                {
                    PrioritizeTexturesEXT(n, textures_ptr, priorities_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameters4fvEXT(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramEnvParameters4fvEXT(ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramEnvParameters4fvEXT(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameters4fvEXT(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramEnvParameters4fvEXT(ProgramTarget target, uint index, float[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramEnvParameters4fvEXT(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameters4fvEXT(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramEnvParameters4fvEXT(ProgramTarget target, uint index, int count, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ProgramEnvParameters4fvEXT(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameters4fvEXT(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramLocalParameters4fvEXT(ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramLocalParameters4fvEXT(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameters4fvEXT(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramLocalParameters4fvEXT(ProgramTarget target, uint index, float[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramLocalParameters4fvEXT(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameters4fvEXT(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramLocalParameters4fvEXT(ProgramTarget target, uint index, int count, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ProgramLocalParameters4fvEXT(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform1dvEXT(int program, int location, int count, in double value)
            {
                fixed (double* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform1dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform1fvEXT(int program, int location, int count, in float value)
            {
                fixed (float* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform1fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform1ivEXT(int program, int location, int count, in int value)
            {
                fixed (int* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform1ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform1uivEXT(int program, int location, int count, in uint value)
            {
                fixed (uint* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform1uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2dvEXT(int program, int location, int count, in Vector2d value)
            {
                fixed (Vector2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2dvEXT(int program, int location, int count, ReadOnlySpan<Vector2d> value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2dvEXT(int program, int location, int count, Vector2d[] value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fvEXT(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fvEXT(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fvEXT(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fvEXT(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fvEXT(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fvEXT(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2ivEXT(int program, int location, int count, in Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2ivEXT(int program, int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2ivEXT(int program, int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2uivEXT(int program, int location, int count, in Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2uivEXT(int program, int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2uivEXT(int program, int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3dvEXT(int program, int location, int count, in Vector3d value)
            {
                fixed (Vector3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3dvEXT(int program, int location, int count, ReadOnlySpan<Vector3d> value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3dvEXT(int program, int location, int count, Vector3d[] value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fvEXT(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fvEXT(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fvEXT(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fvEXT(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fvEXT(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fvEXT(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3ivEXT(int program, int location, int count, in Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3ivEXT(int program, int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3ivEXT(int program, int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3uivEXT(int program, int location, int count, in Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3uivEXT(int program, int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3uivEXT(int program, int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4dvEXT(int program, int location, int count, in Vector4d value)
            {
                fixed (Vector4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4dvEXT(int program, int location, int count, ReadOnlySpan<Vector4d> value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4dvEXT(int program, int location, int count, Vector4d[] value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fvEXT(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fvEXT(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fvEXT(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fvEXT(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fvEXT(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fvEXT(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4ivEXT(int program, int location, int count, in Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4ivEXT(int program, int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4ivEXT(int program, int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4uivEXT(int program, int location, int count, in Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4uivEXT(int program, int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4uivEXT(int program, int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2dvEXT(int program, int location, int count, bool transpose, in Matrix2d value)
            {
                fixed (Matrix2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2d> value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2dvEXT(int program, int location, int count, bool transpose, Matrix2d[] value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2fvEXT(int program, int location, int count, bool transpose, in Matrix2 value)
            {
                fixed (Matrix2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2> value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2fvEXT(int program, int location, int count, bool transpose, Matrix2[] value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3dvEXT(int program, int location, int count, bool transpose, in Matrix2x3d value)
            {
                fixed (Matrix2x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3d> value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3dvEXT(int program, int location, int count, bool transpose, Matrix2x3d[] value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3fvEXT(int program, int location, int count, bool transpose, in Matrix2x3 value)
            {
                fixed (Matrix2x3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3> value)
            {
                fixed (Matrix2x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3fvEXT(int program, int location, int count, bool transpose, Matrix2x3[] value)
            {
                fixed (Matrix2x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4dvEXT(int program, int location, int count, bool transpose, in Matrix2x4d value)
            {
                fixed (Matrix2x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4d> value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4dvEXT(int program, int location, int count, bool transpose, Matrix2x4d[] value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4fvEXT(int program, int location, int count, bool transpose, in Matrix2x4 value)
            {
                fixed (Matrix2x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4> value)
            {
                fixed (Matrix2x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4fvEXT(int program, int location, int count, bool transpose, Matrix2x4[] value)
            {
                fixed (Matrix2x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3dvEXT(int program, int location, int count, bool transpose, in Matrix3d value)
            {
                fixed (Matrix3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3d> value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3dvEXT(int program, int location, int count, bool transpose, Matrix3d[] value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3fvEXT(int program, int location, int count, bool transpose, in Matrix3 value)
            {
                fixed (Matrix3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3> value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3fvEXT(int program, int location, int count, bool transpose, Matrix3[] value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2dvEXT(int program, int location, int count, bool transpose, in Matrix3x2d value)
            {
                fixed (Matrix3x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2d> value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2dvEXT(int program, int location, int count, bool transpose, Matrix3x2d[] value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fvEXT(int program, int location, int count, bool transpose, in Matrix3x2 value)
            {
                fixed (Matrix3x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2> value)
            {
                fixed (Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fvEXT(int program, int location, int count, bool transpose, Matrix3x2[] value)
            {
                fixed (Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fvEXT(int program, int location, int count, bool transpose, in System.Numerics.Matrix3x2 value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix3x2> value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fvEXT(int program, int location, int count, bool transpose, System.Numerics.Matrix3x2[] value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4dvEXT(int program, int location, int count, bool transpose, in Matrix3x4d value)
            {
                fixed (Matrix3x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4d> value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4dvEXT(int program, int location, int count, bool transpose, Matrix3x4d[] value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4fvEXT(int program, int location, int count, bool transpose, in Matrix3x4 value)
            {
                fixed (Matrix3x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4> value)
            {
                fixed (Matrix3x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4fvEXT(int program, int location, int count, bool transpose, Matrix3x4[] value)
            {
                fixed (Matrix3x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4dvEXT(int program, int location, int count, bool transpose, in Matrix4d value)
            {
                fixed (Matrix4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4d> value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4dvEXT(int program, int location, int count, bool transpose, Matrix4d[] value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fvEXT(int program, int location, int count, bool transpose, in Matrix4 value)
            {
                fixed (Matrix4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4> value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fvEXT(int program, int location, int count, bool transpose, Matrix4[] value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fvEXT(int program, int location, int count, bool transpose, in System.Numerics.Matrix4x4 value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix4x4> value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fvEXT(int program, int location, int count, bool transpose, System.Numerics.Matrix4x4[] value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2dvEXT(int program, int location, int count, bool transpose, in Matrix4x2d value)
            {
                fixed (Matrix4x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2d> value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2dvEXT(int program, int location, int count, bool transpose, Matrix4x2d[] value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2fvEXT(int program, int location, int count, bool transpose, in Matrix4x2 value)
            {
                fixed (Matrix4x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2> value)
            {
                fixed (Matrix4x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2fvEXT(int program, int location, int count, bool transpose, Matrix4x2[] value)
            {
                fixed (Matrix4x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3dvEXT(int program, int location, int count, bool transpose, in Matrix4x3d value)
            {
                fixed (Matrix4x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3d> value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3dvEXT(int program, int location, int count, bool transpose, Matrix4x3d[] value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3fvEXT(int program, int location, int count, bool transpose, in Matrix4x3 value)
            {
                fixed (Matrix4x3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3> value)
            {
                fixed (Matrix4x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3fvEXT(int program, int location, int count, bool transpose, Matrix4x3[] value)
            {
                fixed (Matrix4x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="PushGroupMarkerEXT(int, byte*)"/>
            public static unsafe void PushGroupMarkerEXT(int length, string marker)
            {
                byte* marker_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(marker);
                PushGroupMarkerEXT(length, marker_ptr);
                Marshal.FreeCoTaskMem((IntPtr)marker_ptr);
            }
            /// <inheritdoc cref="SecondaryColor3bvEXT(sbyte*)"/>
            public static unsafe void SecondaryColor3bvEXT(ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    SecondaryColor3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3bvEXT(sbyte*)"/>
            public static unsafe void SecondaryColor3bvEXT(sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    SecondaryColor3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3bvEXT(sbyte*)"/>
            public static unsafe void SecondaryColor3bvEXT(in sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    SecondaryColor3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3dvEXT(double*)"/>
            public static unsafe void SecondaryColor3dvEXT(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    SecondaryColor3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3dvEXT(double*)"/>
            public static unsafe void SecondaryColor3dvEXT(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    SecondaryColor3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3dvEXT(double*)"/>
            public static unsafe void SecondaryColor3dvEXT(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    SecondaryColor3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3fvEXT(float*)"/>
            public static unsafe void SecondaryColor3fvEXT(in Color3<Rgb> v)
            {
                fixed (Color3<Rgb>* tmp_v = &v)
                {
                    float* v_ptr = (float*)tmp_v;
                    SecondaryColor3fvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3ivEXT(int*)"/>
            public static unsafe void SecondaryColor3ivEXT(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    SecondaryColor3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3ivEXT(int*)"/>
            public static unsafe void SecondaryColor3ivEXT(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    SecondaryColor3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3ivEXT(int*)"/>
            public static unsafe void SecondaryColor3ivEXT(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    SecondaryColor3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3svEXT(short*)"/>
            public static unsafe void SecondaryColor3svEXT(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    SecondaryColor3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3svEXT(short*)"/>
            public static unsafe void SecondaryColor3svEXT(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    SecondaryColor3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3svEXT(short*)"/>
            public static unsafe void SecondaryColor3svEXT(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    SecondaryColor3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3ubvEXT(byte*)"/>
            public static unsafe void SecondaryColor3ubvEXT(ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    SecondaryColor3ubvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3ubvEXT(byte*)"/>
            public static unsafe void SecondaryColor3ubvEXT(byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    SecondaryColor3ubvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3ubvEXT(byte*)"/>
            public static unsafe void SecondaryColor3ubvEXT(in byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    SecondaryColor3ubvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3uivEXT(uint*)"/>
            public static unsafe void SecondaryColor3uivEXT(ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    SecondaryColor3uivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3uivEXT(uint*)"/>
            public static unsafe void SecondaryColor3uivEXT(uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    SecondaryColor3uivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3uivEXT(uint*)"/>
            public static unsafe void SecondaryColor3uivEXT(in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    SecondaryColor3uivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3usvEXT(ushort*)"/>
            public static unsafe void SecondaryColor3usvEXT(ReadOnlySpan<ushort> v)
            {
                fixed (ushort* v_ptr = v)
                {
                    SecondaryColor3usvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3usvEXT(ushort*)"/>
            public static unsafe void SecondaryColor3usvEXT(ushort[] v)
            {
                fixed (ushort* v_ptr = v)
                {
                    SecondaryColor3usvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3usvEXT(ushort*)"/>
            public static unsafe void SecondaryColor3usvEXT(in ushort v)
            {
                fixed (ushort* v_ptr = &v)
                {
                    SecondaryColor3usvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorPointerEXT(int, ColorPointerType, int, void*)"/>
            public static unsafe void SecondaryColorPointerEXT(int size, ColorPointerType type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                SecondaryColorPointerEXT(size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="SecondaryColorPointerEXT(int, ColorPointerType, int, void*)"/>
            public static unsafe void SecondaryColorPointerEXT<T1>(int size, ColorPointerType type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    SecondaryColorPointerEXT(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorPointerEXT(int, ColorPointerType, int, void*)"/>
            public static unsafe void SecondaryColorPointerEXT<T1>(int size, ColorPointerType type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    SecondaryColorPointerEXT(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorPointerEXT(int, ColorPointerType, int, void*)"/>
            public static unsafe void SecondaryColorPointerEXT<T1>(int size, ColorPointerType type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    SecondaryColorPointerEXT(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="SemaphoreParameterui64vEXT(uint, SemaphoreParameterName, ulong*)"/>
            public static unsafe void SemaphoreParameterui64vEXT(uint semaphore, SemaphoreParameterName pname, in ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    SemaphoreParameterui64vEXT(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SeparableFilter2DEXT(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2DEXT(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column)
            {
                void* row_vptr = (void*)row;
                void* column_vptr = (void*)column;
                SeparableFilter2DEXT(target, internalformat, width, height, format, type, row_vptr, column_vptr);
            }
            /// <inheritdoc cref="SeparableFilter2DEXT(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2DEXT<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T2> row, ReadOnlySpan<T1> column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        SeparableFilter2DEXT(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SeparableFilter2DEXT(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2DEXT<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T2[] row, T1[] column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        SeparableFilter2DEXT(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SeparableFilter2DEXT(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2DEXT<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, in T1 row, in T2 column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                {
                    SeparableFilter2DEXT(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                }
            }
            /// <inheritdoc cref="SetInvariantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetInvariantEXT(uint id, ScalarType type, IntPtr addr)
            {
                void* addr_vptr = (void*)addr;
                SetInvariantEXT(id, type, addr_vptr);
            }
            /// <inheritdoc cref="SetInvariantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetInvariantEXT<T1>(uint id, ScalarType type, ReadOnlySpan<T1> addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    SetInvariantEXT(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SetInvariantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetInvariantEXT<T1>(uint id, ScalarType type, T1[] addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    SetInvariantEXT(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SetInvariantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetInvariantEXT<T1>(uint id, ScalarType type, in T1 addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = &addr)
                {
                    SetInvariantEXT(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SetLocalConstantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetLocalConstantEXT(uint id, ScalarType type, IntPtr addr)
            {
                void* addr_vptr = (void*)addr;
                SetLocalConstantEXT(id, type, addr_vptr);
            }
            /// <inheritdoc cref="SetLocalConstantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetLocalConstantEXT<T1>(uint id, ScalarType type, ReadOnlySpan<T1> addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    SetLocalConstantEXT(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SetLocalConstantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetLocalConstantEXT<T1>(uint id, ScalarType type, T1[] addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    SetLocalConstantEXT(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SetLocalConstantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetLocalConstantEXT<T1>(uint id, ScalarType type, in T1 addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = &addr)
                {
                    SetLocalConstantEXT(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SignalSemaphoreEXT(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void SignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, ReadOnlySpan<int> buffers, uint numTextureBarriers, ReadOnlySpan<int> textures, ReadOnlySpan<TextureLayout> dstLayouts)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        fixed (TextureLayout* dstLayouts_ptr = dstLayouts)
                        {
                            SignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, dstLayouts_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="SignalSemaphoreEXT(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void SignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, int[] buffers, uint numTextureBarriers, int[] textures, TextureLayout[] dstLayouts)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        fixed (TextureLayout* dstLayouts_ptr = dstLayouts)
                        {
                            SignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, dstLayouts_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="SignalSemaphoreEXT(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void SignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, in int buffers, uint numTextureBarriers, in int textures, in TextureLayout dstLayouts)
            {
                fixed (int* buffers_ptr = &buffers)
                fixed (int* textures_ptr = &textures)
                fixed (TextureLayout* dstLayouts_ptr = &dstLayouts)
                {
                    SignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, dstLayouts_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3bvEXT(sbyte*)"/>
            public static unsafe void Tangent3bvEXT(ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    Tangent3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3bvEXT(sbyte*)"/>
            public static unsafe void Tangent3bvEXT(sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    Tangent3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3bvEXT(sbyte*)"/>
            public static unsafe void Tangent3bvEXT(in sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    Tangent3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3dvEXT(double*)"/>
            public static unsafe void Tangent3dvEXT(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    Tangent3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3dvEXT(double*)"/>
            public static unsafe void Tangent3dvEXT(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    Tangent3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3dvEXT(double*)"/>
            public static unsafe void Tangent3dvEXT(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    Tangent3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3fvEXT(float*)"/>
            public static unsafe void Tangent3fvEXT(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    Tangent3fvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3fvEXT(float*)"/>
            public static unsafe void Tangent3fvEXT(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    Tangent3fvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3fvEXT(float*)"/>
            public static unsafe void Tangent3fvEXT(in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    Tangent3fvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3ivEXT(int*)"/>
            public static unsafe void Tangent3ivEXT(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    Tangent3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3ivEXT(int*)"/>
            public static unsafe void Tangent3ivEXT(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    Tangent3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3ivEXT(int*)"/>
            public static unsafe void Tangent3ivEXT(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    Tangent3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3svEXT(short*)"/>
            public static unsafe void Tangent3svEXT(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    Tangent3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3svEXT(short*)"/>
            public static unsafe void Tangent3svEXT(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    Tangent3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3svEXT(short*)"/>
            public static unsafe void Tangent3svEXT(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    Tangent3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="TangentPointerEXT(TangentPointerTypeEXT, int, void*)"/>
            public static unsafe void TangentPointerEXT(TangentPointerTypeEXT type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                TangentPointerEXT(type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="TangentPointerEXT(TangentPointerTypeEXT, int, void*)"/>
            public static unsafe void TangentPointerEXT<T1>(TangentPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    TangentPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TangentPointerEXT(TangentPointerTypeEXT, int, void*)"/>
            public static unsafe void TangentPointerEXT<T1>(TangentPointerTypeEXT type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    TangentPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TangentPointerEXT(TangentPointerTypeEXT, int, void*)"/>
            public static unsafe void TangentPointerEXT<T1>(TangentPointerTypeEXT type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    TangentPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordPointerEXT(int, TexCoordPointerType, int, int, void*)"/>
            public static unsafe void TexCoordPointerEXT(int size, TexCoordPointerType type, int stride, int count, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                TexCoordPointerEXT(size, type, stride, count, pointer_vptr);
            }
            /// <inheritdoc cref="TexCoordPointerEXT(int, TexCoordPointerType, int, int, void*)"/>
            public static unsafe void TexCoordPointerEXT<T1>(int size, TexCoordPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    TexCoordPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordPointerEXT(int, TexCoordPointerType, int, int, void*)"/>
            public static unsafe void TexCoordPointerEXT<T1>(int size, TexCoordPointerType type, int stride, int count, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    TexCoordPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordPointerEXT(int, TexCoordPointerType, int, int, void*)"/>
            public static unsafe void TexCoordPointerEXT<T1>(int size, TexCoordPointerType type, int stride, int count, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    TexCoordPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TexImage3DEXT(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage3DEXT(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexImage3DEXT(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage3DEXT<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexImage3DEXT(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage3DEXT<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexImage3DEXT(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage3DEXT<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIivEXT(TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TexParameterIivEXT(TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexParameterIivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIivEXT(TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TexParameterIivEXT(TextureTarget target, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexParameterIivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIivEXT(TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TexParameterIivEXT(TextureTarget target, TextureParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TexParameterIivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIuivEXT(TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TexParameterIuivEXT(TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TexParameterIuivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIuivEXT(TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TexParameterIuivEXT(TextureTarget target, TextureParameterName pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TexParameterIuivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIuivEXT(TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TexParameterIuivEXT(TextureTarget target, TextureParameterName pname, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    TexParameterIuivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage1DEXT(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage1DEXT(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexSubImage1DEXT(target, level, xoffset, width, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexSubImage1DEXT(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage1DEXT<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage1DEXT(target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage1DEXT(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage1DEXT<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage1DEXT(target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage1DEXT(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage1DEXT<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexSubImage1DEXT(target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage2DEXT(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage2DEXT(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexSubImage2DEXT(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage2DEXT<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage2DEXT(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage2DEXT<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage2DEXT(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage2DEXT<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage3DEXT(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage3DEXT(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexSubImage3DEXT(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage3DEXT<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage3DEXT(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage3DEXT<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage3DEXT(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage3DEXT<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage1DEXT(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage1DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage1DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage1DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage2DEXT(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage2DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage2DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage2DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage3DEXT(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage3DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage3DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage3DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfvEXT(int, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterfvEXT(int texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    TextureParameterfvEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfvEXT(int, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterfvEXT(int texture, TextureTarget target, TextureParameterName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    TextureParameterfvEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfvEXT(int, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterfvEXT(int texture, TextureTarget target, TextureParameterName pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    TextureParameterfvEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIivEXT(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIivEXT(int texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterIivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIivEXT(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIivEXT(int texture, TextureTarget target, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterIivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIivEXT(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIivEXT(int texture, TextureTarget target, TextureParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TextureParameterIivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuivEXT(int, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIuivEXT(int texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TextureParameterIuivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuivEXT(int, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIuivEXT(int texture, TextureTarget target, TextureParameterName pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TextureParameterIuivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuivEXT(int, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIuivEXT(int texture, TextureTarget target, TextureParameterName pname, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    TextureParameterIuivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterivEXT(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterivEXT(int texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterivEXT(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterivEXT(int texture, TextureTarget target, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterivEXT(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterivEXT(int texture, TextureTarget target, TextureParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TextureParameterivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage1DEXT(int, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1DEXT(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage1DEXT(int, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage1DEXT(int, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage1DEXT(int, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2DEXT(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3DEXT(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform1uivEXT(int location, int count, in uint value)
            {
                fixed (uint* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform1uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform1uivEXT(int location, int count, ReadOnlySpan<uint> value)
            {
                fixed (uint* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform1uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform1uivEXT(int location, int count, uint[] value)
            {
                fixed (uint* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform1uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform2uivEXT(int location, int count, in Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform2uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform2uivEXT(int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform2uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform2uivEXT(int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform2uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform3uivEXT(int location, int count, in Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform3uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform3uivEXT(int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform3uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform3uivEXT(int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform3uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform4uivEXT(int location, int count, in Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform4uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform4uivEXT(int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform4uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform4uivEXT(int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform4uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="VariantbvEXT(uint, sbyte*)"/>
            public static unsafe void VariantbvEXT(uint id, ReadOnlySpan<sbyte> addr)
            {
                fixed (sbyte* addr_ptr = addr)
                {
                    VariantbvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantbvEXT(uint, sbyte*)"/>
            public static unsafe void VariantbvEXT(uint id, sbyte[] addr)
            {
                fixed (sbyte* addr_ptr = addr)
                {
                    VariantbvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantbvEXT(uint, sbyte*)"/>
            public static unsafe void VariantbvEXT(uint id, in sbyte addr)
            {
                fixed (sbyte* addr_ptr = &addr)
                {
                    VariantbvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantdvEXT(uint, double*)"/>
            public static unsafe void VariantdvEXT(uint id, ReadOnlySpan<double> addr)
            {
                fixed (double* addr_ptr = addr)
                {
                    VariantdvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantdvEXT(uint, double*)"/>
            public static unsafe void VariantdvEXT(uint id, double[] addr)
            {
                fixed (double* addr_ptr = addr)
                {
                    VariantdvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantdvEXT(uint, double*)"/>
            public static unsafe void VariantdvEXT(uint id, in double addr)
            {
                fixed (double* addr_ptr = &addr)
                {
                    VariantdvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantfvEXT(uint, float*)"/>
            public static unsafe void VariantfvEXT(uint id, ReadOnlySpan<float> addr)
            {
                fixed (float* addr_ptr = addr)
                {
                    VariantfvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantfvEXT(uint, float*)"/>
            public static unsafe void VariantfvEXT(uint id, float[] addr)
            {
                fixed (float* addr_ptr = addr)
                {
                    VariantfvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantfvEXT(uint, float*)"/>
            public static unsafe void VariantfvEXT(uint id, in float addr)
            {
                fixed (float* addr_ptr = &addr)
                {
                    VariantfvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantivEXT(uint, int*)"/>
            public static unsafe void VariantivEXT(uint id, ReadOnlySpan<int> addr)
            {
                fixed (int* addr_ptr = addr)
                {
                    VariantivEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantivEXT(uint, int*)"/>
            public static unsafe void VariantivEXT(uint id, int[] addr)
            {
                fixed (int* addr_ptr = addr)
                {
                    VariantivEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantivEXT(uint, int*)"/>
            public static unsafe void VariantivEXT(uint id, in int addr)
            {
                fixed (int* addr_ptr = &addr)
                {
                    VariantivEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantPointerEXT(uint, ScalarType, uint, void*)"/>
            public static unsafe void VariantPointerEXT(uint id, ScalarType type, uint stride, IntPtr addr)
            {
                void* addr_vptr = (void*)addr;
                VariantPointerEXT(id, type, stride, addr_vptr);
            }
            /// <inheritdoc cref="VariantPointerEXT(uint, ScalarType, uint, void*)"/>
            public static unsafe void VariantPointerEXT<T1>(uint id, ScalarType type, uint stride, ReadOnlySpan<T1> addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    VariantPointerEXT(id, type, stride, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantPointerEXT(uint, ScalarType, uint, void*)"/>
            public static unsafe void VariantPointerEXT<T1>(uint id, ScalarType type, uint stride, T1[] addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    VariantPointerEXT(id, type, stride, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantPointerEXT(uint, ScalarType, uint, void*)"/>
            public static unsafe void VariantPointerEXT<T1>(uint id, ScalarType type, uint stride, in T1 addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = &addr)
                {
                    VariantPointerEXT(id, type, stride, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantsvEXT(uint, short*)"/>
            public static unsafe void VariantsvEXT(uint id, ReadOnlySpan<short> addr)
            {
                fixed (short* addr_ptr = addr)
                {
                    VariantsvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantsvEXT(uint, short*)"/>
            public static unsafe void VariantsvEXT(uint id, short[] addr)
            {
                fixed (short* addr_ptr = addr)
                {
                    VariantsvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantsvEXT(uint, short*)"/>
            public static unsafe void VariantsvEXT(uint id, in short addr)
            {
                fixed (short* addr_ptr = &addr)
                {
                    VariantsvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantubvEXT(uint, byte*)"/>
            public static unsafe void VariantubvEXT(uint id, ReadOnlySpan<byte> addr)
            {
                fixed (byte* addr_ptr = addr)
                {
                    VariantubvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantubvEXT(uint, byte*)"/>
            public static unsafe void VariantubvEXT(uint id, byte[] addr)
            {
                fixed (byte* addr_ptr = addr)
                {
                    VariantubvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantubvEXT(uint, byte*)"/>
            public static unsafe void VariantubvEXT(uint id, in byte addr)
            {
                fixed (byte* addr_ptr = &addr)
                {
                    VariantubvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantuivEXT(uint, uint*)"/>
            public static unsafe void VariantuivEXT(uint id, ReadOnlySpan<uint> addr)
            {
                fixed (uint* addr_ptr = addr)
                {
                    VariantuivEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantuivEXT(uint, uint*)"/>
            public static unsafe void VariantuivEXT(uint id, uint[] addr)
            {
                fixed (uint* addr_ptr = addr)
                {
                    VariantuivEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantuivEXT(uint, uint*)"/>
            public static unsafe void VariantuivEXT(uint id, in uint addr)
            {
                fixed (uint* addr_ptr = &addr)
                {
                    VariantuivEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantusvEXT(uint, ushort*)"/>
            public static unsafe void VariantusvEXT(uint id, ReadOnlySpan<ushort> addr)
            {
                fixed (ushort* addr_ptr = addr)
                {
                    VariantusvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantusvEXT(uint, ushort*)"/>
            public static unsafe void VariantusvEXT(uint id, ushort[] addr)
            {
                fixed (ushort* addr_ptr = addr)
                {
                    VariantusvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantusvEXT(uint, ushort*)"/>
            public static unsafe void VariantusvEXT(uint id, in ushort addr)
            {
                fixed (ushort* addr_ptr = &addr)
                {
                    VariantusvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI1ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI1ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI1ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI1ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI1ivEXT(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI1ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI1uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI1uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI1uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI1uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI1uivEXT(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI1uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI2ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI2ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI2ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI2ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI2ivEXT(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI2ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI2uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI2uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI2uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI2uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI2uivEXT(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI2uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI3ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI3ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI3ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI3ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI3ivEXT(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI3ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI3uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI3uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI3uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI3uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI3uivEXT(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI3uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bvEXT(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bvEXT(uint index, ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttribI4bvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bvEXT(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bvEXT(uint index, sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttribI4bvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bvEXT(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bvEXT(uint index, in sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    VertexAttribI4bvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI4ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI4ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI4ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI4ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI4ivEXT(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI4ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4svEXT(uint, short*)"/>
            public static unsafe void VertexAttribI4svEXT(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribI4svEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4svEXT(uint, short*)"/>
            public static unsafe void VertexAttribI4svEXT(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribI4svEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4svEXT(uint, short*)"/>
            public static unsafe void VertexAttribI4svEXT(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribI4svEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubvEXT(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubvEXT(uint index, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttribI4ubvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubvEXT(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubvEXT(uint index, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttribI4ubvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubvEXT(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubvEXT(uint index, in byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttribI4ubvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI4uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI4uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI4uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI4uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI4uivEXT(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI4uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usvEXT(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usvEXT(uint index, ReadOnlySpan<ushort> v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttribI4usvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usvEXT(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usvEXT(uint index, ushort[] v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttribI4usvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usvEXT(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usvEXT(uint index, in ushort v)
            {
                fixed (ushort* v_ptr = &v)
                {
                    VertexAttribI4usvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT(uint index, int size, VertexAttribIType type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexAttribIPointerEXT(index, size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT<T1>(uint index, int size, VertexAttribIType type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT<T1>(uint index, int size, VertexAttribIType type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT<T1>(uint index, int size, VertexAttribIType type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL1dvEXT(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL1dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL1dvEXT(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL1dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL1dvEXT(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribL1dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL2dvEXT(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL2dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL2dvEXT(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL2dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL2dvEXT(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribL2dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL3dvEXT(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL3dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL3dvEXT(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL3dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL3dvEXT(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribL3dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL4dvEXT(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL4dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL4dvEXT(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL4dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL4dvEXT(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribL4dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribLPointerEXT(uint, int, VertexAttribLType, int, void*)"/>
            public static unsafe void VertexAttribLPointerEXT(uint index, int size, VertexAttribLType type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexAttribLPointerEXT(index, size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexAttribLPointerEXT(uint, int, VertexAttribLType, int, void*)"/>
            public static unsafe void VertexAttribLPointerEXT<T1>(uint index, VertexAttribLType type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                int size = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribLPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribLPointerEXT(uint, int, VertexAttribLType, int, void*)"/>
            public static unsafe void VertexAttribLPointerEXT<T1>(uint index, VertexAttribLType type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                int size = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribLPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribLPointerEXT(uint, int, VertexAttribLType, int, void*)"/>
            public static unsafe void VertexAttribLPointerEXT<T1>(uint index, int size, VertexAttribLType type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexAttribLPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexPointerEXT(int, VertexPointerType, int, int, void*)"/>
            public static unsafe void VertexPointerEXT(int size, VertexPointerType type, int stride, int count, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexPointerEXT(size, type, stride, count, pointer_vptr);
            }
            /// <inheritdoc cref="VertexPointerEXT(int, VertexPointerType, int, int, void*)"/>
            public static unsafe void VertexPointerEXT<T1>(int size, VertexPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexPointerEXT(int, VertexPointerType, int, int, void*)"/>
            public static unsafe void VertexPointerEXT<T1>(int size, VertexPointerType type, int stride, int count, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexPointerEXT(int, VertexPointerType, int, int, void*)"/>
            public static unsafe void VertexPointerEXT<T1>(int size, VertexPointerType type, int stride, int count, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightfvEXT(float*)"/>
            public static unsafe void VertexWeightfvEXT(ReadOnlySpan<float> weight)
            {
                fixed (float* weight_ptr = weight)
                {
                    VertexWeightfvEXT(weight_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightfvEXT(float*)"/>
            public static unsafe void VertexWeightfvEXT(float[] weight)
            {
                fixed (float* weight_ptr = weight)
                {
                    VertexWeightfvEXT(weight_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightfvEXT(float*)"/>
            public static unsafe void VertexWeightfvEXT(in float weight)
            {
                fixed (float* weight_ptr = &weight)
                {
                    VertexWeightfvEXT(weight_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightPointerEXT(int, VertexWeightPointerTypeEXT, int, void*)"/>
            public static unsafe void VertexWeightPointerEXT(int size, VertexWeightPointerTypeEXT type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexWeightPointerEXT(size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexWeightPointerEXT(int, VertexWeightPointerTypeEXT, int, void*)"/>
            public static unsafe void VertexWeightPointerEXT<T1>(int size, VertexWeightPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexWeightPointerEXT(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightPointerEXT(int, VertexWeightPointerTypeEXT, int, void*)"/>
            public static unsafe void VertexWeightPointerEXT<T1>(int size, VertexWeightPointerTypeEXT type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexWeightPointerEXT(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightPointerEXT(int, VertexWeightPointerTypeEXT, int, void*)"/>
            public static unsafe void VertexWeightPointerEXT<T1>(int size, VertexWeightPointerTypeEXT type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexWeightPointerEXT(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="WaitSemaphoreEXT(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void WaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, ReadOnlySpan<int> buffers, uint numTextureBarriers, ReadOnlySpan<int> textures, ReadOnlySpan<TextureLayout> srcLayouts)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        fixed (TextureLayout* srcLayouts_ptr = srcLayouts)
                        {
                            WaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, srcLayouts_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="WaitSemaphoreEXT(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void WaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, int[] buffers, uint numTextureBarriers, int[] textures, TextureLayout[] srcLayouts)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        fixed (TextureLayout* srcLayouts_ptr = srcLayouts)
                        {
                            WaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, srcLayouts_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="WaitSemaphoreEXT(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void WaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, in int buffers, uint numTextureBarriers, in int textures, in TextureLayout srcLayouts)
            {
                fixed (int* buffers_ptr = &buffers)
                fixed (int* textures_ptr = &textures)
                fixed (TextureLayout* srcLayouts_ptr = &srcLayouts)
                {
                    WaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, srcLayouts_ptr);
                }
            }
            /// <inheritdoc cref="WindowRectanglesEXT(All, int, int*)"/>
            public static unsafe void WindowRectanglesEXT(All mode, int count, ReadOnlySpan<int> box)
            {
                fixed (int* box_ptr = box)
                {
                    WindowRectanglesEXT(mode, count, box_ptr);
                }
            }
            /// <inheritdoc cref="WindowRectanglesEXT(All, int, int*)"/>
            public static unsafe void WindowRectanglesEXT(All mode, int count, int[] box)
            {
                fixed (int* box_ptr = box)
                {
                    WindowRectanglesEXT(mode, count, box_ptr);
                }
            }
            /// <inheritdoc cref="WindowRectanglesEXT(All, int, int*)"/>
            public static unsafe void WindowRectanglesEXT(All mode, int count, in int box)
            {
                fixed (int* box_ptr = &box)
                {
                    WindowRectanglesEXT(mode, count, box_ptr);
                }
            }
        }
        public static unsafe partial class GREMEDY
        {
            /// <inheritdoc cref="StringMarkerGREMEDY(int, void*)"/>
            public static unsafe void StringMarkerGREMEDY(int len, IntPtr str)
            {
                void* str_vptr = (void*)str;
                StringMarkerGREMEDY(len, str_vptr);
            }
            /// <inheritdoc cref="StringMarkerGREMEDY(int, void*)"/>
            public static unsafe void StringMarkerGREMEDY<T1>(ReadOnlySpan<T1> str)
                where T1 : unmanaged
            {
                int len = (int)(str.Length * sizeof(T1));
                fixed (void* str_ptr = str)
                {
                    StringMarkerGREMEDY(len, str_ptr);
                }
            }
            /// <inheritdoc cref="StringMarkerGREMEDY(int, void*)"/>
            public static unsafe void StringMarkerGREMEDY<T1>(T1[] str)
                where T1 : unmanaged
            {
                int len = (int)(str.Length * sizeof(T1));
                fixed (void* str_ptr = str)
                {
                    StringMarkerGREMEDY(len, str_ptr);
                }
            }
            /// <inheritdoc cref="StringMarkerGREMEDY(int, void*)"/>
            public static unsafe void StringMarkerGREMEDY<T1>(int len, in T1 str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = &str)
                {
                    StringMarkerGREMEDY(len, str_ptr);
                }
            }
        }
        public static unsafe partial class HP
        {
            /// <inheritdoc cref="GetImageTransformParameterfvHP(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void GetImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetImageTransformParameterfvHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameterfvHP(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void GetImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetImageTransformParameterfvHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameterfvHP(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void GetImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetImageTransformParameterfvHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameterfvHP(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe float GetImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetImageTransformParameterfvHP(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetImageTransformParameterivHP(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void GetImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetImageTransformParameterivHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameterivHP(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void GetImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetImageTransformParameterivHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameterivHP(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void GetImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetImageTransformParameterivHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameterivHP(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe int GetImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetImageTransformParameterivHP(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="ImageTransformParameterfvHP(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void ImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ImageTransformParameterfvHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameterfvHP(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void ImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ImageTransformParameterfvHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameterfvHP(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void ImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ImageTransformParameterfvHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameterivHP(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void ImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ImageTransformParameterivHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameterivHP(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void ImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ImageTransformParameterivHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameterivHP(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void ImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ImageTransformParameterivHP(target, pname, parameters_ptr);
                }
            }
        }
        public static unsafe partial class IBM
        {
            /// <inheritdoc cref="MultiModeDrawArraysIBM(PrimitiveType*, int*, int*, int, int)"/>
            public static unsafe void MultiModeDrawArraysIBM(ReadOnlySpan<PrimitiveType> mode, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int primcount, int modestride)
            {
                fixed (PrimitiveType* mode_ptr = mode)
                {
                    fixed (int* first_ptr = first)
                    {
                        fixed (int* count_ptr = count)
                        {
                            MultiModeDrawArraysIBM(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                        }
                    }
                }
            }
            /// <inheritdoc cref="MultiModeDrawArraysIBM(PrimitiveType*, int*, int*, int, int)"/>
            public static unsafe void MultiModeDrawArraysIBM(PrimitiveType[] mode, int[] first, int[] count, int primcount, int modestride)
            {
                fixed (PrimitiveType* mode_ptr = mode)
                {
                    fixed (int* first_ptr = first)
                    {
                        fixed (int* count_ptr = count)
                        {
                            MultiModeDrawArraysIBM(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                        }
                    }
                }
            }
            /// <inheritdoc cref="MultiModeDrawArraysIBM(PrimitiveType*, int*, int*, int, int)"/>
            public static unsafe void MultiModeDrawArraysIBM(in PrimitiveType mode, in int first, in int count, int primcount, int modestride)
            {
                fixed (PrimitiveType* mode_ptr = &mode)
                fixed (int* first_ptr = &first)
                fixed (int* count_ptr = &count)
                {
                    MultiModeDrawArraysIBM(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                }
            }
            /// <inheritdoc cref="MultiModeDrawElementsIBM(PrimitiveType*, int*, DrawElementsType, void**, int, int)"/>
            public static unsafe void MultiModeDrawElementsIBM(ReadOnlySpan<PrimitiveType> mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int primcount, int modestride)
            {
                fixed (PrimitiveType* mode_ptr = mode)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiModeDrawElementsIBM(mode_ptr, count_ptr, type, indices, primcount, modestride);
                    }
                }
            }
            /// <inheritdoc cref="MultiModeDrawElementsIBM(PrimitiveType*, int*, DrawElementsType, void**, int, int)"/>
            public static unsafe void MultiModeDrawElementsIBM(PrimitiveType[] mode, int[] count, DrawElementsType type, void** indices, int primcount, int modestride)
            {
                fixed (PrimitiveType* mode_ptr = mode)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiModeDrawElementsIBM(mode_ptr, count_ptr, type, indices, primcount, modestride);
                    }
                }
            }
            /// <inheritdoc cref="MultiModeDrawElementsIBM(PrimitiveType*, int*, DrawElementsType, void**, int, int)"/>
            public static unsafe void MultiModeDrawElementsIBM(in PrimitiveType mode, in int count, DrawElementsType type, void** indices, int primcount, int modestride)
            {
                fixed (PrimitiveType* mode_ptr = &mode)
                fixed (int* count_ptr = &count)
                {
                    MultiModeDrawElementsIBM(mode_ptr, count_ptr, type, indices, primcount, modestride);
                }
            }
        }
        public static unsafe partial class INGR
        {
        }
        public static unsafe partial class INTEL
        {
            /// <inheritdoc cref="CreatePerfQueryINTEL(uint, int*)"/>
            public static unsafe void CreatePerfQueryINTEL(uint queryId, ref int queryHandle)
            {
                fixed (int* queryHandle_ptr = &queryHandle)
                {
                    CreatePerfQueryINTEL(queryId, queryHandle_ptr);
                }
            }
            /// <inheritdoc cref="GetFirstPerfQueryIdINTEL(uint*)"/>
            public static unsafe void GetFirstPerfQueryIdINTEL(ref uint queryId)
            {
                fixed (uint* queryId_ptr = &queryId)
                {
                    GetFirstPerfQueryIdINTEL(queryId_ptr);
                }
            }
            /// <inheritdoc cref="GetFirstPerfQueryIdINTEL(uint*)"/>
            public static unsafe uint GetFirstPerfQueryIdINTEL()
            {
                uint queryId_val;
                uint* queryId = &queryId_val;
                GetFirstPerfQueryIdINTEL(queryId);
                return queryId_val;
            }
            /// <inheritdoc cref="GetNextPerfQueryIdINTEL(uint, uint*)"/>
            public static unsafe void GetNextPerfQueryIdINTEL(uint queryId, ref uint nextQueryId)
            {
                fixed (uint* nextQueryId_ptr = &nextQueryId)
                {
                    GetNextPerfQueryIdINTEL(queryId, nextQueryId_ptr);
                }
            }
            /// <inheritdoc cref="GetNextPerfQueryIdINTEL(uint, uint*)"/>
            public static unsafe uint GetNextPerfQueryIdINTEL(uint queryId)
            {
                uint nextQueryId_val;
                uint* nextQueryId = &nextQueryId_val;
                GetNextPerfQueryIdINTEL(queryId, nextQueryId);
                return nextQueryId_val;
            }
            /// <inheritdoc cref="GetPerfCounterInfoINTEL(uint, uint, uint, byte*, uint, byte*, uint*, uint*, uint*, uint*, ulong*)"/>
            public static unsafe void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, out string counterName, uint counterDescLength, out string counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
            {
                fixed (uint* counterOffset_ptr = &counterOffset)
                fixed (uint* counterDataSize_ptr = &counterDataSize)
                fixed (uint* counterTypeEnum_ptr = &counterTypeEnum)
                fixed (uint* counterDataTypeEnum_ptr = &counterDataTypeEnum)
                fixed (ulong* rawCounterMaxValue_ptr = &rawCounterMaxValue)
                {
                    var counterName_ptr = (byte*)Marshal.AllocCoTaskMem((int)counterNameLength);
                    var counterDesc_ptr = (byte*)Marshal.AllocCoTaskMem((int)counterDescLength);
                    GetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName_ptr, counterDescLength, counterDesc_ptr, counterOffset_ptr, counterDataSize_ptr, counterTypeEnum_ptr, counterDataTypeEnum_ptr, rawCounterMaxValue_ptr);
                    counterDesc = Marshal.PtrToStringUTF8((IntPtr)counterDesc_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterDesc_ptr);
                    counterName = Marshal.PtrToStringUTF8((IntPtr)counterName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterName_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfCounterInfoINTEL(uint, uint, uint, byte*, uint, byte*, uint*, uint*, uint*, uint*, ulong*)"/>
            public static unsafe ulong GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, out string counterName, uint counterDescLength, out string counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum)
            {
                ulong rawCounterMaxValue_val;
                fixed (uint* counterOffset_ptr = &counterOffset)
                fixed (uint* counterDataSize_ptr = &counterDataSize)
                fixed (uint* counterTypeEnum_ptr = &counterTypeEnum)
                fixed (uint* counterDataTypeEnum_ptr = &counterDataTypeEnum)
                {
                    var counterName_ptr = (byte*)Marshal.AllocCoTaskMem((int)counterNameLength);
                    var counterDesc_ptr = (byte*)Marshal.AllocCoTaskMem((int)counterDescLength);
                    ulong* rawCounterMaxValue = &rawCounterMaxValue_val;
                    GetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName_ptr, counterDescLength, counterDesc_ptr, counterOffset_ptr, counterDataSize_ptr, counterTypeEnum_ptr, counterDataTypeEnum_ptr, rawCounterMaxValue);
                    counterDesc = Marshal.PtrToStringUTF8((IntPtr)counterDesc_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterDesc_ptr);
                    counterName = Marshal.PtrToStringUTF8((IntPtr)counterName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterName_ptr);
                }
                return rawCounterMaxValue_val;
            }
            /// <inheritdoc cref="GetPerfQueryDataINTEL(int, PerfQueryDataFlags, int, void*, uint*)"/>
            public static unsafe void GetPerfQueryDataINTEL(int queryHandle, PerfQueryDataFlags flags, int dataSize, IntPtr data, ref uint bytesWritten)
            {
                fixed (uint* bytesWritten_ptr = &bytesWritten)
                {
                    void* data_vptr = (void*)data;
                    GetPerfQueryDataINTEL(queryHandle, flags, dataSize, data_vptr, bytesWritten_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryDataINTEL(int, PerfQueryDataFlags, int, void*, uint*)"/>
            public static unsafe void GetPerfQueryDataINTEL<T1>(int queryHandle, PerfQueryDataFlags flags, int dataSize, ref T1 data, ref uint bytesWritten)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                fixed (uint* bytesWritten_ptr = &bytesWritten)
                {
                    GetPerfQueryDataINTEL(queryHandle, flags, dataSize, data_ptr, bytesWritten_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryDataINTEL(int, PerfQueryDataFlags, int, void*, uint*)"/>
            public static unsafe uint GetPerfQueryDataINTEL(int queryHandle, PerfQueryDataFlags flags, int dataSize, IntPtr data)
            {
                uint bytesWritten_val;
                void* data_vptr = (void*)data;
                uint* bytesWritten = &bytesWritten_val;
                GetPerfQueryDataINTEL(queryHandle, flags, dataSize, data_vptr, bytesWritten);
                return bytesWritten_val;
            }
            /// <inheritdoc cref="GetPerfQueryDataINTEL(int, PerfQueryDataFlags, int, void*, uint*)"/>
            public static unsafe uint GetPerfQueryDataINTEL<T1>(int queryHandle, PerfQueryDataFlags flags, int dataSize, ref T1 data)
                where T1 : unmanaged
            {
                uint bytesWritten_val;
                fixed (void* data_ptr = &data)
                {
                    uint* bytesWritten = &bytesWritten_val;
                    GetPerfQueryDataINTEL(queryHandle, flags, dataSize, data_ptr, bytesWritten);
                }
                return bytesWritten_val;
            }
            /// <inheritdoc cref="GetPerfQueryIdByNameINTEL(byte*, uint*)"/>
            public static unsafe void GetPerfQueryIdByNameINTEL(byte* queryName, ref uint queryId)
            {
                fixed (uint* queryId_ptr = &queryId)
                {
                    GetPerfQueryIdByNameINTEL(queryName, queryId_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryIdByNameINTEL(byte*, uint*)"/>
            public static unsafe uint GetPerfQueryIdByNameINTEL(byte* queryName)
            {
                uint queryId_val;
                uint* queryId = &queryId_val;
                GetPerfQueryIdByNameINTEL(queryName, queryId);
                return queryId_val;
            }
            /// <inheritdoc cref="GetPerfQueryInfoINTEL(uint, uint, byte*, uint*, uint*, uint*, PerformanceQueryCapsMaskINTEL*)"/>
            public static unsafe string GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, ref uint dataSize, ref uint noCounters, ref uint noInstances, ref PerformanceQueryCapsMaskINTEL capsMask)
            {
                string queryName;
                fixed (uint* dataSize_ptr = &dataSize)
                fixed (uint* noCounters_ptr = &noCounters)
                fixed (uint* noInstances_ptr = &noInstances)
                fixed (PerformanceQueryCapsMaskINTEL* capsMask_ptr = &capsMask)
                {
                    var queryName_ptr = (byte*)Marshal.AllocCoTaskMem((int)queryNameLength);
                    GetPerfQueryInfoINTEL(queryId, queryNameLength, queryName_ptr, dataSize_ptr, noCounters_ptr, noInstances_ptr, capsMask_ptr);
                    queryName = Marshal.PtrToStringUTF8((IntPtr)queryName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)queryName_ptr);
                }
                return queryName;
            }
            /// <inheritdoc cref="GetPerfQueryInfoINTEL(uint, uint, byte*, uint*, uint*, uint*, PerformanceQueryCapsMaskINTEL*)"/>
            public static unsafe void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, out string queryName, ref uint dataSize, ref uint noCounters, ref uint noInstances, ref PerformanceQueryCapsMaskINTEL capsMask)
            {
                fixed (uint* dataSize_ptr = &dataSize)
                fixed (uint* noCounters_ptr = &noCounters)
                fixed (uint* noInstances_ptr = &noInstances)
                fixed (PerformanceQueryCapsMaskINTEL* capsMask_ptr = &capsMask)
                {
                    var queryName_ptr = (byte*)Marshal.AllocCoTaskMem((int)queryNameLength);
                    GetPerfQueryInfoINTEL(queryId, queryNameLength, queryName_ptr, dataSize_ptr, noCounters_ptr, noInstances_ptr, capsMask_ptr);
                    queryName = Marshal.PtrToStringUTF8((IntPtr)queryName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)queryName_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryInfoINTEL(uint, uint, byte*, uint*, uint*, uint*, PerformanceQueryCapsMaskINTEL*)"/>
            public static unsafe PerformanceQueryCapsMaskINTEL GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, out string queryName, ref uint dataSize, ref uint noCounters, ref uint noInstances)
            {
                PerformanceQueryCapsMaskINTEL capsMask_val;
                fixed (uint* dataSize_ptr = &dataSize)
                fixed (uint* noCounters_ptr = &noCounters)
                fixed (uint* noInstances_ptr = &noInstances)
                {
                    var queryName_ptr = (byte*)Marshal.AllocCoTaskMem((int)queryNameLength);
                    PerformanceQueryCapsMaskINTEL* capsMask = &capsMask_val;
                    GetPerfQueryInfoINTEL(queryId, queryNameLength, queryName_ptr, dataSize_ptr, noCounters_ptr, noInstances_ptr, capsMask);
                    queryName = Marshal.PtrToStringUTF8((IntPtr)queryName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)queryName_ptr);
                }
                return capsMask_val;
            }
            /// <inheritdoc cref="MapTexture2DINTEL(int, int, uint, int*, All*)"/>
            public static unsafe void* MapTexture2DINTEL(int texture, int level, uint access, Span<int> stride, Span<All> layout)
            {
                void* returnValue;
                fixed (int* stride_ptr = stride)
                {
                    fixed (All* layout_ptr = layout)
                    {
                        returnValue = MapTexture2DINTEL(texture, level, access, stride_ptr, layout_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="MapTexture2DINTEL(int, int, uint, int*, All*)"/>
            public static unsafe void* MapTexture2DINTEL(int texture, int level, uint access, int[] stride, All[] layout)
            {
                void* returnValue;
                fixed (int* stride_ptr = stride)
                {
                    fixed (All* layout_ptr = layout)
                    {
                        returnValue = MapTexture2DINTEL(texture, level, access, stride_ptr, layout_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="MapTexture2DINTEL(int, int, uint, int*, All*)"/>
            public static unsafe void* MapTexture2DINTEL(int texture, int level, uint access, ref int stride, ref All layout)
            {
                void* returnValue;
                fixed (int* stride_ptr = &stride)
                fixed (All* layout_ptr = &layout)
                {
                    returnValue = MapTexture2DINTEL(texture, level, access, stride_ptr, layout_ptr);
                }
                return returnValue;
            }
        }
        public static unsafe partial class KHR
        {
            /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallback(GLDebugProc callback, IntPtr userParam)
            {
                void* userParam_vptr = (void*)userParam;
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallback(callback_ptr, userParam_vptr);
            }
            /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallback<T1>(GLDebugProc callback, in T1 userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = &userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallback(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallbackKHR(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackKHR(GLDebugProcKHR callback, IntPtr userParam)
            {
                void* userParam_vptr = (void*)userParam;
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallbackKHR(callback_ptr, userParam_vptr);
            }
            /// <inheritdoc cref="DebugMessageCallbackKHR(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackKHR<T1>(GLDebugProcKHR callback, in T1 userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = &userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallbackKHR(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, ReadOnlySpan<uint> ids, bool enabled)
            {
                int count = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, uint[] ids, bool enabled)
            {
                int count = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, in uint ids, bool enabled)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControlKHR(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControlKHR(DebugSource source, DebugType type, DebugSeverity severity, int count, in uint ids, bool enabled)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    DebugMessageControlKHR(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageInsert(DebugSource, DebugType, uint, DebugSeverity, int, byte*)"/>
            public static unsafe void DebugMessageInsert(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
            {
                byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
                DebugMessageInsert(source, type, id, severity, length, buf_ptr);
                Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
            }
            /// <inheritdoc cref="DebugMessageInsertKHR(DebugSource, DebugType, uint, DebugSeverity, int, byte*)"/>
            public static unsafe void DebugMessageInsertKHR(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
            {
                byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
                DebugMessageInsertKHR(source, type, id, severity, length, buf_ptr);
                Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
            }
            /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, Span<DebugSource> sources, Span<DebugType> types, Span<uint> ids, Span<DebugSeverity> severities, Span<int> lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = sources)
                {
                    fixed (DebugType* types_ptr = types)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugSeverity* severities_ptr = severities)
                            {
                                fixed (int* lengths_ptr = lengths)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, DebugSource[] sources, DebugType[] types, uint[] ids, DebugSeverity[] severities, int[] lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = sources)
                {
                    fixed (DebugType* types_ptr = types)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugSeverity* severities_ptr = severities)
                            {
                                fixed (int* lengths_ptr = lengths)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = &sources)
                fixed (DebugType* types_ptr = &types)
                fixed (uint* ids_ptr = &ids)
                fixed (DebugSeverity* severities_ptr = &severities)
                fixed (int* lengths_ptr = &lengths)
                {
                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogKHR(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogKHR(uint count, int bufSize, Span<DebugSource> sources, Span<DebugType> types, Span<uint> ids, Span<DebugSeverity> severities, Span<int> lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = sources)
                {
                    fixed (DebugType* types_ptr = types)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugSeverity* severities_ptr = severities)
                            {
                                fixed (int* lengths_ptr = lengths)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLogKHR(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogKHR(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogKHR(uint count, int bufSize, DebugSource[] sources, DebugType[] types, uint[] ids, DebugSeverity[] severities, int[] lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = sources)
                {
                    fixed (DebugType* types_ptr = types)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugSeverity* severities_ptr = severities)
                            {
                                fixed (int* lengths_ptr = lengths)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLogKHR(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogKHR(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogKHR(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = &sources)
                fixed (DebugType* types_ptr = &types)
                fixed (uint* ids_ptr = &ids)
                fixed (DebugSeverity* severities_ptr = &severities)
                fixed (int* lengths_ptr = &lengths)
                {
                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    returnValue = GetDebugMessageLogKHR(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
            public static unsafe void GetnUniformf(int program, int location, Span<float> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
            public static unsafe void GetnUniformf(int program, int location, float[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
            public static unsafe void GetnUniformf(int program, int location, int bufSize, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetnUniformfv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
            public static unsafe float GetnUniformf(int program, int location, int bufSize)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetnUniformfv(program, location, bufSize, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetnUniformfvKHR(int, int, int, float*)"/>
            public static unsafe void GetnUniformfvKHR(int program, int location, Span<float> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfvKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfvKHR(int, int, int, float*)"/>
            public static unsafe void GetnUniformfvKHR(int program, int location, float[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfvKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfvKHR(int, int, int, float*)"/>
            public static unsafe void GetnUniformfvKHR(int program, int location, int bufSize, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetnUniformfvKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfvKHR(int, int, int, float*)"/>
            public static unsafe float GetnUniformfvKHR(int program, int location, int bufSize)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetnUniformfvKHR(program, location, bufSize, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
            public static unsafe void GetnUniformi(int program, int location, Span<int> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
            public static unsafe void GetnUniformi(int program, int location, int[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
            public static unsafe void GetnUniformi(int program, int location, int bufSize, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetnUniformiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
            public static unsafe int GetnUniformi(int program, int location, int bufSize)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetnUniformiv(program, location, bufSize, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetnUniformivKHR(int, int, int, int*)"/>
            public static unsafe void GetnUniformivKHR(int program, int location, Span<int> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformivKHR(int, int, int, int*)"/>
            public static unsafe void GetnUniformivKHR(int program, int location, int[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformivKHR(int, int, int, int*)"/>
            public static unsafe void GetnUniformivKHR(int program, int location, int bufSize, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetnUniformivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformivKHR(int, int, int, int*)"/>
            public static unsafe int GetnUniformivKHR(int program, int location, int bufSize)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetnUniformivKHR(program, location, bufSize, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
            public static unsafe void GetnUniformui(int program, int location, Span<uint> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
            public static unsafe void GetnUniformui(int program, int location, uint[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
            public static unsafe void GetnUniformui(int program, int location, int bufSize, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetnUniformuiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
            public static unsafe uint GetnUniformui(int program, int location, int bufSize)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetnUniformuiv(program, location, bufSize, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetnUniformuivKHR(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuivKHR(int program, int location, Span<uint> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuivKHR(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuivKHR(int program, int location, uint[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuivKHR(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuivKHR(int program, int location, int bufSize, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetnUniformuivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuivKHR(int, int, int, uint*)"/>
            public static unsafe uint GetnUniformuivKHR(int program, int location, int bufSize)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetnUniformuivKHR(program, location, bufSize, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, Span<int> length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, Span<int> length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, int[] length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, int[] length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, ref int length)
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, ref int length, out string label)
            {
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectLabelKHR(All, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabelKHR(All identifier, uint name, int bufSize, ref int length)
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabelKHR(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabelKHR(All, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabelKHR(All identifier, uint name, int bufSize, ref int length, out string label)
            {
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabelKHR(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel(IntPtr ptr, int bufSize, Span<int> length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, Span<int> length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel(IntPtr ptr, int bufSize, int[] length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, int[] length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel(IntPtr ptr, int bufSize, ref int length)
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, ref int length, out string label)
            {
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, Span<int> length)
                where T1 : unmanaged
            {
                string label;
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, Span<int> length, out string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, int[] length)
                where T1 : unmanaged
            {
                string label;
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, int[] length, out string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, ref int length)
                where T1 : unmanaged
            {
                string label;
                fixed (void* ptr_ptr = &ptr)
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, ref int length, out string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR(IntPtr ptr, int bufSize, Span<int> length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR(IntPtr ptr, int bufSize, Span<int> length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR(IntPtr ptr, int bufSize, int[] length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR(IntPtr ptr, int bufSize, int[] length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR(IntPtr ptr, int bufSize, ref int length)
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR(IntPtr ptr, int bufSize, ref int length, out string label)
            {
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR<T1>(in T1 ptr, int bufSize, Span<int> length)
                where T1 : unmanaged
            {
                string label;
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR<T1>(in T1 ptr, int bufSize, Span<int> length, out string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR<T1>(in T1 ptr, int bufSize, int[] length)
                where T1 : unmanaged
            {
                string label;
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR<T1>(in T1 ptr, int bufSize, int[] length, out string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR<T1>(in T1 ptr, int bufSize, ref int length)
                where T1 : unmanaged
            {
                string label;
                fixed (void* ptr_ptr = &ptr)
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR<T1>(in T1 ptr, int bufSize, ref int length, out string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetPointerv(GetPointervPName, void**)"/>
            public static unsafe void GetPointer(GetPointervPName pname, void** parameters)
            {
                GetPointerv(pname, parameters);
            }
            /// <inheritdoc cref="GetPointerv(GetPointervPName, void**)"/>
            public static unsafe void* GetPointer(GetPointervPName pname)
            {
                void* parameters_val;
                void** parameters = &parameters_val;
                GetPointerv(pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetPointervKHR(All, void**)"/>
            public static unsafe void GetPointervKHR(All pname, void** parameters)
            {
                GetPointervKHR_(pname, parameters);
            }
            /// <inheritdoc cref="GetPointervKHR(All, void**)"/>
            public static unsafe void* GetPointervKHR(All pname)
            {
                void* parameters_val;
                void** parameters = &parameters_val;
                GetPointervKHR_(pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="ObjectLabel(ObjectIdentifier, uint, int, byte*)"/>
            public static unsafe void ObjectLabel(ObjectIdentifier identifier, uint name, int length, string label)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                ObjectLabel(identifier, name, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            /// <inheritdoc cref="ObjectLabelKHR(ObjectIdentifier, uint, int, byte*)"/>
            public static unsafe void ObjectLabelKHR(ObjectIdentifier identifier, uint name, int length, string label)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                ObjectLabelKHR(identifier, name, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabel(IntPtr ptr, int length, string label)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                void* ptr_vptr = (void*)ptr;
                ObjectPtrLabel(ptr_vptr, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabel<T1>(in T1 ptr, int length, string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                {
                    byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                    ObjectPtrLabel(ptr_ptr, length, label_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="ObjectPtrLabelKHR(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabelKHR(IntPtr ptr, int length, string label)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                void* ptr_vptr = (void*)ptr;
                ObjectPtrLabelKHR(ptr_vptr, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            /// <inheritdoc cref="ObjectPtrLabelKHR(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabelKHR<T1>(in T1 ptr, int length, string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                {
                    byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                    ObjectPtrLabelKHR(ptr_ptr, length, label_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="PushDebugGroup(DebugSource, uint, int, byte*)"/>
            public static unsafe void PushDebugGroup(DebugSource source, uint id, int length, string message)
            {
                byte* message_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(message);
                PushDebugGroup(source, id, length, message_ptr);
                Marshal.FreeCoTaskMem((IntPtr)message_ptr);
            }
            /// <inheritdoc cref="PushDebugGroupKHR(DebugSource, uint, int, byte*)"/>
            public static unsafe void PushDebugGroupKHR(DebugSource source, uint id, int length, string message)
            {
                byte* message_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(message);
                PushDebugGroupKHR(source, id, length, message_ptr);
                Marshal.FreeCoTaskMem((IntPtr)message_ptr);
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ReadnPixels(x, y, width, height, format, type, bufSize, data_vptr);
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, Span<T1> data)
                where T1 : unmanaged
            {
                int bufSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                int bufSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixelsKHR(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsKHR(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_vptr);
            }
            /// <inheritdoc cref="ReadnPixelsKHR(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsKHR<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, Span<T1> data)
                where T1 : unmanaged
            {
                int bufSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixelsKHR(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsKHR<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                int bufSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixelsKHR(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsKHR<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
        }
        public static unsafe partial class MESA
        {
            /// <inheritdoc cref="GetFramebufferParameterivMESA(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameterivMESA(FramebufferTarget target, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameterivMESA(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameterivMESA(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameterivMESA(FramebufferTarget target, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameterivMESA(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameterivMESA(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameterivMESA(FramebufferTarget target, FramebufferAttachmentParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFramebufferParameterivMESA(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameterivMESA(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe int GetFramebufferParameterivMESA(FramebufferTarget target, FramebufferAttachmentParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetFramebufferParameterivMESA(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="WindowPos2dvMESA(double*)"/>
            public static unsafe void WindowPos2dvMESA(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos2dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dvMESA(double*)"/>
            public static unsafe void WindowPos2dvMESA(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos2dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dvMESA(double*)"/>
            public static unsafe void WindowPos2dvMESA(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    WindowPos2dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fvMESA(float*)"/>
            public static unsafe void WindowPos2fvMESA(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos2fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fvMESA(float*)"/>
            public static unsafe void WindowPos2fvMESA(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos2fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fvMESA(float*)"/>
            public static unsafe void WindowPos2fvMESA(in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    WindowPos2fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2ivMESA(int*)"/>
            public static unsafe void WindowPos2ivMESA(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos2ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2ivMESA(int*)"/>
            public static unsafe void WindowPos2ivMESA(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos2ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2ivMESA(int*)"/>
            public static unsafe void WindowPos2ivMESA(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    WindowPos2ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2svMESA(short*)"/>
            public static unsafe void WindowPos2svMESA(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos2svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2svMESA(short*)"/>
            public static unsafe void WindowPos2svMESA(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos2svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2svMESA(short*)"/>
            public static unsafe void WindowPos2svMESA(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    WindowPos2svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dvMESA(double*)"/>
            public static unsafe void WindowPos3dvMESA(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos3dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dvMESA(double*)"/>
            public static unsafe void WindowPos3dvMESA(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos3dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dvMESA(double*)"/>
            public static unsafe void WindowPos3dvMESA(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    WindowPos3dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fvMESA(float*)"/>
            public static unsafe void WindowPos3fvMESA(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos3fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fvMESA(float*)"/>
            public static unsafe void WindowPos3fvMESA(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos3fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fvMESA(float*)"/>
            public static unsafe void WindowPos3fvMESA(in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    WindowPos3fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3ivMESA(int*)"/>
            public static unsafe void WindowPos3ivMESA(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos3ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3ivMESA(int*)"/>
            public static unsafe void WindowPos3ivMESA(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos3ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3ivMESA(int*)"/>
            public static unsafe void WindowPos3ivMESA(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    WindowPos3ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3svMESA(short*)"/>
            public static unsafe void WindowPos3svMESA(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos3svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3svMESA(short*)"/>
            public static unsafe void WindowPos3svMESA(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos3svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3svMESA(short*)"/>
            public static unsafe void WindowPos3svMESA(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    WindowPos3svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4dvMESA(double*)"/>
            public static unsafe void WindowPos4dvMESA(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos4dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4dvMESA(double*)"/>
            public static unsafe void WindowPos4dvMESA(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos4dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4dvMESA(double*)"/>
            public static unsafe void WindowPos4dvMESA(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    WindowPos4dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4fvMESA(float*)"/>
            public static unsafe void WindowPos4fvMESA(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos4fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4fvMESA(float*)"/>
            public static unsafe void WindowPos4fvMESA(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos4fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4fvMESA(float*)"/>
            public static unsafe void WindowPos4fvMESA(in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    WindowPos4fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4ivMESA(int*)"/>
            public static unsafe void WindowPos4ivMESA(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos4ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4ivMESA(int*)"/>
            public static unsafe void WindowPos4ivMESA(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos4ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4ivMESA(int*)"/>
            public static unsafe void WindowPos4ivMESA(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    WindowPos4ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4svMESA(short*)"/>
            public static unsafe void WindowPos4svMESA(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos4svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4svMESA(short*)"/>
            public static unsafe void WindowPos4svMESA(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos4svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4svMESA(short*)"/>
            public static unsafe void WindowPos4svMESA(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    WindowPos4svMESA(v_ptr);
                }
            }
        }
        public static unsafe partial class NV
        {
            /// <inheritdoc cref="ActiveVaryingNV(int, byte*)"/>
            public static unsafe void ActiveVaryingNV(int program, string name)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                ActiveVaryingNV(program, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="AreProgramsResidentNV(int, int*, bool*)"/>
            public static unsafe bool AreProgramsResidentNV(int n, ReadOnlySpan<int> programs, Span<bool> residences)
            {
                bool returnValue;
                fixed (int* programs_ptr = programs)
                {
                    fixed (bool* residences_ptr = residences)
                    {
                        returnValue = AreProgramsResidentNV(n, programs_ptr, residences_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AreProgramsResidentNV(int, int*, bool*)"/>
            public static unsafe bool AreProgramsResidentNV(int n, int[] programs, bool[] residences)
            {
                bool returnValue;
                fixed (int* programs_ptr = programs)
                {
                    fixed (bool* residences_ptr = residences)
                    {
                        returnValue = AreProgramsResidentNV(n, programs_ptr, residences_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AreProgramsResidentNV(int, int*, bool*)"/>
            public static unsafe bool AreProgramsResidentNV(int n, in int programs, ref bool residences)
            {
                bool returnValue;
                fixed (int* programs_ptr = &programs)
                fixed (bool* residences_ptr = &residences)
                {
                    returnValue = AreProgramsResidentNV(n, programs_ptr, residences_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="Color3hvNV(Half*)"/>
            public static unsafe void Color3hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Color3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Color3hvNV(Half*)"/>
            public static unsafe void Color3hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Color3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Color3hvNV(Half*)"/>
            public static unsafe void Color3hvNV(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Color3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Color4hvNV(Half*)"/>
            public static unsafe void Color4hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Color4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Color4hvNV(Half*)"/>
            public static unsafe void Color4hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Color4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Color4hvNV(Half*)"/>
            public static unsafe void Color4hvNV(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Color4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameterfvNV(CombinerParameterNV, float*)"/>
            public static unsafe void CombinerParameterfvNV(CombinerParameterNV pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CombinerParameterfvNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameterfvNV(CombinerParameterNV, float*)"/>
            public static unsafe void CombinerParameterfvNV(CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CombinerParameterfvNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameterfvNV(CombinerParameterNV, float*)"/>
            public static unsafe void CombinerParameterfvNV(CombinerParameterNV pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    CombinerParameterfvNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameterivNV(CombinerParameterNV, int*)"/>
            public static unsafe void CombinerParameterivNV(CombinerParameterNV pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    CombinerParameterivNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameterivNV(CombinerParameterNV, int*)"/>
            public static unsafe void CombinerParameterivNV(CombinerParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    CombinerParameterivNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameterivNV(CombinerParameterNV, int*)"/>
            public static unsafe void CombinerParameterivNV(CombinerParameterNV pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    CombinerParameterivNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerStageParameterfvNV(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void CombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CombinerStageParameterfvNV(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerStageParameterfvNV(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void CombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CombinerStageParameterfvNV(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerStageParameterfvNV(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void CombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    CombinerStageParameterfvNV(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CoverageModulationTableNV(int, float*)"/>
            public static unsafe void CoverageModulationTableNV(ReadOnlySpan<float> v)
            {
                int n = (int)(v.Length);
                fixed (float* v_ptr = v)
                {
                    CoverageModulationTableNV(n, v_ptr);
                }
            }
            /// <inheritdoc cref="CoverageModulationTableNV(int, float*)"/>
            public static unsafe void CoverageModulationTableNV(float[] v)
            {
                int n = (int)(v.Length);
                fixed (float* v_ptr = v)
                {
                    CoverageModulationTableNV(n, v_ptr);
                }
            }
            /// <inheritdoc cref="CoverageModulationTableNV(int, float*)"/>
            public static unsafe void CoverageModulationTableNV(int n, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    CoverageModulationTableNV(n, v_ptr);
                }
            }
            /// <inheritdoc cref="CoverFillPathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverFillPathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverFillPathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverFillPathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        CoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="CoverFillPathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        CoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="CoverFillPathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    CoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        CoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        CoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    CoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CreateCommandListsNV(int, uint*)"/>
            public static unsafe void CreateCommandListsNV(Span<uint> lists)
            {
                int n = (int)(lists.Length);
                fixed (uint* lists_ptr = lists)
                {
                    CreateCommandListsNV(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="CreateCommandListsNV(int, uint*)"/>
            public static unsafe void CreateCommandListsNV(uint[] lists)
            {
                int n = (int)(lists.Length);
                fixed (uint* lists_ptr = lists)
                {
                    CreateCommandListsNV(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="CreateCommandListsNV(int, uint*)"/>
            public static unsafe void CreateCommandListsNV(int n, ref uint lists)
            {
                fixed (uint* lists_ptr = &lists)
                {
                    CreateCommandListsNV(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="CreateSemaphoresNV(int, uint*)"/>
            public static unsafe void CreateSemaphoresNV(Span<uint> semaphores)
            {
                int n = (int)(semaphores.Length);
                fixed (uint* semaphores_ptr = semaphores)
                {
                    CreateSemaphoresNV(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="CreateSemaphoresNV(int, uint*)"/>
            public static unsafe void CreateSemaphoresNV(uint[] semaphores)
            {
                int n = (int)(semaphores.Length);
                fixed (uint* semaphores_ptr = semaphores)
                {
                    CreateSemaphoresNV(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="CreateSemaphoresNV(int, uint*)"/>
            public static unsafe void CreateSemaphoresNV(int n, ref uint semaphores)
            {
                fixed (uint* semaphores_ptr = &semaphores)
                {
                    CreateSemaphoresNV(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="CreateStatesNV(int, uint*)"/>
            public static unsafe void CreateStatesNV(Span<uint> states)
            {
                int n = (int)(states.Length);
                fixed (uint* states_ptr = states)
                {
                    CreateStatesNV(n, states_ptr);
                }
            }
            /// <inheritdoc cref="CreateStatesNV(int, uint*)"/>
            public static unsafe void CreateStatesNV(uint[] states)
            {
                int n = (int)(states.Length);
                fixed (uint* states_ptr = states)
                {
                    CreateStatesNV(n, states_ptr);
                }
            }
            /// <inheritdoc cref="CreateStatesNV(int, uint*)"/>
            public static unsafe void CreateStatesNV(int n, ref uint states)
            {
                fixed (uint* states_ptr = &states)
                {
                    CreateStatesNV(n, states_ptr);
                }
            }
            /// <inheritdoc cref="DeleteCommandListsNV(int, uint*)"/>
            public static unsafe void DeleteCommandListsNV(ReadOnlySpan<uint> lists)
            {
                int n = (int)(lists.Length);
                fixed (uint* lists_ptr = lists)
                {
                    DeleteCommandListsNV(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="DeleteCommandListsNV(int, uint*)"/>
            public static unsafe void DeleteCommandListsNV(uint[] lists)
            {
                int n = (int)(lists.Length);
                fixed (uint* lists_ptr = lists)
                {
                    DeleteCommandListsNV(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="DeleteCommandListsNV(int, uint*)"/>
            public static unsafe void DeleteCommandListsNV(int n, in uint lists)
            {
                fixed (uint* lists_ptr = &lists)
                {
                    DeleteCommandListsNV(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFencesNV(int, uint*)"/>
            public static unsafe void DeleteFencesNV(ReadOnlySpan<uint> fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    DeleteFencesNV(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFencesNV(int, uint*)"/>
            public static unsafe void DeleteFencesNV(uint[] fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    DeleteFencesNV(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFencesNV(int, uint*)"/>
            public static unsafe void DeleteFencesNV(int n, in uint fences)
            {
                fixed (uint* fences_ptr = &fences)
                {
                    DeleteFencesNV(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteOcclusionQueriesNV(int, uint*)"/>
            public static unsafe void DeleteOcclusionQueriesNV(ReadOnlySpan<uint> ids)
            {
                int n = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DeleteOcclusionQueriesNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteOcclusionQueriesNV(int, uint*)"/>
            public static unsafe void DeleteOcclusionQueriesNV(uint[] ids)
            {
                int n = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DeleteOcclusionQueriesNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteOcclusionQueriesNV(int, uint*)"/>
            public static unsafe void DeleteOcclusionQueriesNV(int n, in uint ids)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    DeleteOcclusionQueriesNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramsNV(int, int*)"/>
            public static unsafe void DeleteProgramsNV(ReadOnlySpan<int> programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    DeleteProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramsNV(int, int*)"/>
            public static unsafe void DeleteProgramsNV(int[] programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    DeleteProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramsNV(int, int*)"/>
            public static unsafe void DeleteProgramsNV(int n, in int programs)
            {
                fixed (int* programs_ptr = &programs)
                {
                    DeleteProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueryResourceTagNV(int, int*)"/>
            public static unsafe void DeleteQueryResourceTagNV(ReadOnlySpan<int> tagIds)
            {
                int n = (int)(tagIds.Length);
                fixed (int* tagIds_ptr = tagIds)
                {
                    DeleteQueryResourceTagNV(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueryResourceTagNV(int, int*)"/>
            public static unsafe void DeleteQueryResourceTagNV(int[] tagIds)
            {
                int n = (int)(tagIds.Length);
                fixed (int* tagIds_ptr = tagIds)
                {
                    DeleteQueryResourceTagNV(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueryResourceTagNV(int, int*)"/>
            public static unsafe void DeleteQueryResourceTagNV(int n, in int tagIds)
            {
                fixed (int* tagIds_ptr = &tagIds)
                {
                    DeleteQueryResourceTagNV(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="DeleteStatesNV(int, uint*)"/>
            public static unsafe void DeleteStatesNV(ReadOnlySpan<uint> states)
            {
                int n = (int)(states.Length);
                fixed (uint* states_ptr = states)
                {
                    DeleteStatesNV(n, states_ptr);
                }
            }
            /// <inheritdoc cref="DeleteStatesNV(int, uint*)"/>
            public static unsafe void DeleteStatesNV(uint[] states)
            {
                int n = (int)(states.Length);
                fixed (uint* states_ptr = states)
                {
                    DeleteStatesNV(n, states_ptr);
                }
            }
            /// <inheritdoc cref="DeleteStatesNV(int, uint*)"/>
            public static unsafe void DeleteStatesNV(int n, in uint states)
            {
                fixed (uint* states_ptr = &states)
                {
                    DeleteStatesNV(n, states_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacksNV(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacksNV(ReadOnlySpan<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    DeleteTransformFeedbacksNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacksNV(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacksNV(int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    DeleteTransformFeedbacksNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacksNV(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacksNV(int n, in int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    DeleteTransformFeedbacksNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DrawCommandsAddressNV(All, ulong*, int*, uint)"/>
            public static unsafe void DrawCommandsAddressNV(All primitiveMode, in ulong indirects, in int sizes, uint count)
            {
                fixed (ulong* indirects_ptr = &indirects)
                fixed (int* sizes_ptr = &sizes)
                {
                    DrawCommandsAddressNV(primitiveMode, indirects_ptr, sizes_ptr, count);
                }
            }
            /// <inheritdoc cref="DrawCommandsNV(All, uint, IntPtr*, int*, uint)"/>
            public static unsafe void DrawCommandsNV(All primitiveMode, uint buffer, in IntPtr indirects, in int sizes, uint count)
            {
                fixed (IntPtr* indirects_ptr = &indirects)
                fixed (int* sizes_ptr = &sizes)
                {
                    DrawCommandsNV(primitiveMode, buffer, indirects_ptr, sizes_ptr, count);
                }
            }
            /// <inheritdoc cref="DrawCommandsStatesAddressNV(ulong*, int*, uint*, uint*, uint)"/>
            public static unsafe void DrawCommandsStatesAddressNV(in ulong indirects, in int sizes, in uint states, in uint fbos, uint count)
            {
                fixed (ulong* indirects_ptr = &indirects)
                fixed (int* sizes_ptr = &sizes)
                fixed (uint* states_ptr = &states)
                fixed (uint* fbos_ptr = &fbos)
                {
                    DrawCommandsStatesAddressNV(indirects_ptr, sizes_ptr, states_ptr, fbos_ptr, count);
                }
            }
            /// <inheritdoc cref="DrawCommandsStatesNV(int, IntPtr*, int*, uint*, uint*, uint)"/>
            public static unsafe void DrawCommandsStatesNV(int buffer, in IntPtr indirects, in int sizes, in uint states, in uint fbos, uint count)
            {
                fixed (IntPtr* indirects_ptr = &indirects)
                fixed (int* sizes_ptr = &sizes)
                fixed (uint* states_ptr = &states)
                fixed (uint* fbos_ptr = &fbos)
                {
                    DrawCommandsStatesNV(buffer, indirects_ptr, sizes_ptr, states_ptr, fbos_ptr, count);
                }
            }
            /// <inheritdoc cref="ExecuteProgramNV(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ExecuteProgramNV(VertexAttribEnumNV target, uint id, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ExecuteProgramNV(target, id, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ExecuteProgramNV(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ExecuteProgramNV(VertexAttribEnumNV target, uint id, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ExecuteProgramNV(target, id, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ExecuteProgramNV(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ExecuteProgramNV(VertexAttribEnumNV target, uint id, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ExecuteProgramNV(target, id, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordhvNV(Half*)"/>
            public static unsafe void FogCoordhvNV(ReadOnlySpan<Half> fog)
            {
                fixed (Half* fog_ptr = fog)
                {
                    FogCoordhvNV(fog_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordhvNV(Half*)"/>
            public static unsafe void FogCoordhvNV(Half[] fog)
            {
                fixed (Half* fog_ptr = fog)
                {
                    FogCoordhvNV(fog_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordhvNV(Half*)"/>
            public static unsafe void FogCoordhvNV(in Half fog)
            {
                fixed (Half* fog_ptr = &fog)
                {
                    FogCoordhvNV(fog_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferSampleLocationsfvNV(FramebufferTarget, uint, int, float*)"/>
            public static unsafe void FramebufferSampleLocationsfvNV(FramebufferTarget target, uint start, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    FramebufferSampleLocationsfvNV(target, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="GenFencesNV(int, uint*)"/>
            public static unsafe void GenFencesNV(Span<uint> fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    GenFencesNV(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenFencesNV(int, uint*)"/>
            public static unsafe void GenFencesNV(uint[] fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    GenFencesNV(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenFencesNV(int, uint*)"/>
            public static unsafe void GenFencesNV(int n, ref uint fences)
            {
                fixed (uint* fences_ptr = &fences)
                {
                    GenFencesNV(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenOcclusionQueriesNV(int, uint*)"/>
            public static unsafe void GenOcclusionQueriesNV(Span<uint> ids)
            {
                int n = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    GenOcclusionQueriesNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenOcclusionQueriesNV(int, uint*)"/>
            public static unsafe void GenOcclusionQueriesNV(uint[] ids)
            {
                int n = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    GenOcclusionQueriesNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenOcclusionQueriesNV(int, uint*)"/>
            public static unsafe void GenOcclusionQueriesNV(int n, ref uint ids)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    GenOcclusionQueriesNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramsNV(int, int*)"/>
            public static unsafe void GenProgramsNV(Span<int> programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    GenProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramsNV(int, int*)"/>
            public static unsafe void GenProgramsNV(int[] programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    GenProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramsNV(int, int*)"/>
            public static unsafe void GenProgramsNV(int n, ref int programs)
            {
                fixed (int* programs_ptr = &programs)
                {
                    GenProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenQueryResourceTagNV(int, int*)"/>
            public static unsafe void GenQueryResourceTagNV(Span<int> tagIds)
            {
                int n = (int)(tagIds.Length);
                fixed (int* tagIds_ptr = tagIds)
                {
                    GenQueryResourceTagNV(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="GenQueryResourceTagNV(int, int*)"/>
            public static unsafe void GenQueryResourceTagNV(int[] tagIds)
            {
                int n = (int)(tagIds.Length);
                fixed (int* tagIds_ptr = tagIds)
                {
                    GenQueryResourceTagNV(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="GenQueryResourceTagNV(int, int*)"/>
            public static unsafe void GenQueryResourceTagNV(int n, ref int tagIds)
            {
                fixed (int* tagIds_ptr = &tagIds)
                {
                    GenQueryResourceTagNV(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacksNV(int, int*)"/>
            public static unsafe void GenTransformFeedbacksNV(Span<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    GenTransformFeedbacksNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacksNV(int, int*)"/>
            public static unsafe void GenTransformFeedbacksNV(int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    GenTransformFeedbacksNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacksNV(int, int*)"/>
            public static unsafe void GenTransformFeedbacksNV(int n, ref int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    GenTransformFeedbacksNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveVaryingNV(int, uint, int, int*, int*, All*, byte*)"/>
            public static unsafe string GetActiveVaryingNV(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<All> type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (All* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveVaryingNV(int, uint, int, int*, int*, All*, byte*)"/>
            public static unsafe void GetActiveVaryingNV(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<All> type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (All* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetActiveVaryingNV(int, uint, int, int*, int*, All*, byte*)"/>
            public static unsafe string GetActiveVaryingNV(int program, uint index, int bufSize, int[] length, int[] size, All[] type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (All* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveVaryingNV(int, uint, int, int*, int*, All*, byte*)"/>
            public static unsafe void GetActiveVaryingNV(int program, uint index, int bufSize, int[] length, int[] size, All[] type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (All* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetActiveVaryingNV(int, uint, int, int*, int*, All*, byte*)"/>
            public static unsafe string GetActiveVaryingNV(int program, uint index, int bufSize, ref int length, ref int size, ref All type)
            {
                string name;
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (All* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveVaryingNV(int, uint, int, int*, int*, All*, byte*)"/>
            public static unsafe void GetActiveVaryingNV(int program, uint index, int bufSize, ref int length, ref int size, ref All type, out string name)
            {
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (All* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameterui64vNV(BufferTargetARB, All, ulong*)"/>
            public static unsafe void GetBufferParameterui64vNV(BufferTargetARB target, All pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetBufferParameterui64vNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameterui64vNV(BufferTargetARB, All, ulong*)"/>
            public static unsafe void GetBufferParameterui64vNV(BufferTargetARB target, All pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetBufferParameterui64vNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameterui64vNV(BufferTargetARB, All, ulong*)"/>
            public static unsafe void GetBufferParameterui64vNV(BufferTargetARB target, All pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetBufferParameterui64vNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameterui64vNV(BufferTargetARB, All, ulong*)"/>
            public static unsafe ulong GetBufferParameterui64vNV(BufferTargetARB target, All pname)
            {
                ulong parameters_val;
                ulong* parameters = &parameters_val;
                GetBufferParameterui64vNV(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetCombinerInputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerInputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerInputParameterfvNV(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerInputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerInputParameterfvNV(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerInputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetCombinerInputParameterfvNV(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe float GetCombinerInputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetCombinerInputParameterfvNV(stage, portion, variable, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetCombinerInputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerInputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetCombinerInputParameterivNV(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerInputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetCombinerInputParameterivNV(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerInputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetCombinerInputParameterivNV(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe int GetCombinerInputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetCombinerInputParameterivNV(stage, portion, variable, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetCombinerOutputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerOutputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerOutputParameterfvNV(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerOutputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerOutputParameterfvNV(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerOutputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetCombinerOutputParameterfvNV(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, float*)"/>
            public static unsafe float GetCombinerOutputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetCombinerOutputParameterfvNV(stage, portion, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetCombinerOutputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerOutputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetCombinerOutputParameterivNV(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerOutputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetCombinerOutputParameterivNV(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerOutputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetCombinerOutputParameterivNV(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, int*)"/>
            public static unsafe int GetCombinerOutputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetCombinerOutputParameterivNV(stage, portion, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetCombinerStageParameterfvNV(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerStageParameterfvNV(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerStageParameterfvNV(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerStageParameterfvNV(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerStageParameterfvNV(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetCombinerStageParameterfvNV(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerStageParameterfvNV(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe float GetCombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetCombinerStageParameterfvNV(stage, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetCoverageModulationTableNV(int, float*)"/>
            public static unsafe void GetCoverageModulationTableNV(int bufSize, ref float v)
            {
                fixed (float* v_ptr = &v)
                {
                    GetCoverageModulationTableNV(bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetCoverageModulationTableNV(int, float*)"/>
            public static unsafe float GetCoverageModulationTableNV(int bufSize)
            {
                float v_val;
                float* v = &v_val;
                GetCoverageModulationTableNV(bufSize, v);
                return v_val;
            }
            /// <inheritdoc cref="GetFenceivNV(uint, FenceParameterNameNV, int*)"/>
            public static unsafe void GetFenceivNV(uint fence, FenceParameterNameNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFenceivNV(fence, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFenceivNV(uint, FenceParameterNameNV, int*)"/>
            public static unsafe void GetFenceivNV(uint fence, FenceParameterNameNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFenceivNV(fence, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFenceivNV(uint, FenceParameterNameNV, int*)"/>
            public static unsafe void GetFenceivNV(uint fence, FenceParameterNameNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFenceivNV(fence, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFenceivNV(uint, FenceParameterNameNV, int*)"/>
            public static unsafe int GetFenceivNV(uint fence, FenceParameterNameNV pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetFenceivNV(fence, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterfvNV(CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetFinalCombinerInputParameterfvNV(CombinerVariableNV variable, CombinerParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFinalCombinerInputParameterfvNV(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterfvNV(CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetFinalCombinerInputParameterfvNV(CombinerVariableNV variable, CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFinalCombinerInputParameterfvNV(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterfvNV(CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetFinalCombinerInputParameterfvNV(CombinerVariableNV variable, CombinerParameterNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetFinalCombinerInputParameterfvNV(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterfvNV(CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe float GetFinalCombinerInputParameterfvNV(CombinerVariableNV variable, CombinerParameterNV pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetFinalCombinerInputParameterfvNV(variable, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterivNV(CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetFinalCombinerInputParameterivNV(CombinerVariableNV variable, CombinerParameterNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFinalCombinerInputParameterivNV(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterivNV(CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetFinalCombinerInputParameterivNV(CombinerVariableNV variable, CombinerParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFinalCombinerInputParameterivNV(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterivNV(CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetFinalCombinerInputParameterivNV(CombinerVariableNV variable, CombinerParameterNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFinalCombinerInputParameterivNV(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterivNV(CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe int GetFinalCombinerInputParameterivNV(CombinerVariableNV variable, CombinerParameterNV pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetFinalCombinerInputParameterivNV(variable, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetIntegerui64i_vNV(All, uint, ulong*)"/>
            public static unsafe void GetIntegerui64i_vNV(All value, uint index, Span<ulong> result)
            {
                fixed (ulong* result_ptr = result)
                {
                    GetIntegerui64i_vNV(value, index, result_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64i_vNV(All, uint, ulong*)"/>
            public static unsafe void GetIntegerui64i_vNV(All value, uint index, ulong[] result)
            {
                fixed (ulong* result_ptr = result)
                {
                    GetIntegerui64i_vNV(value, index, result_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64i_vNV(All, uint, ulong*)"/>
            public static unsafe void GetIntegerui64i_vNV(All value, uint index, ref ulong result)
            {
                fixed (ulong* result_ptr = &result)
                {
                    GetIntegerui64i_vNV(value, index, result_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64i_vNV(All, uint, ulong*)"/>
            public static unsafe ulong GetIntegerui64i_vNV(All value, uint index)
            {
                ulong result_val;
                ulong* result = &result_val;
                GetIntegerui64i_vNV(value, index, result);
                return result_val;
            }
            /// <inheritdoc cref="GetIntegerui64vNV(All, ulong*)"/>
            public static unsafe void GetIntegerui64vNV(All value, Span<ulong> result)
            {
                fixed (ulong* result_ptr = result)
                {
                    GetIntegerui64vNV(value, result_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64vNV(All, ulong*)"/>
            public static unsafe void GetIntegerui64vNV(All value, ulong[] result)
            {
                fixed (ulong* result_ptr = result)
                {
                    GetIntegerui64vNV(value, result_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64vNV(All, ulong*)"/>
            public static unsafe void GetIntegerui64vNV(All value, ref ulong result)
            {
                fixed (ulong* result_ptr = &result)
                {
                    GetIntegerui64vNV(value, result_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64vNV(All, ulong*)"/>
            public static unsafe ulong GetIntegerui64vNV(All value)
            {
                ulong result_val;
                ulong* result = &result_val;
                GetIntegerui64vNV(value, result);
                return result_val;
            }
            /// <inheritdoc cref="GetInternalformatSampleivNV(TextureTarget, InternalFormat, int, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformatSampleivNV(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, Span<int> parameters)
            {
                int count = (int)(parameters.Length);
                fixed (int* parameters_ptr = parameters)
                {
                    GetInternalformatSampleivNV(target, internalformat, samples, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformatSampleivNV(TextureTarget, InternalFormat, int, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformatSampleivNV(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, int[] parameters)
            {
                int count = (int)(parameters.Length);
                fixed (int* parameters_ptr = parameters)
                {
                    GetInternalformatSampleivNV(target, internalformat, samples, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformatSampleivNV(TextureTarget, InternalFormat, int, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformatSampleivNV(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, int count, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetInternalformatSampleivNV(target, internalformat, samples, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformatSampleivNV(TextureTarget, InternalFormat, int, InternalFormatPName, int, int*)"/>
            public static unsafe int GetInternalformatSampleivNV(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, int count)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetInternalformatSampleivNV(target, internalformat, samples, pname, count, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMapAttribParameterfvNV(EvalTargetNV, uint, MapAttribParameterNV, float*)"/>
            public static unsafe void GetMapAttribParameterfvNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMapAttribParameterfvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameterfvNV(EvalTargetNV, uint, MapAttribParameterNV, float*)"/>
            public static unsafe void GetMapAttribParameterfvNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMapAttribParameterfvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameterfvNV(EvalTargetNV, uint, MapAttribParameterNV, float*)"/>
            public static unsafe void GetMapAttribParameterfvNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMapAttribParameterfvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameterfvNV(EvalTargetNV, uint, MapAttribParameterNV, float*)"/>
            public static unsafe float GetMapAttribParameterfvNV(EvalTargetNV target, uint index, MapAttribParameterNV pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetMapAttribParameterfvNV(target, index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMapAttribParameterivNV(EvalTargetNV, uint, MapAttribParameterNV, int*)"/>
            public static unsafe void GetMapAttribParameterivNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMapAttribParameterivNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameterivNV(EvalTargetNV, uint, MapAttribParameterNV, int*)"/>
            public static unsafe void GetMapAttribParameterivNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMapAttribParameterivNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameterivNV(EvalTargetNV, uint, MapAttribParameterNV, int*)"/>
            public static unsafe void GetMapAttribParameterivNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMapAttribParameterivNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameterivNV(EvalTargetNV, uint, MapAttribParameterNV, int*)"/>
            public static unsafe int GetMapAttribParameterivNV(EvalTargetNV target, uint index, MapAttribParameterNV pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetMapAttribParameterivNV(target, index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, bool, void*)"/>
            public static unsafe void GetMapControlPointsNV(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, IntPtr points)
            {
                void* points_vptr = (void*)points;
                GetMapControlPointsNV(target, index, type, ustride, vstride, packed, points_vptr);
            }
            /// <inheritdoc cref="GetMapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, bool, void*)"/>
            public static unsafe void GetMapControlPointsNV<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, Span<T1> points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = points)
                {
                    GetMapControlPointsNV(target, index, type, ustride, vstride, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="GetMapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, bool, void*)"/>
            public static unsafe void GetMapControlPointsNV<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, T1[] points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = points)
                {
                    GetMapControlPointsNV(target, index, type, ustride, vstride, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="GetMapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, bool, void*)"/>
            public static unsafe void GetMapControlPointsNV<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, ref T1 points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = &points)
                {
                    GetMapControlPointsNV(target, index, type, ustride, vstride, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterfvNV(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void GetMapParameterfvNV(EvalTargetNV target, MapParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMapParameterfvNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterfvNV(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void GetMapParameterfvNV(EvalTargetNV target, MapParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMapParameterfvNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterfvNV(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void GetMapParameterfvNV(EvalTargetNV target, MapParameterNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMapParameterfvNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterfvNV(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe float GetMapParameterfvNV(EvalTargetNV target, MapParameterNV pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetMapParameterfvNV(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMapParameterivNV(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void GetMapParameterivNV(EvalTargetNV target, MapParameterNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMapParameterivNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterivNV(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void GetMapParameterivNV(EvalTargetNV target, MapParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMapParameterivNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterivNV(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void GetMapParameterivNV(EvalTargetNV target, MapParameterNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMapParameterivNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterivNV(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe int GetMapParameterivNV(EvalTargetNV target, MapParameterNV pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetMapParameterivNV(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMemoryObjectDetachedResourcesuivNV(uint, All, int, int, uint*)"/>
            public static unsafe void GetMemoryObjectDetachedResourcesuivNV(uint memory, All pname, int first, int count, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMemoryObjectDetachedResourcesuivNV(uint, All, int, int, uint*)"/>
            public static unsafe uint GetMemoryObjectDetachedResourcesuivNV(uint memory, All pname, int first, int count)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMultisamplefvNV(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplefvNV(GetMultisamplePNameNV pname, uint index, Span<float> val)
            {
                fixed (float* val_ptr = val)
                {
                    GetMultisamplefvNV(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefvNV(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplefvNV(GetMultisamplePNameNV pname, uint index, float[] val)
            {
                fixed (float* val_ptr = val)
                {
                    GetMultisamplefvNV(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefvNV(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplefvNV(GetMultisamplePNameNV pname, uint index, ref float val)
            {
                fixed (float* val_ptr = &val)
                {
                    GetMultisamplefvNV(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefvNV(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe float GetMultisamplefvNV(GetMultisamplePNameNV pname, uint index)
            {
                float val_val;
                float* val = &val_val;
                GetMultisamplefvNV(pname, index, val);
                return val_val;
            }
            /// <inheritdoc cref="GetNamedBufferParameterui64vNV(int, BufferPNameARB, ulong*)"/>
            public static unsafe void GetNamedBufferParameterui64vNV(int buffer, BufferPNameARB pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetNamedBufferParameterui64vNV(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameterui64vNV(int, BufferPNameARB, ulong*)"/>
            public static unsafe void GetNamedBufferParameterui64vNV(int buffer, BufferPNameARB pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetNamedBufferParameterui64vNV(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameterui64vNV(int, BufferPNameARB, ulong*)"/>
            public static unsafe void GetNamedBufferParameterui64vNV(int buffer, BufferPNameARB pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetNamedBufferParameterui64vNV(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameterui64vNV(int, BufferPNameARB, ulong*)"/>
            public static unsafe ulong GetNamedBufferParameterui64vNV(int buffer, BufferPNameARB pname)
            {
                ulong parameters_val;
                ulong* parameters = &parameters_val;
                GetNamedBufferParameterui64vNV(buffer, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetOcclusionQueryivNV(uint, OcclusionQueryParameterNameNV, int*)"/>
            public static unsafe void GetOcclusionQueryivNV(uint id, OcclusionQueryParameterNameNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetOcclusionQueryivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryivNV(uint, OcclusionQueryParameterNameNV, int*)"/>
            public static unsafe void GetOcclusionQueryivNV(uint id, OcclusionQueryParameterNameNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetOcclusionQueryivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryivNV(uint, OcclusionQueryParameterNameNV, int*)"/>
            public static unsafe void GetOcclusionQueryivNV(uint id, OcclusionQueryParameterNameNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetOcclusionQueryivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryivNV(uint, OcclusionQueryParameterNameNV, int*)"/>
            public static unsafe int GetOcclusionQueryivNV(uint id, OcclusionQueryParameterNameNV pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetOcclusionQueryivNV(id, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetOcclusionQueryuivNV(uint, OcclusionQueryParameterNameNV, uint*)"/>
            public static unsafe void GetOcclusionQueryuivNV(uint id, OcclusionQueryParameterNameNV pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetOcclusionQueryuivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryuivNV(uint, OcclusionQueryParameterNameNV, uint*)"/>
            public static unsafe void GetOcclusionQueryuivNV(uint id, OcclusionQueryParameterNameNV pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetOcclusionQueryuivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryuivNV(uint, OcclusionQueryParameterNameNV, uint*)"/>
            public static unsafe void GetOcclusionQueryuivNV(uint id, OcclusionQueryParameterNameNV pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetOcclusionQueryuivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryuivNV(uint, OcclusionQueryParameterNameNV, uint*)"/>
            public static unsafe uint GetOcclusionQueryuivNV(uint id, OcclusionQueryParameterNameNV pname)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetOcclusionQueryuivNV(id, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetPathColorGenfvNV(PathColor, PathGenMode, float*)"/>
            public static unsafe void GetPathColorGenfvNV(PathColor color, PathGenMode pname, Span<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathColorGenfvNV(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGenfvNV(PathColor, PathGenMode, float*)"/>
            public static unsafe void GetPathColorGenfvNV(PathColor color, PathGenMode pname, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathColorGenfvNV(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGenfvNV(PathColor, PathGenMode, float*)"/>
            public static unsafe void GetPathColorGenfvNV(PathColor color, PathGenMode pname, ref float value)
            {
                fixed (float* value_ptr = &value)
                {
                    GetPathColorGenfvNV(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGenfvNV(PathColor, PathGenMode, float*)"/>
            public static unsafe float GetPathColorGenfvNV(PathColor color, PathGenMode pname)
            {
                float value_val;
                float* value = &value_val;
                GetPathColorGenfvNV(color, pname, value);
                return value_val;
            }
            /// <inheritdoc cref="GetPathColorGenivNV(PathColor, PathGenMode, int*)"/>
            public static unsafe void GetPathColorGenivNV(PathColor color, PathGenMode pname, Span<int> value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathColorGenivNV(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGenivNV(PathColor, PathGenMode, int*)"/>
            public static unsafe void GetPathColorGenivNV(PathColor color, PathGenMode pname, int[] value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathColorGenivNV(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGenivNV(PathColor, PathGenMode, int*)"/>
            public static unsafe void GetPathColorGenivNV(PathColor color, PathGenMode pname, ref int value)
            {
                fixed (int* value_ptr = &value)
                {
                    GetPathColorGenivNV(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGenivNV(PathColor, PathGenMode, int*)"/>
            public static unsafe int GetPathColorGenivNV(PathColor color, PathGenMode pname)
            {
                int value_val;
                int* value = &value_val;
                GetPathColorGenivNV(color, pname, value);
                return value_val;
            }
            /// <inheritdoc cref="GetPathCommandsNV(uint, byte*)"/>
            public static unsafe void GetPathCommandsNV(uint path, Span<byte> commands)
            {
                fixed (byte* commands_ptr = commands)
                {
                    GetPathCommandsNV(path, commands_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCommandsNV(uint, byte*)"/>
            public static unsafe void GetPathCommandsNV(uint path, byte[] commands)
            {
                fixed (byte* commands_ptr = commands)
                {
                    GetPathCommandsNV(path, commands_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCommandsNV(uint, byte*)"/>
            public static unsafe void GetPathCommandsNV(uint path, ref byte commands)
            {
                fixed (byte* commands_ptr = &commands)
                {
                    GetPathCommandsNV(path, commands_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCommandsNV(uint, byte*)"/>
            public static unsafe byte GetPathCommandsNV(uint path)
            {
                byte commands_val;
                byte* commands = &commands_val;
                GetPathCommandsNV(path, commands);
                return commands_val;
            }
            /// <inheritdoc cref="GetPathCoordsNV(uint, float*)"/>
            public static unsafe void GetPathCoordsNV(uint path, Span<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    GetPathCoordsNV(path, coords_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCoordsNV(uint, float*)"/>
            public static unsafe void GetPathCoordsNV(uint path, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    GetPathCoordsNV(path, coords_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCoordsNV(uint, float*)"/>
            public static unsafe void GetPathCoordsNV(uint path, ref float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    GetPathCoordsNV(path, coords_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCoordsNV(uint, float*)"/>
            public static unsafe float GetPathCoordsNV(uint path)
            {
                float coords_val;
                float* coords = &coords_val;
                GetPathCoordsNV(path, coords);
                return coords_val;
            }
            /// <inheritdoc cref="GetPathDashArrayNV(uint, float*)"/>
            public static unsafe void GetPathDashArrayNV(uint path, Span<float> dashArray)
            {
                fixed (float* dashArray_ptr = dashArray)
                {
                    GetPathDashArrayNV(path, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="GetPathDashArrayNV(uint, float*)"/>
            public static unsafe void GetPathDashArrayNV(uint path, float[] dashArray)
            {
                fixed (float* dashArray_ptr = dashArray)
                {
                    GetPathDashArrayNV(path, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="GetPathDashArrayNV(uint, float*)"/>
            public static unsafe void GetPathDashArrayNV(uint path, ref float dashArray)
            {
                fixed (float* dashArray_ptr = &dashArray)
                {
                    GetPathDashArrayNV(path, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="GetPathDashArrayNV(uint, float*)"/>
            public static unsafe float GetPathDashArrayNV(uint path)
            {
                float dashArray_val;
                float* dashArray = &dashArray_val;
                GetPathDashArrayNV(path, dashArray);
                return dashArray_val;
            }
            /// <inheritdoc cref="GetPathMetricRangeNV(PathMetricMask, uint, int, int, float*)"/>
            public static unsafe void GetPathMetricRangeNV(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, Span<float> metrics)
            {
                fixed (float* metrics_ptr = metrics)
                {
                    GetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricRangeNV(PathMetricMask, uint, int, int, float*)"/>
            public static unsafe void GetPathMetricRangeNV(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, float[] metrics)
            {
                fixed (float* metrics_ptr = metrics)
                {
                    GetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricRangeNV(PathMetricMask, uint, int, int, float*)"/>
            public static unsafe void GetPathMetricRangeNV(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, ref float metrics)
            {
                fixed (float* metrics_ptr = &metrics)
                {
                    GetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricRangeNV(PathMetricMask, uint, int, int, float*)"/>
            public static unsafe float GetPathMetricRangeNV(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride)
            {
                float metrics_val;
                float* metrics = &metrics_val;
                GetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics);
                return metrics_val;
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetricsNV(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride, Span<float> metrics)
            {
                fixed (float* metrics_ptr = metrics)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_vptr, pathBase, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetricsNV(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride, float[] metrics)
            {
                fixed (float* metrics_ptr = metrics)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_vptr, pathBase, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetricsNV(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride, ref float metrics)
            {
                fixed (float* metrics_ptr = &metrics)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_vptr, pathBase, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetricsNV<T1>(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, int stride, Span<float> metrics)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* metrics_ptr = metrics)
                    {
                        GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetricsNV<T1>(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, int stride, float[] metrics)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* metrics_ptr = metrics)
                    {
                        GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetricsNV<T1>(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, int stride, ref float metrics)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* metrics_ptr = &metrics)
                {
                    GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe float GetPathMetricsNV(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride)
            {
                float metrics_val;
                void* paths_vptr = (void*)paths;
                float* metrics = &metrics_val;
                GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_vptr, pathBase, stride, metrics);
                return metrics_val;
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe float GetPathMetricsNV<T1>(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, int stride)
                where T1 : unmanaged
            {
                float metrics_val;
                fixed (void* paths_ptr = paths)
                {
                    float* metrics = &metrics_val;
                    GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics);
                }
                return metrics_val;
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe float GetPathMetricsNV<T1>(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, int stride)
                where T1 : unmanaged
            {
                float metrics_val;
                fixed (void* paths_ptr = paths)
                {
                    float* metrics = &metrics_val;
                    GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics);
                }
                return metrics_val;
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe float GetPathMetricsNV<T1>(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, int stride)
                where T1 : unmanaged
            {
                float metrics_val;
                fixed (void* paths_ptr = &paths)
                {
                    float* metrics = &metrics_val;
                    GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics);
                }
                return metrics_val;
            }
            /// <inheritdoc cref="GetPathParameterfvNV(uint, PathParameter, float*)"/>
            public static unsafe void GetPathParameterfvNV(uint path, PathParameter pname, Span<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathParameterfvNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameterfvNV(uint, PathParameter, float*)"/>
            public static unsafe void GetPathParameterfvNV(uint path, PathParameter pname, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathParameterfvNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameterfvNV(uint, PathParameter, float*)"/>
            public static unsafe void GetPathParameterfvNV(uint path, PathParameter pname, ref float value)
            {
                fixed (float* value_ptr = &value)
                {
                    GetPathParameterfvNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameterfvNV(uint, PathParameter, float*)"/>
            public static unsafe float GetPathParameterfvNV(uint path, PathParameter pname)
            {
                float value_val;
                float* value = &value_val;
                GetPathParameterfvNV(path, pname, value);
                return value_val;
            }
            /// <inheritdoc cref="GetPathParameterivNV(uint, PathParameter, int*)"/>
            public static unsafe void GetPathParameterivNV(uint path, PathParameter pname, Span<int> value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathParameterivNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameterivNV(uint, PathParameter, int*)"/>
            public static unsafe void GetPathParameterivNV(uint path, PathParameter pname, int[] value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathParameterivNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameterivNV(uint, PathParameter, int*)"/>
            public static unsafe void GetPathParameterivNV(uint path, PathParameter pname, ref int value)
            {
                fixed (int* value_ptr = &value)
                {
                    GetPathParameterivNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameterivNV(uint, PathParameter, int*)"/>
            public static unsafe int GetPathParameterivNV(uint path, PathParameter pname)
            {
                int value_val;
                int* value = &value_val;
                GetPathParameterivNV(path, pname, value);
                return value_val;
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, Span<float> returnedSpacing)
            {
                fixed (float* returnedSpacing_ptr = returnedSpacing)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_vptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, float[] returnedSpacing)
            {
                fixed (float* returnedSpacing_ptr = returnedSpacing)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_vptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, ref float returnedSpacing)
            {
                fixed (float* returnedSpacing_ptr = &returnedSpacing)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_vptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacingNV<T1>(PathListMode pathListMode, int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, Span<float> returnedSpacing)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* returnedSpacing_ptr = returnedSpacing)
                    {
                        GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacingNV<T1>(PathListMode pathListMode, int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, float[] returnedSpacing)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* returnedSpacing_ptr = returnedSpacing)
                    {
                        GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacingNV<T1>(PathListMode pathListMode, int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, ref float returnedSpacing)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* returnedSpacing_ptr = &returnedSpacing)
                {
                    GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe float GetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType)
            {
                float returnedSpacing_val;
                void* paths_vptr = (void*)paths;
                float* returnedSpacing = &returnedSpacing_val;
                GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_vptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
                return returnedSpacing_val;
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe float GetPathSpacingNV<T1>(PathListMode pathListMode, int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType)
                where T1 : unmanaged
            {
                float returnedSpacing_val;
                fixed (void* paths_ptr = paths)
                {
                    float* returnedSpacing = &returnedSpacing_val;
                    GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
                }
                return returnedSpacing_val;
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe float GetPathSpacingNV<T1>(PathListMode pathListMode, int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType)
                where T1 : unmanaged
            {
                float returnedSpacing_val;
                fixed (void* paths_ptr = paths)
                {
                    float* returnedSpacing = &returnedSpacing_val;
                    GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
                }
                return returnedSpacing_val;
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe float GetPathSpacingNV<T1>(PathListMode pathListMode, int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType)
                where T1 : unmanaged
            {
                float returnedSpacing_val;
                fixed (void* paths_ptr = &paths)
                {
                    float* returnedSpacing = &returnedSpacing_val;
                    GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
                }
                return returnedSpacing_val;
            }
            /// <inheritdoc cref="GetPathTexGenfvNV(TextureUnit, PathGenMode, float*)"/>
            public static unsafe void GetPathTexGenfvNV(TextureUnit texCoordSet, PathGenMode pname, Span<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathTexGenfvNV(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGenfvNV(TextureUnit, PathGenMode, float*)"/>
            public static unsafe void GetPathTexGenfvNV(TextureUnit texCoordSet, PathGenMode pname, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathTexGenfvNV(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGenfvNV(TextureUnit, PathGenMode, float*)"/>
            public static unsafe void GetPathTexGenfvNV(TextureUnit texCoordSet, PathGenMode pname, ref float value)
            {
                fixed (float* value_ptr = &value)
                {
                    GetPathTexGenfvNV(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGenfvNV(TextureUnit, PathGenMode, float*)"/>
            public static unsafe float GetPathTexGenfvNV(TextureUnit texCoordSet, PathGenMode pname)
            {
                float value_val;
                float* value = &value_val;
                GetPathTexGenfvNV(texCoordSet, pname, value);
                return value_val;
            }
            /// <inheritdoc cref="GetPathTexGenivNV(TextureUnit, PathGenMode, int*)"/>
            public static unsafe void GetPathTexGenivNV(TextureUnit texCoordSet, PathGenMode pname, Span<int> value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathTexGenivNV(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGenivNV(TextureUnit, PathGenMode, int*)"/>
            public static unsafe void GetPathTexGenivNV(TextureUnit texCoordSet, PathGenMode pname, int[] value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathTexGenivNV(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGenivNV(TextureUnit, PathGenMode, int*)"/>
            public static unsafe void GetPathTexGenivNV(TextureUnit texCoordSet, PathGenMode pname, ref int value)
            {
                fixed (int* value_ptr = &value)
                {
                    GetPathTexGenivNV(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGenivNV(TextureUnit, PathGenMode, int*)"/>
            public static unsafe int GetPathTexGenivNV(TextureUnit texCoordSet, PathGenMode pname)
            {
                int value_val;
                int* value = &value_val;
                GetPathTexGenivNV(texCoordSet, pname, value);
                return value_val;
            }
            /// <inheritdoc cref="GetProgramEnvParameterIivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramEnvParameterIivNV(ProgramTarget target, uint index, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterIivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramEnvParameterIivNV(ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterIivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramEnvParameterIivNV(ProgramTarget target, uint index, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramEnvParameterIivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIivNV(ProgramTarget, uint, int*)"/>
            public static unsafe int GetProgramEnvParameterIivNV(ProgramTarget target, uint index)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetProgramEnvParameterIivNV(target, index, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramEnvParameterIuivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramEnvParameterIuivNV(ProgramTarget target, uint index, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterIuivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIuivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramEnvParameterIuivNV(ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterIuivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIuivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramEnvParameterIuivNV(ProgramTarget target, uint index, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetProgramEnvParameterIuivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIuivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe uint GetProgramEnvParameterIuivNV(ProgramTarget target, uint index)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetProgramEnvParameterIuivNV(target, index, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramivNV(int, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetProgramivNV(int id, VertexAttribEnumNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramivNV(int, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetProgramivNV(int id, VertexAttribEnumNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramivNV(int, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetProgramivNV(int id, VertexAttribEnumNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramivNV(int, VertexAttribEnumNV, int*)"/>
            public static unsafe int GetProgramivNV(int id, VertexAttribEnumNV pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetProgramivNV(id, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramLocalParameterIivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramLocalParameterIivNV(ProgramTarget target, uint index, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterIivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramLocalParameterIivNV(ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterIivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramLocalParameterIivNV(ProgramTarget target, uint index, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramLocalParameterIivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIivNV(ProgramTarget, uint, int*)"/>
            public static unsafe int GetProgramLocalParameterIivNV(ProgramTarget target, uint index)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetProgramLocalParameterIivNV(target, index, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramLocalParameterIuivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramLocalParameterIuivNV(ProgramTarget target, uint index, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterIuivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIuivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramLocalParameterIuivNV(ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterIuivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIuivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramLocalParameterIuivNV(ProgramTarget target, uint index, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetProgramLocalParameterIuivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIuivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe uint GetProgramLocalParameterIuivNV(ProgramTarget target, uint index)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetProgramLocalParameterIuivNV(target, index, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramNamedParameterdvNV(int, int, byte*, double*)"/>
            public static unsafe void GetProgramNamedParameterdvNV(int id, int len, ReadOnlySpan<byte> name, Span<double> parameters)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (double* parameters_ptr = parameters)
                    {
                        GetProgramNamedParameterdvNV(id, len, name_ptr, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterdvNV(int, int, byte*, double*)"/>
            public static unsafe void GetProgramNamedParameterdvNV(int id, int len, byte[] name, double[] parameters)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (double* parameters_ptr = parameters)
                    {
                        GetProgramNamedParameterdvNV(id, len, name_ptr, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterdvNV(int, int, byte*, double*)"/>
            public static unsafe void GetProgramNamedParameterdvNV(int id, int len, in byte name, ref double parameters)
            {
                fixed (byte* name_ptr = &name)
                fixed (double* parameters_ptr = &parameters)
                {
                    GetProgramNamedParameterdvNV(id, len, name_ptr, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterdvNV(int, int, byte*, double*)"/>
            public static unsafe double GetProgramNamedParameterdvNV(int id, int len, ReadOnlySpan<byte> name)
            {
                double parameters_val;
                fixed (byte* name_ptr = name)
                {
                    double* parameters = &parameters_val;
                    GetProgramNamedParameterdvNV(id, len, name_ptr, parameters);
                }
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramNamedParameterdvNV(int, int, byte*, double*)"/>
            public static unsafe double GetProgramNamedParameterdvNV(int id, int len, byte[] name)
            {
                double parameters_val;
                fixed (byte* name_ptr = name)
                {
                    double* parameters = &parameters_val;
                    GetProgramNamedParameterdvNV(id, len, name_ptr, parameters);
                }
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramNamedParameterdvNV(int, int, byte*, double*)"/>
            public static unsafe double GetProgramNamedParameterdvNV(int id, int len, in byte name)
            {
                double parameters_val;
                fixed (byte* name_ptr = &name)
                {
                    double* parameters = &parameters_val;
                    GetProgramNamedParameterdvNV(id, len, name_ptr, parameters);
                }
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramNamedParameterfvNV(int, int, byte*, float*)"/>
            public static unsafe void GetProgramNamedParameterfvNV(int id, int len, ReadOnlySpan<byte> name, Span<float> parameters)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (float* parameters_ptr = parameters)
                    {
                        GetProgramNamedParameterfvNV(id, len, name_ptr, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterfvNV(int, int, byte*, float*)"/>
            public static unsafe void GetProgramNamedParameterfvNV(int id, int len, byte[] name, float[] parameters)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (float* parameters_ptr = parameters)
                    {
                        GetProgramNamedParameterfvNV(id, len, name_ptr, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterfvNV(int, int, byte*, float*)"/>
            public static unsafe void GetProgramNamedParameterfvNV(int id, int len, in byte name, ref float parameters)
            {
                fixed (byte* name_ptr = &name)
                fixed (float* parameters_ptr = &parameters)
                {
                    GetProgramNamedParameterfvNV(id, len, name_ptr, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterfvNV(int, int, byte*, float*)"/>
            public static unsafe float GetProgramNamedParameterfvNV(int id, int len, ReadOnlySpan<byte> name)
            {
                float parameters_val;
                fixed (byte* name_ptr = name)
                {
                    float* parameters = &parameters_val;
                    GetProgramNamedParameterfvNV(id, len, name_ptr, parameters);
                }
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramNamedParameterfvNV(int, int, byte*, float*)"/>
            public static unsafe float GetProgramNamedParameterfvNV(int id, int len, byte[] name)
            {
                float parameters_val;
                fixed (byte* name_ptr = name)
                {
                    float* parameters = &parameters_val;
                    GetProgramNamedParameterfvNV(id, len, name_ptr, parameters);
                }
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramNamedParameterfvNV(int, int, byte*, float*)"/>
            public static unsafe float GetProgramNamedParameterfvNV(int id, int len, in byte name)
            {
                float parameters_val;
                fixed (byte* name_ptr = &name)
                {
                    float* parameters = &parameters_val;
                    GetProgramNamedParameterfvNV(id, len, name_ptr, parameters);
                }
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramParameterdvNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetProgramParameterdvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramParameterdvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterdvNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetProgramParameterdvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramParameterdvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterdvNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetProgramParameterdvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetProgramParameterdvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterdvNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, double*)"/>
            public static unsafe double GetProgramParameterdvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname)
            {
                double parameters_val;
                double* parameters = &parameters_val;
                GetProgramParameterdvNV(target, index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramParameterfvNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetProgramParameterfvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramParameterfvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterfvNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetProgramParameterfvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramParameterfvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterfvNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetProgramParameterfvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetProgramParameterfvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterfvNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, float*)"/>
            public static unsafe float GetProgramParameterfvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetProgramParameterfvNV(target, index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramResourcefvNV(int, ProgramInterface, uint, int, All*, int, int*, float*)"/>
            public static unsafe void GetProgramResourcefvNV(int program, ProgramInterface programInterface, uint index, int propCount, in All props, Span<int> length, Span<float> parameters)
            {
                fixed (All* props_ptr = &props)
                {
                    fixed (int* length_ptr = length)
                    {
                        int count = (int)(parameters.Length);
                        fixed (float* parameters_ptr = parameters)
                        {
                            GetProgramResourcefvNV(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramResourcefvNV(int, ProgramInterface, uint, int, All*, int, int*, float*)"/>
            public static unsafe void GetProgramResourcefvNV(int program, ProgramInterface programInterface, uint index, int propCount, in All props, int[] length, float[] parameters)
            {
                fixed (All* props_ptr = &props)
                {
                    fixed (int* length_ptr = length)
                    {
                        int count = (int)(parameters.Length);
                        fixed (float* parameters_ptr = parameters)
                        {
                            GetProgramResourcefvNV(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramResourcefvNV(int, ProgramInterface, uint, int, All*, int, int*, float*)"/>
            public static unsafe void GetProgramResourcefvNV(int program, ProgramInterface programInterface, uint index, int propCount, in All props, int count, ref int length, ref float parameters)
            {
                fixed (All* props_ptr = &props)
                fixed (int* length_ptr = &length)
                fixed (float* parameters_ptr = &parameters)
                {
                    GetProgramResourcefvNV(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramResourcefvNV(int, ProgramInterface, uint, int, All*, int, int*, float*)"/>
            public static unsafe float GetProgramResourcefvNV(int program, ProgramInterface programInterface, uint index, int propCount, in All props, int count, Span<int> length)
            {
                float parameters_val;
                fixed (All* props_ptr = &props)
                {
                    fixed (int* length_ptr = length)
                    {
                        float* parameters = &parameters_val;
                        GetProgramResourcefvNV(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters);
                    }
                }
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramResourcefvNV(int, ProgramInterface, uint, int, All*, int, int*, float*)"/>
            public static unsafe float GetProgramResourcefvNV(int program, ProgramInterface programInterface, uint index, int propCount, in All props, int count, int[] length)
            {
                float parameters_val;
                fixed (All* props_ptr = &props)
                {
                    fixed (int* length_ptr = length)
                    {
                        float* parameters = &parameters_val;
                        GetProgramResourcefvNV(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters);
                    }
                }
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramResourcefvNV(int, ProgramInterface, uint, int, All*, int, int*, float*)"/>
            public static unsafe float GetProgramResourcefvNV(int program, ProgramInterface programInterface, uint index, int propCount, in All props, int count, ref int length)
            {
                float parameters_val;
                fixed (All* props_ptr = &props)
                fixed (int* length_ptr = &length)
                {
                    float* parameters = &parameters_val;
                    GetProgramResourcefvNV(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters);
                }
                return parameters_val;
            }
            /// <inheritdoc cref="GetProgramStringNV(int, VertexAttribEnumNV, byte*)"/>
            public static unsafe void GetProgramStringNV(int id, VertexAttribEnumNV pname, Span<byte> program)
            {
                fixed (byte* program_ptr = program)
                {
                    GetProgramStringNV(id, pname, program_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStringNV(int, VertexAttribEnumNV, byte*)"/>
            public static unsafe void GetProgramStringNV(int id, VertexAttribEnumNV pname, byte[] program)
            {
                fixed (byte* program_ptr = program)
                {
                    GetProgramStringNV(id, pname, program_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStringNV(int, VertexAttribEnumNV, byte*)"/>
            public static unsafe void GetProgramStringNV(int id, VertexAttribEnumNV pname, ref byte program)
            {
                fixed (byte* program_ptr = &program)
                {
                    GetProgramStringNV(id, pname, program_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStringNV(int, VertexAttribEnumNV, byte*)"/>
            public static unsafe byte GetProgramStringNV(int id, VertexAttribEnumNV pname)
            {
                byte program_val;
                byte* program = &program_val;
                GetProgramStringNV(id, pname, program);
                return program_val;
            }
            /// <inheritdoc cref="GetProgramSubroutineParameteruivNV(All, uint, uint*)"/>
            public static unsafe void GetProgramSubroutineParameteruivNV(All target, uint index, Span<uint> param)
            {
                fixed (uint* param_ptr = param)
                {
                    GetProgramSubroutineParameteruivNV(target, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramSubroutineParameteruivNV(All, uint, uint*)"/>
            public static unsafe void GetProgramSubroutineParameteruivNV(All target, uint index, uint[] param)
            {
                fixed (uint* param_ptr = param)
                {
                    GetProgramSubroutineParameteruivNV(target, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramSubroutineParameteruivNV(All, uint, uint*)"/>
            public static unsafe void GetProgramSubroutineParameteruivNV(All target, uint index, ref uint param)
            {
                fixed (uint* param_ptr = &param)
                {
                    GetProgramSubroutineParameteruivNV(target, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramSubroutineParameteruivNV(All, uint, uint*)"/>
            public static unsafe uint GetProgramSubroutineParameteruivNV(All target, uint index)
            {
                uint param_val;
                uint* param = &param_val;
                GetProgramSubroutineParameteruivNV(target, index, param);
                return param_val;
            }
            /// <inheritdoc cref="GetSemaphoreParameterivNV(uint, SemaphoreParameterName, int*)"/>
            public static unsafe void GetSemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetSemaphoreParameterivNV(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSemaphoreParameterivNV(uint, SemaphoreParameterName, int*)"/>
            public static unsafe int GetSemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetSemaphoreParameterivNV(semaphore, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetShadingRateImagePaletteNV(uint, uint, All*)"/>
            public static unsafe void GetShadingRateImagePaletteNV(uint viewport, uint entry, Span<All> rate)
            {
                fixed (All* rate_ptr = rate)
                {
                    GetShadingRateImagePaletteNV(viewport, entry, rate_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateImagePaletteNV(uint, uint, All*)"/>
            public static unsafe void GetShadingRateImagePaletteNV(uint viewport, uint entry, All[] rate)
            {
                fixed (All* rate_ptr = rate)
                {
                    GetShadingRateImagePaletteNV(viewport, entry, rate_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateImagePaletteNV(uint, uint, All*)"/>
            public static unsafe void GetShadingRateImagePaletteNV(uint viewport, uint entry, ref All rate)
            {
                fixed (All* rate_ptr = &rate)
                {
                    GetShadingRateImagePaletteNV(viewport, entry, rate_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateImagePaletteNV(uint, uint, All*)"/>
            public static unsafe All GetShadingRateImagePaletteNV(uint viewport, uint entry)
            {
                All rate_val;
                All* rate = &rate_val;
                GetShadingRateImagePaletteNV(viewport, entry, rate);
                return rate_val;
            }
            /// <inheritdoc cref="GetShadingRateSampleLocationivNV(All, uint, uint, int*)"/>
            public static unsafe void GetShadingRateSampleLocationivNV(All rate, uint samples, uint index, Span<int> location)
            {
                fixed (int* location_ptr = location)
                {
                    GetShadingRateSampleLocationivNV(rate, samples, index, location_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateSampleLocationivNV(All, uint, uint, int*)"/>
            public static unsafe void GetShadingRateSampleLocationivNV(All rate, uint samples, uint index, int[] location)
            {
                fixed (int* location_ptr = location)
                {
                    GetShadingRateSampleLocationivNV(rate, samples, index, location_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateSampleLocationivNV(All, uint, uint, int*)"/>
            public static unsafe void GetShadingRateSampleLocationivNV(All rate, uint samples, uint index, ref int location)
            {
                fixed (int* location_ptr = &location)
                {
                    GetShadingRateSampleLocationivNV(rate, samples, index, location_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateSampleLocationivNV(All, uint, uint, int*)"/>
            public static unsafe int GetShadingRateSampleLocationivNV(All rate, uint samples, uint index)
            {
                int location_val;
                int* location = &location_val;
                GetShadingRateSampleLocationivNV(rate, samples, index, location);
                return location_val;
            }
            /// <inheritdoc cref="GetTrackMatrixivNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetTrackMatrixivNV(VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTrackMatrixivNV(target, address, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTrackMatrixivNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetTrackMatrixivNV(VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTrackMatrixivNV(target, address, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTrackMatrixivNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetTrackMatrixivNV(VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTrackMatrixivNV(target, address, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTrackMatrixivNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, int*)"/>
            public static unsafe int GetTrackMatrixivNV(VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetTrackMatrixivNV(target, address, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTransformFeedbackVaryingNV(int, uint, int*)"/>
            public static unsafe void GetTransformFeedbackVaryingNV(int program, uint index, Span<int> location)
            {
                fixed (int* location_ptr = location)
                {
                    GetTransformFeedbackVaryingNV(program, index, location_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackVaryingNV(int, uint, int*)"/>
            public static unsafe void GetTransformFeedbackVaryingNV(int program, uint index, int[] location)
            {
                fixed (int* location_ptr = location)
                {
                    GetTransformFeedbackVaryingNV(program, index, location_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackVaryingNV(int, uint, int*)"/>
            public static unsafe void GetTransformFeedbackVaryingNV(int program, uint index, ref int location)
            {
                fixed (int* location_ptr = &location)
                {
                    GetTransformFeedbackVaryingNV(program, index, location_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackVaryingNV(int, uint, int*)"/>
            public static unsafe int GetTransformFeedbackVaryingNV(int program, uint index)
            {
                int location_val;
                int* location = &location_val;
                GetTransformFeedbackVaryingNV(program, index, location);
                return location_val;
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe void GetUniformi64vNV(int program, int location, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe void GetUniformi64vNV(int program, int location, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe void GetUniformi64vNV(int program, int location, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe long GetUniformi64vNV(int program, int location)
            {
                long parameters_val;
                long* parameters = &parameters_val;
                GetUniformi64vNV(program, location, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vNV(int program, int location, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vNV(int program, int location, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vNV(int program, int location, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe ulong GetUniformui64vNV(int program, int location)
            {
                ulong parameters_val;
                ulong* parameters = &parameters_val;
                GetUniformui64vNV(program, location, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVaryingLocationNV(int, byte*)"/>
            public static unsafe int GetVaryingLocationNV(int program, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetVaryingLocationNV(program, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetVertexAttribdvNV(uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetVertexAttribdvNV(uint index, VertexAttribEnumNV pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribdvNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribdvNV(uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetVertexAttribdvNV(uint index, VertexAttribEnumNV pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribdvNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribdvNV(uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetVertexAttribdvNV(uint index, VertexAttribEnumNV pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetVertexAttribdvNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribdvNV(uint, VertexAttribEnumNV, double*)"/>
            public static unsafe double GetVertexAttribdvNV(uint index, VertexAttribEnumNV pname)
            {
                double parameters_val;
                double* parameters = &parameters_val;
                GetVertexAttribdvNV(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribfvNV(uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetVertexAttribfvNV(uint index, VertexAttribEnumNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribfvNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfvNV(uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetVertexAttribfvNV(uint index, VertexAttribEnumNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribfvNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfvNV(uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetVertexAttribfvNV(uint index, VertexAttribEnumNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetVertexAttribfvNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfvNV(uint, VertexAttribEnumNV, float*)"/>
            public static unsafe float GetVertexAttribfvNV(uint index, VertexAttribEnumNV pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetVertexAttribfvNV(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribIivEXT(uint, VertexAttribEnum, int*)"/>
            public static unsafe void GetVertexAttribIivEXT(uint index, VertexAttribEnum pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribIivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIivEXT(uint, VertexAttribEnum, int*)"/>
            public static unsafe void GetVertexAttribIivEXT(uint index, VertexAttribEnum pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribIivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIivEXT(uint, VertexAttribEnum, int*)"/>
            public static unsafe void GetVertexAttribIivEXT(uint index, VertexAttribEnum pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVertexAttribIivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIivEXT(uint, VertexAttribEnum, int*)"/>
            public static unsafe int GetVertexAttribIivEXT(uint index, VertexAttribEnum pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetVertexAttribIivEXT(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribIuivEXT(uint, VertexAttribEnum, uint*)"/>
            public static unsafe void GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetVertexAttribIuivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIuivEXT(uint, VertexAttribEnum, uint*)"/>
            public static unsafe void GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetVertexAttribIuivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIuivEXT(uint, VertexAttribEnum, uint*)"/>
            public static unsafe void GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetVertexAttribIuivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIuivEXT(uint, VertexAttribEnum, uint*)"/>
            public static unsafe uint GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetVertexAttribIuivEXT(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribivNV(uint, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetVertexAttribivNV(uint index, VertexAttribEnumNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribivNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribivNV(uint, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetVertexAttribivNV(uint index, VertexAttribEnumNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribivNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribivNV(uint, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetVertexAttribivNV(uint index, VertexAttribEnumNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVertexAttribivNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribivNV(uint, VertexAttribEnumNV, int*)"/>
            public static unsafe int GetVertexAttribivNV(uint index, VertexAttribEnumNV pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetVertexAttribivNV(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribLi64vNV(uint, VertexAttribEnum, long*)"/>
            public static unsafe void GetVertexAttribLi64vNV(uint index, VertexAttribEnum pname, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetVertexAttribLi64vNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLi64vNV(uint, VertexAttribEnum, long*)"/>
            public static unsafe void GetVertexAttribLi64vNV(uint index, VertexAttribEnum pname, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetVertexAttribLi64vNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLi64vNV(uint, VertexAttribEnum, long*)"/>
            public static unsafe void GetVertexAttribLi64vNV(uint index, VertexAttribEnum pname, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetVertexAttribLi64vNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLi64vNV(uint, VertexAttribEnum, long*)"/>
            public static unsafe long GetVertexAttribLi64vNV(uint index, VertexAttribEnum pname)
            {
                long parameters_val;
                long* parameters = &parameters_val;
                GetVertexAttribLi64vNV(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribLui64vNV(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe void GetVertexAttribLui64vNV(uint index, VertexAttribEnum pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetVertexAttribLui64vNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLui64vNV(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe void GetVertexAttribLui64vNV(uint index, VertexAttribEnum pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetVertexAttribLui64vNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLui64vNV(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe void GetVertexAttribLui64vNV(uint index, VertexAttribEnum pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetVertexAttribLui64vNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLui64vNV(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe ulong GetVertexAttribLui64vNV(uint index, VertexAttribEnum pname)
            {
                ulong parameters_val;
                ulong* parameters = &parameters_val;
                GetVertexAttribLui64vNV(index, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVertexAttribPointervNV(uint, VertexAttribEnumNV, void**)"/>
            public static unsafe void GetVertexAttribPointervNV(uint index, VertexAttribEnumNV pname, void** pointer)
            {
                GetVertexAttribPointervNV_(index, pname, pointer);
            }
            /// <inheritdoc cref="GetVertexAttribPointervNV(uint, VertexAttribEnumNV, void**)"/>
            public static unsafe void* GetVertexAttribPointervNV(uint index, VertexAttribEnumNV pname)
            {
                void* pointer_val;
                void** pointer = &pointer_val;
                GetVertexAttribPointervNV_(index, pname, pointer);
                return pointer_val;
            }
            /// <inheritdoc cref="GetVideoCaptureivNV(uint, All, int*)"/>
            public static unsafe void GetVideoCaptureivNV(uint video_capture_slot, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoCaptureivNV(video_capture_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureivNV(uint, All, int*)"/>
            public static unsafe void GetVideoCaptureivNV(uint video_capture_slot, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoCaptureivNV(video_capture_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureivNV(uint, All, int*)"/>
            public static unsafe void GetVideoCaptureivNV(uint video_capture_slot, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVideoCaptureivNV(video_capture_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureivNV(uint, All, int*)"/>
            public static unsafe int GetVideoCaptureivNV(uint video_capture_slot, All pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetVideoCaptureivNV(video_capture_slot, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVideoCaptureStreamdvNV(uint, uint, All, double*)"/>
            public static unsafe void GetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, All pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamdvNV(uint, uint, All, double*)"/>
            public static unsafe void GetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, All pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamdvNV(uint, uint, All, double*)"/>
            public static unsafe void GetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, All pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamdvNV(uint, uint, All, double*)"/>
            public static unsafe double GetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, All pname)
            {
                double parameters_val;
                double* parameters = &parameters_val;
                GetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVideoCaptureStreamfvNV(uint, uint, All, float*)"/>
            public static unsafe void GetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, All pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamfvNV(uint, uint, All, float*)"/>
            public static unsafe void GetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, All pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamfvNV(uint, uint, All, float*)"/>
            public static unsafe void GetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, All pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamfvNV(uint, uint, All, float*)"/>
            public static unsafe float GetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, All pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVideoCaptureStreamivNV(uint, uint, All, int*)"/>
            public static unsafe void GetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamivNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamivNV(uint, uint, All, int*)"/>
            public static unsafe void GetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamivNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamivNV(uint, uint, All, int*)"/>
            public static unsafe void GetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVideoCaptureStreamivNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamivNV(uint, uint, All, int*)"/>
            public static unsafe int GetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, All pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetVideoCaptureStreamivNV(video_capture_slot, stream, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVideoi64vNV(uint, All, long*)"/>
            public static unsafe void GetVideoi64vNV(uint video_slot, All pname, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetVideoi64vNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoi64vNV(uint, All, long*)"/>
            public static unsafe void GetVideoi64vNV(uint video_slot, All pname, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetVideoi64vNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoi64vNV(uint, All, long*)"/>
            public static unsafe void GetVideoi64vNV(uint video_slot, All pname, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetVideoi64vNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoi64vNV(uint, All, long*)"/>
            public static unsafe long GetVideoi64vNV(uint video_slot, All pname)
            {
                long parameters_val;
                long* parameters = &parameters_val;
                GetVideoi64vNV(video_slot, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVideoivNV(uint, All, int*)"/>
            public static unsafe void GetVideoivNV(uint video_slot, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoivNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoivNV(uint, All, int*)"/>
            public static unsafe void GetVideoivNV(uint video_slot, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoivNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoivNV(uint, All, int*)"/>
            public static unsafe void GetVideoivNV(uint video_slot, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVideoivNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoivNV(uint, All, int*)"/>
            public static unsafe int GetVideoivNV(uint video_slot, All pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetVideoivNV(video_slot, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVideoui64vNV(uint, All, ulong*)"/>
            public static unsafe void GetVideoui64vNV(uint video_slot, All pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetVideoui64vNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoui64vNV(uint, All, ulong*)"/>
            public static unsafe void GetVideoui64vNV(uint video_slot, All pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetVideoui64vNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoui64vNV(uint, All, ulong*)"/>
            public static unsafe void GetVideoui64vNV(uint video_slot, All pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetVideoui64vNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoui64vNV(uint, All, ulong*)"/>
            public static unsafe ulong GetVideoui64vNV(uint video_slot, All pname)
            {
                ulong parameters_val;
                ulong* parameters = &parameters_val;
                GetVideoui64vNV(video_slot, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVideouivNV(uint, All, uint*)"/>
            public static unsafe void GetVideouivNV(uint video_slot, All pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetVideouivNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideouivNV(uint, All, uint*)"/>
            public static unsafe void GetVideouivNV(uint video_slot, All pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetVideouivNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideouivNV(uint, All, uint*)"/>
            public static unsafe void GetVideouivNV(uint video_slot, All pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetVideouivNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideouivNV(uint, All, uint*)"/>
            public static unsafe uint GetVideouivNV(uint video_slot, All pname)
            {
                uint parameters_val;
                uint* parameters = &parameters_val;
                GetVideouivNV(video_slot, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetVkProcAddrNV(byte*)"/>
            public static unsafe IntPtr GetVkProcAddrNV(string name)
            {
                IntPtr returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetVkProcAddrNV(name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="ListDrawCommandsStatesClientNV(uint, uint, void**, int*, uint*, uint*, uint)"/>
            public static unsafe void ListDrawCommandsStatesClientNV(uint list, uint segment, void** indirects, ReadOnlySpan<int> sizes, ReadOnlySpan<uint> states, ReadOnlySpan<uint> fbos, uint count)
            {
                fixed (int* sizes_ptr = sizes)
                {
                    fixed (uint* states_ptr = states)
                    {
                        fixed (uint* fbos_ptr = fbos)
                        {
                            ListDrawCommandsStatesClientNV(list, segment, indirects, sizes_ptr, states_ptr, fbos_ptr, count);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ListDrawCommandsStatesClientNV(uint, uint, void**, int*, uint*, uint*, uint)"/>
            public static unsafe void ListDrawCommandsStatesClientNV(uint list, uint segment, void** indirects, int[] sizes, uint[] states, uint[] fbos, uint count)
            {
                fixed (int* sizes_ptr = sizes)
                {
                    fixed (uint* states_ptr = states)
                    {
                        fixed (uint* fbos_ptr = fbos)
                        {
                            ListDrawCommandsStatesClientNV(list, segment, indirects, sizes_ptr, states_ptr, fbos_ptr, count);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ListDrawCommandsStatesClientNV(uint, uint, void**, int*, uint*, uint*, uint)"/>
            public static unsafe void ListDrawCommandsStatesClientNV(uint list, uint segment, void** indirects, in int sizes, in uint states, in uint fbos, uint count)
            {
                fixed (int* sizes_ptr = &sizes)
                fixed (uint* states_ptr = &states)
                fixed (uint* fbos_ptr = &fbos)
                {
                    ListDrawCommandsStatesClientNV(list, segment, indirects, sizes_ptr, states_ptr, fbos_ptr, count);
                }
            }
            /// <inheritdoc cref="LoadProgramNV(VertexAttribEnumNV, uint, int, byte*)"/>
            public static unsafe void LoadProgramNV(VertexAttribEnumNV target, uint id, ReadOnlySpan<byte> program)
            {
                int len = (int)(program.Length);
                fixed (byte* program_ptr = program)
                {
                    LoadProgramNV(target, id, len, program_ptr);
                }
            }
            /// <inheritdoc cref="LoadProgramNV(VertexAttribEnumNV, uint, int, byte*)"/>
            public static unsafe void LoadProgramNV(VertexAttribEnumNV target, uint id, byte[] program)
            {
                int len = (int)(program.Length);
                fixed (byte* program_ptr = program)
                {
                    LoadProgramNV(target, id, len, program_ptr);
                }
            }
            /// <inheritdoc cref="LoadProgramNV(VertexAttribEnumNV, uint, int, byte*)"/>
            public static unsafe void LoadProgramNV(VertexAttribEnumNV target, uint id, int len, in byte program)
            {
                fixed (byte* program_ptr = &program)
                {
                    LoadProgramNV(target, id, len, program_ptr);
                }
            }
            /// <inheritdoc cref="MapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, int, int, bool, void*)"/>
            public static unsafe void MapControlPointsNV(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points)
            {
                void* points_vptr = (void*)points;
                MapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points_vptr);
            }
            /// <inheritdoc cref="MapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, int, int, bool, void*)"/>
            public static unsafe void MapControlPointsNV<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, ReadOnlySpan<T1> points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = points)
                {
                    MapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="MapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, int, int, bool, void*)"/>
            public static unsafe void MapControlPointsNV<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, T1[] points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = points)
                {
                    MapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="MapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, int, int, bool, void*)"/>
            public static unsafe void MapControlPointsNV<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, in T1 points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = &points)
                {
                    MapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="MapParameterfvNV(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void MapParameterfvNV(EvalTargetNV target, MapParameterNV pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MapParameterfvNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapParameterfvNV(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void MapParameterfvNV(EvalTargetNV target, MapParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MapParameterfvNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapParameterfvNV(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void MapParameterfvNV(EvalTargetNV target, MapParameterNV pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    MapParameterfvNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapParameterivNV(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void MapParameterivNV(EvalTargetNV target, MapParameterNV pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MapParameterivNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapParameterivNV(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void MapParameterivNV(EvalTargetNV target, MapParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MapParameterivNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapParameterivNV(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void MapParameterivNV(EvalTargetNV target, MapParameterNV pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MapParameterivNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoad3x2fNV(All, float*)"/>
            public static unsafe void MatrixLoad3x2fNV(All matrixMode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoad3x2fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoad3x3fNV(All, float*)"/>
            public static unsafe void MatrixLoad3x3fNV(All matrixMode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoad3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoaddEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoaddEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoaddEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoaddEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoaddEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoaddEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoaddEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoaddEXT(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixLoaddEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadfEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadfEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadfEXT(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoadfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTranspose3x3fNV(All, float*)"/>
            public static unsafe void MatrixLoadTranspose3x3fNV(All matrixMode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoadTranspose3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposedEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoadTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposedEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoadTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposedEXT(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixLoadTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposefEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposefEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposefEXT(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoadTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMult3x2fNV(All, float*)"/>
            public static unsafe void MatrixMult3x2fNV(All matrixMode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMult3x2fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMult3x3fNV(All, float*)"/>
            public static unsafe void MatrixMult3x3fNV(All matrixMode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMult3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultdEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultdEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultdEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultdEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultdEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultdEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultdEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultdEXT(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixMultdEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultfEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultfEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultfEXT(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMultfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTranspose3x3fNV(All, float*)"/>
            public static unsafe void MatrixMultTranspose3x3fNV(All matrixMode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMultTranspose3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposedEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposedEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposedEXT(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixMultTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposefEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposefEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposefEXT(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMultTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MulticastBufferSubDataNV(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void MulticastBufferSubDataNV(uint gpuMask, int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                MulticastBufferSubDataNV(gpuMask, buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="MulticastBufferSubDataNV(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void MulticastBufferSubDataNV<T1>(uint gpuMask, int buffer, IntPtr offset, nint size, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    MulticastBufferSubDataNV(gpuMask, buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="MulticastFramebufferSampleLocationsfvNV(uint, int, uint, int, float*)"/>
            public static unsafe void MulticastFramebufferSampleLocationsfvNV(uint gpu, int framebuffer, uint start, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjecti64vNV(uint, uint, All, long*)"/>
            public static unsafe void MulticastGetQueryObjecti64vNV(uint gpu, uint id, All pname, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    MulticastGetQueryObjecti64vNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjectivNV(uint, uint, All, int*)"/>
            public static unsafe void MulticastGetQueryObjectivNV(uint gpu, uint id, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MulticastGetQueryObjectivNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjectui64vNV(uint, uint, All, ulong*)"/>
            public static unsafe void MulticastGetQueryObjectui64vNV(uint gpu, uint id, All pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    MulticastGetQueryObjectui64vNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjectuivNV(uint, uint, All, uint*)"/>
            public static unsafe void MulticastGetQueryObjectuivNV(uint gpu, uint id, All pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    MulticastGetQueryObjectuivNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindlessCountNV(PrimitiveType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindlessCountNV(PrimitiveType mode, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawArraysIndirectBindlessCountNV(mode, indirect_vptr, drawCount, maxDrawCount, stride, vertexBufferCount);
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindlessCountNV(PrimitiveType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindlessCountNV<T1>(PrimitiveType mode, in T1 indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawArraysIndirectBindlessCountNV(mode, indirect_ptr, drawCount, maxDrawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindlessNV(PrimitiveType, void*, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindlessNV(PrimitiveType mode, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawArraysIndirectBindlessNV(mode, indirect_vptr, drawCount, stride, vertexBufferCount);
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindlessNV(PrimitiveType, void*, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindlessNV<T1>(PrimitiveType mode, in T1 indirect, int drawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawArraysIndirectBindlessNV(mode, indirect_ptr, drawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindlessCountNV(PrimitiveType, DrawElementsType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindlessCountNV(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawElementsIndirectBindlessCountNV(mode, type, indirect_vptr, drawCount, maxDrawCount, stride, vertexBufferCount);
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindlessCountNV(PrimitiveType, DrawElementsType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindlessCountNV<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawElementsIndirectBindlessCountNV(mode, type, indirect_ptr, drawCount, maxDrawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindlessNV(PrimitiveType, DrawElementsType, void*, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindlessNV(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawElementsIndirectBindlessNV(mode, type, indirect_vptr, drawCount, stride, vertexBufferCount);
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindlessNV(PrimitiveType, DrawElementsType, void*, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindlessNV<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect, int drawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawElementsIndirectBindlessNV(mode, type, indirect_ptr, drawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord1hvNV(TextureUnit target, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord1hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord1hvNV(TextureUnit target, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord1hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord1hvNV(TextureUnit target, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    MultiTexCoord1hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord2hvNV(TextureUnit target, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord2hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord2hvNV(TextureUnit target, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord2hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord2hvNV(TextureUnit target, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    MultiTexCoord2hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord3hvNV(TextureUnit target, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord3hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord3hvNV(TextureUnit target, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord3hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord3hvNV(TextureUnit target, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    MultiTexCoord3hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord4hvNV(TextureUnit target, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord4hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord4hvNV(TextureUnit target, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord4hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord4hvNV(TextureUnit target, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    MultiTexCoord4hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferSampleLocationsfvNV(int, uint, int, float*)"/>
            public static unsafe void NamedFramebufferSampleLocationsfvNV(int framebuffer, uint start, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    NamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="Normal3hvNV(Half*)"/>
            public static unsafe void Normal3hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Normal3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Normal3hvNV(Half*)"/>
            public static unsafe void Normal3hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Normal3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Normal3hvNV(Half*)"/>
            public static unsafe void Normal3hvNV(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Normal3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="PathColorGenNV(PathColor, PathGenMode, PathColorFormat, float*)"/>
            public static unsafe void PathColorGenNV(PathColor color, PathGenMode genMode, PathColorFormat colorFormat, ReadOnlySpan<float> coeffs)
            {
                fixed (float* coeffs_ptr = coeffs)
                {
                    PathColorGenNV(color, genMode, colorFormat, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PathColorGenNV(PathColor, PathGenMode, PathColorFormat, float*)"/>
            public static unsafe void PathColorGenNV(PathColor color, PathGenMode genMode, PathColorFormat colorFormat, float[] coeffs)
            {
                fixed (float* coeffs_ptr = coeffs)
                {
                    PathColorGenNV(color, genMode, colorFormat, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PathColorGenNV(PathColor, PathGenMode, PathColorFormat, float*)"/>
            public static unsafe void PathColorGenNV(PathColor color, PathGenMode genMode, PathColorFormat colorFormat, in float coeffs)
            {
                fixed (float* coeffs_ptr = &coeffs)
                {
                    PathColorGenNV(color, genMode, colorFormat, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PathCommandsNV(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommandsNV(uint path, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathCommandsNV(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommandsNV(uint path, byte[] commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathCommandsNV(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommandsNV(uint path, int numCommands, in byte commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                fixed (byte* commands_ptr = &commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathCommandsNV(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommandsNV<T1>(uint path, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
                where T1 : unmanaged
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    fixed (void* coords_ptr = coords)
                    {
                        PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PathCommandsNV(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommandsNV<T1>(uint path, byte[] commands, int numCoords, PathCoordType coordType, T1[] coords)
                where T1 : unmanaged
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    fixed (void* coords_ptr = coords)
                    {
                        PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PathCommandsNV(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommandsNV<T1>(uint path, int numCommands, in byte commands, int numCoords, PathCoordType coordType, in T1 coords)
                where T1 : unmanaged
            {
                fixed (byte* commands_ptr = &commands)
                fixed (void* coords_ptr = &coords)
                {
                    PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathCoordsNV(uint, int, PathCoordType, void*)"/>
            public static unsafe void PathCoordsNV(uint path, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                void* coords_vptr = (void*)coords;
                PathCoordsNV(path, numCoords, coordType, coords_vptr);
            }
            /// <inheritdoc cref="PathCoordsNV(uint, int, PathCoordType, void*)"/>
            public static unsafe void PathCoordsNV<T1>(uint path, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    PathCoordsNV(path, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathCoordsNV(uint, int, PathCoordType, void*)"/>
            public static unsafe void PathCoordsNV<T1>(uint path, int numCoords, PathCoordType coordType, T1[] coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    PathCoordsNV(path, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathCoordsNV(uint, int, PathCoordType, void*)"/>
            public static unsafe void PathCoordsNV<T1>(uint path, int numCoords, PathCoordType coordType, in T1 coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = &coords)
                {
                    PathCoordsNV(path, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathDashArrayNV(uint, int, float*)"/>
            public static unsafe void PathDashArrayNV(uint path, ReadOnlySpan<float> dashArray)
            {
                int dashCount = (int)(dashArray.Length);
                fixed (float* dashArray_ptr = dashArray)
                {
                    PathDashArrayNV(path, dashCount, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="PathDashArrayNV(uint, int, float*)"/>
            public static unsafe void PathDashArrayNV(uint path, float[] dashArray)
            {
                int dashCount = (int)(dashArray.Length);
                fixed (float* dashArray_ptr = dashArray)
                {
                    PathDashArrayNV(path, dashCount, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="PathDashArrayNV(uint, int, float*)"/>
            public static unsafe void PathDashArrayNV(uint path, int dashCount, in float dashArray)
            {
                fixed (float* dashArray_ptr = &dashArray)
                {
                    PathDashArrayNV(path, dashCount, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="PathGlyphIndexArrayNV(uint, All, void*, PathFontStyle, uint, int, uint, float)"/>
            public static unsafe All PathGlyphIndexArrayNV(uint firstPathName, All fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
            {
                All returnValue;
                void* fontName_vptr = (void*)fontName;
                returnValue = PathGlyphIndexArrayNV(firstPathName, fontTarget, fontName_vptr, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexArrayNV(uint, All, void*, PathFontStyle, uint, int, uint, float)"/>
            public static unsafe All PathGlyphIndexArrayNV<T1>(uint firstPathName, All fontTarget, in T1 fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontName_ptr = &fontName)
                {
                    returnValue = PathGlyphIndexArrayNV(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRangeNV(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRangeNV(All fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, Span<uint> baseAndCount)
            {
                All returnValue;
                fixed (uint* baseAndCount_ptr = baseAndCount)
                {
                    void* fontName_vptr = (void*)fontName;
                    returnValue = PathGlyphIndexRangeNV(fontTarget, fontName_vptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRangeNV(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRangeNV(All fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint[] baseAndCount)
            {
                All returnValue;
                fixed (uint* baseAndCount_ptr = baseAndCount)
                {
                    void* fontName_vptr = (void*)fontName;
                    returnValue = PathGlyphIndexRangeNV(fontTarget, fontName_vptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRangeNV(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRangeNV(All fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, ref uint baseAndCount)
            {
                All returnValue;
                fixed (uint* baseAndCount_ptr = &baseAndCount)
                {
                    void* fontName_vptr = (void*)fontName;
                    returnValue = PathGlyphIndexRangeNV(fontTarget, fontName_vptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRangeNV(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRangeNV<T1>(All fontTarget, in T1 fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, Span<uint> baseAndCount)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontName_ptr = &fontName)
                {
                    fixed (uint* baseAndCount_ptr = baseAndCount)
                    {
                        returnValue = PathGlyphIndexRangeNV(fontTarget, fontName_ptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRangeNV(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRangeNV<T1>(All fontTarget, in T1 fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint[] baseAndCount)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontName_ptr = &fontName)
                {
                    fixed (uint* baseAndCount_ptr = baseAndCount)
                    {
                        returnValue = PathGlyphIndexRangeNV(fontTarget, fontName_ptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRangeNV(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRangeNV<T1>(All fontTarget, in T1 fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, ref uint baseAndCount)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontName_ptr = &fontName)
                fixed (uint* baseAndCount_ptr = &baseAndCount)
                {
                    returnValue = PathGlyphIndexRangeNV(fontTarget, fontName_ptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphRangeNV(uint, PathFontTarget, void*, PathFontStyle, uint, int, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphRangeNV(uint firstPathName, PathFontTarget fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
            {
                void* fontName_vptr = (void*)fontName;
                PathGlyphRangeNV(firstPathName, fontTarget, fontName_vptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
            }
            /// <inheritdoc cref="PathGlyphRangeNV(uint, PathFontTarget, void*, PathFontStyle, uint, int, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphRangeNV<T1>(uint firstPathName, PathFontTarget fontTarget, ReadOnlySpan<T1> fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                fixed (void* fontName_ptr = fontName)
                {
                    PathGlyphRangeNV(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
                }
            }
            /// <inheritdoc cref="PathGlyphRangeNV(uint, PathFontTarget, void*, PathFontStyle, uint, int, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphRangeNV<T1>(uint firstPathName, PathFontTarget fontTarget, T1[] fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                fixed (void* fontName_ptr = fontName)
                {
                    PathGlyphRangeNV(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
                }
            }
            /// <inheritdoc cref="PathGlyphRangeNV(uint, PathFontTarget, void*, PathFontStyle, uint, int, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphRangeNV<T1>(uint firstPathName, PathFontTarget fontTarget, in T1 fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                fixed (void* fontName_ptr = &fontName)
                {
                    PathGlyphRangeNV(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
                }
            }
            /// <inheritdoc cref="PathGlyphsNV(uint, PathFontTarget, void*, PathFontStyle, int, PathElementType, void*, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphsNV(uint firstPathName, PathFontTarget fontTarget, IntPtr fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, IntPtr charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
            {
                void* fontName_vptr = (void*)fontName;
                void* charcodes_vptr = (void*)charcodes;
                PathGlyphsNV(firstPathName, fontTarget, fontName_vptr, fontStyle, numGlyphs, type, charcodes_vptr, handleMissingGlyphs, pathParameterTemplate, emScale);
            }
            /// <inheritdoc cref="PathGlyphsNV(uint, PathFontTarget, void*, PathFontStyle, int, PathElementType, void*, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphsNV<T1, T2>(uint firstPathName, PathFontTarget fontTarget, ReadOnlySpan<T2> fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, ReadOnlySpan<T1> charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* fontName_ptr = fontName)
                {
                    fixed (void* charcodes_ptr = charcodes)
                    {
                        PathGlyphsNV(firstPathName, fontTarget, fontName_ptr, fontStyle, numGlyphs, type, charcodes_ptr, handleMissingGlyphs, pathParameterTemplate, emScale);
                    }
                }
            }
            /// <inheritdoc cref="PathGlyphsNV(uint, PathFontTarget, void*, PathFontStyle, int, PathElementType, void*, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphsNV<T1, T2>(uint firstPathName, PathFontTarget fontTarget, T2[] fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, T1[] charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* fontName_ptr = fontName)
                {
                    fixed (void* charcodes_ptr = charcodes)
                    {
                        PathGlyphsNV(firstPathName, fontTarget, fontName_ptr, fontStyle, numGlyphs, type, charcodes_ptr, handleMissingGlyphs, pathParameterTemplate, emScale);
                    }
                }
            }
            /// <inheritdoc cref="PathGlyphsNV(uint, PathFontTarget, void*, PathFontStyle, int, PathElementType, void*, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphsNV<T1, T2>(uint firstPathName, PathFontTarget fontTarget, in T1 fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, in T2 charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* fontName_ptr = &fontName)
                fixed (void* charcodes_ptr = &charcodes)
                {
                    PathGlyphsNV(firstPathName, fontTarget, fontName_ptr, fontStyle, numGlyphs, type, charcodes_ptr, handleMissingGlyphs, pathParameterTemplate, emScale);
                }
            }
            /// <inheritdoc cref="PathMemoryGlyphIndexArrayNV(uint, All, nint, void*, int, uint, int, uint, float)"/>
            public static unsafe All PathMemoryGlyphIndexArrayNV(uint firstPathName, All fontTarget, nint fontSize, IntPtr fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
            {
                All returnValue;
                void* fontData_vptr = (void*)fontData;
                returnValue = PathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData_vptr, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                return returnValue;
            }
            /// <inheritdoc cref="PathMemoryGlyphIndexArrayNV(uint, All, nint, void*, int, uint, int, uint, float)"/>
            public static unsafe All PathMemoryGlyphIndexArrayNV<T1>(uint firstPathName, All fontTarget, nint fontSize, in T1 fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontData_ptr = &fontData)
                {
                    returnValue = PathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData_ptr, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathParameterfvNV(uint, PathParameter, float*)"/>
            public static unsafe void PathParameterfvNV(uint path, PathParameter pname, ReadOnlySpan<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    PathParameterfvNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathParameterfvNV(uint, PathParameter, float*)"/>
            public static unsafe void PathParameterfvNV(uint path, PathParameter pname, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    PathParameterfvNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathParameterfvNV(uint, PathParameter, float*)"/>
            public static unsafe void PathParameterfvNV(uint path, PathParameter pname, in float value)
            {
                fixed (float* value_ptr = &value)
                {
                    PathParameterfvNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathParameterivNV(uint, PathParameter, int*)"/>
            public static unsafe void PathParameterivNV(uint path, PathParameter pname, ReadOnlySpan<int> value)
            {
                fixed (int* value_ptr = value)
                {
                    PathParameterivNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathParameterivNV(uint, PathParameter, int*)"/>
            public static unsafe void PathParameterivNV(uint path, PathParameter pname, int[] value)
            {
                fixed (int* value_ptr = value)
                {
                    PathParameterivNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathParameterivNV(uint, PathParameter, int*)"/>
            public static unsafe void PathParameterivNV(uint path, PathParameter pname, in int value)
            {
                fixed (int* value_ptr = &value)
                {
                    PathParameterivNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathStringNV(uint, PathStringFormat, int, void*)"/>
            public static unsafe void PathStringNV(uint path, PathStringFormat format, int length, IntPtr pathString)
            {
                void* pathString_vptr = (void*)pathString;
                PathStringNV(path, format, length, pathString_vptr);
            }
            /// <inheritdoc cref="PathStringNV(uint, PathStringFormat, int, void*)"/>
            public static unsafe void PathStringNV<T1>(uint path, PathStringFormat format, ReadOnlySpan<T1> pathString)
                where T1 : unmanaged
            {
                int length = (int)(pathString.Length * sizeof(T1));
                fixed (void* pathString_ptr = pathString)
                {
                    PathStringNV(path, format, length, pathString_ptr);
                }
            }
            /// <inheritdoc cref="PathStringNV(uint, PathStringFormat, int, void*)"/>
            public static unsafe void PathStringNV<T1>(uint path, PathStringFormat format, T1[] pathString)
                where T1 : unmanaged
            {
                int length = (int)(pathString.Length * sizeof(T1));
                fixed (void* pathString_ptr = pathString)
                {
                    PathStringNV(path, format, length, pathString_ptr);
                }
            }
            /// <inheritdoc cref="PathStringNV(uint, PathStringFormat, int, void*)"/>
            public static unsafe void PathStringNV<T1>(uint path, PathStringFormat format, int length, in T1 pathString)
                where T1 : unmanaged
            {
                fixed (void* pathString_ptr = &pathString)
                {
                    PathStringNV(path, format, length, pathString_ptr);
                }
            }
            /// <inheritdoc cref="PathSubCommandsNV(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommandsNV(uint path, int commandStart, int commandsToDelete, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathSubCommandsNV(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommandsNV(uint path, int commandStart, int commandsToDelete, byte[] commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathSubCommandsNV(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, in byte commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                fixed (byte* commands_ptr = &commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathSubCommandsNV(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommandsNV<T1>(uint path, int commandStart, int commandsToDelete, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
                where T1 : unmanaged
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    fixed (void* coords_ptr = coords)
                    {
                        PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PathSubCommandsNV(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommandsNV<T1>(uint path, int commandStart, int commandsToDelete, byte[] commands, int numCoords, PathCoordType coordType, T1[] coords)
                where T1 : unmanaged
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    fixed (void* coords_ptr = coords)
                    {
                        PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PathSubCommandsNV(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommandsNV<T1>(uint path, int commandStart, int commandsToDelete, int numCommands, in byte commands, int numCoords, PathCoordType coordType, in T1 coords)
                where T1 : unmanaged
            {
                fixed (byte* commands_ptr = &commands)
                fixed (void* coords_ptr = &coords)
                {
                    PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathSubCoordsNV(uint, int, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCoordsNV(uint path, int coordStart, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                void* coords_vptr = (void*)coords;
                PathSubCoordsNV(path, coordStart, numCoords, coordType, coords_vptr);
            }
            /// <inheritdoc cref="PathSubCoordsNV(uint, int, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCoordsNV<T1>(uint path, int coordStart, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    PathSubCoordsNV(path, coordStart, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathSubCoordsNV(uint, int, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCoordsNV<T1>(uint path, int coordStart, int numCoords, PathCoordType coordType, T1[] coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    PathSubCoordsNV(path, coordStart, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathSubCoordsNV(uint, int, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCoordsNV<T1>(uint path, int coordStart, int numCoords, PathCoordType coordType, in T1 coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = &coords)
                {
                    PathSubCoordsNV(path, coordStart, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathTexGenNV(PathColor, PathGenMode, int, float*)"/>
            public static unsafe void PathTexGenNV(PathColor texCoordSet, PathGenMode genMode, int components, ReadOnlySpan<float> coeffs)
            {
                fixed (float* coeffs_ptr = coeffs)
                {
                    PathTexGenNV(texCoordSet, genMode, components, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PathTexGenNV(PathColor, PathGenMode, int, float*)"/>
            public static unsafe void PathTexGenNV(PathColor texCoordSet, PathGenMode genMode, int components, float[] coeffs)
            {
                fixed (float* coeffs_ptr = coeffs)
                {
                    PathTexGenNV(texCoordSet, genMode, components, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PathTexGenNV(PathColor, PathGenMode, int, float*)"/>
            public static unsafe void PathTexGenNV(PathColor texCoordSet, PathGenMode genMode, int components, in float coeffs)
            {
                fixed (float* coeffs_ptr = &coeffs)
                {
                    PathTexGenNV(texCoordSet, genMode, components, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PixelDataRangeNV(PixelDataRangeTargetNV, int, void*)"/>
            public static unsafe void PixelDataRangeNV(PixelDataRangeTargetNV target, int length, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                PixelDataRangeNV(target, length, pointer_vptr);
            }
            /// <inheritdoc cref="PixelDataRangeNV(PixelDataRangeTargetNV, int, void*)"/>
            public static unsafe void PixelDataRangeNV<T1>(PixelDataRangeTargetNV target, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    PixelDataRangeNV(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="PixelDataRangeNV(PixelDataRangeTargetNV, int, void*)"/>
            public static unsafe void PixelDataRangeNV<T1>(PixelDataRangeTargetNV target, T1[] pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    PixelDataRangeNV(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="PixelDataRangeNV(PixelDataRangeTargetNV, int, void*)"/>
            public static unsafe void PixelDataRangeNV<T1>(PixelDataRangeTargetNV target, int length, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    PixelDataRangeNV(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="PointAlongPathNV(uint, int, int, float, float*, float*, float*, float*)"/>
            public static unsafe bool PointAlongPathNV(uint path, int startSegment, int numSegments, float distance, Span<float> x, Span<float> y, Span<float> tangentX, Span<float> tangentY)
            {
                bool returnValue;
                fixed (float* x_ptr = x)
                {
                    fixed (float* y_ptr = y)
                    {
                        fixed (float* tangentX_ptr = tangentX)
                        {
                            fixed (float* tangentY_ptr = tangentY)
                            {
                                returnValue = PointAlongPathNV(path, startSegment, numSegments, distance, x_ptr, y_ptr, tangentX_ptr, tangentY_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="PointAlongPathNV(uint, int, int, float, float*, float*, float*, float*)"/>
            public static unsafe bool PointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float[] x, float[] y, float[] tangentX, float[] tangentY)
            {
                bool returnValue;
                fixed (float* x_ptr = x)
                {
                    fixed (float* y_ptr = y)
                    {
                        fixed (float* tangentX_ptr = tangentX)
                        {
                            fixed (float* tangentY_ptr = tangentY)
                            {
                                returnValue = PointAlongPathNV(path, startSegment, numSegments, distance, x_ptr, y_ptr, tangentX_ptr, tangentY_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="PointAlongPathNV(uint, int, int, float, float*, float*, float*, float*)"/>
            public static unsafe bool PointAlongPathNV(uint path, int startSegment, int numSegments, float distance, ref float x, ref float y, ref float tangentX, ref float tangentY)
            {
                bool returnValue;
                fixed (float* x_ptr = &x)
                fixed (float* y_ptr = &y)
                fixed (float* tangentX_ptr = &tangentX)
                fixed (float* tangentY_ptr = &tangentY)
                {
                    returnValue = PointAlongPathNV(path, startSegment, numSegments, distance, x_ptr, y_ptr, tangentX_ptr, tangentY_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PointParameterivNV(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameterivNV(PointParameterNameARB pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PointParameterivNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterivNV(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameterivNV(PointParameterNameARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PointParameterivNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterivNV(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameterivNV(PointParameterNameARB pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    PointParameterivNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersfvNV(ProgramTarget, uint, uint, int, float*)"/>
            public static unsafe void ProgramBufferParametersfvNV(ProgramTarget target, uint bindingIndex, uint wordIndex, ReadOnlySpan<float> parameters)
            {
                int count = (int)(parameters.Length);
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersfvNV(ProgramTarget, uint, uint, int, float*)"/>
            public static unsafe void ProgramBufferParametersfvNV(ProgramTarget target, uint bindingIndex, uint wordIndex, float[] parameters)
            {
                int count = (int)(parameters.Length);
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersfvNV(ProgramTarget, uint, uint, int, float*)"/>
            public static unsafe void ProgramBufferParametersfvNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIivNV(ProgramTarget, uint, uint, int, int*)"/>
            public static unsafe void ProgramBufferParametersIivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, ReadOnlySpan<int> parameters)
            {
                int count = (int)(parameters.Length);
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIivNV(ProgramTarget, uint, uint, int, int*)"/>
            public static unsafe void ProgramBufferParametersIivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int[] parameters)
            {
                int count = (int)(parameters.Length);
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIivNV(ProgramTarget, uint, uint, int, int*)"/>
            public static unsafe void ProgramBufferParametersIivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIuivNV(ProgramTarget, uint, uint, int, uint*)"/>
            public static unsafe void ProgramBufferParametersIuivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, ReadOnlySpan<uint> parameters)
            {
                int count = (int)(parameters.Length);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIuivNV(ProgramTarget, uint, uint, int, uint*)"/>
            public static unsafe void ProgramBufferParametersIuivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, uint[] parameters)
            {
                int count = (int)(parameters.Length);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIuivNV(ProgramTarget, uint, uint, int, uint*)"/>
            public static unsafe void ProgramBufferParametersIuivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4ivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramEnvParameterI4ivNV(ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramEnvParameterI4ivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4ivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramEnvParameterI4ivNV(ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramEnvParameterI4ivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4ivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramEnvParameterI4ivNV(ProgramTarget target, uint index, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ProgramEnvParameterI4ivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4uivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramEnvParameterI4uivNV(ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramEnvParameterI4uivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4uivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramEnvParameterI4uivNV(ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramEnvParameterI4uivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4uivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramEnvParameterI4uivNV(ProgramTarget target, uint index, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramEnvParameterI4uivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4ivNV(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramEnvParametersI4ivNV(ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramEnvParametersI4ivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4ivNV(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramEnvParametersI4ivNV(ProgramTarget target, uint index, int[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramEnvParametersI4ivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4ivNV(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramEnvParametersI4ivNV(ProgramTarget target, uint index, int count, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ProgramEnvParametersI4ivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4uivNV(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramEnvParametersI4uivNV(ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramEnvParametersI4uivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4uivNV(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramEnvParametersI4uivNV(ProgramTarget target, uint index, uint[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramEnvParametersI4uivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4uivNV(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramEnvParametersI4uivNV(ProgramTarget target, uint index, int count, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramEnvParametersI4uivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4ivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramLocalParameterI4ivNV(ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramLocalParameterI4ivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4ivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramLocalParameterI4ivNV(ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramLocalParameterI4ivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4ivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramLocalParameterI4ivNV(ProgramTarget target, uint index, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ProgramLocalParameterI4ivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4uivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramLocalParameterI4uivNV(ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramLocalParameterI4uivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4uivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramLocalParameterI4uivNV(ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramLocalParameterI4uivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4uivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramLocalParameterI4uivNV(ProgramTarget target, uint index, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramLocalParameterI4uivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4ivNV(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramLocalParametersI4ivNV(ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramLocalParametersI4ivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4ivNV(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramLocalParametersI4ivNV(ProgramTarget target, uint index, int[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramLocalParametersI4ivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4ivNV(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramLocalParametersI4ivNV(ProgramTarget target, uint index, int count, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ProgramLocalParametersI4ivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4uivNV(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramLocalParametersI4uivNV(ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramLocalParametersI4uivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4uivNV(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramLocalParametersI4uivNV(ProgramTarget target, uint index, uint[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramLocalParametersI4uivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4uivNV(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramLocalParametersI4uivNV(ProgramTarget target, uint index, int count, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramLocalParametersI4uivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4dNV(int, int, byte*, double, double, double, double)"/>
            public static unsafe void ProgramNamedParameter4dNV(int id, int len, ReadOnlySpan<byte> name, double x, double y, double z, double w)
            {
                fixed (byte* name_ptr = name)
                {
                    ProgramNamedParameter4dNV(id, len, name_ptr, x, y, z, w);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4dNV(int, int, byte*, double, double, double, double)"/>
            public static unsafe void ProgramNamedParameter4dNV(int id, int len, byte[] name, double x, double y, double z, double w)
            {
                fixed (byte* name_ptr = name)
                {
                    ProgramNamedParameter4dNV(id, len, name_ptr, x, y, z, w);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4dNV(int, int, byte*, double, double, double, double)"/>
            public static unsafe void ProgramNamedParameter4dNV(int id, int len, in byte name, double x, double y, double z, double w)
            {
                fixed (byte* name_ptr = &name)
                {
                    ProgramNamedParameter4dNV(id, len, name_ptr, x, y, z, w);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4dvNV(int, int, byte*, double*)"/>
            public static unsafe void ProgramNamedParameter4dvNV(int id, int len, ReadOnlySpan<byte> name, ReadOnlySpan<double> v)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (double* v_ptr = v)
                    {
                        ProgramNamedParameter4dvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4dvNV(int, int, byte*, double*)"/>
            public static unsafe void ProgramNamedParameter4dvNV(int id, int len, byte[] name, double[] v)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (double* v_ptr = v)
                    {
                        ProgramNamedParameter4dvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4dvNV(int, int, byte*, double*)"/>
            public static unsafe void ProgramNamedParameter4dvNV(int id, int len, in byte name, in double v)
            {
                fixed (byte* name_ptr = &name)
                fixed (double* v_ptr = &v)
                {
                    ProgramNamedParameter4dvNV(id, len, name_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4fNV(int, int, byte*, float, float, float, float)"/>
            public static unsafe void ProgramNamedParameter4fNV(int id, int len, ReadOnlySpan<byte> name, float x, float y, float z, float w)
            {
                fixed (byte* name_ptr = name)
                {
                    ProgramNamedParameter4fNV(id, len, name_ptr, x, y, z, w);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4fNV(int, int, byte*, float, float, float, float)"/>
            public static unsafe void ProgramNamedParameter4fNV(int id, int len, byte[] name, float x, float y, float z, float w)
            {
                fixed (byte* name_ptr = name)
                {
                    ProgramNamedParameter4fNV(id, len, name_ptr, x, y, z, w);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4fNV(int, int, byte*, float, float, float, float)"/>
            public static unsafe void ProgramNamedParameter4fNV(int id, int len, in byte name, float x, float y, float z, float w)
            {
                fixed (byte* name_ptr = &name)
                {
                    ProgramNamedParameter4fNV(id, len, name_ptr, x, y, z, w);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4fvNV(int, int, byte*, float*)"/>
            public static unsafe void ProgramNamedParameter4fvNV(int id, int len, ReadOnlySpan<byte> name, ReadOnlySpan<float> v)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (float* v_ptr = v)
                    {
                        ProgramNamedParameter4fvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4fvNV(int, int, byte*, float*)"/>
            public static unsafe void ProgramNamedParameter4fvNV(int id, int len, byte[] name, float[] v)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (float* v_ptr = v)
                    {
                        ProgramNamedParameter4fvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4fvNV(int, int, byte*, float*)"/>
            public static unsafe void ProgramNamedParameter4fvNV(int id, int len, in byte name, in float v)
            {
                fixed (byte* name_ptr = &name)
                fixed (float* v_ptr = &v)
                {
                    ProgramNamedParameter4fvNV(id, len, name_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4dvNV(VertexAttribEnumNV, uint, double*)"/>
            public static unsafe void ProgramParameter4dvNV(VertexAttribEnumNV target, uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    ProgramParameter4dvNV(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4dvNV(VertexAttribEnumNV, uint, double*)"/>
            public static unsafe void ProgramParameter4dvNV(VertexAttribEnumNV target, uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    ProgramParameter4dvNV(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4dvNV(VertexAttribEnumNV, uint, double*)"/>
            public static unsafe void ProgramParameter4dvNV(VertexAttribEnumNV target, uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    ProgramParameter4dvNV(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4fvNV(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ProgramParameter4fvNV(VertexAttribEnumNV target, uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    ProgramParameter4fvNV(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4fvNV(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ProgramParameter4fvNV(VertexAttribEnumNV target, uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    ProgramParameter4fvNV(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4fvNV(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ProgramParameter4fvNV(VertexAttribEnumNV target, uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    ProgramParameter4fvNV(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4dvNV(VertexAttribEnumNV, uint, int, double*)"/>
            public static unsafe void ProgramParameters4dvNV(VertexAttribEnumNV target, uint index, ReadOnlySpan<double> v)
            {
                int count = (int)(v.Length / 4);
                fixed (double* v_ptr = v)
                {
                    ProgramParameters4dvNV(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4dvNV(VertexAttribEnumNV, uint, int, double*)"/>
            public static unsafe void ProgramParameters4dvNV(VertexAttribEnumNV target, uint index, double[] v)
            {
                int count = (int)(v.Length / 4);
                fixed (double* v_ptr = v)
                {
                    ProgramParameters4dvNV(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4dvNV(VertexAttribEnumNV, uint, int, double*)"/>
            public static unsafe void ProgramParameters4dvNV(VertexAttribEnumNV target, uint index, int count, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    ProgramParameters4dvNV(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4fvNV(VertexAttribEnumNV, uint, int, float*)"/>
            public static unsafe void ProgramParameters4fvNV(VertexAttribEnumNV target, uint index, ReadOnlySpan<float> v)
            {
                int count = (int)(v.Length / 4);
                fixed (float* v_ptr = v)
                {
                    ProgramParameters4fvNV(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4fvNV(VertexAttribEnumNV, uint, int, float*)"/>
            public static unsafe void ProgramParameters4fvNV(VertexAttribEnumNV target, uint index, float[] v)
            {
                int count = (int)(v.Length / 4);
                fixed (float* v_ptr = v)
                {
                    ProgramParameters4fvNV(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4fvNV(VertexAttribEnumNV, uint, int, float*)"/>
            public static unsafe void ProgramParameters4fvNV(VertexAttribEnumNV target, uint index, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    ProgramParameters4fvNV(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramPathFragmentInputGenNV(int, int, All, int, float*)"/>
            public static unsafe void ProgramPathFragmentInputGenNV(int program, int location, All genMode, int components, in float coeffs)
            {
                fixed (float* coeffs_ptr = &coeffs)
                {
                    ProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="ProgramSubroutineParametersuivNV(All, int, uint*)"/>
            public static unsafe void ProgramSubroutineParametersuivNV(All target, ReadOnlySpan<uint> parameters)
            {
                int count = (int)(parameters.Length);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramSubroutineParametersuivNV(target, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramSubroutineParametersuivNV(All, int, uint*)"/>
            public static unsafe void ProgramSubroutineParametersuivNV(All target, uint[] parameters)
            {
                int count = (int)(parameters.Length);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramSubroutineParametersuivNV(target, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramSubroutineParametersuivNV(All, int, uint*)"/>
            public static unsafe void ProgramSubroutineParametersuivNV(All target, int count, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramSubroutineParametersuivNV(target, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform1i64vNV(int program, int location, int count, in long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform1i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform1ui64vNV(int program, int location, int count, in ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform1ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64vNV(int program, int location, ReadOnlySpan<ulong> values)
            {
                int count = (int)(values.Length);
                fixed (ulong* values_ptr = values)
                {
                    ProgramUniformHandleui64vNV(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64vNV(int program, int location, ulong[] values)
            {
                int count = (int)(values.Length);
                fixed (ulong* values_ptr = values)
                {
                    ProgramUniformHandleui64vNV(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64vNV(int program, int location, int count, in ulong values)
            {
                fixed (ulong* values_ptr = &values)
                {
                    ProgramUniformHandleui64vNV(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformui64vNV(int program, int location, ReadOnlySpan<ulong> value)
            {
                int count = (int)(value.Length);
                fixed (ulong* value_ptr = value)
                {
                    ProgramUniformui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformui64vNV(int program, int location, ulong[] value)
            {
                int count = (int)(value.Length);
                fixed (ulong* value_ptr = value)
                {
                    ProgramUniformui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformui64vNV(int program, int location, int count, in ulong value)
            {
                fixed (ulong* value_ptr = &value)
                {
                    ProgramUniformui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="QueryResourceNV(All, int, uint, int*)"/>
            public static unsafe int QueryResourceNV(All queryType, int tagId, Span<int> buffer)
            {
                int returnValue;
                uint count = (uint)(buffer.Length);
                fixed (int* buffer_ptr = buffer)
                {
                    returnValue = QueryResourceNV(queryType, tagId, count, buffer_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="QueryResourceNV(All, int, uint, int*)"/>
            public static unsafe int QueryResourceNV(All queryType, int tagId, int[] buffer)
            {
                int returnValue;
                uint count = (uint)(buffer.Length);
                fixed (int* buffer_ptr = buffer)
                {
                    returnValue = QueryResourceNV(queryType, tagId, count, buffer_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="QueryResourceNV(All, int, uint, int*)"/>
            public static unsafe int QueryResourceNV(All queryType, int tagId, uint count, ref int buffer)
            {
                int returnValue;
                fixed (int* buffer_ptr = &buffer)
                {
                    returnValue = QueryResourceNV(queryType, tagId, count, buffer_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="QueryResourceTagNV(int, byte*)"/>
            public static unsafe void QueryResourceTagNV(int tagId, string tagString)
            {
                byte* tagString_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(tagString);
                QueryResourceTagNV(tagId, tagString_ptr);
                Marshal.FreeCoTaskMem((IntPtr)tagString_ptr);
            }
            /// <inheritdoc cref="RequestResidentProgramsNV(int, int*)"/>
            public static unsafe void RequestResidentProgramsNV(ReadOnlySpan<int> programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    RequestResidentProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="RequestResidentProgramsNV(int, int*)"/>
            public static unsafe void RequestResidentProgramsNV(int[] programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    RequestResidentProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="RequestResidentProgramsNV(int, int*)"/>
            public static unsafe void RequestResidentProgramsNV(int n, in int programs)
            {
                fixed (int* programs_ptr = &programs)
                {
                    RequestResidentProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="ScissorExclusiveArrayvNV(uint, int, int*)"/>
            public static unsafe void ScissorExclusiveArrayvNV(uint first, int count, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorExclusiveArrayvNV(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorExclusiveArrayvNV(uint, int, int*)"/>
            public static unsafe void ScissorExclusiveArrayvNV(uint first, int count, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorExclusiveArrayvNV(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorExclusiveArrayvNV(uint, int, int*)"/>
            public static unsafe void ScissorExclusiveArrayvNV(uint first, int count, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    ScissorExclusiveArrayvNV(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3hvNV(Half*)"/>
            public static unsafe void SecondaryColor3hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    SecondaryColor3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3hvNV(Half*)"/>
            public static unsafe void SecondaryColor3hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    SecondaryColor3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3hvNV(Half*)"/>
            public static unsafe void SecondaryColor3hvNV(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    SecondaryColor3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="SemaphoreParameterivNV(uint, SemaphoreParameterName, int*)"/>
            public static unsafe void SemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    SemaphoreParameterivNV(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateImagePaletteNV(uint, uint, int, All*)"/>
            public static unsafe void ShadingRateImagePaletteNV(uint viewport, uint first, ReadOnlySpan<All> rates)
            {
                int count = (int)(rates.Length);
                fixed (All* rates_ptr = rates)
                {
                    ShadingRateImagePaletteNV(viewport, first, count, rates_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateImagePaletteNV(uint, uint, int, All*)"/>
            public static unsafe void ShadingRateImagePaletteNV(uint viewport, uint first, All[] rates)
            {
                int count = (int)(rates.Length);
                fixed (All* rates_ptr = rates)
                {
                    ShadingRateImagePaletteNV(viewport, first, count, rates_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateImagePaletteNV(uint, uint, int, All*)"/>
            public static unsafe void ShadingRateImagePaletteNV(uint viewport, uint first, int count, in All rates)
            {
                fixed (All* rates_ptr = &rates)
                {
                    ShadingRateImagePaletteNV(viewport, first, count, rates_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateSampleOrderCustomNV(All, uint, int*)"/>
            public static unsafe void ShadingRateSampleOrderCustomNV(All rate, uint samples, ReadOnlySpan<int> locations)
            {
                fixed (int* locations_ptr = locations)
                {
                    ShadingRateSampleOrderCustomNV(rate, samples, locations_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateSampleOrderCustomNV(All, uint, int*)"/>
            public static unsafe void ShadingRateSampleOrderCustomNV(All rate, uint samples, int[] locations)
            {
                fixed (int* locations_ptr = locations)
                {
                    ShadingRateSampleOrderCustomNV(rate, samples, locations_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateSampleOrderCustomNV(All, uint, int*)"/>
            public static unsafe void ShadingRateSampleOrderCustomNV(All rate, uint samples, in int locations)
            {
                fixed (int* locations_ptr = &locations)
                {
                    ShadingRateSampleOrderCustomNV(rate, samples, locations_ptr);
                }
            }
            /// <inheritdoc cref="StencilFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, in float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, in float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    StencilFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, PathTransformType transformType, in float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, int reference, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, int reference, uint mask, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, int reference, uint mask, PathTransformType transformType, in float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    StencilStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1hvNV(Half*)"/>
            public static unsafe void TexCoord1hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord1hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1hvNV(Half*)"/>
            public static unsafe void TexCoord1hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord1hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1hvNV(Half*)"/>
            public static unsafe void TexCoord1hvNV(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    TexCoord1hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2hvNV(Half*)"/>
            public static unsafe void TexCoord2hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord2hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2hvNV(Half*)"/>
            public static unsafe void TexCoord2hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord2hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2hvNV(Half*)"/>
            public static unsafe void TexCoord2hvNV(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    TexCoord2hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3hvNV(Half*)"/>
            public static unsafe void TexCoord3hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3hvNV(Half*)"/>
            public static unsafe void TexCoord3hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3hvNV(Half*)"/>
            public static unsafe void TexCoord3hvNV(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    TexCoord3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4hvNV(Half*)"/>
            public static unsafe void TexCoord4hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4hvNV(Half*)"/>
            public static unsafe void TexCoord4hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4hvNV(Half*)"/>
            public static unsafe void TexCoord4hvNV(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    TexCoord4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TransformFeedbackAttribsNV(int, int*, All)"/>
            public static unsafe void TransformFeedbackAttribsNV(int count, ReadOnlySpan<int> attribs, All bufferMode)
            {
                fixed (int* attribs_ptr = attribs)
                {
                    TransformFeedbackAttribsNV(count, attribs_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackAttribsNV(int, int*, All)"/>
            public static unsafe void TransformFeedbackAttribsNV(int count, int[] attribs, All bufferMode)
            {
                fixed (int* attribs_ptr = attribs)
                {
                    TransformFeedbackAttribsNV(count, attribs_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackAttribsNV(int, int*, All)"/>
            public static unsafe void TransformFeedbackAttribsNV(int count, in int attribs, All bufferMode)
            {
                fixed (int* attribs_ptr = &attribs)
                {
                    TransformFeedbackAttribsNV(count, attribs_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackStreamAttribsNV(int, int*, int, int*, All)"/>
            public static unsafe void TransformFeedbackStreamAttribsNV(ReadOnlySpan<int> attribs, ReadOnlySpan<int> bufstreams, All bufferMode)
            {
                int count = (int)(attribs.Length);
                fixed (int* attribs_ptr = attribs)
                {
                    int nbuffers = (int)(bufstreams.Length);
                    fixed (int* bufstreams_ptr = bufstreams)
                    {
                        TransformFeedbackStreamAttribsNV(count, attribs_ptr, nbuffers, bufstreams_ptr, bufferMode);
                    }
                }
            }
            /// <inheritdoc cref="TransformFeedbackStreamAttribsNV(int, int*, int, int*, All)"/>
            public static unsafe void TransformFeedbackStreamAttribsNV(int[] attribs, int[] bufstreams, All bufferMode)
            {
                int count = (int)(attribs.Length);
                fixed (int* attribs_ptr = attribs)
                {
                    int nbuffers = (int)(bufstreams.Length);
                    fixed (int* bufstreams_ptr = bufstreams)
                    {
                        TransformFeedbackStreamAttribsNV(count, attribs_ptr, nbuffers, bufstreams_ptr, bufferMode);
                    }
                }
            }
            /// <inheritdoc cref="TransformFeedbackStreamAttribsNV(int, int*, int, int*, All)"/>
            public static unsafe void TransformFeedbackStreamAttribsNV(int count, in int attribs, int nbuffers, in int bufstreams, All bufferMode)
            {
                fixed (int* attribs_ptr = &attribs)
                fixed (int* bufstreams_ptr = &bufstreams)
                {
                    TransformFeedbackStreamAttribsNV(count, attribs_ptr, nbuffers, bufstreams_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackVaryingsNV(int, int, TransformFeedbackTokenNV*, TransformFeedbackBufferMode)"/>
            public static unsafe void TransformFeedbackVaryingsNV(int program, ReadOnlySpan<TransformFeedbackTokenNV> locations, TransformFeedbackBufferMode bufferMode)
            {
                int count = (int)(locations.Length);
                fixed (TransformFeedbackTokenNV* locations_ptr = locations)
                {
                    TransformFeedbackVaryingsNV(program, count, locations_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackVaryingsNV(int, int, TransformFeedbackTokenNV*, TransformFeedbackBufferMode)"/>
            public static unsafe void TransformFeedbackVaryingsNV(int program, TransformFeedbackTokenNV[] locations, TransformFeedbackBufferMode bufferMode)
            {
                int count = (int)(locations.Length);
                fixed (TransformFeedbackTokenNV* locations_ptr = locations)
                {
                    TransformFeedbackVaryingsNV(program, count, locations_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackVaryingsNV(int, int, TransformFeedbackTokenNV*, TransformFeedbackBufferMode)"/>
            public static unsafe void TransformFeedbackVaryingsNV(int program, int count, in TransformFeedbackTokenNV locations, TransformFeedbackBufferMode bufferMode)
            {
                fixed (TransformFeedbackTokenNV* locations_ptr = &locations)
                {
                    TransformFeedbackVaryingsNV(program, count, locations_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformPathNV(uint, uint, PathTransformType, float*)"/>
            public static unsafe void TransformPathNV(uint resultPath, uint srcPath, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    TransformPathNV(resultPath, srcPath, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="TransformPathNV(uint, uint, PathTransformType, float*)"/>
            public static unsafe void TransformPathNV(uint resultPath, uint srcPath, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    TransformPathNV(resultPath, srcPath, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="TransformPathNV(uint, uint, PathTransformType, float*)"/>
            public static unsafe void TransformPathNV(uint resultPath, uint srcPath, PathTransformType transformType, in float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    TransformPathNV(resultPath, srcPath, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vNV(int, int, long*)"/>
            public static unsafe void Uniform1i64vNV(int location, int count, in long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vNV(int, int, long*)"/>
            public static unsafe void Uniform1i64vNV(int location, int count, ReadOnlySpan<long> value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vNV(int, int, long*)"/>
            public static unsafe void Uniform1i64vNV(int location, int count, long[] value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vNV(int location, int count, in ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vNV(int location, int count, ReadOnlySpan<ulong> value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vNV(int location, int count, ulong[] value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64vNV(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64vNV(int location, ReadOnlySpan<ulong> value)
            {
                int count = (int)(value.Length);
                fixed (ulong* value_ptr = value)
                {
                    UniformHandleui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64vNV(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64vNV(int location, ulong[] value)
            {
                int count = (int)(value.Length);
                fixed (ulong* value_ptr = value)
                {
                    UniformHandleui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64vNV(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64vNV(int location, int count, in ulong value)
            {
                fixed (ulong* value_ptr = &value)
                {
                    UniformHandleui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniformui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniformui64vNV(int location, ReadOnlySpan<ulong> value)
            {
                int count = (int)(value.Length / 1);
                fixed (ulong* value_ptr = value)
                {
                    Uniformui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniformui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniformui64vNV(int location, ulong[] value)
            {
                int count = (int)(value.Length / 1);
                fixed (ulong* value_ptr = value)
                {
                    Uniformui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniformui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniformui64vNV(int location, int count, in ulong value)
            {
                fixed (ulong* value_ptr = &value)
                {
                    Uniformui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUGetSurfaceivNV(IntPtr, All, int, int*, int*)"/>
            public static unsafe void VDPAUGetSurfaceivNV(IntPtr surface, All pname, ref int length, Span<int> values)
            {
                fixed (int* length_ptr = &length)
                {
                    int count = (int)(values.Length);
                    fixed (int* values_ptr = values)
                    {
                        VDPAUGetSurfaceivNV(surface, pname, count, length_ptr, values_ptr);
                    }
                }
            }
            /// <inheritdoc cref="VDPAUGetSurfaceivNV(IntPtr, All, int, int*, int*)"/>
            public static unsafe void VDPAUGetSurfaceivNV(IntPtr surface, All pname, ref int length, int[] values)
            {
                fixed (int* length_ptr = &length)
                {
                    int count = (int)(values.Length);
                    fixed (int* values_ptr = values)
                    {
                        VDPAUGetSurfaceivNV(surface, pname, count, length_ptr, values_ptr);
                    }
                }
            }
            /// <inheritdoc cref="VDPAUGetSurfaceivNV(IntPtr, All, int, int*, int*)"/>
            public static unsafe void VDPAUGetSurfaceivNV(IntPtr surface, All pname, int count, ref int length, ref int values)
            {
                fixed (int* length_ptr = &length)
                fixed (int* values_ptr = &values)
                {
                    VDPAUGetSurfaceivNV(surface, pname, count, length_ptr, values_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUInitNV(void*, void*)"/>
            public static unsafe void VDPAUInitNV(IntPtr vdpDevice, IntPtr getProcAddress)
            {
                void* vdpDevice_vptr = (void*)vdpDevice;
                void* getProcAddress_vptr = (void*)getProcAddress;
                VDPAUInitNV(vdpDevice_vptr, getProcAddress_vptr);
            }
            /// <inheritdoc cref="VDPAUInitNV(void*, void*)"/>
            public static unsafe void VDPAUInitNV<T1, T2>(in T1 vdpDevice, in T2 getProcAddress)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* vdpDevice_ptr = &vdpDevice)
                fixed (void* getProcAddress_ptr = &getProcAddress)
                {
                    VDPAUInitNV(vdpDevice_ptr, getProcAddress_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUMapSurfacesNV(int, IntPtr*)"/>
            public static unsafe void VDPAUMapSurfacesNV(ReadOnlySpan<IntPtr> surfaces)
            {
                int numSurfaces = (int)(surfaces.Length);
                fixed (IntPtr* surfaces_ptr = surfaces)
                {
                    VDPAUMapSurfacesNV(numSurfaces, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUMapSurfacesNV(int, IntPtr*)"/>
            public static unsafe void VDPAUMapSurfacesNV(IntPtr[] surfaces)
            {
                int numSurfaces = (int)(surfaces.Length);
                fixed (IntPtr* surfaces_ptr = surfaces)
                {
                    VDPAUMapSurfacesNV(numSurfaces, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUMapSurfacesNV(int, IntPtr*)"/>
            public static unsafe void VDPAUMapSurfacesNV(int numSurfaces, in IntPtr surfaces)
            {
                fixed (IntPtr* surfaces_ptr = &surfaces)
                {
                    VDPAUMapSurfacesNV(numSurfaces, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurfaceNV(IntPtr vdpSurface, All target, ReadOnlySpan<uint> textureNames)
            {
                IntPtr returnValue;
                int numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterOutputSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurfaceNV(IntPtr vdpSurface, All target, uint[] textureNames)
            {
                IntPtr returnValue;
                int numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterOutputSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurfaceNV(IntPtr vdpSurface, All target, int numTextureNames, in uint textureNames)
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterOutputSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurfaceNV<T1>(in T1 vdpSurface, All target, ReadOnlySpan<uint> textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                {
                    int numTextureNames = (int)(textureNames.Length);
                    fixed (uint* textureNames_ptr = textureNames)
                    {
                        returnValue = VDPAURegisterOutputSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurfaceNV<T1>(in T1 vdpSurface, All target, uint[] textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                {
                    int numTextureNames = (int)(textureNames.Length);
                    fixed (uint* textureNames_ptr = textureNames)
                    {
                        returnValue = VDPAURegisterOutputSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurfaceNV<T1>(in T1 vdpSurface, All target, int numTextureNames, in uint textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    returnValue = VDPAURegisterOutputSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceNV(IntPtr vdpSurface, All target, ReadOnlySpan<uint> textureNames)
            {
                IntPtr returnValue;
                int numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceNV(IntPtr vdpSurface, All target, uint[] textureNames)
            {
                IntPtr returnValue;
                int numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceNV(IntPtr vdpSurface, All target, int numTextureNames, in uint textureNames)
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceNV<T1>(in T1 vdpSurface, All target, ReadOnlySpan<uint> textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                {
                    int numTextureNames = (int)(textureNames.Length);
                    fixed (uint* textureNames_ptr = textureNames)
                    {
                        returnValue = VDPAURegisterVideoSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceNV<T1>(in T1 vdpSurface, All target, uint[] textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                {
                    int numTextureNames = (int)(textureNames.Length);
                    fixed (uint* textureNames_ptr = textureNames)
                    {
                        returnValue = VDPAURegisterVideoSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceNV<T1>(in T1 vdpSurface, All target, int numTextureNames, in uint textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    returnValue = VDPAURegisterVideoSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructureNV(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV(IntPtr vdpSurface, All target, ReadOnlySpan<uint> textureNames, bool isFrameStructure)
            {
                IntPtr returnValue;
                int numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructureNV(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV(IntPtr vdpSurface, All target, uint[] textureNames, bool isFrameStructure)
            {
                IntPtr returnValue;
                int numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructureNV(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV(IntPtr vdpSurface, All target, int numTextureNames, in uint textureNames, bool isFrameStructure)
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructureNV(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV<T1>(in T1 vdpSurface, All target, ReadOnlySpan<uint> textureNames, bool isFrameStructure)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                {
                    int numTextureNames = (int)(textureNames.Length);
                    fixed (uint* textureNames_ptr = textureNames)
                    {
                        returnValue = VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructureNV(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV<T1>(in T1 vdpSurface, All target, uint[] textureNames, bool isFrameStructure)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                {
                    int numTextureNames = (int)(textureNames.Length);
                    fixed (uint* textureNames_ptr = textureNames)
                    {
                        returnValue = VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructureNV(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV<T1>(in T1 vdpSurface, All target, int numTextureNames, in uint textureNames, bool isFrameStructure)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    returnValue = VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAUUnmapSurfacesNV(int, IntPtr*)"/>
            public static unsafe void VDPAUUnmapSurfacesNV(ReadOnlySpan<IntPtr> surfaces)
            {
                int numSurface = (int)(surfaces.Length);
                fixed (IntPtr* surfaces_ptr = surfaces)
                {
                    VDPAUUnmapSurfacesNV(numSurface, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUUnmapSurfacesNV(int, IntPtr*)"/>
            public static unsafe void VDPAUUnmapSurfacesNV(IntPtr[] surfaces)
            {
                int numSurface = (int)(surfaces.Length);
                fixed (IntPtr* surfaces_ptr = surfaces)
                {
                    VDPAUUnmapSurfacesNV(numSurface, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUUnmapSurfacesNV(int, IntPtr*)"/>
            public static unsafe void VDPAUUnmapSurfacesNV(int numSurface, in IntPtr surfaces)
            {
                fixed (IntPtr* surfaces_ptr = &surfaces)
                {
                    VDPAUUnmapSurfacesNV(numSurface, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2hvNV(Half*)"/>
            public static unsafe void Vertex2hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex2hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2hvNV(Half*)"/>
            public static unsafe void Vertex2hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex2hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2hvNV(Half*)"/>
            public static unsafe void Vertex2hvNV(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Vertex2hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3hvNV(Half*)"/>
            public static unsafe void Vertex3hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3hvNV(Half*)"/>
            public static unsafe void Vertex3hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3hvNV(Half*)"/>
            public static unsafe void Vertex3hvNV(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Vertex3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4hvNV(Half*)"/>
            public static unsafe void Vertex4hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4hvNV(Half*)"/>
            public static unsafe void Vertex4hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4hvNV(Half*)"/>
            public static unsafe void Vertex4hvNV(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Vertex4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRangeNV(int, void*)"/>
            public static unsafe void VertexArrayRangeNV(int length, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexArrayRangeNV(length, pointer_vptr);
            }
            /// <inheritdoc cref="VertexArrayRangeNV(int, void*)"/>
            public static unsafe void VertexArrayRangeNV<T1>(int length, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexArrayRangeNV(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRangeNV(int, void*)"/>
            public static unsafe void VertexArrayRangeNV<T1>(int length, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexArrayRangeNV(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRangeNV(int, void*)"/>
            public static unsafe void VertexArrayRangeNV<T1>(int length, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexArrayRangeNV(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib1dvNV(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib1dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib1dvNV(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib1dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib1dvNV(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib1dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib1fvNV(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib1fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib1fvNV(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib1fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib1fvNV(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib1fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib1hvNV(uint index, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib1hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib1hvNV(uint index, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib1hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib1hvNV(uint index, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttrib1hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1svNV(uint, short*)"/>
            public static unsafe void VertexAttrib1svNV(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib1svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1svNV(uint, short*)"/>
            public static unsafe void VertexAttrib1svNV(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib1svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1svNV(uint, short*)"/>
            public static unsafe void VertexAttrib1svNV(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib1svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib2dvNV(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib2dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib2dvNV(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib2dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib2dvNV(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib2dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib2fvNV(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib2fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib2fvNV(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib2fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib2fvNV(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib2fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib2hvNV(uint index, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib2hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib2hvNV(uint index, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib2hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib2hvNV(uint index, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttrib2hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2svNV(uint, short*)"/>
            public static unsafe void VertexAttrib2svNV(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib2svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2svNV(uint, short*)"/>
            public static unsafe void VertexAttrib2svNV(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib2svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2svNV(uint, short*)"/>
            public static unsafe void VertexAttrib2svNV(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib2svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib3dvNV(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib3dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib3dvNV(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib3dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib3dvNV(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib3dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib3fvNV(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib3fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib3fvNV(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib3fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib3fvNV(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib3fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib3hvNV(uint index, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib3hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib3hvNV(uint index, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib3hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib3hvNV(uint index, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttrib3hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3svNV(uint, short*)"/>
            public static unsafe void VertexAttrib3svNV(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib3svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3svNV(uint, short*)"/>
            public static unsafe void VertexAttrib3svNV(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib3svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3svNV(uint, short*)"/>
            public static unsafe void VertexAttrib3svNV(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib3svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib4dvNV(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib4dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib4dvNV(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib4dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib4dvNV(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib4dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib4fvNV(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib4fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib4fvNV(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib4fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib4fvNV(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib4fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib4hvNV(uint index, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib4hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib4hvNV(uint index, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib4hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib4hvNV(uint index, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttrib4hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4svNV(uint, short*)"/>
            public static unsafe void VertexAttrib4svNV(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4svNV(uint, short*)"/>
            public static unsafe void VertexAttrib4svNV(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4svNV(uint, short*)"/>
            public static unsafe void VertexAttrib4svNV(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib4svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubvNV(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubvNV(uint index, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4ubvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubvNV(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubvNV(uint index, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4ubvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubvNV(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubvNV(uint index, in byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttrib4ubvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI1ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI1ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI1ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI1ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI1ivEXT(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI1ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI1uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI1uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI1uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI1uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI1uivEXT(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI1uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI2ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI2ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI2ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI2ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI2ivEXT(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI2ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI2uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI2uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI2uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI2uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI2uivEXT(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI2uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI3ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI3ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI3ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI3ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI3ivEXT(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI3ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI3uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI3uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI3uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI3uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI3uivEXT(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI3uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bvEXT(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bvEXT(uint index, ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttribI4bvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bvEXT(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bvEXT(uint index, sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttribI4bvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bvEXT(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bvEXT(uint index, in sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    VertexAttribI4bvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI4ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI4ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI4ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI4ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI4ivEXT(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI4ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4svEXT(uint, short*)"/>
            public static unsafe void VertexAttribI4svEXT(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribI4svEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4svEXT(uint, short*)"/>
            public static unsafe void VertexAttribI4svEXT(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribI4svEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4svEXT(uint, short*)"/>
            public static unsafe void VertexAttribI4svEXT(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribI4svEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubvEXT(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubvEXT(uint index, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttribI4ubvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubvEXT(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubvEXT(uint index, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttribI4ubvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubvEXT(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubvEXT(uint index, in byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttribI4ubvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI4uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI4uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI4uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI4uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI4uivEXT(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI4uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usvEXT(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usvEXT(uint index, ReadOnlySpan<ushort> v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttribI4usvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usvEXT(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usvEXT(uint index, ushort[] v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttribI4usvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usvEXT(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usvEXT(uint index, in ushort v)
            {
                fixed (ushort* v_ptr = &v)
                {
                    VertexAttribI4usvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT(uint index, int size, VertexAttribIType type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexAttribIPointerEXT(index, size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT<T1>(uint index, int size, VertexAttribIType type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT<T1>(uint index, int size, VertexAttribIType type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT<T1>(uint index, int size, VertexAttribIType type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL1i64vNV(uint index, ReadOnlySpan<long> v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL1i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL1i64vNV(uint index, long[] v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL1i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL1i64vNV(uint index, in long v)
            {
                fixed (long* v_ptr = &v)
                {
                    VertexAttribL1i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL1ui64vNV(uint index, ReadOnlySpan<ulong> v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL1ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL1ui64vNV(uint index, ulong[] v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL1ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL1ui64vNV(uint index, in ulong v)
            {
                fixed (ulong* v_ptr = &v)
                {
                    VertexAttribL1ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL2i64vNV(uint index, ReadOnlySpan<long> v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL2i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL2i64vNV(uint index, long[] v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL2i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL2i64vNV(uint index, in long v)
            {
                fixed (long* v_ptr = &v)
                {
                    VertexAttribL2i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL2ui64vNV(uint index, ReadOnlySpan<ulong> v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL2ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL2ui64vNV(uint index, ulong[] v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL2ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL2ui64vNV(uint index, in ulong v)
            {
                fixed (ulong* v_ptr = &v)
                {
                    VertexAttribL2ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL3i64vNV(uint index, ReadOnlySpan<long> v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL3i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL3i64vNV(uint index, long[] v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL3i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL3i64vNV(uint index, in long v)
            {
                fixed (long* v_ptr = &v)
                {
                    VertexAttribL3i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL3ui64vNV(uint index, ReadOnlySpan<ulong> v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL3ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL3ui64vNV(uint index, ulong[] v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL3ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL3ui64vNV(uint index, in ulong v)
            {
                fixed (ulong* v_ptr = &v)
                {
                    VertexAttribL3ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL4i64vNV(uint index, ReadOnlySpan<long> v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL4i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL4i64vNV(uint index, long[] v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL4i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL4i64vNV(uint index, in long v)
            {
                fixed (long* v_ptr = &v)
                {
                    VertexAttribL4i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL4ui64vNV(uint index, ReadOnlySpan<ulong> v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL4ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL4ui64vNV(uint index, ulong[] v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL4ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL4ui64vNV(uint index, in ulong v)
            {
                fixed (ulong* v_ptr = &v)
                {
                    VertexAttribL4ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointerNV(uint, int, VertexAttribEnumNV, int, void*)"/>
            public static unsafe void VertexAttribPointerNV(uint index, int fsize, VertexAttribEnumNV type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexAttribPointerNV(index, fsize, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexAttribPointerNV(uint, int, VertexAttribEnumNV, int, void*)"/>
            public static unsafe void VertexAttribPointerNV<T1>(uint index, int fsize, VertexAttribEnumNV type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribPointerNV(index, fsize, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointerNV(uint, int, VertexAttribEnumNV, int, void*)"/>
            public static unsafe void VertexAttribPointerNV<T1>(uint index, int fsize, VertexAttribEnumNV type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribPointerNV(index, fsize, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointerNV(uint, int, VertexAttribEnumNV, int, void*)"/>
            public static unsafe void VertexAttribPointerNV<T1>(uint index, int fsize, VertexAttribEnumNV type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexAttribPointerNV(index, fsize, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs1dvNV(uint index, ReadOnlySpan<double> v)
            {
                int count = (int)(v.Length);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs1dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs1dvNV(uint index, double[] v)
            {
                int count = (int)(v.Length);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs1dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs1dvNV(uint index, int count, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribs1dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs1fvNV(uint index, ReadOnlySpan<float> v)
            {
                int count = (int)(v.Length);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs1fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs1fvNV(uint index, float[] v)
            {
                int count = (int)(v.Length);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs1fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs1fvNV(uint index, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttribs1fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs1hvNV(uint index, ReadOnlySpan<Half> v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs1hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs1hvNV(uint index, Half[] v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs1hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs1hvNV(uint index, int n, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttribs1hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs1svNV(uint index, ReadOnlySpan<short> v)
            {
                int count = (int)(v.Length);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs1svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs1svNV(uint index, short[] v)
            {
                int count = (int)(v.Length);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs1svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs1svNV(uint index, int count, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribs1svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs2dvNV(uint index, ReadOnlySpan<double> v)
            {
                int count = (int)(v.Length / 2);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs2dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs2dvNV(uint index, double[] v)
            {
                int count = (int)(v.Length / 2);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs2dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs2dvNV(uint index, int count, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribs2dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs2fvNV(uint index, ReadOnlySpan<float> v)
            {
                int count = (int)(v.Length / 2);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs2fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs2fvNV(uint index, float[] v)
            {
                int count = (int)(v.Length / 2);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs2fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs2fvNV(uint index, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttribs2fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs2hvNV(uint index, ReadOnlySpan<Half> v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs2hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs2hvNV(uint index, Half[] v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs2hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs2hvNV(uint index, int n, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttribs2hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs2svNV(uint index, ReadOnlySpan<short> v)
            {
                int count = (int)(v.Length / 2);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs2svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs2svNV(uint index, short[] v)
            {
                int count = (int)(v.Length / 2);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs2svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs2svNV(uint index, int count, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribs2svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs3dvNV(uint index, ReadOnlySpan<double> v)
            {
                int count = (int)(v.Length / 3);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs3dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs3dvNV(uint index, double[] v)
            {
                int count = (int)(v.Length / 3);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs3dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs3dvNV(uint index, int count, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribs3dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs3fvNV(uint index, ReadOnlySpan<float> v)
            {
                int count = (int)(v.Length / 3);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs3fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs3fvNV(uint index, float[] v)
            {
                int count = (int)(v.Length / 3);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs3fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs3fvNV(uint index, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttribs3fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs3hvNV(uint index, ReadOnlySpan<Half> v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs3hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs3hvNV(uint index, Half[] v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs3hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs3hvNV(uint index, int n, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttribs3hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs3svNV(uint index, ReadOnlySpan<short> v)
            {
                int count = (int)(v.Length / 3);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs3svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs3svNV(uint index, short[] v)
            {
                int count = (int)(v.Length / 3);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs3svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs3svNV(uint index, int count, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribs3svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs4dvNV(uint index, ReadOnlySpan<double> v)
            {
                int count = (int)(v.Length / 4);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs4dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs4dvNV(uint index, double[] v)
            {
                int count = (int)(v.Length / 4);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs4dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs4dvNV(uint index, int count, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribs4dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs4fvNV(uint index, ReadOnlySpan<float> v)
            {
                int count = (int)(v.Length / 4);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs4fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs4fvNV(uint index, float[] v)
            {
                int count = (int)(v.Length / 4);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs4fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs4fvNV(uint index, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttribs4fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs4hvNV(uint index, ReadOnlySpan<Half> v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs4hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs4hvNV(uint index, Half[] v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs4hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs4hvNV(uint index, int n, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttribs4hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs4svNV(uint index, ReadOnlySpan<short> v)
            {
                int count = (int)(v.Length / 4);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs4svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs4svNV(uint index, short[] v)
            {
                int count = (int)(v.Length / 4);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs4svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs4svNV(uint index, int count, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribs4svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4ubvNV(uint, int, byte*)"/>
            public static unsafe void VertexAttribs4ubvNV(uint index, ReadOnlySpan<byte> v)
            {
                int count = (int)(v.Length / 4);
                fixed (byte* v_ptr = v)
                {
                    VertexAttribs4ubvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4ubvNV(uint, int, byte*)"/>
            public static unsafe void VertexAttribs4ubvNV(uint index, byte[] v)
            {
                int count = (int)(v.Length / 4);
                fixed (byte* v_ptr = v)
                {
                    VertexAttribs4ubvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4ubvNV(uint, int, byte*)"/>
            public static unsafe void VertexAttribs4ubvNV(uint index, int count, in byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttribs4ubvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeighthvNV(Half*)"/>
            public static unsafe void VertexWeighthvNV(ReadOnlySpan<Half> weight)
            {
                fixed (Half* weight_ptr = weight)
                {
                    VertexWeighthvNV(weight_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeighthvNV(Half*)"/>
            public static unsafe void VertexWeighthvNV(Half[] weight)
            {
                fixed (Half* weight_ptr = weight)
                {
                    VertexWeighthvNV(weight_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeighthvNV(Half*)"/>
            public static unsafe void VertexWeighthvNV(in Half weight)
            {
                fixed (Half* weight_ptr = &weight)
                {
                    VertexWeighthvNV(weight_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureNV(uint, uint*, ulong*)"/>
            public static unsafe All VideoCaptureNV(uint video_capture_slot, ref uint sequence_num, ref ulong capture_time)
            {
                All returnValue;
                fixed (uint* sequence_num_ptr = &sequence_num)
                fixed (ulong* capture_time_ptr = &capture_time)
                {
                    returnValue = VideoCaptureNV(video_capture_slot, sequence_num_ptr, capture_time_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterdvNV(uint, uint, All, double*)"/>
            public static unsafe void VideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, All pname, ReadOnlySpan<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterdvNV(uint, uint, All, double*)"/>
            public static unsafe void VideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, All pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterdvNV(uint, uint, All, double*)"/>
            public static unsafe void VideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, All pname, in double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    VideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterfvNV(uint, uint, All, float*)"/>
            public static unsafe void VideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, All pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterfvNV(uint, uint, All, float*)"/>
            public static unsafe void VideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, All pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterfvNV(uint, uint, All, float*)"/>
            public static unsafe void VideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, All pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    VideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterivNV(uint, uint, All, int*)"/>
            public static unsafe void VideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, All pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterivNV(uint, uint, All, int*)"/>
            public static unsafe void VideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterivNV(uint, uint, All, int*)"/>
            public static unsafe void VideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, All pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    VideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="WeightPathsNV(uint, int, uint*, float*)"/>
            public static unsafe void WeightPathsNV(uint resultPath, int numPaths, ReadOnlySpan<uint> paths, ReadOnlySpan<float> weights)
            {
                fixed (uint* paths_ptr = paths)
                {
                    fixed (float* weights_ptr = weights)
                    {
                        WeightPathsNV(resultPath, numPaths, paths_ptr, weights_ptr);
                    }
                }
            }
            /// <inheritdoc cref="WeightPathsNV(uint, int, uint*, float*)"/>
            public static unsafe void WeightPathsNV(uint resultPath, int numPaths, uint[] paths, float[] weights)
            {
                fixed (uint* paths_ptr = paths)
                {
                    fixed (float* weights_ptr = weights)
                    {
                        WeightPathsNV(resultPath, numPaths, paths_ptr, weights_ptr);
                    }
                }
            }
            /// <inheritdoc cref="WeightPathsNV(uint, int, uint*, float*)"/>
            public static unsafe void WeightPathsNV(uint resultPath, int numPaths, in uint paths, in float weights)
            {
                fixed (uint* paths_ptr = &paths)
                fixed (float* weights_ptr = &weights)
                {
                    WeightPathsNV(resultPath, numPaths, paths_ptr, weights_ptr);
                }
            }
        }
        public static unsafe partial class NVX
        {
            /// <inheritdoc cref="AsyncCopyBufferSubDataNVX(int, uint*, ulong*, uint, uint, int, int, IntPtr, IntPtr, nint, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyBufferSubDataNVX(int waitSemaphoreCount, ReadOnlySpan<uint> waitSemaphoreArray, ReadOnlySpan<ulong> fenceValueArray, uint readGpu, uint writeGpuMask, int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size, int signalSemaphoreCount, ReadOnlySpan<uint> signalSemaphoreArray, ReadOnlySpan<ulong> signalValueArray)
            {
                uint returnValue;
                fixed (uint* waitSemaphoreArray_ptr = waitSemaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        fixed (uint* signalSemaphoreArray_ptr = signalSemaphoreArray)
                        {
                            fixed (ulong* signalValueArray_ptr = signalValueArray)
                            {
                                returnValue = AsyncCopyBufferSubDataNVX(waitSemaphoreCount, waitSemaphoreArray_ptr, fenceValueArray_ptr, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AsyncCopyBufferSubDataNVX(int, uint*, ulong*, uint, uint, int, int, IntPtr, IntPtr, nint, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyBufferSubDataNVX(int waitSemaphoreCount, uint[] waitSemaphoreArray, ulong[] fenceValueArray, uint readGpu, uint writeGpuMask, int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size, int signalSemaphoreCount, uint[] signalSemaphoreArray, ulong[] signalValueArray)
            {
                uint returnValue;
                fixed (uint* waitSemaphoreArray_ptr = waitSemaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        fixed (uint* signalSemaphoreArray_ptr = signalSemaphoreArray)
                        {
                            fixed (ulong* signalValueArray_ptr = signalValueArray)
                            {
                                returnValue = AsyncCopyBufferSubDataNVX(waitSemaphoreCount, waitSemaphoreArray_ptr, fenceValueArray_ptr, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AsyncCopyBufferSubDataNVX(int, uint*, ulong*, uint, uint, int, int, IntPtr, IntPtr, nint, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyBufferSubDataNVX(int waitSemaphoreCount, in uint waitSemaphoreArray, in ulong fenceValueArray, uint readGpu, uint writeGpuMask, int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size, int signalSemaphoreCount, in uint signalSemaphoreArray, in ulong signalValueArray)
            {
                uint returnValue;
                fixed (uint* waitSemaphoreArray_ptr = &waitSemaphoreArray)
                fixed (ulong* fenceValueArray_ptr = &fenceValueArray)
                fixed (uint* signalSemaphoreArray_ptr = &signalSemaphoreArray)
                fixed (ulong* signalValueArray_ptr = &signalValueArray)
                {
                    returnValue = AsyncCopyBufferSubDataNVX(waitSemaphoreCount, waitSemaphoreArray_ptr, fenceValueArray_ptr, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="AsyncCopyImageSubDataNVX(int, uint*, ulong*, uint, uint, uint, All, int, int, int, int, uint, All, int, int, int, int, int, int, int, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyImageSubDataNVX(int waitSemaphoreCount, ReadOnlySpan<uint> waitSemaphoreArray, ReadOnlySpan<ulong> waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, All srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, All dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, ReadOnlySpan<uint> signalSemaphoreArray, ReadOnlySpan<ulong> signalValueArray)
            {
                uint returnValue;
                fixed (uint* waitSemaphoreArray_ptr = waitSemaphoreArray)
                {
                    fixed (ulong* waitValueArray_ptr = waitValueArray)
                    {
                        fixed (uint* signalSemaphoreArray_ptr = signalSemaphoreArray)
                        {
                            fixed (ulong* signalValueArray_ptr = signalValueArray)
                            {
                                returnValue = AsyncCopyImageSubDataNVX(waitSemaphoreCount, waitSemaphoreArray_ptr, waitValueArray_ptr, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AsyncCopyImageSubDataNVX(int, uint*, ulong*, uint, uint, uint, All, int, int, int, int, uint, All, int, int, int, int, int, int, int, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyImageSubDataNVX(int waitSemaphoreCount, uint[] waitSemaphoreArray, ulong[] waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, All srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, All dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, uint[] signalSemaphoreArray, ulong[] signalValueArray)
            {
                uint returnValue;
                fixed (uint* waitSemaphoreArray_ptr = waitSemaphoreArray)
                {
                    fixed (ulong* waitValueArray_ptr = waitValueArray)
                    {
                        fixed (uint* signalSemaphoreArray_ptr = signalSemaphoreArray)
                        {
                            fixed (ulong* signalValueArray_ptr = signalValueArray)
                            {
                                returnValue = AsyncCopyImageSubDataNVX(waitSemaphoreCount, waitSemaphoreArray_ptr, waitValueArray_ptr, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AsyncCopyImageSubDataNVX(int, uint*, ulong*, uint, uint, uint, All, int, int, int, int, uint, All, int, int, int, int, int, int, int, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyImageSubDataNVX(int waitSemaphoreCount, in uint waitSemaphoreArray, in ulong waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, All srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, All dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, in uint signalSemaphoreArray, in ulong signalValueArray)
            {
                uint returnValue;
                fixed (uint* waitSemaphoreArray_ptr = &waitSemaphoreArray)
                fixed (ulong* waitValueArray_ptr = &waitValueArray)
                fixed (uint* signalSemaphoreArray_ptr = &signalSemaphoreArray)
                fixed (ulong* signalValueArray_ptr = &signalValueArray)
                {
                    returnValue = AsyncCopyImageSubDataNVX(waitSemaphoreCount, waitSemaphoreArray_ptr, waitValueArray_ptr, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="ClientWaitSemaphoreui64NVX(int, uint*, ulong*)"/>
            public static unsafe void ClientWaitSemaphoreui64NVX(int fenceObjectCount, ReadOnlySpan<uint> semaphoreArray, ReadOnlySpan<ulong> fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = semaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        ClientWaitSemaphoreui64NVX(fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ClientWaitSemaphoreui64NVX(int, uint*, ulong*)"/>
            public static unsafe void ClientWaitSemaphoreui64NVX(int fenceObjectCount, uint[] semaphoreArray, ulong[] fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = semaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        ClientWaitSemaphoreui64NVX(fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ClientWaitSemaphoreui64NVX(int, uint*, ulong*)"/>
            public static unsafe void ClientWaitSemaphoreui64NVX(int fenceObjectCount, in uint semaphoreArray, in ulong fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = &semaphoreArray)
                fixed (ulong* fenceValueArray_ptr = &fenceValueArray)
                {
                    ClientWaitSemaphoreui64NVX(fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                }
            }
            /// <inheritdoc cref="LGPUNamedBufferSubDataNVX(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void LGPUNamedBufferSubDataNVX(uint gpuMask, int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                LGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="LGPUNamedBufferSubDataNVX(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void LGPUNamedBufferSubDataNVX<T1>(uint gpuMask, int buffer, IntPtr offset, nint size, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    LGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="MulticastScissorArrayvNVX(uint, uint, int, int*)"/>
            public static unsafe void MulticastScissorArrayvNVX(uint gpu, uint first, int count, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    MulticastScissorArrayvNVX(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastScissorArrayvNVX(uint, uint, int, int*)"/>
            public static unsafe void MulticastScissorArrayvNVX(uint gpu, uint first, int count, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    MulticastScissorArrayvNVX(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastScissorArrayvNVX(uint, uint, int, int*)"/>
            public static unsafe void MulticastScissorArrayvNVX(uint gpu, uint first, int count, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    MulticastScissorArrayvNVX(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastViewportArrayvNVX(uint, uint, int, float*)"/>
            public static unsafe void MulticastViewportArrayvNVX(uint gpu, uint first, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    MulticastViewportArrayvNVX(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastViewportArrayvNVX(uint, uint, int, float*)"/>
            public static unsafe void MulticastViewportArrayvNVX(uint gpu, uint first, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    MulticastViewportArrayvNVX(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastViewportArrayvNVX(uint, uint, int, float*)"/>
            public static unsafe void MulticastViewportArrayvNVX(uint gpu, uint first, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MulticastViewportArrayvNVX(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="SignalSemaphoreui64NVX(uint, int, uint*, ulong*)"/>
            public static unsafe void SignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, ReadOnlySpan<uint> semaphoreArray, ReadOnlySpan<ulong> fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = semaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        SignalSemaphoreui64NVX(signalGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SignalSemaphoreui64NVX(uint, int, uint*, ulong*)"/>
            public static unsafe void SignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, uint[] semaphoreArray, ulong[] fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = semaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        SignalSemaphoreui64NVX(signalGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SignalSemaphoreui64NVX(uint, int, uint*, ulong*)"/>
            public static unsafe void SignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, in uint semaphoreArray, in ulong fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = &semaphoreArray)
                fixed (ulong* fenceValueArray_ptr = &fenceValueArray)
                {
                    SignalSemaphoreui64NVX(signalGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                }
            }
            /// <inheritdoc cref="WaitSemaphoreui64NVX(uint, int, uint*, ulong*)"/>
            public static unsafe void WaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, ReadOnlySpan<uint> semaphoreArray, ReadOnlySpan<ulong> fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = semaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        WaitSemaphoreui64NVX(waitGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="WaitSemaphoreui64NVX(uint, int, uint*, ulong*)"/>
            public static unsafe void WaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, uint[] semaphoreArray, ulong[] fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = semaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        WaitSemaphoreui64NVX(waitGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="WaitSemaphoreui64NVX(uint, int, uint*, ulong*)"/>
            public static unsafe void WaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, in uint semaphoreArray, in ulong fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = &semaphoreArray)
                fixed (ulong* fenceValueArray_ptr = &fenceValueArray)
                {
                    WaitSemaphoreui64NVX(waitGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                }
            }
        }
        public static unsafe partial class OES
        {
            /// <inheritdoc cref="BitmapxOES(int, int, int, int, int, int, byte*)"/>
            public static unsafe void BitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, ReadOnlySpan<byte> bitmap)
            {
                fixed (byte* bitmap_ptr = bitmap)
                {
                    BitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
                }
            }
            /// <inheritdoc cref="BitmapxOES(int, int, int, int, int, int, byte*)"/>
            public static unsafe void BitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, byte[] bitmap)
            {
                fixed (byte* bitmap_ptr = bitmap)
                {
                    BitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
                }
            }
            /// <inheritdoc cref="BitmapxOES(int, int, int, int, int, int, byte*)"/>
            public static unsafe void BitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, in byte bitmap)
            {
                fixed (byte* bitmap_ptr = &bitmap)
                {
                    BitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanefOES(ClipPlaneName, float*)"/>
            public static unsafe void ClipPlanefOES(ClipPlaneName plane, ReadOnlySpan<float> equation)
            {
                fixed (float* equation_ptr = equation)
                {
                    ClipPlanefOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanefOES(ClipPlaneName, float*)"/>
            public static unsafe void ClipPlanefOES(ClipPlaneName plane, float[] equation)
            {
                fixed (float* equation_ptr = equation)
                {
                    ClipPlanefOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanefOES(ClipPlaneName, float*)"/>
            public static unsafe void ClipPlanefOES(ClipPlaneName plane, in float equation)
            {
                fixed (float* equation_ptr = &equation)
                {
                    ClipPlanefOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanexOES(ClipPlaneName, int*)"/>
            public static unsafe void ClipPlanexOES(ClipPlaneName plane, ReadOnlySpan<int> equation)
            {
                fixed (int* equation_ptr = equation)
                {
                    ClipPlanexOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanexOES(ClipPlaneName, int*)"/>
            public static unsafe void ClipPlanexOES(ClipPlaneName plane, int[] equation)
            {
                fixed (int* equation_ptr = equation)
                {
                    ClipPlanexOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanexOES(ClipPlaneName, int*)"/>
            public static unsafe void ClipPlanexOES(ClipPlaneName plane, in int equation)
            {
                fixed (int* equation_ptr = &equation)
                {
                    ClipPlanexOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="Color3xvOES(int*)"/>
            public static unsafe void Color3xvOES(ReadOnlySpan<int> components)
            {
                fixed (int* components_ptr = components)
                {
                    Color3xvOES(components_ptr);
                }
            }
            /// <inheritdoc cref="Color3xvOES(int*)"/>
            public static unsafe void Color3xvOES(int[] components)
            {
                fixed (int* components_ptr = components)
                {
                    Color3xvOES(components_ptr);
                }
            }
            /// <inheritdoc cref="Color3xvOES(int*)"/>
            public static unsafe void Color3xvOES(in int components)
            {
                fixed (int* components_ptr = &components)
                {
                    Color3xvOES(components_ptr);
                }
            }
            /// <inheritdoc cref="Color4xvOES(int*)"/>
            public static unsafe void Color4xvOES(ReadOnlySpan<int> components)
            {
                fixed (int* components_ptr = components)
                {
                    Color4xvOES(components_ptr);
                }
            }
            /// <inheritdoc cref="Color4xvOES(int*)"/>
            public static unsafe void Color4xvOES(int[] components)
            {
                fixed (int* components_ptr = components)
                {
                    Color4xvOES(components_ptr);
                }
            }
            /// <inheritdoc cref="Color4xvOES(int*)"/>
            public static unsafe void Color4xvOES(in int components)
            {
                fixed (int* components_ptr = &components)
                {
                    Color4xvOES(components_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterxvOES(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameterxvOES(ConvolutionTargetEXT target, ConvolutionParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterxvOES(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameterxvOES(ConvolutionTargetEXT target, ConvolutionParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterxvOES(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameterxvOES(ConvolutionTargetEXT target, ConvolutionParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ConvolutionParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord1xvOES(int*)"/>
            public static unsafe void EvalCoord1xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    EvalCoord1xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord1xvOES(int*)"/>
            public static unsafe void EvalCoord1xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    EvalCoord1xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord1xvOES(int*)"/>
            public static unsafe void EvalCoord1xvOES(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    EvalCoord1xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord2xvOES(int*)"/>
            public static unsafe void EvalCoord2xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    EvalCoord2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord2xvOES(int*)"/>
            public static unsafe void EvalCoord2xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    EvalCoord2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord2xvOES(int*)"/>
            public static unsafe void EvalCoord2xvOES(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    EvalCoord2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="FeedbackBufferxOES(int, All, int*)"/>
            public static unsafe void FeedbackBufferxOES(All type, ReadOnlySpan<int> buffer)
            {
                int n = (int)(buffer.Length);
                fixed (int* buffer_ptr = buffer)
                {
                    FeedbackBufferxOES(n, type, buffer_ptr);
                }
            }
            /// <inheritdoc cref="FeedbackBufferxOES(int, All, int*)"/>
            public static unsafe void FeedbackBufferxOES(All type, int[] buffer)
            {
                int n = (int)(buffer.Length);
                fixed (int* buffer_ptr = buffer)
                {
                    FeedbackBufferxOES(n, type, buffer_ptr);
                }
            }
            /// <inheritdoc cref="FeedbackBufferxOES(int, All, int*)"/>
            public static unsafe void FeedbackBufferxOES(int n, All type, in int buffer)
            {
                fixed (int* buffer_ptr = &buffer)
                {
                    FeedbackBufferxOES(n, type, buffer_ptr);
                }
            }
            /// <inheritdoc cref="FogxvOES(FogPName, int*)"/>
            public static unsafe void FogxvOES(FogPName pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    FogxvOES(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="FogxvOES(FogPName, int*)"/>
            public static unsafe void FogxvOES(FogPName pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    FogxvOES(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="FogxvOES(FogPName, int*)"/>
            public static unsafe void FogxvOES(FogPName pname, in int param)
            {
                fixed (int* param_ptr = &param)
                {
                    FogxvOES(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanefOES(ClipPlaneName, float*)"/>
            public static unsafe void GetClipPlanefOES(ClipPlaneName plane, Span<float> equation)
            {
                fixed (float* equation_ptr = equation)
                {
                    GetClipPlanefOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanefOES(ClipPlaneName, float*)"/>
            public static unsafe void GetClipPlanefOES(ClipPlaneName plane, float[] equation)
            {
                fixed (float* equation_ptr = equation)
                {
                    GetClipPlanefOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanefOES(ClipPlaneName, float*)"/>
            public static unsafe void GetClipPlanefOES(ClipPlaneName plane, ref float equation)
            {
                fixed (float* equation_ptr = &equation)
                {
                    GetClipPlanefOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanefOES(ClipPlaneName, float*)"/>
            public static unsafe float GetClipPlanefOES(ClipPlaneName plane)
            {
                float equation_val;
                float* equation = &equation_val;
                GetClipPlanefOES(plane, equation);
                return equation_val;
            }
            /// <inheritdoc cref="GetClipPlanexOES(ClipPlaneName, int*)"/>
            public static unsafe void GetClipPlanexOES(ClipPlaneName plane, Span<int> equation)
            {
                fixed (int* equation_ptr = equation)
                {
                    GetClipPlanexOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanexOES(ClipPlaneName, int*)"/>
            public static unsafe void GetClipPlanexOES(ClipPlaneName plane, int[] equation)
            {
                fixed (int* equation_ptr = equation)
                {
                    GetClipPlanexOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanexOES(ClipPlaneName, int*)"/>
            public static unsafe void GetClipPlanexOES(ClipPlaneName plane, ref int equation)
            {
                fixed (int* equation_ptr = &equation)
                {
                    GetClipPlanexOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanexOES(ClipPlaneName, int*)"/>
            public static unsafe int GetClipPlanexOES(ClipPlaneName plane)
            {
                int equation_val;
                int* equation = &equation_val;
                GetClipPlanexOES(plane, equation);
                return equation_val;
            }
            /// <inheritdoc cref="GetConvolutionParameterxvOES(All, All, int*)"/>
            public static unsafe void GetConvolutionParameterxvOES(All target, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterxvOES(All, All, int*)"/>
            public static unsafe void GetConvolutionParameterxvOES(All target, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterxvOES(All, All, int*)"/>
            public static unsafe void GetConvolutionParameterxvOES(All target, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetConvolutionParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterxvOES(All, All, int*)"/>
            public static unsafe int GetConvolutionParameterxvOES(All target, All pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetConvolutionParameterxvOES(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetFixedvOES(GetPName, int*)"/>
            public static unsafe void GetFixedvOES(GetPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFixedvOES(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFixedvOES(GetPName, int*)"/>
            public static unsafe void GetFixedvOES(GetPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFixedvOES(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFixedvOES(GetPName, int*)"/>
            public static unsafe void GetFixedvOES(GetPName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFixedvOES(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFixedvOES(GetPName, int*)"/>
            public static unsafe int GetFixedvOES(GetPName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetFixedvOES(pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetHistogramParameterxvOES(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameterxvOES(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterxvOES(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameterxvOES(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterxvOES(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameterxvOES(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetHistogramParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterxvOES(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe int GetHistogramParameterxvOES(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetHistogramParameterxvOES(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetLightxOES(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightxOES(LightName light, LightParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetLightxOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightxOES(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightxOES(LightName light, LightParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetLightxOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightxOES(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightxOES(LightName light, LightParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetLightxOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightxOES(LightName, LightParameter, int*)"/>
            public static unsafe int GetLightxOES(LightName light, LightParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetLightxOES(light, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetLightxvOES(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightxvOES(LightName light, LightParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetLightxvOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightxvOES(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightxvOES(LightName light, LightParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetLightxvOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightxvOES(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightxvOES(LightName light, LightParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetLightxvOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightxvOES(LightName, LightParameter, int*)"/>
            public static unsafe int GetLightxvOES(LightName light, LightParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetLightxvOES(light, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetMapxvOES(MapTarget, GetMapQuery, int*)"/>
            public static unsafe void GetMapxvOES(MapTarget target, GetMapQuery query, Span<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    GetMapxvOES(target, query, v_ptr);
                }
            }
            /// <inheritdoc cref="GetMapxvOES(MapTarget, GetMapQuery, int*)"/>
            public static unsafe void GetMapxvOES(MapTarget target, GetMapQuery query, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    GetMapxvOES(target, query, v_ptr);
                }
            }
            /// <inheritdoc cref="GetMapxvOES(MapTarget, GetMapQuery, int*)"/>
            public static unsafe void GetMapxvOES(MapTarget target, GetMapQuery query, ref int v)
            {
                fixed (int* v_ptr = &v)
                {
                    GetMapxvOES(target, query, v_ptr);
                }
            }
            /// <inheritdoc cref="GetMapxvOES(MapTarget, GetMapQuery, int*)"/>
            public static unsafe int GetMapxvOES(MapTarget target, GetMapQuery query)
            {
                int v_val;
                int* v = &v_val;
                GetMapxvOES(target, query, v);
                return v_val;
            }
            /// <inheritdoc cref="GetMaterialxvOES(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetMaterialxvOES(TriangleFace face, MaterialParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMaterialxvOES(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMaterialxvOES(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetMaterialxvOES(TriangleFace face, MaterialParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMaterialxvOES(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMaterialxvOES(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetMaterialxvOES(TriangleFace face, MaterialParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMaterialxvOES(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMaterialxvOES(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe int GetMaterialxvOES(TriangleFace face, MaterialParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetMaterialxvOES(face, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetPixelMapxv(PixelMap, int, int*)"/>
            public static unsafe void GetPixelMapx(PixelMap map, Span<int> values)
            {
                int size = (int)(values.Length);
                fixed (int* values_ptr = values)
                {
                    GetPixelMapxv(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelMapxv(PixelMap, int, int*)"/>
            public static unsafe void GetPixelMapx(PixelMap map, int[] values)
            {
                int size = (int)(values.Length);
                fixed (int* values_ptr = values)
                {
                    GetPixelMapxv(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelMapxv(PixelMap, int, int*)"/>
            public static unsafe void GetPixelMapx(PixelMap map, int size, ref int values)
            {
                fixed (int* values_ptr = &values)
                {
                    GetPixelMapxv(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelMapxv(PixelMap, int, int*)"/>
            public static unsafe int GetPixelMapx(PixelMap map, int size)
            {
                int values_val;
                int* values = &values_val;
                GetPixelMapxv(map, size, values);
                return values_val;
            }
            /// <inheritdoc cref="GetTexEnvxvOES(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetTexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexEnvxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexEnvxvOES(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetTexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexEnvxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexEnvxvOES(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetTexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTexEnvxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexEnvxvOES(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe int GetTexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetTexEnvxvOES(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTexGenxvOES(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetTexGenxvOES(TextureCoordName coord, TextureGenParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexGenxvOES(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexGenxvOES(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetTexGenxvOES(TextureCoordName coord, TextureGenParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexGenxvOES(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexGenxvOES(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetTexGenxvOES(TextureCoordName coord, TextureGenParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTexGenxvOES(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexGenxvOES(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe int GetTexGenxvOES(TextureCoordName coord, TextureGenParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetTexGenxvOES(coord, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTexLevelParameterxvOES(TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTexLevelParameterxvOES(TextureTarget target, int level, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexLevelParameterxvOES(target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexLevelParameterxvOES(TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTexLevelParameterxvOES(TextureTarget target, int level, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexLevelParameterxvOES(target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexLevelParameterxvOES(TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTexLevelParameterxvOES(TextureTarget target, int level, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTexLevelParameterxvOES(target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexLevelParameterxvOES(TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe int GetTexLevelParameterxvOES(TextureTarget target, int level, GetTextureParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetTexLevelParameterxvOES(target, level, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetTexParameterxvOES(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterxvOES(TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterxvOES(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterxvOES(TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterxvOES(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterxvOES(TextureTarget target, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTexParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterxvOES(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe int GetTexParameterxvOES(TextureTarget target, GetTextureParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetTexParameterxvOES(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="IndexxvOES(int*)"/>
            public static unsafe void IndexxvOES(ReadOnlySpan<int> component)
            {
                fixed (int* component_ptr = component)
                {
                    IndexxvOES(component_ptr);
                }
            }
            /// <inheritdoc cref="IndexxvOES(int*)"/>
            public static unsafe void IndexxvOES(int[] component)
            {
                fixed (int* component_ptr = component)
                {
                    IndexxvOES(component_ptr);
                }
            }
            /// <inheritdoc cref="IndexxvOES(int*)"/>
            public static unsafe void IndexxvOES(in int component)
            {
                fixed (int* component_ptr = &component)
                {
                    IndexxvOES(component_ptr);
                }
            }
            /// <inheritdoc cref="LightModelxvOES(LightModelParameter, int*)"/>
            public static unsafe void LightModelxvOES(LightModelParameter pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    LightModelxvOES(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="LightModelxvOES(LightModelParameter, int*)"/>
            public static unsafe void LightModelxvOES(LightModelParameter pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    LightModelxvOES(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="LightModelxvOES(LightModelParameter, int*)"/>
            public static unsafe void LightModelxvOES(LightModelParameter pname, in int param)
            {
                fixed (int* param_ptr = &param)
                {
                    LightModelxvOES(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="LightxvOES(LightName, LightParameter, int*)"/>
            public static unsafe void LightxvOES(LightName light, LightParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    LightxvOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="LightxvOES(LightName, LightParameter, int*)"/>
            public static unsafe void LightxvOES(LightName light, LightParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    LightxvOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="LightxvOES(LightName, LightParameter, int*)"/>
            public static unsafe void LightxvOES(LightName light, LightParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    LightxvOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="LoadMatrixxOES(int*)"/>
            public static unsafe void LoadMatrixxOES(ReadOnlySpan<int> m)
            {
                fixed (int* m_ptr = m)
                {
                    LoadMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadMatrixxOES(int*)"/>
            public static unsafe void LoadMatrixxOES(int[] m)
            {
                fixed (int* m_ptr = m)
                {
                    LoadMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadMatrixxOES(int*)"/>
            public static unsafe void LoadMatrixxOES(in int m)
            {
                fixed (int* m_ptr = &m)
                {
                    LoadMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixxOES(int*)"/>
            public static unsafe void LoadTransposeMatrixxOES(ReadOnlySpan<int> m)
            {
                fixed (int* m_ptr = m)
                {
                    LoadTransposeMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixxOES(int*)"/>
            public static unsafe void LoadTransposeMatrixxOES(int[] m)
            {
                fixed (int* m_ptr = m)
                {
                    LoadTransposeMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixxOES(int*)"/>
            public static unsafe void LoadTransposeMatrixxOES(in int m)
            {
                fixed (int* m_ptr = &m)
                {
                    LoadTransposeMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="MaterialxvOES(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void MaterialxvOES(TriangleFace face, MaterialParameter pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    MaterialxvOES(face, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="MaterialxvOES(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void MaterialxvOES(TriangleFace face, MaterialParameter pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    MaterialxvOES(face, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="MaterialxvOES(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void MaterialxvOES(TriangleFace face, MaterialParameter pname, in int param)
            {
                fixed (int* param_ptr = &param)
                {
                    MaterialxvOES(face, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord1bvOES(TextureUnit texture, ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord1bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord1bvOES(TextureUnit texture, sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord1bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord1bvOES(TextureUnit texture, in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    MultiTexCoord1bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord1xvOES(TextureUnit texture, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord1xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord1xvOES(TextureUnit texture, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord1xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord1xvOES(TextureUnit texture, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    MultiTexCoord1xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord2bvOES(TextureUnit texture, ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord2bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord2bvOES(TextureUnit texture, sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord2bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord2bvOES(TextureUnit texture, in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    MultiTexCoord2bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2xvOES(TextureUnit texture, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord2xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2xvOES(TextureUnit texture, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord2xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2xvOES(TextureUnit texture, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    MultiTexCoord2xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord3bvOES(TextureUnit texture, ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord3bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord3bvOES(TextureUnit texture, sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord3bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord3bvOES(TextureUnit texture, in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    MultiTexCoord3bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3xvOES(TextureUnit texture, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord3xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3xvOES(TextureUnit texture, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord3xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3xvOES(TextureUnit texture, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    MultiTexCoord3xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord4bvOES(TextureUnit texture, ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord4bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord4bvOES(TextureUnit texture, sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord4bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord4bvOES(TextureUnit texture, in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    MultiTexCoord4bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4xvOES(TextureUnit texture, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord4xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4xvOES(TextureUnit texture, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord4xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4xvOES(TextureUnit texture, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    MultiTexCoord4xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultMatrixxOES(int*)"/>
            public static unsafe void MultMatrixxOES(ReadOnlySpan<int> m)
            {
                fixed (int* m_ptr = m)
                {
                    MultMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="MultMatrixxOES(int*)"/>
            public static unsafe void MultMatrixxOES(int[] m)
            {
                fixed (int* m_ptr = m)
                {
                    MultMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="MultMatrixxOES(int*)"/>
            public static unsafe void MultMatrixxOES(in int m)
            {
                fixed (int* m_ptr = &m)
                {
                    MultMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixxOES(int*)"/>
            public static unsafe void MultTransposeMatrixxOES(ReadOnlySpan<int> m)
            {
                fixed (int* m_ptr = m)
                {
                    MultTransposeMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixxOES(int*)"/>
            public static unsafe void MultTransposeMatrixxOES(int[] m)
            {
                fixed (int* m_ptr = m)
                {
                    MultTransposeMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixxOES(int*)"/>
            public static unsafe void MultTransposeMatrixxOES(in int m)
            {
                fixed (int* m_ptr = &m)
                {
                    MultTransposeMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="Normal3xvOES(int*)"/>
            public static unsafe void Normal3xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Normal3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Normal3xvOES(int*)"/>
            public static unsafe void Normal3xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Normal3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Normal3xvOES(int*)"/>
            public static unsafe void Normal3xvOES(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    Normal3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="PixelMapx(PixelMap, int, int*)"/>
            public static unsafe void PixelMapx(PixelMap map, ReadOnlySpan<int> values)
            {
                int size = (int)(values.Length);
                fixed (int* values_ptr = values)
                {
                    PixelMapx(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="PixelMapx(PixelMap, int, int*)"/>
            public static unsafe void PixelMapx(PixelMap map, int[] values)
            {
                int size = (int)(values.Length);
                fixed (int* values_ptr = values)
                {
                    PixelMapx(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="PixelMapx(PixelMap, int, int*)"/>
            public static unsafe void PixelMapx(PixelMap map, int size, in int values)
            {
                fixed (int* values_ptr = &values)
                {
                    PixelMapx(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterxvOES(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameterxvOES(PointParameterNameARB pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PointParameterxvOES(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterxvOES(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameterxvOES(PointParameterNameARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PointParameterxvOES(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterxvOES(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameterxvOES(PointParameterNameARB pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    PointParameterxvOES(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PrioritizeTexturesxOES(int, int*, int*)"/>
            public static unsafe void PrioritizeTexturesxOES(int n, ReadOnlySpan<int> textures, ReadOnlySpan<int> priorities)
            {
                fixed (int* textures_ptr = textures)
                {
                    fixed (int* priorities_ptr = priorities)
                    {
                        PrioritizeTexturesxOES(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PrioritizeTexturesxOES(int, int*, int*)"/>
            public static unsafe void PrioritizeTexturesxOES(int n, int[] textures, int[] priorities)
            {
                fixed (int* textures_ptr = textures)
                {
                    fixed (int* priorities_ptr = priorities)
                    {
                        PrioritizeTexturesxOES(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PrioritizeTexturesxOES(int, int*, int*)"/>
            public static unsafe void PrioritizeTexturesxOES(int n, in int textures, in int priorities)
            {
                fixed (int* textures_ptr = &textures)
                fixed (int* priorities_ptr = &priorities)
                {
                    PrioritizeTexturesxOES(n, textures_ptr, priorities_ptr);
                }
            }
            /// <inheritdoc cref="QueryMatrixxOES(int*, int*)"/>
            public static unsafe uint QueryMatrixxOES(Span<int> mantissa, Span<int> exponent)
            {
                uint returnValue;
                fixed (int* mantissa_ptr = mantissa)
                {
                    fixed (int* exponent_ptr = exponent)
                    {
                        returnValue = QueryMatrixxOES(mantissa_ptr, exponent_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="QueryMatrixxOES(int*, int*)"/>
            public static unsafe uint QueryMatrixxOES(int[] mantissa, int[] exponent)
            {
                uint returnValue;
                fixed (int* mantissa_ptr = mantissa)
                {
                    fixed (int* exponent_ptr = exponent)
                    {
                        returnValue = QueryMatrixxOES(mantissa_ptr, exponent_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="QueryMatrixxOES(int*, int*)"/>
            public static unsafe uint QueryMatrixxOES(ref int mantissa, ref int exponent)
            {
                uint returnValue;
                fixed (int* mantissa_ptr = &mantissa)
                fixed (int* exponent_ptr = &exponent)
                {
                    returnValue = QueryMatrixxOES(mantissa_ptr, exponent_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="RasterPos2xvOES(int*)"/>
            public static unsafe void RasterPos2xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos2xvOES(int*)"/>
            public static unsafe void RasterPos2xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos2xvOES(int*)"/>
            public static unsafe void RasterPos2xvOES(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    RasterPos2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos3xvOES(int*)"/>
            public static unsafe void RasterPos3xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos3xvOES(int*)"/>
            public static unsafe void RasterPos3xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos3xvOES(int*)"/>
            public static unsafe void RasterPos3xvOES(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    RasterPos3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos4xvOES(int*)"/>
            public static unsafe void RasterPos4xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos4xvOES(int*)"/>
            public static unsafe void RasterPos4xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos4xvOES(int*)"/>
            public static unsafe void RasterPos4xvOES(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    RasterPos4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RectxvOES(int*, int*)"/>
            public static unsafe void RectxvOES(ReadOnlySpan<int> v1, ReadOnlySpan<int> v2)
            {
                fixed (int* v1_ptr = v1)
                {
                    fixed (int* v2_ptr = v2)
                    {
                        RectxvOES(v1_ptr, v2_ptr);
                    }
                }
            }
            /// <inheritdoc cref="RectxvOES(int*, int*)"/>
            public static unsafe void RectxvOES(int[] v1, int[] v2)
            {
                fixed (int* v1_ptr = v1)
                {
                    fixed (int* v2_ptr = v2)
                    {
                        RectxvOES(v1_ptr, v2_ptr);
                    }
                }
            }
            /// <inheritdoc cref="RectxvOES(int*, int*)"/>
            public static unsafe void RectxvOES(in int v1, in int v2)
            {
                fixed (int* v1_ptr = &v1)
                fixed (int* v2_ptr = &v2)
                {
                    RectxvOES(v1_ptr, v2_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1bvOES(sbyte*)"/>
            public static unsafe void TexCoord1bvOES(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord1bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1bvOES(sbyte*)"/>
            public static unsafe void TexCoord1bvOES(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord1bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1bvOES(sbyte*)"/>
            public static unsafe void TexCoord1bvOES(in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    TexCoord1bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1xvOES(int*)"/>
            public static unsafe void TexCoord1xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord1xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1xvOES(int*)"/>
            public static unsafe void TexCoord1xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord1xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1xvOES(int*)"/>
            public static unsafe void TexCoord1xvOES(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    TexCoord1xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2bvOES(sbyte*)"/>
            public static unsafe void TexCoord2bvOES(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord2bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2bvOES(sbyte*)"/>
            public static unsafe void TexCoord2bvOES(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord2bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2bvOES(sbyte*)"/>
            public static unsafe void TexCoord2bvOES(in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    TexCoord2bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2xvOES(int*)"/>
            public static unsafe void TexCoord2xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2xvOES(int*)"/>
            public static unsafe void TexCoord2xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2xvOES(int*)"/>
            public static unsafe void TexCoord2xvOES(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    TexCoord2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3bvOES(sbyte*)"/>
            public static unsafe void TexCoord3bvOES(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord3bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3bvOES(sbyte*)"/>
            public static unsafe void TexCoord3bvOES(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord3bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3bvOES(sbyte*)"/>
            public static unsafe void TexCoord3bvOES(in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    TexCoord3bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3xvOES(int*)"/>
            public static unsafe void TexCoord3xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3xvOES(int*)"/>
            public static unsafe void TexCoord3xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3xvOES(int*)"/>
            public static unsafe void TexCoord3xvOES(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    TexCoord3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4bvOES(sbyte*)"/>
            public static unsafe void TexCoord4bvOES(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord4bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4bvOES(sbyte*)"/>
            public static unsafe void TexCoord4bvOES(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord4bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4bvOES(sbyte*)"/>
            public static unsafe void TexCoord4bvOES(in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    TexCoord4bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4xvOES(int*)"/>
            public static unsafe void TexCoord4xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4xvOES(int*)"/>
            public static unsafe void TexCoord4xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4xvOES(int*)"/>
            public static unsafe void TexCoord4xvOES(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    TexCoord4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexEnvxvOES(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void TexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexEnvxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexEnvxvOES(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void TexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexEnvxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexEnvxvOES(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void TexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TexEnvxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexGenxvOES(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void TexGenxvOES(TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexGenxvOES(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexGenxvOES(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void TexGenxvOES(TextureCoordName coord, TextureGenParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexGenxvOES(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexGenxvOES(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void TexGenxvOES(TextureCoordName coord, TextureGenParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TexGenxvOES(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterxvOES(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void TexParameterxvOES(TextureTarget target, GetTextureParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterxvOES(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void TexParameterxvOES(TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterxvOES(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void TexParameterxvOES(TextureTarget target, GetTextureParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TexParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2bvOES(sbyte*)"/>
            public static unsafe void Vertex2bvOES(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex2bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2bvOES(sbyte*)"/>
            public static unsafe void Vertex2bvOES(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex2bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2bvOES(sbyte*)"/>
            public static unsafe void Vertex2bvOES(in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    Vertex2bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2xvOES(int*)"/>
            public static unsafe void Vertex2xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2xvOES(int*)"/>
            public static unsafe void Vertex2xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2xvOES(int*)"/>
            public static unsafe void Vertex2xvOES(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    Vertex2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3bvOES(sbyte*)"/>
            public static unsafe void Vertex3bvOES(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex3bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3bvOES(sbyte*)"/>
            public static unsafe void Vertex3bvOES(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex3bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3bvOES(sbyte*)"/>
            public static unsafe void Vertex3bvOES(in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    Vertex3bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3xvOES(int*)"/>
            public static unsafe void Vertex3xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3xvOES(int*)"/>
            public static unsafe void Vertex3xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3xvOES(int*)"/>
            public static unsafe void Vertex3xvOES(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    Vertex3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4bvOES(sbyte*)"/>
            public static unsafe void Vertex4bvOES(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex4bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4bvOES(sbyte*)"/>
            public static unsafe void Vertex4bvOES(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex4bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4bvOES(sbyte*)"/>
            public static unsafe void Vertex4bvOES(in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    Vertex4bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4xvOES(int*)"/>
            public static unsafe void Vertex4xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4xvOES(int*)"/>
            public static unsafe void Vertex4xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4xvOES(int*)"/>
            public static unsafe void Vertex4xvOES(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    Vertex4xvOES(coords_ptr);
                }
            }
        }
        public static unsafe partial class OVR
        {
        }
        public static unsafe partial class PGI
        {
        }
        public static unsafe partial class SGI
        {
            /// <inheritdoc cref="ColorTableParameterfvSGI(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void ColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ColorTableParameterfvSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterfvSGI(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void ColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ColorTableParameterfvSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterfvSGI(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void ColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ColorTableParameterfvSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterivSGI(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ColorTableParameterivSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterivSGI(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ColorTableParameterivSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterivSGI(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ColorTableParameterivSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableSGI(ColorTableTargetSGI, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableSGI(ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
            {
                void* table_vptr = (void*)table;
                ColorTableSGI(target, internalformat, width, format, type, table_vptr);
            }
            /// <inheritdoc cref="ColorTableSGI(ColorTableTargetSGI, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableSGI<T1>(ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTableSGI(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableSGI(ColorTableTargetSGI, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableSGI<T1>(ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTableSGI(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableSGI(ColorTableTargetSGI, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableSGI<T1>(ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, in T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    ColorTableSGI(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfvSGI(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfvSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfvSGI(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfvSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfvSGI(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetColorTableParameterfvSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfvSGI(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe float GetColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetColorTableParameterfvSGI(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetColorTableParameterivSGI(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameterivSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterivSGI(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameterivSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterivSGI(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetColorTableParameterivSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterivSGI(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe int GetColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetColorTableParameterivSGI(target, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetColorTableSGI(ColorTableTargetSGI, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableSGI(ColorTableTargetSGI target, PixelFormat format, PixelType type, IntPtr table)
            {
                void* table_vptr = (void*)table;
                GetColorTableSGI(target, format, type, table_vptr);
            }
            /// <inheritdoc cref="GetColorTableSGI(ColorTableTargetSGI, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableSGI<T1>(ColorTableTargetSGI target, PixelFormat format, PixelType type, Span<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    GetColorTableSGI(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableSGI(ColorTableTargetSGI, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableSGI<T1>(ColorTableTargetSGI target, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    GetColorTableSGI(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableSGI(ColorTableTargetSGI, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableSGI<T1>(ColorTableTargetSGI target, PixelFormat format, PixelType type, ref T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    GetColorTableSGI(target, format, type, table_ptr);
                }
            }
        }
        public static unsafe partial class SGIS
        {
            /// <inheritdoc cref="DetailTexFuncSGIS(TextureTarget, int, float*)"/>
            public static unsafe void DetailTexFuncSGIS(TextureTarget target, ReadOnlySpan<float> points)
            {
                int n = (int)(points.Length / 2);
                fixed (float* points_ptr = points)
                {
                    DetailTexFuncSGIS(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="DetailTexFuncSGIS(TextureTarget, int, float*)"/>
            public static unsafe void DetailTexFuncSGIS(TextureTarget target, float[] points)
            {
                int n = (int)(points.Length / 2);
                fixed (float* points_ptr = points)
                {
                    DetailTexFuncSGIS(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="DetailTexFuncSGIS(TextureTarget, int, float*)"/>
            public static unsafe void DetailTexFuncSGIS(TextureTarget target, int n, in float points)
            {
                fixed (float* points_ptr = &points)
                {
                    DetailTexFuncSGIS(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="FogFuncSGIS(int, float*)"/>
            public static unsafe void FogFuncSGIS(ReadOnlySpan<float> points)
            {
                int n = (int)(points.Length / 2);
                fixed (float* points_ptr = points)
                {
                    FogFuncSGIS(n, points_ptr);
                }
            }
            /// <inheritdoc cref="FogFuncSGIS(int, float*)"/>
            public static unsafe void FogFuncSGIS(float[] points)
            {
                int n = (int)(points.Length / 2);
                fixed (float* points_ptr = points)
                {
                    FogFuncSGIS(n, points_ptr);
                }
            }
            /// <inheritdoc cref="FogFuncSGIS(int, float*)"/>
            public static unsafe void FogFuncSGIS(int n, in float points)
            {
                fixed (float* points_ptr = &points)
                {
                    FogFuncSGIS(n, points_ptr);
                }
            }
            /// <inheritdoc cref="GetDetailTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe void GetDetailTexFuncSGIS(TextureTarget target, Span<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    GetDetailTexFuncSGIS(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetDetailTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe void GetDetailTexFuncSGIS(TextureTarget target, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    GetDetailTexFuncSGIS(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetDetailTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe void GetDetailTexFuncSGIS(TextureTarget target, ref float points)
            {
                fixed (float* points_ptr = &points)
                {
                    GetDetailTexFuncSGIS(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetDetailTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe float GetDetailTexFuncSGIS(TextureTarget target)
            {
                float points_val;
                float* points = &points_val;
                GetDetailTexFuncSGIS(target, points);
                return points_val;
            }
            /// <inheritdoc cref="GetFogFuncSGIS(float*)"/>
            public static unsafe void GetFogFuncSGIS(Span<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    GetFogFuncSGIS(points_ptr);
                }
            }
            /// <inheritdoc cref="GetFogFuncSGIS(float*)"/>
            public static unsafe void GetFogFuncSGIS(float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    GetFogFuncSGIS(points_ptr);
                }
            }
            /// <inheritdoc cref="GetFogFuncSGIS(float*)"/>
            public static unsafe void GetFogFuncSGIS(ref float points)
            {
                fixed (float* points_ptr = &points)
                {
                    GetFogFuncSGIS(points_ptr);
                }
            }
            /// <inheritdoc cref="GetFogFuncSGIS(float*)"/>
            public static unsafe float GetFogFuncSGIS()
            {
                float points_val;
                float* points = &points_val;
                GetFogFuncSGIS(points);
                return points_val;
            }
            /// <inheritdoc cref="GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetPixelTexGenParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetPixelTexGenParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetPixelTexGenParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe float GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetPixelTexGenParameterfvSGIS(pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetPixelTexGenParameterivSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetPixelTexGenParameterivSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetPixelTexGenParameterivSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe int GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetPixelTexGenParameterivSGIS(pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetSharpenTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe void GetSharpenTexFuncSGIS(TextureTarget target, Span<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    GetSharpenTexFuncSGIS(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetSharpenTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe void GetSharpenTexFuncSGIS(TextureTarget target, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    GetSharpenTexFuncSGIS(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetSharpenTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe void GetSharpenTexFuncSGIS(TextureTarget target, ref float points)
            {
                fixed (float* points_ptr = &points)
                {
                    GetSharpenTexFuncSGIS(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetSharpenTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe float GetSharpenTexFuncSGIS(TextureTarget target)
            {
                float points_val;
                float* points = &points_val;
                GetSharpenTexFuncSGIS(target, points);
                return points_val;
            }
            /// <inheritdoc cref="GetTexFilterFuncSGIS(TextureTarget, TextureFilterSGIS, float*)"/>
            public static unsafe void GetTexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, Span<float> weights)
            {
                fixed (float* weights_ptr = weights)
                {
                    GetTexFilterFuncSGIS(target, filter, weights_ptr);
                }
            }
            /// <inheritdoc cref="GetTexFilterFuncSGIS(TextureTarget, TextureFilterSGIS, float*)"/>
            public static unsafe void GetTexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, float[] weights)
            {
                fixed (float* weights_ptr = weights)
                {
                    GetTexFilterFuncSGIS(target, filter, weights_ptr);
                }
            }
            /// <inheritdoc cref="GetTexFilterFuncSGIS(TextureTarget, TextureFilterSGIS, float*)"/>
            public static unsafe void GetTexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, ref float weights)
            {
                fixed (float* weights_ptr = &weights)
                {
                    GetTexFilterFuncSGIS(target, filter, weights_ptr);
                }
            }
            /// <inheritdoc cref="GetTexFilterFuncSGIS(TextureTarget, TextureFilterSGIS, float*)"/>
            public static unsafe float GetTexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter)
            {
                float weights_val;
                float* weights = &weights_val;
                GetTexFilterFuncSGIS(target, filter, weights);
                return weights_val;
            }
            /// <inheritdoc cref="PixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void PixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PixelTexGenParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void PixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PixelTexGenParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void PixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    PixelTexGenParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void PixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PixelTexGenParameterivSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void PixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PixelTexGenParameterivSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void PixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    PixelTexGenParameterivSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvSGIS(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvSGIS(PointParameterNameARB pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvSGIS(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvSGIS(PointParameterNameARB pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvSGIS(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvSGIS(PointParameterNameARB pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    PointParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SharpenTexFuncSGIS(TextureTarget, int, float*)"/>
            public static unsafe void SharpenTexFuncSGIS(TextureTarget target, ReadOnlySpan<float> points)
            {
                int n = (int)(points.Length / 2);
                fixed (float* points_ptr = points)
                {
                    SharpenTexFuncSGIS(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="SharpenTexFuncSGIS(TextureTarget, int, float*)"/>
            public static unsafe void SharpenTexFuncSGIS(TextureTarget target, float[] points)
            {
                int n = (int)(points.Length / 2);
                fixed (float* points_ptr = points)
                {
                    SharpenTexFuncSGIS(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="SharpenTexFuncSGIS(TextureTarget, int, float*)"/>
            public static unsafe void SharpenTexFuncSGIS(TextureTarget target, int n, in float points)
            {
                fixed (float* points_ptr = &points)
                {
                    SharpenTexFuncSGIS(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="TexFilterFuncSGIS(TextureTarget, TextureFilterSGIS, int, float*)"/>
            public static unsafe void TexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, ReadOnlySpan<float> weights)
            {
                int n = (int)(weights.Length);
                fixed (float* weights_ptr = weights)
                {
                    TexFilterFuncSGIS(target, filter, n, weights_ptr);
                }
            }
            /// <inheritdoc cref="TexFilterFuncSGIS(TextureTarget, TextureFilterSGIS, int, float*)"/>
            public static unsafe void TexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, float[] weights)
            {
                int n = (int)(weights.Length);
                fixed (float* weights_ptr = weights)
                {
                    TexFilterFuncSGIS(target, filter, n, weights_ptr);
                }
            }
            /// <inheritdoc cref="TexFilterFuncSGIS(TextureTarget, TextureFilterSGIS, int, float*)"/>
            public static unsafe void TexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, int n, in float weights)
            {
                fixed (float* weights_ptr = &weights)
                {
                    TexFilterFuncSGIS(target, filter, n, weights_ptr);
                }
            }
            /// <inheritdoc cref="TexImage4DSGIS(TextureTarget, int, InternalFormat, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage4DSGIS(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexImage4DSGIS(TextureTarget, int, InternalFormat, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage4DSGIS<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexImage4DSGIS(TextureTarget, int, InternalFormat, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage4DSGIS<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexImage4DSGIS(TextureTarget, int, InternalFormat, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage4DSGIS<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage4DSGIS(TextureTarget, int, int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage4DSGIS(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexSubImage4DSGIS(TextureTarget, int, int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage4DSGIS<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage4DSGIS(TextureTarget, int, int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage4DSGIS<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage4DSGIS(TextureTarget, int, int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage4DSGIS<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels_ptr);
                }
            }
        }
        public static unsafe partial class SGIX
        {
            /// <inheritdoc cref="DeformationMap3dSGIX(FfdTargetSGIX, double, double, int, int, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void DeformationMap3dSGIX(FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, ReadOnlySpan<double> points)
            {
                fixed (double* points_ptr = points)
                {
                    DeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3dSGIX(FfdTargetSGIX, double, double, int, int, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void DeformationMap3dSGIX(FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double[] points)
            {
                fixed (double* points_ptr = points)
                {
                    DeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3dSGIX(FfdTargetSGIX, double, double, int, int, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void DeformationMap3dSGIX(FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, in double points)
            {
                fixed (double* points_ptr = &points)
                {
                    DeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3fSGIX(FfdTargetSGIX, float, float, int, int, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void DeformationMap3fSGIX(FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, ReadOnlySpan<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    DeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3fSGIX(FfdTargetSGIX, float, float, int, int, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void DeformationMap3fSGIX(FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    DeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3fSGIX(FfdTargetSGIX, float, float, int, int, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void DeformationMap3fSGIX(FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, in float points)
            {
                fixed (float* points_ptr = &points)
                {
                    DeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="FinishAsyncSGIX(uint*)"/>
            public static unsafe int FinishAsyncSGIX(Span<uint> markerp)
            {
                int returnValue;
                fixed (uint* markerp_ptr = markerp)
                {
                    returnValue = FinishAsyncSGIX(markerp_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="FinishAsyncSGIX(uint*)"/>
            public static unsafe int FinishAsyncSGIX(uint[] markerp)
            {
                int returnValue;
                fixed (uint* markerp_ptr = markerp)
                {
                    returnValue = FinishAsyncSGIX(markerp_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="FinishAsyncSGIX(uint*)"/>
            public static unsafe int FinishAsyncSGIX(ref uint markerp)
            {
                int returnValue;
                fixed (uint* markerp_ptr = &markerp)
                {
                    returnValue = FinishAsyncSGIX(markerp_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="FragmentLightfvSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void FragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentLightfvSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightfvSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void FragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentLightfvSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightfvSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void FragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    FragmentLightfvSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightivSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void FragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentLightivSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightivSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void FragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentLightivSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightivSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void FragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    FragmentLightivSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModelfvSGIX(FragmentLightModelParameterSGIX, float*)"/>
            public static unsafe void FragmentLightModelfvSGIX(FragmentLightModelParameterSGIX pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentLightModelfvSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModelfvSGIX(FragmentLightModelParameterSGIX, float*)"/>
            public static unsafe void FragmentLightModelfvSGIX(FragmentLightModelParameterSGIX pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentLightModelfvSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModelfvSGIX(FragmentLightModelParameterSGIX, float*)"/>
            public static unsafe void FragmentLightModelfvSGIX(FragmentLightModelParameterSGIX pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    FragmentLightModelfvSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModelivSGIX(FragmentLightModelParameterSGIX, int*)"/>
            public static unsafe void FragmentLightModelivSGIX(FragmentLightModelParameterSGIX pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentLightModelivSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModelivSGIX(FragmentLightModelParameterSGIX, int*)"/>
            public static unsafe void FragmentLightModelivSGIX(FragmentLightModelParameterSGIX pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentLightModelivSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModelivSGIX(FragmentLightModelParameterSGIX, int*)"/>
            public static unsafe void FragmentLightModelivSGIX(FragmentLightModelParameterSGIX pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    FragmentLightModelivSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialfvSGIX(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void FragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentMaterialfvSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialfvSGIX(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void FragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentMaterialfvSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialfvSGIX(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void FragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    FragmentMaterialfvSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialivSGIX(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void FragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentMaterialivSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialivSGIX(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void FragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentMaterialivSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialivSGIX(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void FragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    FragmentMaterialivSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightfvSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void GetFragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFragmentLightfvSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightfvSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void GetFragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFragmentLightfvSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightfvSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void GetFragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetFragmentLightfvSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightfvSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe float GetFragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetFragmentLightfvSGIX(light, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetFragmentLightivSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void GetFragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFragmentLightivSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightivSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void GetFragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFragmentLightivSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightivSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void GetFragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFragmentLightivSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightivSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe int GetFragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetFragmentLightivSGIX(light, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetFragmentMaterialfvSGIX(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void GetFragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFragmentMaterialfvSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialfvSGIX(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void GetFragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFragmentMaterialfvSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialfvSGIX(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void GetFragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetFragmentMaterialfvSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialfvSGIX(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe float GetFragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetFragmentMaterialfvSGIX(face, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetFragmentMaterialivSGIX(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetFragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFragmentMaterialivSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialivSGIX(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetFragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFragmentMaterialivSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialivSGIX(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetFragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFragmentMaterialivSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialivSGIX(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe int GetFragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetFragmentMaterialivSGIX(face, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetListParameterfvSGIX(int, ListParameterName, float*)"/>
            public static unsafe void GetListParameterfvSGIX(int list, ListParameterName pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetListParameterfvSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameterfvSGIX(int, ListParameterName, float*)"/>
            public static unsafe void GetListParameterfvSGIX(int list, ListParameterName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetListParameterfvSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameterfvSGIX(int, ListParameterName, float*)"/>
            public static unsafe void GetListParameterfvSGIX(int list, ListParameterName pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetListParameterfvSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameterfvSGIX(int, ListParameterName, float*)"/>
            public static unsafe float GetListParameterfvSGIX(int list, ListParameterName pname)
            {
                float parameters_val;
                float* parameters = &parameters_val;
                GetListParameterfvSGIX(list, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="GetListParameterivSGIX(int, ListParameterName, int*)"/>
            public static unsafe void GetListParameterivSGIX(int list, ListParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetListParameterivSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameterivSGIX(int, ListParameterName, int*)"/>
            public static unsafe void GetListParameterivSGIX(int list, ListParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetListParameterivSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameterivSGIX(int, ListParameterName, int*)"/>
            public static unsafe void GetListParameterivSGIX(int list, ListParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetListParameterivSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameterivSGIX(int, ListParameterName, int*)"/>
            public static unsafe int GetListParameterivSGIX(int list, ListParameterName pname)
            {
                int parameters_val;
                int* parameters = &parameters_val;
                GetListParameterivSGIX(list, pname, parameters);
                return parameters_val;
            }
            /// <inheritdoc cref="IglooInterfaceSGIX(All, void*)"/>
            public static unsafe void IglooInterfaceSGIX(All pname, IntPtr parameters)
            {
                void* parameters_vptr = (void*)parameters;
                IglooInterfaceSGIX(pname, parameters_vptr);
            }
            /// <inheritdoc cref="IglooInterfaceSGIX(All, void*)"/>
            public static unsafe void IglooInterfaceSGIX<T1>(All pname, ReadOnlySpan<T1> parameters)
                where T1 : unmanaged
            {
                fixed (void* parameters_ptr = parameters)
                {
                    IglooInterfaceSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="IglooInterfaceSGIX(All, void*)"/>
            public static unsafe void IglooInterfaceSGIX<T1>(All pname, T1[] parameters)
                where T1 : unmanaged
            {
                fixed (void* parameters_ptr = parameters)
                {
                    IglooInterfaceSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="IglooInterfaceSGIX(All, void*)"/>
            public static unsafe void IglooInterfaceSGIX<T1>(All pname, in T1 parameters)
                where T1 : unmanaged
            {
                fixed (void* parameters_ptr = &parameters)
                {
                    IglooInterfaceSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="InstrumentsBufferSGIX(int, int*)"/>
            public static unsafe void InstrumentsBufferSGIX(Span<int> buffer)
            {
                int size = (int)(buffer.Length);
                fixed (int* buffer_ptr = buffer)
                {
                    InstrumentsBufferSGIX(size, buffer_ptr);
                }
            }
            /// <inheritdoc cref="InstrumentsBufferSGIX(int, int*)"/>
            public static unsafe void InstrumentsBufferSGIX(int[] buffer)
            {
                int size = (int)(buffer.Length);
                fixed (int* buffer_ptr = buffer)
                {
                    InstrumentsBufferSGIX(size, buffer_ptr);
                }
            }
            /// <inheritdoc cref="InstrumentsBufferSGIX(int, int*)"/>
            public static unsafe void InstrumentsBufferSGIX(int size, ref int buffer)
            {
                fixed (int* buffer_ptr = &buffer)
                {
                    InstrumentsBufferSGIX(size, buffer_ptr);
                }
            }
            /// <inheritdoc cref="ListParameterfvSGIX(int, ListParameterName, float*)"/>
            public static unsafe void ListParameterfvSGIX(int list, ListParameterName pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ListParameterfvSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameterfvSGIX(int, ListParameterName, float*)"/>
            public static unsafe void ListParameterfvSGIX(int list, ListParameterName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ListParameterfvSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameterfvSGIX(int, ListParameterName, float*)"/>
            public static unsafe void ListParameterfvSGIX(int list, ListParameterName pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ListParameterfvSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameterivSGIX(int, ListParameterName, int*)"/>
            public static unsafe void ListParameterivSGIX(int list, ListParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ListParameterivSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameterivSGIX(int, ListParameterName, int*)"/>
            public static unsafe void ListParameterivSGIX(int list, ListParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ListParameterivSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameterivSGIX(int, ListParameterName, int*)"/>
            public static unsafe void ListParameterivSGIX(int list, ListParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ListParameterivSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PollAsyncSGIX(uint*)"/>
            public static unsafe int PollAsyncSGIX(Span<uint> markerp)
            {
                int returnValue;
                fixed (uint* markerp_ptr = markerp)
                {
                    returnValue = PollAsyncSGIX(markerp_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PollAsyncSGIX(uint*)"/>
            public static unsafe int PollAsyncSGIX(uint[] markerp)
            {
                int returnValue;
                fixed (uint* markerp_ptr = markerp)
                {
                    returnValue = PollAsyncSGIX(markerp_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PollAsyncSGIX(uint*)"/>
            public static unsafe int PollAsyncSGIX(ref uint markerp)
            {
                int returnValue;
                fixed (uint* markerp_ptr = &markerp)
                {
                    returnValue = PollAsyncSGIX(markerp_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PollInstrumentsSGIX(int*)"/>
            public static unsafe int PollInstrumentsSGIX(Span<int> marker_p)
            {
                int returnValue;
                fixed (int* marker_p_ptr = marker_p)
                {
                    returnValue = PollInstrumentsSGIX(marker_p_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PollInstrumentsSGIX(int*)"/>
            public static unsafe int PollInstrumentsSGIX(int[] marker_p)
            {
                int returnValue;
                fixed (int* marker_p_ptr = marker_p)
                {
                    returnValue = PollInstrumentsSGIX(marker_p_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PollInstrumentsSGIX(int*)"/>
            public static unsafe int PollInstrumentsSGIX(ref int marker_p)
            {
                int returnValue;
                fixed (int* marker_p_ptr = &marker_p)
                {
                    returnValue = PollInstrumentsSGIX(marker_p_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="ReferencePlaneSGIX(double*)"/>
            public static unsafe void ReferencePlaneSGIX(ReadOnlySpan<double> equation)
            {
                fixed (double* equation_ptr = equation)
                {
                    ReferencePlaneSGIX(equation_ptr);
                }
            }
            /// <inheritdoc cref="ReferencePlaneSGIX(double*)"/>
            public static unsafe void ReferencePlaneSGIX(double[] equation)
            {
                fixed (double* equation_ptr = equation)
                {
                    ReferencePlaneSGIX(equation_ptr);
                }
            }
            /// <inheritdoc cref="ReferencePlaneSGIX(double*)"/>
            public static unsafe void ReferencePlaneSGIX(in double equation)
            {
                fixed (double* equation_ptr = &equation)
                {
                    ReferencePlaneSGIX(equation_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameterfvSGIX(SpriteParameterNameSGIX, float*)"/>
            public static unsafe void SpriteParameterfvSGIX(SpriteParameterNameSGIX pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    SpriteParameterfvSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameterfvSGIX(SpriteParameterNameSGIX, float*)"/>
            public static unsafe void SpriteParameterfvSGIX(SpriteParameterNameSGIX pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    SpriteParameterfvSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameterfvSGIX(SpriteParameterNameSGIX, float*)"/>
            public static unsafe void SpriteParameterfvSGIX(SpriteParameterNameSGIX pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    SpriteParameterfvSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameterivSGIX(SpriteParameterNameSGIX, SpriteModeSGIX*)"/>
            public static unsafe void SpriteParameterivSGIX(SpriteParameterNameSGIX pname, ReadOnlySpan<SpriteModeSGIX> parameters)
            {
                fixed (SpriteModeSGIX* parameters_ptr = parameters)
                {
                    SpriteParameterivSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameterivSGIX(SpriteParameterNameSGIX, SpriteModeSGIX*)"/>
            public static unsafe void SpriteParameterivSGIX(SpriteParameterNameSGIX pname, SpriteModeSGIX[] parameters)
            {
                fixed (SpriteModeSGIX* parameters_ptr = parameters)
                {
                    SpriteParameterivSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameterivSGIX(SpriteParameterNameSGIX, SpriteModeSGIX*)"/>
            public static unsafe void SpriteParameterivSGIX(SpriteParameterNameSGIX pname, in SpriteModeSGIX parameters)
            {
                fixed (SpriteModeSGIX* parameters_ptr = &parameters)
                {
                    SpriteParameterivSGIX(pname, parameters_ptr);
                }
            }
        }
        public static unsafe partial class SUN
        {
            /// <inheritdoc cref="Color3fVertex3fvSUN(float*, float*)"/>
            public static unsafe void Color3fVertex3fvSUN(in Color3<Rgb> c, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (Color3<Rgb>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        Color3fVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color3fVertex3fvSUN(float*, float*)"/>
            public static unsafe void Color3fVertex3fvSUN(in Color3<Rgb> c, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (Color3<Rgb>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        Color3fVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color3fVertex3fvSUN(float*, float*)"/>
            public static unsafe void Color3fVertex3fvSUN(in Color3<Rgb> c, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    fixed (Color3<Rgb>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        Color3fVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4fNormal3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void Color4fNormal3fVertex3fvSUN(in Color4<Rgba> c, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (float* n_ptr = n)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (Color4<Rgba>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            Color4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="Color4fNormal3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void Color4fNormal3fVertex3fvSUN(in Color4<Rgba> c, float[] n, float[] v)
            {
                fixed (float* n_ptr = n)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (Color4<Rgba>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            Color4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="Color4fNormal3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void Color4fNormal3fVertex3fvSUN(in Color4<Rgba> c, in float n, in float v)
            {
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color4<Rgba>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        Color4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4ubVertex2fvSUN(byte*, float*)"/>
            public static unsafe void Color4ubVertex2fvSUN(ReadOnlySpan<byte> c, ReadOnlySpan<float> v)
            {
                fixed (byte* c_ptr = c)
                {
                    fixed (float* v_ptr = v)
                    {
                        Color4ubVertex2fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4ubVertex2fvSUN(byte*, float*)"/>
            public static unsafe void Color4ubVertex2fvSUN(byte[] c, float[] v)
            {
                fixed (byte* c_ptr = c)
                {
                    fixed (float* v_ptr = v)
                    {
                        Color4ubVertex2fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4ubVertex2fvSUN(byte*, float*)"/>
            public static unsafe void Color4ubVertex2fvSUN(in byte c, in float v)
            {
                fixed (byte* c_ptr = &c)
                fixed (float* v_ptr = &v)
                {
                    Color4ubVertex2fvSUN(c_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="Color4ubVertex3fvSUN(byte*, float*)"/>
            public static unsafe void Color4ubVertex3fvSUN(ReadOnlySpan<byte> c, ReadOnlySpan<float> v)
            {
                fixed (byte* c_ptr = c)
                {
                    fixed (float* v_ptr = v)
                    {
                        Color4ubVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4ubVertex3fvSUN(byte*, float*)"/>
            public static unsafe void Color4ubVertex3fvSUN(byte[] c, float[] v)
            {
                fixed (byte* c_ptr = c)
                {
                    fixed (float* v_ptr = v)
                    {
                        Color4ubVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4ubVertex3fvSUN(byte*, float*)"/>
            public static unsafe void Color4ubVertex3fvSUN(in byte c, in float v)
            {
                fixed (byte* c_ptr = &c)
                fixed (float* v_ptr = &v)
                {
                    Color4ubVertex3fvSUN(c_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="Normal3fVertex3fvSUN(float*, float*)"/>
            public static unsafe void Normal3fVertex3fvSUN(ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (float* n_ptr = n)
                {
                    fixed (float* v_ptr = v)
                    {
                        Normal3fVertex3fvSUN(n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Normal3fVertex3fvSUN(float*, float*)"/>
            public static unsafe void Normal3fVertex3fvSUN(float[] n, float[] v)
            {
                fixed (float* n_ptr = n)
                {
                    fixed (float* v_ptr = v)
                    {
                        Normal3fVertex3fvSUN(n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Normal3fVertex3fvSUN(float*, float*)"/>
            public static unsafe void Normal3fVertex3fvSUN(in float n, in float v)
            {
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    Normal3fVertex3fvSUN(n_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeubvSUN(byte*)"/>
            public static unsafe void ReplacementCodeubvSUN(ReadOnlySpan<byte> code)
            {
                fixed (byte* code_ptr = code)
                {
                    ReplacementCodeubvSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeubvSUN(byte*)"/>
            public static unsafe void ReplacementCodeubvSUN(byte[] code)
            {
                fixed (byte* code_ptr = code)
                {
                    ReplacementCodeubvSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeubvSUN(byte*)"/>
            public static unsafe void ReplacementCodeubvSUN(in byte code)
            {
                fixed (byte* code_ptr = &code)
                {
                    ReplacementCodeubvSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor3fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor3fVertex3fvSUN(ReadOnlySpan<TriangleListSUN> rc, in Color3<Rgb> c, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (Color3<Rgb>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            ReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor3fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor3fVertex3fvSUN(TriangleListSUN[] rc, in Color3<Rgb> c, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (Color3<Rgb>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            ReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor3fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor3fVertex3fvSUN(in TriangleListSUN rc, in Color3<Rgb> c, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color3<Rgb>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        ReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ReadOnlySpan<TriangleListSUN> rc, in Color4<Rgba> c, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(TriangleListSUN[] rc, in Color4<Rgba> c, float[] n, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(in TriangleListSUN rc, in Color4<Rgba> c, in float n, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color4<Rgba>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4ubVertex3fvSUN(TriangleListSUN*, byte*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(ReadOnlySpan<TriangleListSUN> rc, ReadOnlySpan<byte> c, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (byte* c_ptr = c)
                    {
                        fixed (float* v_ptr = v)
                        {
                            ReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4ubVertex3fvSUN(TriangleListSUN*, byte*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(TriangleListSUN[] rc, byte[] c, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (byte* c_ptr = c)
                    {
                        fixed (float* v_ptr = v)
                        {
                            ReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4ubVertex3fvSUN(TriangleListSUN*, byte*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(in TriangleListSUN rc, in byte c, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (byte* c_ptr = &c)
                fixed (float* v_ptr = &v)
                {
                    ReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(ReadOnlySpan<TriangleListSUN> rc, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            ReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(TriangleListSUN[] rc, float[] n, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            ReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(in TriangleListSUN rc, in float n, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    ReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ReadOnlySpan<TriangleListSUN> rc, ReadOnlySpan<float> tc, in Color4<Rgba> c, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        fixed (float* n_ptr = n)
                        {
                            fixed (float* v_ptr = v)
                            {
                                fixed (Color4<Rgba>* tmp_c = &c)
                                {
                                    float* c_ptr = (float*)tmp_c;
                                    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                                }
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(TriangleListSUN[] rc, float[] tc, in Color4<Rgba> c, float[] n, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        fixed (float* n_ptr = n)
                        {
                            fixed (float* v_ptr = v)
                            {
                                fixed (Color4<Rgba>* tmp_c = &c)
                                {
                                    float* c_ptr = (float*)tmp_c;
                                    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                                }
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(in TriangleListSUN rc, in float tc, in Color4<Rgba> c, in float n, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* tc_ptr = &tc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color4<Rgba>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ReadOnlySpan<TriangleListSUN> rc, ReadOnlySpan<float> tc, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        fixed (float* n_ptr = n)
                        {
                            fixed (float* v_ptr = v)
                            {
                                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(TriangleListSUN[] rc, float[] tc, float[] n, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        fixed (float* n_ptr = n)
                        {
                            fixed (float* v_ptr = v)
                            {
                                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(in TriangleListSUN rc, in float tc, in float n, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* tc_ptr = &tc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(ReadOnlySpan<TriangleListSUN> rc, ReadOnlySpan<float> tc, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        fixed (float* v_ptr = v)
                        {
                            ReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(TriangleListSUN[] rc, float[] tc, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        fixed (float* v_ptr = v)
                        {
                            ReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(in TriangleListSUN rc, in float tc, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* tc_ptr = &tc)
                fixed (float* v_ptr = &v)
                {
                    ReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiVertex3fvSUN(TriangleListSUN*, float*)"/>
            public static unsafe void ReplacementCodeuiVertex3fvSUN(ReadOnlySpan<TriangleListSUN> rc, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        ReplacementCodeuiVertex3fvSUN(rc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiVertex3fvSUN(TriangleListSUN*, float*)"/>
            public static unsafe void ReplacementCodeuiVertex3fvSUN(TriangleListSUN[] rc, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        ReplacementCodeuiVertex3fvSUN(rc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiVertex3fvSUN(TriangleListSUN*, float*)"/>
            public static unsafe void ReplacementCodeuiVertex3fvSUN(in TriangleListSUN rc, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* v_ptr = &v)
                {
                    ReplacementCodeuiVertex3fvSUN(rc_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuivSUN(TriangleListSUN*)"/>
            public static unsafe void ReplacementCodeuivSUN(ReadOnlySpan<TriangleListSUN> code)
            {
                fixed (TriangleListSUN* code_ptr = code)
                {
                    ReplacementCodeuivSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuivSUN(TriangleListSUN*)"/>
            public static unsafe void ReplacementCodeuivSUN(TriangleListSUN[] code)
            {
                fixed (TriangleListSUN* code_ptr = code)
                {
                    ReplacementCodeuivSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuivSUN(TriangleListSUN*)"/>
            public static unsafe void ReplacementCodeuivSUN(in TriangleListSUN code)
            {
                fixed (TriangleListSUN* code_ptr = &code)
                {
                    ReplacementCodeuivSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeusvSUN(ushort*)"/>
            public static unsafe void ReplacementCodeusvSUN(ReadOnlySpan<ushort> code)
            {
                fixed (ushort* code_ptr = code)
                {
                    ReplacementCodeusvSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeusvSUN(ushort*)"/>
            public static unsafe void ReplacementCodeusvSUN(ushort[] code)
            {
                fixed (ushort* code_ptr = code)
                {
                    ReplacementCodeusvSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeusvSUN(ushort*)"/>
            public static unsafe void ReplacementCodeusvSUN(in ushort code)
            {
                fixed (ushort* code_ptr = &code)
                {
                    ReplacementCodeusvSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2fColor3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor3fVertex3fvSUN(ReadOnlySpan<float> tc, in Color3<Rgb> c, ReadOnlySpan<float> v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (Color3<Rgb>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            TexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor3fVertex3fvSUN(float[] tc, in Color3<Rgb> c, float[] v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (Color3<Rgb>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            TexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor3fVertex3fvSUN(in float tc, in Color3<Rgb> c, in float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color3<Rgb>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        TexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4fNormal3fVertex3fvSUN(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ReadOnlySpan<float> tc, in Color4<Rgba> c, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                TexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4fNormal3fVertex3fvSUN(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, in Color4<Rgba> c, float[] n, float[] v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                TexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4fNormal3fVertex3fvSUN(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(in float tc, in Color4<Rgba> c, in float n, in float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color4<Rgba>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        TexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4ubVertex3fvSUN(float*, byte*, float*)"/>
            public static unsafe void TexCoord2fColor4ubVertex3fvSUN(ReadOnlySpan<float> tc, ReadOnlySpan<byte> c, ReadOnlySpan<float> v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (byte* c_ptr = c)
                    {
                        fixed (float* v_ptr = v)
                        {
                            TexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4ubVertex3fvSUN(float*, byte*, float*)"/>
            public static unsafe void TexCoord2fColor4ubVertex3fvSUN(float[] tc, byte[] c, float[] v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (byte* c_ptr = c)
                    {
                        fixed (float* v_ptr = v)
                        {
                            TexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4ubVertex3fvSUN(float*, byte*, float*)"/>
            public static unsafe void TexCoord2fColor4ubVertex3fvSUN(in float tc, in byte c, in float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (byte* c_ptr = &c)
                fixed (float* v_ptr = &v)
                {
                    TexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2fNormal3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void TexCoord2fNormal3fVertex3fvSUN(ReadOnlySpan<float> tc, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            TexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fNormal3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void TexCoord2fNormal3fVertex3fvSUN(float[] tc, float[] n, float[] v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            TexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fNormal3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void TexCoord2fNormal3fVertex3fvSUN(in float tc, in float n, in float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    TexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2fVertex3fvSUN(float*, float*)"/>
            public static unsafe void TexCoord2fVertex3fvSUN(ReadOnlySpan<float> tc, ReadOnlySpan<float> v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* v_ptr = v)
                    {
                        TexCoord2fVertex3fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fVertex3fvSUN(float*, float*)"/>
            public static unsafe void TexCoord2fVertex3fvSUN(float[] tc, float[] v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* v_ptr = v)
                    {
                        TexCoord2fVertex3fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fVertex3fvSUN(float*, float*)"/>
            public static unsafe void TexCoord2fVertex3fvSUN(in float tc, in float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* v_ptr = &v)
                {
                    TexCoord2fVertex3fvSUN(tc_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4fColor4fNormal3fVertex4fvSUN(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ReadOnlySpan<float> tc, in Color4<Rgba> c, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                TexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord4fColor4fNormal3fVertex4fvSUN(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, in Color4<Rgba> c, float[] n, float[] v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                TexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord4fColor4fNormal3fVertex4fvSUN(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(in float tc, in Color4<Rgba> c, in float n, in float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color4<Rgba>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        TexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord4fVertex4fvSUN(float*, float*)"/>
            public static unsafe void TexCoord4fVertex4fvSUN(ReadOnlySpan<float> tc, ReadOnlySpan<float> v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* v_ptr = v)
                    {
                        TexCoord4fVertex4fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord4fVertex4fvSUN(float*, float*)"/>
            public static unsafe void TexCoord4fVertex4fvSUN(float[] tc, float[] v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* v_ptr = v)
                    {
                        TexCoord4fVertex4fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord4fVertex4fvSUN(float*, float*)"/>
            public static unsafe void TexCoord4fVertex4fvSUN(in float tc, in float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* v_ptr = &v)
                {
                    TexCoord4fVertex4fvSUN(tc_ptr, v_ptr);
                }
            }
        }
        public static unsafe partial class SUNX
        {
        }
    }
}
