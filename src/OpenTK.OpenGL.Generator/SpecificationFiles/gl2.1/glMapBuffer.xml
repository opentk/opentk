<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook MathML Module V1.1b1//EN"
              "http://www.oasis-open.org/docbook/xml/mathml/1.1CR1/dbmathml.dtd">
<refentry id="glMapBuffer">
    <refmeta>
        <refmetainfo>
            <copyright>
                <year>2005</year>
                <holder>Sams Publishing</holder>
            </copyright>
        </refmetainfo>
        <refentrytitle>glMapBuffer</refentrytitle>
        <manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>glMapBuffer</refname>
        <refpurpose>map a buffer object's data store</refpurpose>
    </refnamediv>
    <refsynopsisdiv><title>C Specification</title>
        <funcsynopsis>
            <funcprototype>
                <funcdef>void * <function>glMapBuffer</function></funcdef>
                <paramdef>GLenum <parameter>target</parameter></paramdef>
                <paramdef>GLenum <parameter>access</parameter></paramdef>
            </funcprototype>
        </funcsynopsis>
    </refsynopsisdiv>
    <refsect1 id="parameters"><title>Parameters</title>
        <variablelist>
        <varlistentry>
            <term><parameter>target</parameter></term>
            <listitem>
                <para>
                    Specifies the target buffer object being mapped.
                    The symbolic constant must be
                    <constant>GL_ARRAY_BUFFER</constant>,
                    <constant>GL_ELEMENT_ARRAY_BUFFER</constant>,
                    <constant>GL_PIXEL_PACK_BUFFER</constant>, or
                    <constant>GL_PIXEL_UNPACK_BUFFER</constant>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>access</parameter></term>
            <listitem>
                <para>
                    Specifies the access policy, indicating whether it will be possible to read from, write to,
                    or both read from and write to the buffer object's mapped data store. The symbolic constant must be
                    <constant>GL_READ_ONLY</constant>, <constant>GL_WRITE_ONLY</constant>, or <constant>GL_READ_WRITE</constant>.
                </para>
            </listitem>
        </varlistentry>
        </variablelist>
    </refsect1>
    <refsynopsisdiv><title>C Specification</title>
        <funcsynopsis>
            <funcprototype>
                <funcdef>GLboolean <function>glUnmapBuffer</function></funcdef>
                <paramdef>GLenum <parameter>target</parameter></paramdef>
            </funcprototype>
        </funcsynopsis>
    </refsynopsisdiv>
    <!-- eqn: ignoring delim $$ -->
    <refsect1 id="parameters2"><title>Parameters</title>
        <variablelist>
        <varlistentry>
            <term><parameter>target</parameter></term>
            <listitem>
                <para>
                    Specifies the target buffer object being unmapped.
                    The symbolic constant must be
                    <constant>GL_ARRAY_BUFFER</constant>,
                    <constant>GL_ELEMENT_ARRAY_BUFFER</constant>,
                    <constant>GL_PIXEL_PACK_BUFFER</constant>, or
                    <constant>GL_PIXEL_UNPACK_BUFFER</constant>.
                </para>
            </listitem>
        </varlistentry>
        </variablelist>
    </refsect1>
    <refsect1 id="description"><title>Description</title>
        <para>
            <function>glMapBuffer</function> maps to the client's address space the entire data store of the buffer object 
            currently bound to <parameter>target</parameter>. The data can then be directly read and/or written relative to 
            the returned pointer, depending on the specified <parameter>access</parameter> policy. If the GL is unable to
            map the buffer object's data store, <function>glMapBuffer</function> generates an error and returns 
            <constant>NULL</constant>. This may occur for system-specific reasons, such as low virtual memory availability.
        </para>
        <para>
            If a mapped data store is accessed in a way inconsistent with the specified <parameter>access</parameter> policy,
            no error is generated, but performance may be negatively impacted and system errors, including program 
            termination, may result. Unlike the <parameter>usage</parameter> parameter of <function>glBufferData</function>, 
            <parameter>access</parameter> is not a hint, and does in fact constrain the usage of the mapped data store on
            some GL implementations. In order to achieve the highest performance available, a buffer object's data store 
            should be used in ways consistent with both its specified <parameter>usage</parameter> and 
            <parameter>access</parameter> parameters.
        </para>
        <para>
            A mapped data store must be unmapped with <function>glUnmapBuffer</function> before its buffer object is used.
            Otherwise an error will be generated by any GL command that attempts to dereference the buffer object's data store.
            When a data store is unmapped, the pointer to its data store becomes invalid. <function>glUnmapBuffer</function>
            returns <constant>GL_TRUE</constant> unless the data store contents have become corrupt during the time
            the data store was mapped. This can occur for system-specific reasons that affect the availability of graphics
            memory, such as screen mode changes. In such situations, <constant>GL_FALSE</constant> is returned and the
            data store contents are undefined. An application must detect this rare condition and reinitialize the data store.
        </para>
        <para>
            A buffer object's mapped data store is automatically unmapped when the buffer object is deleted or its data store 
            is recreated with <function>glBufferData</function>.
        </para>
    </refsect1>
    <refsect1 id="notes"><title>Notes</title>
        <para>
            If an error is generated, <function>glMapBuffer</function> returns <constant>NULL</constant>, and
            <function>glUnmapBuffer</function> returns <constant>GL_FALSE</constant>.
        </para>
        <para>
            <function>glMapBuffer</function> and <function>glUnmapBuffer</function> are available only if the GL version is 1.5 or greater.
        </para>
        <para>
            <constant>GL_PIXEL_PACK_BUFFER</constant> and <constant>GL_PIXEL_UNPACK_BUFFER</constant> are 
            available only if the GL version is 2.1 or greater.
        </para>
        <para>
            Parameter values passed to GL commands may not be sourced from the returned pointer. No error will be generated,
            but results will be undefined and will likely vary across GL implementations.
        </para>
    </refsect1>
    <refsect1 id="errors"><title>Errors</title>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>target</parameter> is not 
            <constant>GL_ARRAY_BUFFER</constant>, <constant>GL_ELEMENT_ARRAY_BUFFER</constant>, 
            <constant>GL_PIXEL_PACK_BUFFER</constant>, or <constant>GL_PIXEL_UNPACK_BUFFER</constant>.
        </para>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>access</parameter> is not 
            <constant>GL_READ_ONLY</constant>, <constant>GL_WRITE_ONLY</constant>, or <constant>GL_READ_WRITE</constant>.
        </para>
        <para>
            <constant>GL_OUT_OF_MEMORY</constant> is generated when <function>glMapBuffer</function> is executed
            if the GL is unable to map the buffer object's data store. This may occur for a variety of system-specific 
            reasons, such as the absence of sufficient remaining virtual memory.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if the reserved buffer object name 0 is bound to <parameter>target</parameter>.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if <function>glMapBuffer</function> is executed for
            a buffer object whose data store is already mapped.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if <function>glUnmapBuffer</function> is executed for
            a buffer object whose data store is not currently mapped.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if <function>glMapBuffer</function> or <function>glUnmapBuffer</function> is executed
            between the execution of <citerefentry><refentrytitle>glBegin</refentrytitle></citerefentry> and the corresponding
            execution of <citerefentry><refentrytitle>glEnd</refentrytitle></citerefentry>.
        </para>
    </refsect1>
    <refsect1 id="associatedgets"><title>Associated Gets</title>
        <para>
            <citerefentry><refentrytitle>glGetBufferPointerv</refentrytitle></citerefentry> with argument <constant>GL_BUFFER_MAP_POINTER</constant>
        </para>
        <para>
            <citerefentry><refentrytitle>glGetBufferParameteriv</refentrytitle></citerefentry> with argument <constant>GL_BUFFER_MAPPED</constant>,  <constant>GL_BUFFER_ACCESS</constant>, or <constant>GL_BUFFER_USAGE</constant>
        </para>
    </refsect1>
    <refsect1 id="seealso"><title>See Also</title>
        <para>
            <citerefentry><refentrytitle>glBindBuffer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glBufferData</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glBufferSubData</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glDeleteBuffers</refentrytitle></citerefentry>
        </para>
    </refsect1>
    <refsect1 id="Copyright"><title>Copyright</title>
        <para>
            Copyright <trademark class="copyright"></trademark> 2005 Addison-Wesley. 
            This material may be distributed subject to the terms and conditions set forth in 
            the Open Publication License, v 1.0, 8 June 1999.
            <ulink url="http://opencontent.org/openpub/">http://opencontent.org/openpub/</ulink>.
        </para>
    </refsect1>
</refentry>
