<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook MathML Module V1.1b1//EN"
              "http://www.oasis-open.org/docbook/xml/mathml/1.1CR1/dbmathml.dtd">
<refentry id="glBufferSubData">
    <refmeta>
        <refmetainfo>
            <copyright>
                <year>2005</year>
                <holder>Sams Publishing</holder>
            </copyright>
        </refmetainfo>
        <refentrytitle>glBufferSubData</refentrytitle>
        <manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>glBufferSubData</refname>
        <refpurpose>updates a subset of a buffer object's data store</refpurpose>
    </refnamediv>
    <refsynopsisdiv><title>C Specification</title>
        <funcsynopsis>
            <funcprototype>
                <funcdef>void <function>glBufferSubData</function></funcdef>
                <paramdef>GLenum <parameter>target</parameter></paramdef>
                <paramdef>GLintptr <parameter>offset</parameter></paramdef>
                <paramdef>GLsizeiptr <parameter>size</parameter></paramdef>
                <paramdef>const void * <parameter>data</parameter></paramdef>
            </funcprototype>
        </funcsynopsis>
    </refsynopsisdiv>
    <!-- eqn: ignoring delim $$ -->
    <refsect1 id="parameters"><title>Parameters</title>
        <variablelist>
        <varlistentry>
            <term><parameter>target</parameter></term>
            <listitem>
                <para>
                    Specifies the target buffer object.
                    The symbolic constant must be <constant>GL_ARRAY_BUFFER</constant>, 
                    <constant>GL_ELEMENT_ARRAY_BUFFER</constant>,
                    <constant>GL_PIXEL_PACK_BUFFER</constant>, or
                    <constant>GL_PIXEL_UNPACK_BUFFER</constant>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>offset</parameter></term>
            <listitem>
                <para>
                    Specifies the offset into the buffer object's data store where data replacement will begin,
                    measured in bytes.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>size</parameter></term>
            <listitem>
                <para>
                    Specifies the size in bytes of the data store region being replaced.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>data</parameter></term>
            <listitem>
                <para>
                    Specifies a pointer to the new data that will be copied into the data store.
                </para>
            </listitem>
        </varlistentry>
        </variablelist>
    </refsect1>
    <refsect1 id="description"><title>Description</title>
        <para>
            <function>glBufferSubData</function> redefines some or all of the data store for the buffer object currently 
            bound to <parameter>target</parameter>. Data starting at byte offset <parameter>offset</parameter> and
            extending for <parameter>size</parameter> bytes is copied to the data store from the memory pointed to by
            <parameter>data</parameter>.  An error is thrown if <parameter>offset</parameter> and <parameter>size</parameter>
            together define a range beyond the bounds of the buffer object's data store.
        </para>
    </refsect1>
    <refsect1 id="notes"><title>Notes</title>
        <para>
            <function>glBufferSubData</function> is available only if the GL version is 1.5 or greater.
        </para>
        <para>
            Targets <constant>GL_PIXEL_PACK_BUFFER</constant> and <constant>GL_PIXEL_UNPACK_BUFFER</constant> are available 
            only if the GL version is 2.1 or greater.
        </para>
        <para>
            When replacing the entire data store, consider using <function>glBufferSubData</function> rather
            than completely recreating the data store with <function>glBufferData</function>.  This avoids the cost of
            reallocating the data store.
        </para>
        <para>
            Consider using multiple buffer objects to avoid stalling the rendering pipeline during data store updates.
            If any rendering in the pipeline makes reference to data in the buffer object being updated by 
            <function>glBufferSubData</function>, especially from the specific region being updated, that rendering must 
            drain from the pipeline before the data store can be updated.
        </para>
        <para>
            Clients must align data elements consistent with the requirements of the client
            platform, with an additional base-level requirement that an offset within a buffer to
            a datum comprising <inlineequation><mml:math><mml:mi mathvariant="italic">N</mml:mi> bytes be a 
            multiple of <mml:mi mathvariant="italic">N</mml:mi></mml:math></inlineequation>.
        </para>
    </refsect1>
    <refsect1 id="errors"><title>Errors</title>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>target</parameter> is not 
            <constant>GL_ARRAY_BUFFER</constant>, <constant>GL_ELEMENT_ARRAY_BUFFER</constant>, 
            <constant>GL_PIXEL_PACK_BUFFER</constant>, or <constant>GL_PIXEL_UNPACK_BUFFER</constant>.
        </para>
        <para>
            <constant>GL_INVALID_VALUE</constant> is generated if <parameter>offset</parameter> or 
            <parameter>size</parameter> is negative, or if together they define a region of memory
            that extends beyond the buffer object's allocated data store.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if the reserved buffer object name 0 is bound to <parameter>target</parameter>.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if the buffer object being updated is mapped.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if <function>glBufferSubData</function>
            is executed between the execution of
            <citerefentry><refentrytitle>glBegin</refentrytitle></citerefentry> and the corresponding execution of
            <citerefentry><refentrytitle>glEnd</refentrytitle></citerefentry>.
        </para>
    </refsect1>
    <refsect1 id="associatedgets"><title>Associated Gets</title>
        <para>
            <citerefentry><refentrytitle>glGetBufferSubData</refentrytitle></citerefentry>
        </para>
    </refsect1>
    <refsect1 id="seealso"><title>See Also</title>
        <para>
            <citerefentry><refentrytitle>glBindBuffer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glBufferData</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glMapBuffer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glUnmapBuffer</refentrytitle></citerefentry>
        </para>
    </refsect1>
    <refsect1 id="Copyright"><title>Copyright</title>
        <para>
            Copyright <trademark class="copyright"></trademark> 2005 Addison-Wesley. 
            This material may be distributed subject to the terms and conditions set forth in 
            the Open Publication License, v 1.0, 8 June 1999.
            <ulink url="http://opencontent.org/openpub/">http://opencontent.org/openpub/</ulink>.
        </para>
    </refsect1>
</refentry>
