<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook MathML Module V1.1b1//EN"
	      "http://www.oasis-open.org/docbook/xml/mathml/1.1CR1/dbmathml.dtd">
<refentry id="glGetActiveAttrib">
    <refmeta>
	<refentrytitle>glGetActiveAttrib</refentrytitle>
	<manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
	<refname>glGetActiveAttrib</refname>
	<refpurpose>Returns information about an active attribute variable for the specified program object</refpurpose>
    </refnamediv>
    <refsynopsisdiv><title>C Specification</title>
	<funcsynopsis>
	    <funcprototype>
		<funcdef>void <function>glGetActiveAttrib</function></funcdef>
		<paramdef>GLuint <parameter>program</parameter></paramdef>
		<paramdef>GLuint <parameter>index</parameter></paramdef>
		<paramdef>GLsizei <parameter>bufSize</parameter></paramdef>
		<paramdef>GLsizei *<parameter>length</parameter></paramdef>
		<paramdef>GLint *<parameter>size</parameter></paramdef>
		<paramdef>GLenum *<parameter>type</parameter></paramdef>
		<paramdef>GLchar *<parameter>name</parameter></paramdef>
	    </funcprototype>
	</funcsynopsis>
    </refsynopsisdiv>
    <refsect1 id="parameters"><title>Parameters</title>
	<variablelist>
	    <varlistentry>
		<term><parameter>program</parameter></term>
		<listitem>
		    <para>Specifies the program object to be
		    queried.</para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><parameter>index</parameter></term>
		<listitem>
		    <para>Specifies the index of the attribute variable
		    to be queried.</para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><parameter>bufSize</parameter></term>
		<listitem>
		    <para>Specifies the maximum number of characters
		    OpenGL is allowed to write in the character buffer
		    indicated by <parameter>name</parameter>.</para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><parameter>length</parameter></term>
		<listitem>
		    <para>Returns the number of characters actually
		    written by OpenGL in the string indicated by
		    <parameter>name</parameter> (excluding the null
		    terminator) if a value other than
		    <constant>NULL</constant> is passed.</para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><parameter>size</parameter></term>
		<listitem>
		    <para>Returns the size of the attribute
		    variable.</para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><parameter>type</parameter></term>
		<listitem>
		    <para>Returns the data type of the attribute
		    variable.</para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><parameter>name</parameter></term>
		<listitem>
		    <para>Returns a null terminated string containing
		    the name of the attribute variable.</para>
		</listitem>
	    </varlistentry>
	</variablelist>
    </refsect1>
    <refsect1 id="description"><title>Description</title>
	<para><function>glGetActiveAttrib</function> returns information
	about an active attribute variable in the program object
	specified by <parameter>program</parameter>. The number of
	active attributes can be obtained by calling
	<citerefentry><refentrytitle>glGetProgram</refentrytitle></citerefentry>
	with the value <constant>GL_ACTIVE_ATTRIBUTES</constant>. A
	value of 0 for <parameter>index</parameter> selects the first
	active attribute variable. Permissible values for
	<parameter>index</parameter> range from 0 to the number of
	active attribute variables minus 1.</para>

	<para>A vertex shader may use either built-in attribute
	variables, user-defined attribute variables, or both. Built-in
	attribute variables have a prefix of &quot;gl_&quot; and
	reference conventional OpenGL vertex attribtes (e.g.,
	<parameter>gl_Vertex</parameter>,
	<parameter>gl_Normal</parameter>, etc., see the OpenGL Shading
	Language specification for a complete list.) User-defined
	attribute variables have arbitrary names and obtain their values
	through numbered generic vertex attributes. An attribute
	variable (either built-in or user-defined) is considered active
	if it is determined during the link operation that it may be
	accessed during program execution. Therefore,
	<parameter>program</parameter> should have previously been the
	target of a call to
	<citerefentry><refentrytitle>glLinkProgram</refentrytitle></citerefentry>,
	but it is not necessary for it to have been linked
	successfully.</para>

	<para>The size of the character buffer required to store the
	longest attribute variable name in
	<parameter>program</parameter> can be obtained by calling
	<citerefentry><refentrytitle>glGetProgram</refentrytitle></citerefentry>
	with the value
	<constant>GL_ACTIVE_ATTRIBUTE_MAX_LENGTH</constant>. This value
	should be used to allocate a buffer of sufficient size to store
	the returned attribute name. The size of this character buffer
	is passed in <parameter>bufSize</parameter>, and a pointer to
	this character buffer is passed in
	<parameter>name</parameter>.</para>

	<para><function>glGetActiveAttrib</function> returns the name of
	the attribute variable indicated by
	<parameter>index</parameter>, storing it in the character buffer
	specified by <parameter>name</parameter>. The string returned
	will be null terminated. The actual number of characters written
	into this buffer is returned in <parameter>length</parameter>,
	and this count does not include the null termination character.
	If the length of the returned string is not required, a value of
	<constant>NULL</constant> can be passed in the
	<parameter>length</parameter> argument.</para>

	<para>The <parameter>type</parameter> argument will return a
	pointer to the attribute variable's data type. The symbolic
	constants <constant>GL_FLOAT</constant>,
	<constant>GL_FLOAT_VEC2</constant>,
	<constant>GL_FLOAT_VEC3</constant>,
	<constant>GL_FLOAT_VEC4</constant>,
	<constant>GL_FLOAT_MAT2</constant>,
	<constant>GL_FLOAT_MAT3</constant>,
	<constant>GL_FLOAT_MAT4</constant>,
	<constant>GL_FLOAT_MAT2x3</constant>,
	<constant>GL_FLOAT_MAT2x4</constant>,
	<constant>GL_FLOAT_MAT3x2</constant>,
	<constant>GL_FLOAT_MAT3x4</constant>,
	<constant>GL_FLOAT_MAT4x2</constant>, or
	<constant>GL_FLOAT_MAT4x3</constant> may be returned. The
	<parameter>size</parameter> argument will return the size of the
	attribute, in units of the type returned in
	<parameter>type</parameter>.</para>

	<para>The list of active attribute variables may include both
	built-in attribute variables (which begin with the prefix
	&quot;gl_&quot;) as well as user-defined attribute variable
	names.</para>

	<para>This function will return as much information as it can
	about the specified active attribute variable. If no information
	is available, <parameter>length</parameter> will be 0, and
	<parameter>name</parameter> will be an empty string. This
	situation could occur if this function is called after a link
	operation that failed. If an error occurs, the return values
	<parameter>length</parameter>, <parameter>size</parameter>,
	<parameter>type</parameter>, and <parameter>name</parameter>
	will be unmodified.</para>
    </refsect1>
    <refsect1 id="notes"><title>Notes</title>
	<para><function>glGetActiveAttrib</function>
	is available only if the GL version is 2.0 or greater.</para>

	<para><constant>GL_FLOAT_MAT2x3</constant>,
	<constant>GL_FLOAT_MAT2x4</constant>,
	<constant>GL_FLOAT_MAT3x2</constant>,
	<constant>GL_FLOAT_MAT3x4</constant>,
	<constant>GL_FLOAT_MAT4x2</constant>, and
	<constant>GL_FLOAT_MAT4x3</constant>
	will only be returned as a <parameter>type</parameter>
        if the GL version is 2.1 or greater.</para>
    </refsect1>
    <refsect1 id="errors"><title>Errors</title>
	<para><constant>GL_INVALID_VALUE</constant> is generated if
	<parameter>program</parameter> is not a value generated by
	OpenGL.</para>

	<para><constant>GL_INVALID_OPERATION</constant> is generated if
	<parameter>program</parameter> is not a program object.</para>

	<para><constant>GL_INVALID_VALUE</constant> is generated if
	<parameter>index</parameter> is greater than or equal to the
	number of active attribute variables in
	<parameter>program</parameter>.</para>

	<para><constant>GL_INVALID_OPERATION</constant> is generated if
	<function>glGetActiveAttrib</function> is executed between the
	execution of
	<citerefentry><refentrytitle>glBegin</refentrytitle></citerefentry>
	and the corresponding execution of
	<citerefentry><refentrytitle>glEnd</refentrytitle></citerefentry>.</para>

	<para><constant>GL_INVALID_VALUE</constant> is generated if
	<parameter>bufSize</parameter> is less than 0.</para>
    </refsect1>
    <refsect1 id="associatedgets"><title>Associated Gets</title>
	<para><citerefentry><refentrytitle>glGet</refentrytitle></citerefentry>
	with argument <constant>GL_MAX_VERTEX_ATTRIBS</constant>.</para>

	<para><citerefentry><refentrytitle>glGetProgram</refentrytitle></citerefentry>
	with argument <constant>GL_ACTIVE_ATTRIBUTES</constant> or
	<constant>GL_ACTIVE_ATTRIBUTE_MAX_LENGTH</constant>.</para>

	<para><citerefentry><refentrytitle>glIsProgram</refentrytitle></citerefentry></para>
    </refsect1>
    <refsect1 id="seealso"><title>See Also</title>
	<para><citerefentry><refentrytitle>glBindAttribLocation</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glLinkProgram</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glVertexAttrib</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glVertexAttribPointer</refentrytitle></citerefentry></para>
    </refsect1>
    <refsect1 id="Copyright"><title>Copyright</title>
        <para>
            Copyright <trademark class="copyright"></trademark> 2003-2005 3Dlabs Inc. Ltd. 
            This material may be distributed subject to the terms and conditions set forth in 
            the Open Publication License, v 1.0, 8 June 1999.
            <ulink url="http://opencontent.org/openpub/">http://opencontent.org/openpub/</ulink>.
        </para>
    </refsect1>
</refentry>
