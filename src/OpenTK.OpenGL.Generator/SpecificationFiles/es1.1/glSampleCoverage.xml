<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook MathML Module V1.1b1//EN"
                            "http://www.oasis-open.org/docbook/xml/mathml/1.1CR1/dbmathml.dtd">
<refentry xml:base="" id="glSampleCoverage">
    <refmeta>
        <refmetainfo>
            <copyright>
                <year>2003-2004</year>
                <holder>Silicon Graphics, Inc.</holder>
            </copyright>
        </refmetainfo>
        <refentrytitle>glSampleCoverage</refentrytitle>
        <manvolnum>3G</manvolnum>
    </refmeta>

    <refnamediv>
        <refdescriptor>glSampleCoverage</refdescriptor>
        <refname>glSampleCoverage</refname>
        <refname>glSampleCoveragex</refname>
        <refpurpose>specify mask to modify multisampled pixel fragments</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
        <title>C Specification</title>

        <funcsynopsis>
            <funcprototype>
                <funcdef>void <function>glSampleCoverage</function></funcdef>
                <paramdef>GLclampf <parameter>value</parameter></paramdef>
                <paramdef>GLboolean <parameter>invert</parameter></paramdef>
            </funcprototype>
            <funcprototype>
                <funcdef>void <function>glSampleCoveragex</function></funcdef>
                <paramdef>GLclampx <parameter>value</parameter></paramdef>
                <paramdef>GLboolean <parameter>invert</parameter></paramdef>
            </funcprototype>
        </funcsynopsis>
    </refsynopsisdiv>

    <refsect1 id="parameters"><title>Parameters</title>

        <variablelist>
            <varlistentry>
                <term>
                    <parameter>value</parameter>
                </term>

                <listitem>
                    <para>Specifies the coverage of the modification mask.
                    The value is clamped to the range [0, 1], where 0 represents
                    no coverage and 1 full coverage. The initial value is 1.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>
                    <parameter>invert</parameter>
                </term>

                <listitem>
                    <para>Specifies whether the modification mask implied by
                    <parameter>value</parameter> is inverted or not.
                    The initial value is <constant>GL_FALSE</constant>.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsect1>

    <refsect1 id="description"><title>Description</title>

        <para><function>glSampleCoverage</function> defines a mask to modify
        the coverage of multisampled pixel fragments. This capability is used
        for antialiased screen-door transparency and smooth transitions between
        two renderings of an object (often for level-of-detail management in
        simulation systems).</para>

        <para>
        When multisampling is enabled (see
        <citerefentry><refentrytitle>glEnable</refentrytitle></citerefentry>
        with argument
        <constant>GL_MULTISAMPLE</constant>) a ``fragment mask'' is computed for
        each fragment
        generated by a primitive.  This mask reflects the amount of the pixel
        covered by the fragment, and determines the frame buffer samples that may
        be affected by the fragment.</para>

        <para>
        If conversion of alpha values to masks is enabled
        (<citerefentry><refentrytitle>glEnable</refentrytitle></citerefentry>
        with argument
        <constant>GL_SAMPLE_ALPHA_TO_COVERAGE</constant>),
        the fragment alpha value is used to
        generate a temporary modification mask which is then ANDed with the
        fragment mask.  One way to interpret this is as a form of dithering: a
        multivalued alpha (coverage or opacity) for the whole fragment is
        converted to simple binary values of coverage at many locations (the
        samples).</para>

        <para>
        After conversion of alpha values to masks, if replacement of alpha values
        is enabled
        (<citerefentry><refentrytitle>glEnable</refentrytitle></citerefentry>
        with argument
        <constant>GL_SAMPLE_ALPHA_TO_ONE</constant>), the
        fragment's alpha is set to the maximum allowable value.</para>

        <para>
        Finally, if fragment mask modification is enabled
        (<citerefentry><refentrytitle>glEnable</refentrytitle></citerefentry>
        with argument
        <constant>GL_SAMPLE_COVERAGE</constant>),
        <function>glSampleCoverage</function> defines an additional modification
        mask.  value is used to generate a modification mask in much the same way
        alpha was used above.  If invert is <constant>GL_TRUE</constant>,
        then the modification mask
        specified by value will be inverted.  The final modification mask will
        then be ANDed with the fragment mask resulting from the previous steps.
        This can be viewed as an ``override'' control that selectively fades the
        effects of multisampled fragments.</para>

        <para>Note that
        <function>glSampleCoverage</function>(value, <constant>GL_TRUE</constant>)
        is not necessarily equivalent to
        <function>glSampleCoverage</function>(1.0 - value, <constant>GL_FALSE</constant>);
        due to round-off and other
        issues, complementing the coverage will not necessarily yield an inverted
        modification mask.</para>
    </refsect1>

    <refsect1 id="associatedgets"><title>Associated Gets</title>
        <para>
            <citerefentry><refentrytitle>glGet</refentrytitle></citerefentry> with argument <constant>GL_SAMPLE_COVERAGE_VALUE</constant>
        </para>
        <para>
            <citerefentry><refentrytitle>glGet</refentrytitle></citerefentry> with argument <constant>GL_SAMPLE_COVERAGE_INVERT</constant>
        </para>
        <para>
            <citerefentry><refentrytitle>glIsEnabled</refentrytitle></citerefentry> with argument <constant>GL_SAMPLE_ALPHA_TO_COVERAGE</constant>
        </para>
        <para>
            <citerefentry><refentrytitle>glIsEnabled</refentrytitle></citerefentry> with argument <constant>GL_SAMPLE_COVERAGE</constant>
        </para>
    </refsect1>
    <refsect1 id="seealso"><title>See Also</title>

        <para>
            <citerefentry><refentrytitle>glEnable</refentrytitle></citerefentry>
        </para>
    </refsect1>
    <refsect1 id="copyright"><title>Copyright</title>
        <para>
            Copyright <trademark class="copyright"></trademark> 2003-2004
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <ulink url="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</ulink>.
        </para>
    </refsect1>
</refentry>
