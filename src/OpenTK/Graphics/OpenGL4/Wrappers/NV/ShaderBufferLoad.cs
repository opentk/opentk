//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "ShaderBufferLoad" in the extension "NV".
        /// </summary>
        public static partial class NV
        {
            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Return parameters of a buffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
            /// </param>
            /// <param name="params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested parameter.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetBufferParameterui64vNV")]
            public static void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTargetArb target, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Return parameters of a buffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
            /// </param>
            /// <param name="params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested parameter.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetBufferParameterui64vNV")]
            public static void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTargetArb target, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad pname, [OutAttribute, CountAttribute(Computed = "pname")] out ulong @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Return parameters of a buffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
            /// </param>
            /// <param name="params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested parameter.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetBufferParameterui64vNV")]
            public static unsafe void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTargetArb target, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetIntegerui64vNV")]
            public static ulong GetInteger(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="value">
            /// </param>
            /// <param name="result">
            /// [length: COMPSIZE(value)]
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetIntegerui64vNV")]
            public static void GetInteger(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad value, [OutAttribute, CountAttribute(Computed = "value")] ulong[] result)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="value">
            /// </param>
            /// <param name="result">
            /// [length: COMPSIZE(value)]
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetIntegerui64vNV")]
            public static void GetInteger(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad value, [OutAttribute, CountAttribute(Computed = "value")] out ulong result)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="value">
            /// </param>
            /// <param name="result">
            /// [length: COMPSIZE(value)]
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetIntegerui64vNV")]
            public static unsafe void GetInteger(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad value, [OutAttribute, CountAttribute(Computed = "value")] ulong* result)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetNamedBufferParameterui64vNV")]
            public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetNamedBufferParameterui64vNV")]
            public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out ulong @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetNamedBufferParameterui64vNV")]
            public static unsafe void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetUniformui64vNV")]
            public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] ulong[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetUniformui64vNV")]
            public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] out ulong @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetUniformui64vNV")]
            public static unsafe void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] ulong* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="target">
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glIsBufferResidentNV")]
            public static bool IsBufferResident(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad target)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glIsNamedBufferResidentNV")]
            public static bool IsNamedBufferResident(uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="target">
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glMakeBufferNonResidentNV")]
            public static void MakeBufferNonResident(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad target)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="access">
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glMakeBufferResidentNV")]
            public static void MakeBufferResident(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad target, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glMakeNamedBufferNonResidentNV")]
            public static void MakeNamedBufferNonResident(uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="access">
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glMakeNamedBufferResidentNV")]
            public static void MakeNamedBufferResident(uint buffer, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="value">
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glProgramUniformui64NV")]
            public static void ProgramUniform(uint program, int location, ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glProgramUniformui64vNV")]
            public static void ProgramUniform(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glProgramUniformui64vNV")]
            public static void ProgramUniform(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glProgramUniformui64vNV")]
            public static unsafe void ProgramUniform(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="value">
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glUniformui64NV")]
            public static void Uniform(int location, ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glUniformui64vNV")]
            public static void Uniform(int location, int count, [CountAttribute(Parameter = "count*1")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glUniformui64vNV")]
            public static void Uniform(int location, int count, [CountAttribute(Parameter = "count*1")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glUniformui64vNV")]
            public static unsafe void Uniform(int location, int count, [CountAttribute(Parameter = "count*1")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            #pragma warning disable SA1300 // Element should begin with an upper-case letter

            [Slot(335)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetBufferParameterui64vNV(OpenTK.Graphics.OpenGL4.BufferTargetArb target, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong* @params);

            [Slot(382)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetIntegerui64vNV(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad value, [OutAttribute, CountAttribute(Computed = "value")] ulong* result);

            [Slot(406)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetNamedBufferParameterui64vNV(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong* @params);

            [Slot(580)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetUniformui64vNV(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] ulong* @params);

            [Slot(614)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsBufferResidentNV(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad target);

            [Slot(622)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsNamedBufferResidentNV(uint buffer);

            [Slot(646)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMakeBufferNonResidentNV(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad target);

            [Slot(647)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMakeBufferResidentNV(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad target, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad access);

            [Slot(652)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMakeNamedBufferNonResidentNV(uint buffer);

            [Slot(653)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMakeNamedBufferResidentNV(uint buffer, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad access);

            [Slot(975)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glProgramUniformui64NV(uint program, int location, ulong value);

            [Slot(976)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniformui64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong* value);

            [Slot(1201)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniformui64NV(int location, ulong value);

            [Slot(1202)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniformui64vNV(int location, int count, [CountAttribute(Parameter = "count*1")] ulong* value);
        }
    }
}
