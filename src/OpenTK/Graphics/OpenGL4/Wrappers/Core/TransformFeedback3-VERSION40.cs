//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Delimit the boundaries of a query object on an indexed target
        /// </summary>
        /// <param name="target">
        /// Specifies the target type of query object established between glBeginQueryIndexed and the subsequent glEndQueryIndexed. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query target upon which to begin the query.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glBeginQueryIndexed")]
        public static void BeginQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index, uint id)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Render primitives using a count derived from a specifed stream of a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        /// <param name="stream">
        /// Specifies the index of the transform feedback stream from which to retrieve a primitive count.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawTransformFeedbackStream")]
        public static void DrawTransformFeedbackStream(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint id, uint stream)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glEndQueryIndexed")]
        public static void EndQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query object target.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        public static void GetQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query object target.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        public static void GetQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query object target.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        public static unsafe void GetQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        #pragma warning disable SA1300 // Element should begin with an upper-case letter

        [Slot(11)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index, uint id);

        [Slot(256)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawTransformFeedbackStream(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint id, uint stream);

        [Slot(274)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index);

        [Slot(518)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryIndexediv(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
    }
}
