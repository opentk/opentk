//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose depth range to update.
        /// </param>
        /// <param name="count">
        /// Specifies the number of viewports whose depth range to update.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        public static void DepthRangeArray(uint first, int count, [CountAttribute(Computed = "count")] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose depth range to update.
        /// </param>
        /// <param name="count">
        /// Specifies the number of viewports whose depth range to update.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        public static void DepthRangeArray(uint first, int count, [CountAttribute(Computed = "count")] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose depth range to update.
        /// </param>
        /// <param name="count">
        /// Specifies the number of viewports whose depth range to update.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        public static unsafe void DepthRangeArray(uint first, int count, [CountAttribute(Computed = "count")] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose depth range to update.
        /// </param>
        /// <param name="n">
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="f">
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeIndexed")]
        public static void DepthRangeIndexed(uint index, double n, double f)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        public static void GetDouble(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] double[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        public static void GetDouble(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out double data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        public static unsafe void GetDouble(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] double* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        public static void GetFloat(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] float[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        public static void GetFloat(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out float data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        public static unsafe void GetFloat(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] float* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </param>
        /// <param name="count">
        /// Specifies the number of scissor boxes to modify.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        public static void ScissorArray(uint first, int count, [CountAttribute(Computed = "count")] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </param>
        /// <param name="count">
        /// Specifies the number of scissor boxes to modify.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        public static void ScissorArray(uint first, int count, [CountAttribute(Computed = "count")] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </param>
        /// <param name="count">
        /// Specifies the number of scissor boxes to modify.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        public static unsafe void ScissorArray(uint first, int count, [CountAttribute(Computed = "count")] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="left">
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </param>
        /// <param name="bottom">
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </param>
        /// <param name="width">
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </param>
        /// <param name="height">
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexed")]
        public static void ScissorIndexed(uint index, int left, int bottom, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        public static void ScissorIndexed(uint index, [CountAttribute(Count = 4)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        public static void ScissorIndexed(uint index, [CountAttribute(Count = 4)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        public static unsafe void ScissorIndexed(uint index, [CountAttribute(Count = 4)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="count">
        /// Specify the number of viewports to set.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specify the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        public static void ViewportArray(uint first, int count, [CountAttribute(Computed = "count")] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="count">
        /// Specify the number of viewports to set.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specify the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        public static void ViewportArray(uint first, int count, [CountAttribute(Computed = "count")] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="count">
        /// Specify the number of viewports to set.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specify the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        public static unsafe void ViewportArray(uint first, int count, [CountAttribute(Computed = "count")] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="x">
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="y">
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="w">
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="h">
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedf")]
        public static void ViewportIndexed(uint index, float x, float y, float w, float h)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        public static void ViewportIndexed(uint index, [CountAttribute(Count = 4)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        public static void ViewportIndexed(uint index, [CountAttribute(Count = 4)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        public static unsafe void ViewportIndexed(uint index, [CountAttribute(Count = 4)] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        #pragma warning disable SA1300 // Element should begin with an upper-case letter

        [Slot(215)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDepthRangeArrayv(uint first, int count, [CountAttribute(Computed = "count")] double* v);

        [Slot(217)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthRangeIndexed(uint index, double n, double f);

        [Slot(354)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetDoublei_v(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] double* data);

        [Slot(360)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFloati_v(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] float* data);

        [Slot(1006)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glScissorArrayv(uint first, int count, [CountAttribute(Computed = "count")] int* v);

        [Slot(1007)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScissorIndexed(uint index, int left, int bottom, int width, int height);

        [Slot(1008)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glScissorIndexedv(uint index, [CountAttribute(Count = 4)] int* v);

        [Slot(1351)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glViewportArrayv(uint first, int count, [CountAttribute(Computed = "count")] float* v);

        [Slot(1352)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glViewportIndexedf(uint index, float x, float y, float w, float h);

        [Slot(1353)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glViewportIndexedfv(uint index, [CountAttribute(Count = 4)] float* v);
    }
}
