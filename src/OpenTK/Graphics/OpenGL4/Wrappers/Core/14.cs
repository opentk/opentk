//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v1.4]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="sfactorRGB">
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </param>
        /// <param name="dfactorRGB">
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="sfactorAlpha">
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
        /// </param>
        /// <param name="dfactorAlpha">
        /// Specified how the alpha source blending factor is computed. The initial value is One.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glBlendFuncSeparate")]
        public static void BlendFuncSeparate(OpenTK.Graphics.OpenGL4.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.OpenGL4.BlendingFactorDest dfactorRGB, OpenTK.Graphics.OpenGL4.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.OpenGL4.BlendingFactorDest dfactorAlpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// [length: COMPSIZE(count)]
        /// Points to an array of starting indices in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the number of indices to be rendered.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the first and count
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static void MultiDrawArrays(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "count")] int[] first, [CountAttribute(Computed = "drawcount")] int[] count, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// [length: COMPSIZE(count)]
        /// Points to an array of starting indices in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the number of indices to be rendered.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the first and count
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static void MultiDrawArrays(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "count")] ref int first, [CountAttribute(Computed = "drawcount")] ref int count, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// [length: COMPSIZE(count)]
        /// Points to an array of starting indices in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the number of indices to be rendered.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the first and count
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static unsafe void MultiDrawArrays(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "count")] int* first, [CountAttribute(Computed = "drawcount")] int* count, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static unsafe void MultiDrawElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="param">
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterf")]
        public static void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static unsafe void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="param">
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteri")]
        public static void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static unsafe void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        #pragma warning disable SA1300 // Element should begin with an upper-case letter

        [Slot(49)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFuncSeparate(OpenTK.Graphics.OpenGL4.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.OpenGL4.BlendingFactorDest dfactorRGB, OpenTK.Graphics.OpenGL4.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.OpenGL4.BlendingFactorDest dfactorAlpha);

        [Slot(696)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiDrawArrays(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "count")] int* first, [CountAttribute(Computed = "drawcount")] int* count, int drawcount);

        [Slot(702)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiDrawElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount);

        [Slot(820)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointParameterf(OpenTK.Graphics.OpenGL4.PointParameterName pname, float param);

        [Slot(821)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPointParameterfv(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(822)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointParameteri(OpenTK.Graphics.OpenGL4.PointParameterName pname, int param);

        [Slot(823)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPointParameteriv(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] int* @params);
    }
}
