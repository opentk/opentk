//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Bind a buffer to a vertex buffer bind point
        /// </summary>
        /// <param name="bindingindex">
        /// The index of the vertex buffer binding point to which to bind the buffer.
        /// </param>
        /// <param name="buffer">
        /// The name of an existing buffer to bind to the vertex buffer binding point.
        /// </param>
        /// <param name="offset">
        /// The offset of the first element of the buffer.
        /// </param>
        /// <param name="stride">
        /// The distance between elements within the buffer.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glBindVertexBuffer")]
        public static void BindVertexBuffer(uint bindingindex, uint buffer, IntPtr offset, int stride)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Associate a vertex attribute and a vertex buffer binding
        /// </summary>
        /// <param name="attribindex">
        /// The index of the attribute to associate with a vertex buffer binding.
        /// </param>
        /// <param name="bindingindex">
        /// The index of the vertex buffer binding with which to associate the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribBinding")]
        public static void VertexAttribBinding(uint attribindex, uint bindingindex)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Specify the organization of vertex arrays
        /// </summary>
        /// <param name="attribindex">
        /// The generic vertex attribute array being described.
        /// </param>
        /// <param name="size">
        /// The number of values per vertex that are stored in the array.
        /// </param>
        /// <param name="type">
        /// The type of the data stored in the array.
        /// </param>
        /// <param name="normalized">
        /// The distance between elements within the buffer.
        /// </param>
        /// <param name="relativeoffset">
        /// The distance between elements within the buffer.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribFormat")]
        public static void VertexAttribFormat(uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribType type, bool normalized, uint relativeoffset)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// </summary>
        /// <param name="attribindex">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="relativeoffset">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribIFormat")]
        public static void VertexAttribIFormat(uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, uint relativeoffset)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// </summary>
        /// <param name="attribindex">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="relativeoffset">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribLFormat")]
        public static void VertexAttribLFormat(uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, uint relativeoffset)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Modify the rate at which generic vertex attributes advance
        /// </summary>
        /// <param name="bindingindex">
        /// The index of the binding whose divisor to modify.
        /// </param>
        /// <param name="divisor">
        /// The new value for the instance step rate to apply.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexBindingDivisor")]
        public static void VertexBindingDivisor(uint bindingindex, uint divisor)
        {
            throw new BindingsNotRewrittenException();
        }

        #pragma warning disable SA1300 // Element should begin with an upper-case letter

        [Slot(35)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindVertexBuffer(uint bindingindex, uint buffer, IntPtr offset, int stride);

        [Slot(1276)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribBinding(uint attribindex, uint bindingindex);

        [Slot(1279)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribFormat(uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribType type, bool normalized, uint relativeoffset);

        [Slot(1301)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribIFormat(uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, uint relativeoffset);

        [Slot(1330)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribLFormat(uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, uint relativeoffset);

        [Slot(1342)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexBindingDivisor(uint bindingindex, uint divisor);
    }
}
