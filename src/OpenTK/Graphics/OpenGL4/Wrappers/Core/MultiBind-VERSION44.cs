//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        public static void BindBuffersBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] uint[] buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        public static void BindBuffersBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] ref uint buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        public static unsafe void BindBuffersBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] uint* buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        /// <param name="offsets">[length: count]</param>
        /// <param name="sizes">[length: count]</param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        public static void BindBuffersRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] uint[] buffers, [CountAttribute(Parameter = "count")] IntPtr[] offsets, [CountAttribute(Parameter = "count")] IntPtr[] sizes)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        /// <param name="offsets">[length: count]</param>
        /// <param name="sizes">[length: count]</param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        public static void BindBuffersRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] ref uint buffers, [CountAttribute(Parameter = "count")] ref IntPtr offsets, [CountAttribute(Parameter = "count")] ref IntPtr sizes)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        /// <param name="offsets">[length: count]</param>
        /// <param name="sizes">[length: count]</param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        public static unsafe void BindBuffersRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] uint* buffers, [CountAttribute(Parameter = "count")] IntPtr* offsets, [CountAttribute(Parameter = "count")] IntPtr* sizes)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// Specifies the first image unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">
        /// [length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        public static void BindImageTextures(uint first, int count, [CountAttribute(Parameter = "count")] uint[] textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// Specifies the first image unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">
        /// [length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        public static void BindImageTextures(uint first, int count, [CountAttribute(Parameter = "count")] ref uint textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// Specifies the first image unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">
        /// [length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        public static unsafe void BindImageTextures(uint first, int count, [CountAttribute(Parameter = "count")] uint* textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of samplers to bind.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies the address of an array of names of existing sampler objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        public static void BindSamplers(uint first, int count, [CountAttribute(Parameter = "count")] uint[] samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of samplers to bind.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies the address of an array of names of existing sampler objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        public static void BindSamplers(uint first, int count, [CountAttribute(Parameter = "count")] ref uint samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of samplers to bind.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies the address of an array of names of existing sampler objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        public static unsafe void BindSamplers(uint first, int count, [CountAttribute(Parameter = "count")] uint* samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">
        /// [length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        public static void BindTextures(uint first, int count, [CountAttribute(Parameter = "count")] uint[] textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">
        /// [length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        public static void BindTextures(uint first, int count, [CountAttribute(Parameter = "count")] ref uint textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">
        /// [length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        public static unsafe void BindTextures(uint first, int count, [CountAttribute(Parameter = "count")] uint* textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of buffers to bind.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// Specifies the address of an array of names of existing buffer objects.
        /// </param>
        /// <param name="offsets">
        /// [length: count]
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </param>
        /// <param name="strides">
        /// [length: count]
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        public static void BindVertexBuffers(uint first, int count, [CountAttribute(Parameter = "count")] uint[] buffers, [CountAttribute(Parameter = "count")] IntPtr[] offsets, [CountAttribute(Parameter = "count")] int[] strides)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of buffers to bind.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// Specifies the address of an array of names of existing buffer objects.
        /// </param>
        /// <param name="offsets">
        /// [length: count]
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </param>
        /// <param name="strides">
        /// [length: count]
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        public static void BindVertexBuffers(uint first, int count, [CountAttribute(Parameter = "count")] ref uint buffers, [CountAttribute(Parameter = "count")] ref IntPtr offsets, [CountAttribute(Parameter = "count")] ref int strides)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of buffers to bind.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// Specifies the address of an array of names of existing buffer objects.
        /// </param>
        /// <param name="offsets">
        /// [length: count]
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </param>
        /// <param name="strides">
        /// [length: count]
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        public static unsafe void BindVertexBuffers(uint first, int count, [CountAttribute(Parameter = "count")] uint* buffers, [CountAttribute(Parameter = "count")] IntPtr* offsets, [CountAttribute(Parameter = "count")] int* strides)
        {
            throw new BindingsNotRewrittenException();
        }

        #pragma warning disable SA1300 // Element should begin with an upper-case letter

        [Slot(17)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glBindBuffersBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] uint* buffers);

        [Slot(18)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glBindBuffersRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] uint* buffers, [CountAttribute(Parameter = "count")] IntPtr* offsets, [CountAttribute(Parameter = "count")] IntPtr* sizes);

        [Slot(23)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glBindImageTextures(uint first, int count, [CountAttribute(Parameter = "count")] uint* textures);

        [Slot(29)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glBindSamplers(uint first, int count, [CountAttribute(Parameter = "count")] uint* samplers);

        [Slot(31)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glBindTextures(uint first, int count, [CountAttribute(Parameter = "count")] uint* textures);

        [Slot(36)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glBindVertexBuffers(uint first, int count, [CountAttribute(Parameter = "count")] uint* buffers, [CountAttribute(Parameter = "count")] IntPtr* offsets, [CountAttribute(Parameter = "count")] int* strides);
    }
}
