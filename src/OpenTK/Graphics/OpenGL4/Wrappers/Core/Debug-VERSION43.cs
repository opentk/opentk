//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback(DebugProc callback, IntPtr userParam)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        /// <typeparam name="T1"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[] userParam)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        /// <typeparam name="T1"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,] userParam)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        /// <typeparam name="T1"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,,] userParam)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        /// <typeparam name="T1"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] ref T1 userParam)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        public static void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSourceControl source, OpenTK.Graphics.OpenGL4.DebugTypeControl type, OpenTK.Graphics.OpenGL4.DebugSeverityControl severity, int count, [CountAttribute(Parameter = "count")] uint[] ids, bool enabled)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        public static void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSourceControl source, OpenTK.Graphics.OpenGL4.DebugTypeControl type, OpenTK.Graphics.OpenGL4.DebugSeverityControl severity, int count, [CountAttribute(Parameter = "count")] ref uint ids, bool enabled)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSourceControl source, OpenTK.Graphics.OpenGL4.DebugTypeControl type, OpenTK.Graphics.OpenGL4.DebugSeverityControl severity, int count, [CountAttribute(Parameter = "count")] uint* ids, bool enabled)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type">
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id">
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity">
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length">
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">
        /// [length: COMPSIZE(buf,length)]
        /// The address of a character array containing the message to insert.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageInsert")]
        public static void DebugMessageInsert(OpenTK.Graphics.OpenGL4.DebugSourceExternal source, OpenTK.Graphics.OpenGL4.DebugType type, uint id, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int length, [CountAttribute(Computed = "buf,length")] string buf)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        public static uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] uint[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] int[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string messageLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        public static uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugSource sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out uint ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out int lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string messageLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        public static unsafe uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string messageLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        public static void GetObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, uint name, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, uint name, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        /// <typeparam name="T0"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        /// <typeparam name="T0"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        /// <typeparam name="T0"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        /// <typeparam name="T0"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        /// <typeparam name="T0"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        /// <typeparam name="T0"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        /// <typeparam name="T0"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        /// <typeparam name="T0"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object to label.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectLabel")]
        public static void ObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, uint name, int length, [CountAttribute(Computed = "label,length")] string label)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel(IntPtr ptr, int length, [CountAttribute(Computed = "label,length")] string label)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        /// <typeparam name="T0"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int length, [CountAttribute(Computed = "label,length")] string label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        /// <typeparam name="T0"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int length, [CountAttribute(Computed = "label,length")] string label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        /// <typeparam name="T0"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int length, [CountAttribute(Computed = "label,length")] string label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        /// <typeparam name="T0"></typeparam>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int length, [CountAttribute(Computed = "label,length")] string label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Pop the active debug group
        /// </summary>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glPopDebugGroup")]
        public static void PopDebugGroup()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// The source of the debug message.
        /// </param>
        /// <param name="id">
        /// The identifier of the message.
        /// </param>
        /// <param name="length">
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">
        /// [length: COMPSIZE(message,length)]
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glPushDebugGroup")]
        public static void PushDebugGroup(OpenTK.Graphics.OpenGL4.DebugSourceExternal source, uint id, int length, [CountAttribute(Computed = "message,length")] string message)
        {
            throw new BindingsNotRewrittenException();
        }

        #pragma warning disable SA1300 // Element should begin with an upper-case letter

        [Slot(184)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageCallback(DebugProc callback, IntPtr userParam);

        [Slot(187)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSourceControl source, OpenTK.Graphics.OpenGL4.DebugTypeControl type, OpenTK.Graphics.OpenGL4.DebugSeverityControl severity, int count, [CountAttribute(Parameter = "count")] uint* ids, bool enabled);

        [Slot(190)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageInsert(OpenTK.Graphics.OpenGL4.DebugSourceExternal source, OpenTK.Graphics.OpenGL4.DebugType type, uint id, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int length, [CountAttribute(Computed = "buf,length")] IntPtr buf);

        [Slot(351)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe uint glGetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr messageLog);

        [Slot(467)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, uint name, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);

        [Slot(470)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectPtrLabel(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);

        [Slot(789)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, uint name, int length, [CountAttribute(Computed = "label,length")] IntPtr label);

        [Slot(791)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glObjectPtrLabel(IntPtr ptr, int length, [CountAttribute(Computed = "label,length")] IntPtr label);

        [Slot(829)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPopDebugGroup();

        [Slot(979)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushDebugGroup(OpenTK.Graphics.OpenGL4.DebugSourceExternal source, uint id, int length, [CountAttribute(Computed = "message,length")] IntPtr message);
    }
}
