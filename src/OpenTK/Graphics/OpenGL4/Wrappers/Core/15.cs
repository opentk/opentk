//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v1.5]
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, AnySamplesPassedConservative, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBeginQuery")]
        public static void BeginQuery(OpenTK.Graphics.OpenGL4.QueryTarget target, uint id)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBindBuffer")]
        public static void BindBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target, uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.OpenGL4.BufferTarget target, int size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        /// <typeparam name="T2"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        /// <typeparam name="T2"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        /// <typeparam name="T2"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        /// <typeparam name="T2"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        /// <typeparam name="T2"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        /// <typeparam name="T2"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        /// <typeparam name="T2"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        /// <typeparam name="T2"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [CountAttribute(Parameter = "size")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffer([CountAttribute(Parameter = "n")] uint buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint[] buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] ref uint buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static unsafe void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint* buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static void DeleteQuery([CountAttribute(Parameter = "n")] uint ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static void DeleteQueries(int n, [CountAttribute(Parameter = "n")] uint[] ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static void DeleteQueries(int n, [CountAttribute(Parameter = "n")] ref uint ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static unsafe void DeleteQueries(int n, [CountAttribute(Parameter = "n")] uint* ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glEndQuery")]
        public static void EndQuery(OpenTK.Graphics.OpenGL4.QueryTarget target)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static uint GenBuffer()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static unsafe void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate query object names
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static uint GenQuery()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static void GenQueries(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static void GenQueries(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static unsafe void GenQueries(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        /// <typeparam name="T2"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] @params)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        /// <typeparam name="T2"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] @params)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        /// <typeparam name="T2"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] @params)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        /// <typeparam name="T2"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 @params)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [OutAttribute, CountAttribute(Parameter = "size")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [OutAttribute, CountAttribute(Parameter = "size")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static unsafe void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] uint[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static unsafe void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static void GetQuery(OpenTK.Graphics.OpenGL4.QueryTarget target, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static void GetQuery(OpenTK.Graphics.OpenGL4.QueryTarget target, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static unsafe void GetQuery(OpenTK.Graphics.OpenGL4.QueryTarget target, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsBuffer")]
        public static bool IsBuffer(uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Determine if a name corresponds to a query object
        /// </summary>
        /// <param name="id">
        /// Specifies a value that may be the name of a query object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsQuery")]
        public static bool IsQuery(uint id)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Map a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object being mapped. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer or UniformBuffer.
        /// </param>
        /// <param name="access">
        /// For glMapBuffer only, specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be ReadOnly, WriteOnly, or ReadWrite.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glMapBuffer")]
        public static IntPtr MapBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferAccess access)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glUnmapBuffer")]
        public static bool UnmapBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target)
        {
            throw new BindingsNotRewrittenException();
        }

        #pragma warning disable SA1300 // Element should begin with an upper-case letter

        [Slot(10)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginQuery(OpenTK.Graphics.OpenGL4.QueryTarget target, uint id);

        [Slot(14)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target, uint buffer);

        [Slot(56)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage);

        [Slot(59)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data);

        [Slot(193)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint* buffers);

        [Slot(203)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteQueries(int n, [CountAttribute(Parameter = "n")] uint* ids);

        [Slot(273)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndQuery(OpenTK.Graphics.OpenGL4.QueryTarget target);

        [Slot(302)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* buffers);

        [Slot(312)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenQueries(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* ids);

        [Slot(334)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBufferParameteriv(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(336)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetBufferPointerv(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);

        [Slot(337)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [OutAttribute, CountAttribute(Parameter = "size")] IntPtr data);

        [Slot(521)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryObjectiv(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(523)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryObjectuiv(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params);

        [Slot(519)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryiv(OpenTK.Graphics.OpenGL4.QueryTarget target, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(613)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsBuffer(uint buffer);

        [Slot(630)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsQuery(uint id);

        [Slot(658)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glMapBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferAccess access);

        [Slot(1203)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glUnmapBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target);
    }
}
