//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// The sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
        /// </param>
        /// <param name="timeout">
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glClientWaitSync")]
        public static OpenTK.Graphics.OpenGL4.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.OpenGL4.ClientWaitSyncFlags flags, ulong timeout)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Delete a sync object
        /// </summary>
        /// <param name="sync">
        /// The sync object to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glDeleteSync")]
        public static void DeleteSync(IntPtr sync)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Create a new sync object and insert it into the GL command stream
        /// </summary>
        /// <param name="condition">
        /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
        /// </param>
        /// <param name="flags">
        /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glFenceSync")]
        public static IntPtr FenceSync(OpenTK.Graphics.OpenGL4.SyncCondition condition, OpenTK.Graphics.OpenGL4.WaitSyncFlags flags)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        public static long GetInteger64(OpenTK.Graphics.OpenGL4.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        public static void GetInteger64(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] long[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        public static void GetInteger64(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out long data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        public static unsafe void GetInteger64(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] long* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">
        /// [length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetSynciv")]
        public static void GetSync(IntPtr sync, OpenTK.Graphics.OpenGL4.SyncParameterName pname, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">
        /// [length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetSynciv")]
        public static void GetSync(IntPtr sync, OpenTK.Graphics.OpenGL4.SyncParameterName pname, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">
        /// [length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetSynciv")]
        public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.OpenGL4.SyncParameterName pname, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Determine if a name corresponds to a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies a value that may be the name of a sync object.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glIsSync")]
        public static bool IsSync(IntPtr sync)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be zero.
        /// </param>
        /// <param name="timeout">
        /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glWaitSync")]
        public static void WaitSync(IntPtr sync, OpenTK.Graphics.OpenGL4.WaitSyncFlags flags, ulong timeout)
        {
            throw new BindingsNotRewrittenException();
        }

        #pragma warning disable SA1300 // Element should begin with an upper-case letter

        [Slot(87)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.OpenGL4.WaitSyncStatus glClientWaitSync(IntPtr sync, OpenTK.Graphics.OpenGL4.ClientWaitSyncFlags flags, ulong timeout);

        [Slot(208)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeleteSync(IntPtr sync);

        [Slot(277)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glFenceSync(OpenTK.Graphics.OpenGL4.SyncCondition condition, OpenTK.Graphics.OpenGL4.WaitSyncFlags flags);

        [Slot(378)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetInteger64v(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] long* data);

        [Slot(539)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSynciv(IntPtr sync, OpenTK.Graphics.OpenGL4.SyncParameterName pname, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* values);

        [Slot(635)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsSync(IntPtr sync);

        [Slot(1356)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWaitSync(IntPtr sync, OpenTK.Graphics.OpenGL4.WaitSyncFlags flags, ulong timeout);
    }
}
