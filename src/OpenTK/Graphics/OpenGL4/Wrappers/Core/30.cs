//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v3.0]
        /// Start conditional rendering
        /// </summary>
        /// <param name="id">
        /// Specifies the name of an occlusion query object whose results are used to determine if the rendering commands are discarded.
        /// </param>
        /// <param name="mode">
        /// Specifies how glBeginConditionalRender interprets the results of the occlusion query.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
        public static void BeginConditionalRender(uint id, OpenTK.Graphics.OpenGL4.ConditionalRenderType mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Start transform feedback operation
        /// </summary>
        /// <param name="primitiveMode">
        /// Specify the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginTransformFeedback")]
        public static void BeginTransformFeedback(OpenTK.Graphics.OpenGL4.TransformFeedbackPrimitiveType primitiveMode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Bind a user-defined varying out variable to a fragment shader color number
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to modify
        /// </param>
        /// <param name="color">
        /// The color number to bind the user-defined varying out variable to
        /// </param>
        /// <param name="name">
        /// [length: COMPSIZE(name)]
        /// The name of the user-defined varying out variable whose binding to modify
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindFragDataLocation")]
        public static void BindFragDataLocation(uint program, uint color, [CountAttribute(Computed = "name")] string name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify whether data read via glReadPixels should be clamped
        /// </summary>
        /// <param name="target">
        /// Target for color clamping. target must be ClampReadColor.
        /// </param>
        /// <param name="clamp">
        /// Specifies whether to apply color clamping. clamp must be True or False.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClampColor")]
        public static void ClampColor(OpenTK.Graphics.OpenGL4.ClampColorTarget target, OpenTK.Graphics.OpenGL4.ClampColorMode clamp)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="depth">
        /// The value to clear a depth render buffer to.
        /// </param>
        /// <param name="stencil">
        /// The value to clear a stencil render buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfi")]
        public static void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBufferCombined buffer, int drawbuffer, float depth, int stencil)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static unsafe void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static unsafe void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static unsafe void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="index">
        /// For glColorMaski, specifies the index of the draw buffer whose color mask to set.
        /// </param>
        /// <param name="r">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="g">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="b">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="a">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glColorMaski")]
        public static void ColorMask(uint index, bool r, bool g, bool b, bool a)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glDisablei")]
        public static void Disable(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the switch to disable (for glEnablei and glDisablei only).
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEnablei")]
        public static void Enable(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEndConditionalRender")]
        public static void EndConditionalRender()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEndTransformFeedback")]
        public static void EndTransformFeedback()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static void GetBoolean(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] bool[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static void GetBoolean(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out bool data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static unsafe void GetBoolean(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] bool* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Query the bindings of color numbers to user-defined varying out variables
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to query
        /// </param>
        /// <param name="name">
        /// [length: COMPSIZE(name)]
        /// The name of the user-defined varying out variable whose binding to query
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        public static int GetFragDataLocation(uint program, [CountAttribute(Computed = "name")] string name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, or ShadingLanguageVersion. Additionally, glGetStringi accepts the Extensions token.
        /// </param>
        /// <param name="index">
        /// For glGetStringi, specifies the index of the string to return.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        public static string GetString(OpenTK.Graphics.OpenGL4.StringNameIndexed name, uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static unsafe void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static unsafe void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">
        /// [length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">
        /// [length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Count = 1)] out int size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.OpenGL4.TransformFeedbackType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">
        /// [length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">
        /// [length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static unsafe void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL4.TransformFeedbackType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] uint[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] out uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static unsafe void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static void GetVertexAttribI(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static unsafe void GetVertexAttribI(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        public static void GetVertexAttribI(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] out uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        public static unsafe void GetVertexAttribI(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the capability.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glIsEnabledi")]
        public static bool IsEnabled(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static unsafe void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static unsafe void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="count">
        /// The number of varying variables used for transform feedback.
        /// </param>
        /// <param name="varyings">
        /// [length: count]
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </param>
        /// <param name="bufferMode">
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be InterleavedAttribs or SeparateAttribs.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static void TransformFeedbackVaryings(uint program, int count, [CountAttribute(Parameter = "count")] string[] varyings, OpenTK.Graphics.OpenGL4.TransformFeedbackMode bufferMode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1ui")]
        public static void Uniform1(int location, uint v0)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2ui")]
        public static void Uniform2(int location, uint v0, uint v1)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3ui")]
        public static void Uniform3(int location, uint v0, uint v1, uint v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4ui")]
        public static void Uniform4(int location, uint v0, uint v1, uint v2, uint v3)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1i")]
        public static void VertexAttribI1(uint index, int x)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static void VertexAttribI1(uint index, [CountAttribute(Count = 1)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static unsafe void VertexAttribI1(uint index, [CountAttribute(Count = 1)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1ui")]
        public static void VertexAttribI1(uint index, uint x)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1uiv")]
        public static void VertexAttribI1(uint index, [CountAttribute(Count = 1)] ref uint v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1uiv")]
        public static unsafe void VertexAttribI1(uint index, [CountAttribute(Count = 1)] uint* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2i")]
        public static void VertexAttribI2(uint index, int x, int y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static void VertexAttribI2(uint index, [CountAttribute(Count = 2)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static void VertexAttribI2(uint index, [CountAttribute(Count = 2)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static unsafe void VertexAttribI2(uint index, [CountAttribute(Count = 2)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2ui")]
        public static void VertexAttribI2(uint index, uint x, uint y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static void VertexAttribI2(uint index, [CountAttribute(Count = 2)] uint[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static void VertexAttribI2(uint index, [CountAttribute(Count = 2)] ref uint v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static unsafe void VertexAttribI2(uint index, [CountAttribute(Count = 2)] uint* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3i")]
        public static void VertexAttribI3(uint index, int x, int y, int z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static void VertexAttribI3(uint index, [CountAttribute(Count = 3)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static void VertexAttribI3(uint index, [CountAttribute(Count = 3)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static unsafe void VertexAttribI3(uint index, [CountAttribute(Count = 3)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3ui")]
        public static void VertexAttribI3(uint index, uint x, uint y, uint z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static void VertexAttribI3(uint index, [CountAttribute(Count = 3)] uint[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static void VertexAttribI3(uint index, [CountAttribute(Count = 3)] ref uint v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static unsafe void VertexAttribI3(uint index, [CountAttribute(Count = 3)] uint* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] sbyte[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ref sbyte v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static unsafe void VertexAttribI4(uint index, [CountAttribute(Count = 4)] sbyte* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        /// <param name="w">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        public static void VertexAttribI4(uint index, int x, int y, int z, int w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static unsafe void VertexAttribI4(uint index, [CountAttribute(Count = 4)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static unsafe void VertexAttribI4(uint index, [CountAttribute(Count = 4)] short* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] byte[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ref byte v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static unsafe void VertexAttribI4(uint index, [CountAttribute(Count = 4)] byte* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        /// <param name="w">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ui")]
        public static void VertexAttribI4(uint index, uint x, uint y, uint z, uint w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] uint[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ref uint v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static unsafe void VertexAttribI4(uint index, [CountAttribute(Count = 4)] uint* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ushort[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ref ushort v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static unsafe void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ushort* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static void VertexAttribIPointer(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        /// <typeparam name="T4"></typeparam>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static void VertexAttribIPointer<T4>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[] pointer)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        /// <typeparam name="T4"></typeparam>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static void VertexAttribIPointer<T4>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,] pointer)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        /// <typeparam name="T4"></typeparam>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static void VertexAttribIPointer<T4>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,,] pointer)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        /// <typeparam name="T4"></typeparam>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static void VertexAttribIPointer<T4>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T4 pointer)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        #pragma warning disable SA1300 // Element should begin with an upper-case letter

        [Slot(6)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginConditionalRender(uint id, OpenTK.Graphics.OpenGL4.ConditionalRenderType mode);

        [Slot(12)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginTransformFeedback(OpenTK.Graphics.OpenGL4.TransformFeedbackPrimitiveType primitiveMode);

        [Slot(19)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindFragDataLocation(uint program, uint color, [CountAttribute(Computed = "name")] IntPtr name);

        [Slot(64)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClampColor(OpenTK.Graphics.OpenGL4.ClampColorTarget target, OpenTK.Graphics.OpenGL4.ClampColorMode clamp);

        [Slot(67)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearBufferfi(OpenTK.Graphics.OpenGL4.ClearBufferCombined buffer, int drawbuffer, float depth, int stencil);

        [Slot(68)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClearBufferfv(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] float* value);

        [Slot(69)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClearBufferiv(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] int* value);

        [Slot(71)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClearBufferuiv(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] uint* value);

        [Slot(91)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorMaski(uint index, bool r, bool g, bool b, bool a);

        [Slot(222)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisablei(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index);

        [Slot(263)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnablei(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index);

        [Slot(269)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndConditionalRender();

        [Slot(275)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndTransformFeedback();

        [Slot(330)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBooleani_v(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] bool* data);

        [Slot(365)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glGetFragDataLocation(uint program, [CountAttribute(Computed = "name")] IntPtr name);

        [Slot(536)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glGetStringi(OpenTK.Graphics.OpenGL4.StringNameIndexed name, uint index);

        [Slot(544)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterIiv(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(545)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterIuiv(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params);

        [Slot(569)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL4.TransformFeedbackType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr name);

        [Slot(581)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformuiv(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] uint* @params);

        [Slot(591)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribIiv(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] int* @params);

        [Slot(592)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribIuiv(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] uint* @params);

        [Slot(617)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsEnabledi(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index);

        [Slot(1058)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterIiv(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(1059)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterIuiv(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint* @params);

        [Slot(1111)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTransformFeedbackVaryings(uint program, int count, [CountAttribute(Parameter = "count")] IntPtr varyings, OpenTK.Graphics.OpenGL4.TransformFeedbackMode bufferMode);

        [Slot(1123)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1ui(int location, uint v0);

        [Slot(1128)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1uiv(int location, int count, [CountAttribute(Parameter = "count*1")] uint* value);

        [Slot(1139)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2ui(int location, uint v0, uint v1);

        [Slot(1144)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2uiv(int location, int count, [CountAttribute(Parameter = "count*2")] uint* value);

        [Slot(1155)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3ui(int location, uint v0, uint v1, uint v2);

        [Slot(1160)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3uiv(int location, int count, [CountAttribute(Parameter = "count*3")] uint* value);

        [Slot(1171)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4ui(int location, uint v0, uint v1, uint v2, uint v3);

        [Slot(1176)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4uiv(int location, int count, [CountAttribute(Parameter = "count*4")] uint* value);

        [Slot(1281)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI1i(uint index, int x);

        [Slot(1282)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI1iv(uint index, [CountAttribute(Count = 1)] int* v);

        [Slot(1283)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI1ui(uint index, uint x);

        [Slot(1284)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI1uiv(uint index, [CountAttribute(Count = 1)] uint* v);

        [Slot(1285)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI2i(uint index, int x, int y);

        [Slot(1286)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI2iv(uint index, [CountAttribute(Count = 2)] int* v);

        [Slot(1287)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI2ui(uint index, uint x, uint y);

        [Slot(1288)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI2uiv(uint index, [CountAttribute(Count = 2)] uint* v);

        [Slot(1289)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI3i(uint index, int x, int y, int z);

        [Slot(1290)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI3iv(uint index, [CountAttribute(Count = 3)] int* v);

        [Slot(1291)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI3ui(uint index, uint x, uint y, uint z);

        [Slot(1292)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI3uiv(uint index, [CountAttribute(Count = 3)] uint* v);

        [Slot(1293)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI4bv(uint index, [CountAttribute(Count = 4)] sbyte* v);

        [Slot(1294)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI4i(uint index, int x, int y, int z, int w);

        [Slot(1295)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI4iv(uint index, [CountAttribute(Count = 4)] int* v);

        [Slot(1296)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI4sv(uint index, [CountAttribute(Count = 4)] short* v);

        [Slot(1297)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI4ubv(uint index, [CountAttribute(Count = 4)] byte* v);

        [Slot(1298)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);

        [Slot(1299)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI4uiv(uint index, [CountAttribute(Count = 4)] uint* v);

        [Slot(1300)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI4usv(uint index, [CountAttribute(Count = 4)] ushort* v);

        [Slot(1303)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribIPointer(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);
    }
}
