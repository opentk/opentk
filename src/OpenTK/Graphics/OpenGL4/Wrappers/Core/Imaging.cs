//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="count">
        /// The number of table entries to replace.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type,count)]
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static void ColorSubTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,count")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="count">
        /// The number of table entries to replace.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type,count)]
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </param>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static void ColorSubTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,count")] T5[] data)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="count">
        /// The number of table entries to replace.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type,count)]
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </param>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static void ColorSubTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,count")] T5[,] data)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="count">
        /// The number of table entries to replace.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type,count)]
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </param>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static void ColorSubTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,count")] T5[,,] data)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="count">
        /// The number of table entries to replace.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type,count)]
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </param>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static void ColorSubTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,count")] ref T5 data)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of entries in the color lookup table specified by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static void ColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr table)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of entries in the color lookup table specified by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </param>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static void ColorTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[] table)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of entries in the color lookup table specified by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </param>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static void ColorTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[,] table)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of entries in the color lookup table specified by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </param>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static void ColorTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[,,] table)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of entries in the color lookup table specified by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </param>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static void ColorTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T5 table)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameterfv")]
        public static void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameterfv")]
        public static void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameterfv")]
        public static unsafe void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameteriv")]
        public static void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameteriv")]
        public static void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameteriv")]
        public static unsafe void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static void ConvolutionFilter1D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr image)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[] image)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[,] image)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[,,] image)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T5 image)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static void ConvolutionFilter2D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr image)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        /// <typeparam name="T6"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[] image)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        /// <typeparam name="T6"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,] image)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        /// <typeparam name="T6"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,,] image)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        /// <typeparam name="T6"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T6 image)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="params">
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameterf")]
        public static void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameterfv")]
        public static void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameterfv")]
        public static void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameterfv")]
        public static unsafe void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="params">
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameteri")]
        public static void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameteriv")]
        public static void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameteriv")]
        public static void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameteriv")]
        public static unsafe void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="x">
        /// The window coordinates of the left corner of the row of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// The window coordinates of the left corner of the row of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// The number of table entries to replace.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyColorSubTable")]
        public static void CopyColorSubTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int x, int y, int width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Copy pixels into a color table
        /// </summary>
        /// <param name="target">
        /// The color table target. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal storage format of the texture image. Must be one of the following symbolic constants: Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="x">
        /// The x coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.
        /// </param>
        /// <param name="y">
        /// The y coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.
        /// </param>
        /// <param name="width">
        /// The width of the pixel rectangle.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyColorTable")]
        public static void CopyColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Copy pixels into a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="x">
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </param>
        /// <param name="y">
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array to copy.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyConvolutionFilter1D")]
        public static void CopyConvolutionFilter1D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Copy pixels into a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="x">
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </param>
        /// <param name="y">
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array to copy.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array to copy.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyConvolutionFilter2D")]
        public static void CopyConvolutionFilter2D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static void GetColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr table)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static void GetColorTable<T3>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[] table)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static void GetColorTable<T3>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,] table)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static void GetColorTable<T3>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,,] table)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static void GetColorTable<T3>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T3 table)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameterfv")]
        public static void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameterfv")]
        public static void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameterfv")]
        public static unsafe void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameteriv")]
        public static void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameteriv")]
        public static void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameteriv")]
        public static unsafe void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
        /// </param>
        /// <param name="format">
        /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the output image.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static void GetConvolutionFilter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr image)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
        /// </param>
        /// <param name="format">
        /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the output image.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[] image)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
        /// </param>
        /// <param name="format">
        /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the output image.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,] image)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
        /// </param>
        /// <param name="format">
        /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the output image.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,,] image)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
        /// </param>
        /// <param name="format">
        /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the output image.
        /// </param>
        /// <typeparam name="T3"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T3 image)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameterfv")]
        public static void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameterfv")]
        public static void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameterfv")]
        public static unsafe void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameteriv")]
        public static void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameteriv")]
        public static void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameteriv")]
        public static unsafe void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        /// <param name="reset">
        /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
        /// </param>
        /// <param name="format">
        /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned histogram table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static void GetHistogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        /// <param name="reset">
        /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
        /// </param>
        /// <param name="format">
        /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned histogram table.
        /// </param>
        /// <typeparam name="T4"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static void GetHistogram<T4>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[] values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        /// <param name="reset">
        /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
        /// </param>
        /// <param name="format">
        /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned histogram table.
        /// </param>
        /// <typeparam name="T4"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static void GetHistogram<T4>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,] values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        /// <param name="reset">
        /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
        /// </param>
        /// <param name="format">
        /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned histogram table.
        /// </param>
        /// <typeparam name="T4"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static void GetHistogram<T4>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,,] values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        /// <param name="reset">
        /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
        /// </param>
        /// <param name="format">
        /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned histogram table.
        /// </param>
        /// <typeparam name="T4"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static void GetHistogram<T4>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T4 values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameterfv")]
        public static void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameterfv")]
        public static void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameterfv")]
        public static unsafe void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameteriv")]
        public static void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameteriv")]
        public static void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameteriv")]
        public static unsafe void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="reset">
        /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
        /// </param>
        /// <param name="format">
        /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static void GetMinmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="reset">
        /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
        /// </param>
        /// <param name="format">
        /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned values.
        /// </param>
        /// <typeparam name="T4"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static void GetMinmax<T4>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[] values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="reset">
        /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
        /// </param>
        /// <param name="format">
        /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned values.
        /// </param>
        /// <typeparam name="T4"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static void GetMinmax<T4>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,] values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="reset">
        /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
        /// </param>
        /// <param name="format">
        /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned values.
        /// </param>
        /// <typeparam name="T4"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static void GetMinmax<T4>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,,] values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="reset">
        /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
        /// </param>
        /// <param name="format">
        /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned values.
        /// </param>
        /// <typeparam name="T4"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static void GetMinmax<T4>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T4 values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameterfv")]
        public static void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameterfv")]
        public static void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameterfv")]
        public static unsafe void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameteriv")]
        public static void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameteriv")]
        public static void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameteriv")]
        public static unsafe void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// The separable filter to be retrieved. Must be Separable2D.
        /// </param>
        /// <param name="format">
        /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the row filter image.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the column filter image.
        /// </param>
        /// <param name="span">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the span filter image (currently unused).
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static void GetSeparableFilter(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr row, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr column, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr span)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// The separable filter to be retrieved. Must be Separable2D.
        /// </param>
        /// <param name="format">
        /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the row filter image.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the column filter image.
        /// </param>
        /// <param name="span">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the span filter image (currently unused).
        /// </param>
        /// <typeparam name="T3"></typeparam>
        /// <typeparam name="T4"></typeparam>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static void GetSeparableFilter<T3, T4, T5>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[] column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T5[] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// The separable filter to be retrieved. Must be Separable2D.
        /// </param>
        /// <param name="format">
        /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the row filter image.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the column filter image.
        /// </param>
        /// <param name="span">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the span filter image (currently unused).
        /// </param>
        /// <typeparam name="T3"></typeparam>
        /// <typeparam name="T4"></typeparam>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static void GetSeparableFilter<T3, T4, T5>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,] column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T5[,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// The separable filter to be retrieved. Must be Separable2D.
        /// </param>
        /// <param name="format">
        /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the row filter image.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the column filter image.
        /// </param>
        /// <param name="span">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the span filter image (currently unused).
        /// </param>
        /// <typeparam name="T3"></typeparam>
        /// <typeparam name="T4"></typeparam>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static void GetSeparableFilter<T3, T4, T5>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,,] column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// The separable filter to be retrieved. Must be Separable2D.
        /// </param>
        /// <param name="format">
        /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the row filter image.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the column filter image.
        /// </param>
        /// <param name="span">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the span filter image (currently unused).
        /// </param>
        /// <typeparam name="T3"></typeparam>
        /// <typeparam name="T4"></typeparam>
        /// <typeparam name="T5"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static void GetSeparableFilter<T3, T4, T5>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T3 row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T4 column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T5 span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define histogram table
        /// </summary>
        /// <param name="target">
        /// The histogram whose parameters are to be set. Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="width">
        /// The number of entries in the histogram table.  Must be a power of 2.
        /// </param>
        /// <param name="internalformat">
        /// The format of entries in the histogram table. Must be one of Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="sink">
        /// If True, pixels will be consumed by the histogramming process and no drawing or texture loading will take place. If False, pixels will proceed to the minmax process after histogramming.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glHistogram")]
        public static void Histogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, int width, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, bool sink)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define minmax table
        /// </summary>
        /// <param name="target">
        /// The minmax table whose parameters are to be set. Must be Minmax.
        /// </param>
        /// <param name="internalformat">
        /// The format of entries in the minmax table. Must be one of Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="sink">
        /// If True, pixels will be consumed by the minmax process and no drawing or texture loading will take place. If False, pixels will proceed to the final conversion process after minmax.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glMinmax")]
        public static void Minmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, bool sink)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Reset histogram table entries to zero
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glResetHistogram")]
        public static void ResetHistogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Reset minmax table entries to initial values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glResetMinmax")]
        public static void ResetMinmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Separable2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </param>
        /// <param name="height">
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type,height)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static void SeparableFilter2D(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "target,format,type,width")] IntPtr row, [CountAttribute(Computed = "target,format,type,height")] IntPtr column)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Separable2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </param>
        /// <param name="height">
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type,height)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </param>
        /// <typeparam name="T6"></typeparam>
        /// <typeparam name="T7"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static void SeparableFilter2D<T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] T6[] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] T7[] column)
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Separable2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </param>
        /// <param name="height">
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type,height)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </param>
        /// <typeparam name="T6"></typeparam>
        /// <typeparam name="T7"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static void SeparableFilter2D<T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] T6[,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] T7[,] column)
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Separable2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </param>
        /// <param name="height">
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type,height)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </param>
        /// <typeparam name="T6"></typeparam>
        /// <typeparam name="T7"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static void SeparableFilter2D<T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] T6[,,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Separable2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </param>
        /// <param name="height">
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type,height)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </param>
        /// <typeparam name="T6"></typeparam>
        /// <typeparam name="T7"></typeparam>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static void SeparableFilter2D<T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] ref T6 row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] ref T7 column)
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        #pragma warning disable SA1300 // Element should begin with an upper-case letter

        [Slot(96)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorSubTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,count")] IntPtr data);

        [Slot(97)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr table);

        [Slot(98)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColorTableParameterfv(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(99)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColorTableParameteriv(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(127)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glConvolutionFilter1D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr image);

        [Slot(128)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glConvolutionFilter2D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr image);

        [Slot(129)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glConvolutionParameterf(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, float @params);

        [Slot(130)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glConvolutionParameterfv(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(131)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glConvolutionParameteri(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, int @params);

        [Slot(132)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glConvolutionParameteriv(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(134)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyColorSubTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int x, int y, int width);

        [Slot(135)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width);

        [Slot(136)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyConvolutionFilter1D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width);

        [Slot(137)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyConvolutionFilter2D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int height);

        [Slot(338)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr table);

        [Slot(339)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetColorTableParameterfv(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(340)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetColorTableParameteriv(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(347)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetConvolutionFilter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr image);

        [Slot(348)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetConvolutionParameterfv(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(349)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetConvolutionParameteriv(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(372)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetHistogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values);

        [Slot(373)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetHistogramParameterfv(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(374)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetHistogramParameteriv(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(387)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetMinmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values);

        [Slot(388)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMinmaxParameterfv(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(389)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMinmaxParameteriv(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(529)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetSeparableFilter(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr row, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr column, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr span);

        [Slot(601)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glHistogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, int width, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, bool sink);

        [Slot(693)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMinmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, bool sink);

        [Slot(993)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glResetHistogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target);

        [Slot(994)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glResetMinmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target);

        [Slot(1013)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSeparableFilter2D(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "target,format,type,width")] IntPtr row, [CountAttribute(Computed = "target,format,type,height")] IntPtr column);
    }
}
