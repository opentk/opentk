//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// Specifies the sample parameter name. pname must be SamplePosition.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the sample whose position to query.
        /// </param>
        /// <param name="val">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the position of the sample.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        public static void GetMultisample(OpenTK.Graphics.OpenGL4.GetMultisamplePName pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] float[] val)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// Specifies the sample parameter name. pname must be SamplePosition.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the sample whose position to query.
        /// </param>
        /// <param name="val">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the position of the sample.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        public static void GetMultisample(OpenTK.Graphics.OpenGL4.GetMultisamplePName pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] out float val)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// Specifies the sample parameter name. pname must be SamplePosition.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the sample whose position to query.
        /// </param>
        /// <param name="val">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the position of the sample.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        public static unsafe void GetMultisample(OpenTK.Graphics.OpenGL4.GetMultisamplePName pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] float* val)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Set the value of a sub-word of the sample mask
        /// </summary>
        /// <param name="maskNumber">
        /// Specifies which 32-bit sub-word of the sample mask to update.
        /// </param>
        /// <param name="mask">
        /// Specifies the new value of the mask sub-word.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glSampleMaski")]
        public static void SampleMask(uint maskNumber, uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Establish the data storage, format, dimensions, and number of samples of a multisample texture's image
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the operation. target must be Texture2DMultisample or ProxyTexture2DMultisample.
        /// </param>
        /// <param name="samples">
        /// The number of samples in the multisample texture's image.
        /// </param>
        /// <param name="internalformat">
        /// The internal format to be used to store the multisample texture's image. internalformat must specify a color-renderable, depth-renderable, or stencil-renderable format.
        /// </param>
        /// <param name="width">
        /// The width of the multisample texture's image, in texels.
        /// </param>
        /// <param name="height">
        /// The height of the multisample texture's image, in texels.
        /// </param>
        /// <param name="fixedsamplelocations">
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glTexImage2DMultisample")]
        public static void TexImage2DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample target, int samples, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Establish the data storage, format, dimensions, and number of samples of a multisample texture's image
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the operation. target must be Texture2DMultisampleArray or ProxyTexture2DMultisampleArray.
        /// </param>
        /// <param name="samples">
        /// The number of samples in the multisample texture's image.
        /// </param>
        /// <param name="internalformat">
        /// The internal format to be used to store the multisample texture's image. internalformat must specify a color-renderable, depth-renderable, or stencil-renderable format.
        /// </param>
        /// <param name="width">
        /// The width of the multisample texture's image, in texels.
        /// </param>
        /// <param name="height">
        /// The height of the multisample texture's image, in texels.
        /// </param>
        /// <param name="depth">
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </param>
        /// <param name="fixedsamplelocations">
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glTexImage3DMultisample")]
        public static void TexImage3DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample target, int samples, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            throw new BindingsNotRewrittenException();
        }

        #pragma warning disable SA1300 // Element should begin with an upper-case letter

        [Slot(390)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMultisamplefv(OpenTK.Graphics.OpenGL4.GetMultisamplePName pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] float* val);

        [Slot(998)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSampleMaski(uint maskNumber, uint mask);

        [Slot(1051)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexImage2DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample target, int samples, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, bool fixedsamplelocations);

        [Slot(1053)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexImage3DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample target, int samples, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);
    }
}
