//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v4.2 or ARB_texture_storage|VERSION_4_2]
        /// Simultaneously specify storage for all levels of a one-dimensional texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be either Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="levels">
        /// Specify the number of texture levels.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage|VERSION_4_2", Version = "4.2", EntryPoint = "glTexStorage1D")]
        public static void TexStorage1D(OpenTK.Graphics.OpenGL4.TextureTarget1d target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_texture_storage|VERSION_4_2]
        /// Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="levels">
        /// Specify the number of texture levels.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture, in texels.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage|VERSION_4_2", Version = "4.2", EntryPoint = "glTexStorage2D")]
        public static void TexStorage2D(OpenTK.Graphics.OpenGL4.TextureTarget2d target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_texture_storage|VERSION_4_2]
        /// Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of Texture3D, ProxyTexture3D, Texture2DArray, ProxyTexture2DArray, TextureCubeArray, or ProxyTextureCubeArray.
        /// </param>
        /// <param name="levels">
        /// Specify the number of texture levels.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture, in texels.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture, in texels.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage|VERSION_4_2", Version = "4.2", EntryPoint = "glTexStorage3D")]
        public static void TexStorage3D(OpenTK.Graphics.OpenGL4.TextureTarget3d target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, int depth)
        {
            throw new BindingsNotRewrittenException();
        }

        #pragma warning disable SA1300 // Element should begin with an upper-case letter

        [Slot(1061)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage1D(OpenTK.Graphics.OpenGL4.TextureTarget1d target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width);

        [Slot(1062)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage2D(OpenTK.Graphics.OpenGL4.TextureTarget2d target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height);

        [Slot(1064)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage3D(OpenTK.Graphics.OpenGL4.TextureTarget3d target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, int depth);
    }
}
