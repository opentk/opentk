//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Bind a named sampler to a texturing target
        /// </summary>
        /// <param name="unit">
        /// Specifies the index of the texture unit to which the sampler is bound.
        /// </param>
        /// <param name="sampler">
        /// Specifies the name of a sampler.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glBindSampler")]
        public static void BindSampler(uint unit, uint sampler)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static void DeleteSampler([CountAttribute(Parameter = "count")] uint samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static void DeleteSamplers(int count, [CountAttribute(Parameter = "count")] uint[] samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static void DeleteSamplers(int count, [CountAttribute(Parameter = "count")] ref uint samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static unsafe void DeleteSamplers(int count, [CountAttribute(Parameter = "count")] uint* samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        public static uint GenSampler()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        public static void GenSamplers(int count, [OutAttribute, CountAttribute(Parameter = "count")] uint[] samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        public static void GenSamplers(int count, [OutAttribute, CountAttribute(Parameter = "count")] out uint samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        public static unsafe void GenSamplers(int count, [OutAttribute, CountAttribute(Parameter = "count")] uint* samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        public static void GetSamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        public static void GetSamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        public static unsafe void GetSamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIuiv")]
        public static void GetSamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] uint[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIuiv")]
        public static void GetSamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIuiv")]
        public static unsafe void GetSamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        public static void GetSamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        public static void GetSamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        public static unsafe void GetSamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        public static void GetSamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        public static void GetSamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="params">
        /// [length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        public static unsafe void GetSamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Determine if a name corresponds to a sampler object
        /// </summary>
        /// <param name="sampler">
        /// Specifies a value that may be the name of a sampler object.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glIsSampler")]
        public static bool IsSampler(uint sampler)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        public static void SamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] int[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        public static void SamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        public static unsafe void SamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] int* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIuiv")]
        public static void SamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] uint[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIuiv")]
        public static void SamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref uint param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIuiv")]
        public static unsafe void SamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] uint* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterf")]
        public static void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        public static void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] float[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        public static void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        public static unsafe void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] float* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteri")]
        public static void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        public static void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] int[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        public static void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        public static unsafe void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] int* param)
        {
            throw new BindingsNotRewrittenException();
        }

        #pragma warning disable SA1300 // Element should begin with an upper-case letter

        [Slot(28)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindSampler(uint unit, uint sampler);

        [Slot(205)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteSamplers(int count, [CountAttribute(Parameter = "count")] uint* samplers);

        [Slot(314)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenSamplers(int count, [OutAttribute, CountAttribute(Parameter = "count")] uint* samplers);

        [Slot(526)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSamplerParameterIiv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(527)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSamplerParameterIuiv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params);

        [Slot(525)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSamplerParameterfv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(528)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSamplerParameteriv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(632)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsSampler(uint sampler);

        [Slot(1002)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSamplerParameterIiv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] int* param);

        [Slot(1003)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSamplerParameterIuiv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] uint* param);

        [Slot(999)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSamplerParameterf(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, float param);

        [Slot(1000)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSamplerParameterfv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] float* param);

        [Slot(1001)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSamplerParameteri(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, int param);

        [Slot(1004)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSamplerParameteriv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] int* param);
    }
}
