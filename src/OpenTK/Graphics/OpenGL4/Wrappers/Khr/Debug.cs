//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "Debug" in the extension "Khr".
        /// </summary>
        public static partial class Khr
        {
            /// <summary>
            /// [requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback(DebugProcKhr callback, IntPtr userParam)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            /// <typeparam name="T1"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[] userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            /// <typeparam name="T1"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[,] userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            /// <typeparam name="T1"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[,,] userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            /// <typeparam name="T1"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] ref T1 userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, uint[] ids, bool enabled)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, ref uint ids, bool enabled)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, uint* ids, bool enabled)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type">
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id">
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity">
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length">
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf">
            /// The address of a character array containing the message to insert.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            public static void DebugMessageInsert(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, uint id, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int length, string buf)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] uint[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] int[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string messageLog)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugSource sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out uint ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out int lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string messageLog)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string messageLog)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static void GetObjectLabel(OpenTK.Graphics.OpenGL4.KhrDebug identifier, uint name, int bufSize, [OutAttribute] int[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static void GetObjectLabel(OpenTK.Graphics.OpenGL4.KhrDebug identifier, uint name, int bufSize, [OutAttribute] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.OpenGL4.KhrDebug identifier, uint name, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            /// <typeparam name="T0"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            /// <typeparam name="T0"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            /// <typeparam name="T0"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            /// <typeparam name="T0"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            /// <typeparam name="T0"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            /// <typeparam name="T0"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            /// <typeparam name="T0"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            /// <typeparam name="T0"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="params">
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer(OpenTK.Graphics.OpenGL4.KhrDebug pname, [OutAttribute] IntPtr @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="params">
            /// </param>
            /// <typeparam name="T1"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer<T1>(OpenTK.Graphics.OpenGL4.KhrDebug pname, [InAttribute, OutAttribute] T1[] @params)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="params">
            /// </param>
            /// <typeparam name="T1"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer<T1>(OpenTK.Graphics.OpenGL4.KhrDebug pname, [InAttribute, OutAttribute] T1[,] @params)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="params">
            /// </param>
            /// <typeparam name="T1"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer<T1>(OpenTK.Graphics.OpenGL4.KhrDebug pname, [InAttribute, OutAttribute] T1[,,] @params)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="params">
            /// </param>
            /// <typeparam name="T1"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer<T1>(OpenTK.Graphics.OpenGL4.KhrDebug pname, [InAttribute, OutAttribute] ref T1 @params)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object to label.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            public static void ObjectLabel(OpenTK.Graphics.OpenGL4.ObjectIdentifier identifier, uint name, int length, string label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel(IntPtr ptr, int length, string label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            /// <typeparam name="T0"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int length, string label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            /// <typeparam name="T0"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int length, string label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            /// <typeparam name="T0"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int length, string label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            /// <typeparam name="T0"></typeparam>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int length, string label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Pop the active debug group
            /// </summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPopDebugGroupKHR")]
            public static void PopDebugGroup()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source">
            /// The source of the debug message.
            /// </param>
            /// <param name="id">
            /// The identifier of the message.
            /// </param>
            /// <param name="length">
            /// The length of the message to be sent to the debug output stream.
            /// </param>
            /// <param name="message">
            /// The a string containing the message to be sent to the debug output stream.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroupKHR")]
            public static void PushDebugGroup(OpenTK.Graphics.OpenGL4.DebugSource source, uint id, int length, string message)
            {
                throw new BindingsNotRewrittenException();
            }

            #pragma warning disable SA1300 // Element should begin with an upper-case letter

            [Slot(186)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDebugMessageCallbackKHR(DebugProcKhr callback, IntPtr userParam);

            [Slot(189)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glDebugMessageControlKHR(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, uint* ids, bool enabled);

            [Slot(192)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDebugMessageInsertKHR(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, uint id, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int length, IntPtr buf);

            [Slot(353)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe uint glGetDebugMessageLogKHR(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr messageLog);

            [Slot(469)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetObjectLabelKHR(OpenTK.Graphics.OpenGL4.KhrDebug identifier, uint name, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);

            [Slot(471)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetObjectPtrLabelKHR(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);

            [Slot(498)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetPointervKHR(OpenTK.Graphics.OpenGL4.KhrDebug pname, [OutAttribute] IntPtr @params);

            [Slot(790)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glObjectLabelKHR(OpenTK.Graphics.OpenGL4.ObjectIdentifier identifier, uint name, int length, IntPtr label);

            [Slot(792)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glObjectPtrLabelKHR(IntPtr ptr, int length, IntPtr label);

            [Slot(830)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glPopDebugGroupKHR();

            [Slot(980)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glPushDebugGroupKHR(OpenTK.Graphics.OpenGL4.DebugSource source, uint id, int length, IntPtr message);
        }
    }
}
