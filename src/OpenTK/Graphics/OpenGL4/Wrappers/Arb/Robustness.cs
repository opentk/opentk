//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "Robustness" in the extension "Arb".
        /// </summary>
        public static partial class Arb
        {
            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetGraphicsResetStatusARB")]
            public static OpenTK.Graphics.OpenGL4.GraphicsResetStatus GetGraphicsResetStatus()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="table">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnColorTableARB")]
            public static void GetnColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr table)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="table">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T4"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnColorTableARB")]
            public static void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[] table)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="table">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T4"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnColorTableARB")]
            public static void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,] table)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="table">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T4"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnColorTableARB")]
            public static void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,,] table)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="table">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T4"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnColorTableARB")]
            public static void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T4 table)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnCompressedTexImageARB")]
            public static void GetnCompressedTexImage(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr img)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T3"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnCompressedTexImageARB")]
            public static void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T3[] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T3"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnCompressedTexImageARB")]
            public static void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T3[,] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T3"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnCompressedTexImageARB")]
            public static void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T3[,,] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T3"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnCompressedTexImageARB")]
            public static void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T3 img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="image">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnConvolutionFilterARB")]
            public static void GetnConvolutionFilter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr image)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="image">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T4"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnConvolutionFilterARB")]
            public static void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[] image)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="image">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T4"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnConvolutionFilterARB")]
            public static void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,] image)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="image">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T4"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnConvolutionFilterARB")]
            public static void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,,] image)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="image">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T4"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnConvolutionFilterARB")]
            public static void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T4 image)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnHistogramARB")]
            public static void GetnHistogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T5"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnHistogramARB")]
            public static void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[] values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T5"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnHistogramARB")]
            public static void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[,] values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T5"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnHistogramARB")]
            public static void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[,,] values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T5"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnHistogramARB")]
            public static void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T5 values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapdvARB")]
            public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapdvARB")]
            public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapdvARB")]
            public static unsafe void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapfvARB")]
            public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapfvARB")]
            public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapfvARB")]
            public static unsafe void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapivARB")]
            public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapivARB")]
            public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapivARB")]
            public static unsafe void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMinmaxARB")]
            public static void GetnMinmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T5"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMinmaxARB")]
            public static void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[] values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T5"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMinmaxARB")]
            public static void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[,] values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T5"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMinmaxARB")]
            public static void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[,,] values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T5"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMinmaxARB")]
            public static void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T5 values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapfvARB")]
            public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float[] values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapfvARB")]
            public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out float values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapfvARB")]
            public static unsafe void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float* values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapuivARB")]
            public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] uint[] values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapuivARB")]
            public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out uint values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapuivARB")]
            public static unsafe void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] uint* values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapusvARB")]
            public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] ushort[] values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapusvARB")]
            public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out ushort values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapusvARB")]
            public static unsafe void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] ushort* values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPolygonStippleARB")]
            public static byte GetnPolygonStipple()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="bufSize">
            /// </param>
            /// <param name="pattern">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPolygonStippleARB")]
            public static void GetnPolygonStipple(int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] byte[] pattern)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="bufSize">
            /// </param>
            /// <param name="pattern">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPolygonStippleARB")]
            public static void GetnPolygonStipple(int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out byte pattern)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="bufSize">
            /// </param>
            /// <param name="pattern">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPolygonStippleARB")]
            public static unsafe void GetnPolygonStipple(int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] byte* pattern)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="rowBufSize">
            /// </param>
            /// <param name="row">
            /// [length: rowBufSize]
            /// </param>
            /// <param name="columnBufSize">
            /// </param>
            /// <param name="column">
            /// [length: columnBufSize]
            /// </param>
            /// <param name="span">
            /// [length: 0]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnSeparableFilterARB")]
            public static void GetnSeparableFilter(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [OutAttribute, CountAttribute(Parameter = "rowBufSize")] IntPtr row, int columnBufSize, [OutAttribute, CountAttribute(Parameter = "columnBufSize")] IntPtr column, [OutAttribute, CountAttribute(Count = 0)] IntPtr span)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="rowBufSize">
            /// </param>
            /// <param name="row">
            /// [length: rowBufSize]
            /// </param>
            /// <param name="columnBufSize">
            /// </param>
            /// <param name="column">
            /// [length: columnBufSize]
            /// </param>
            /// <param name="span">
            /// [length: 0]
            /// </param>
            /// <typeparam name="T4"></typeparam>
            /// <typeparam name="T6"></typeparam>
            /// <typeparam name="T7"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnSeparableFilterARB")]
            public static void GetnSeparableFilter<T4, T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "rowBufSize")] T4[] row, int columnBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "columnBufSize")] T6[] column, [InAttribute, OutAttribute, CountAttribute(Count = 0)] T7[] span)
                where T4 : struct
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="rowBufSize">
            /// </param>
            /// <param name="row">
            /// [length: rowBufSize]
            /// </param>
            /// <param name="columnBufSize">
            /// </param>
            /// <param name="column">
            /// [length: columnBufSize]
            /// </param>
            /// <param name="span">
            /// [length: 0]
            /// </param>
            /// <typeparam name="T4"></typeparam>
            /// <typeparam name="T6"></typeparam>
            /// <typeparam name="T7"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnSeparableFilterARB")]
            public static void GetnSeparableFilter<T4, T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "rowBufSize")] T4[,] row, int columnBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "columnBufSize")] T6[,] column, [InAttribute, OutAttribute, CountAttribute(Count = 0)] T7[,] span)
                where T4 : struct
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="rowBufSize">
            /// </param>
            /// <param name="row">
            /// [length: rowBufSize]
            /// </param>
            /// <param name="columnBufSize">
            /// </param>
            /// <param name="column">
            /// [length: columnBufSize]
            /// </param>
            /// <param name="span">
            /// [length: 0]
            /// </param>
            /// <typeparam name="T4"></typeparam>
            /// <typeparam name="T6"></typeparam>
            /// <typeparam name="T7"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnSeparableFilterARB")]
            public static void GetnSeparableFilter<T4, T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "rowBufSize")] T4[,,] row, int columnBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "columnBufSize")] T6[,,] column, [InAttribute, OutAttribute, CountAttribute(Count = 0)] T7[,,] span)
                where T4 : struct
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="rowBufSize">
            /// </param>
            /// <param name="row">
            /// [length: rowBufSize]
            /// </param>
            /// <param name="columnBufSize">
            /// </param>
            /// <param name="column">
            /// [length: columnBufSize]
            /// </param>
            /// <param name="span">
            /// [length: 0]
            /// </param>
            /// <typeparam name="T4"></typeparam>
            /// <typeparam name="T6"></typeparam>
            /// <typeparam name="T7"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnSeparableFilterARB")]
            public static void GetnSeparableFilter<T4, T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "rowBufSize")] ref T4 row, int columnBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "columnBufSize")] ref T6 column, [InAttribute, OutAttribute, CountAttribute(Count = 0)] ref T7 span)
                where T4 : struct
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnTexImageARB")]
            public static void GetnTexImage(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr img)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T5"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnTexImageARB")]
            public static void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[] img)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T5"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnTexImageARB")]
            public static void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[,] img)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T5"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnTexImageARB")]
            public static void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[,,] img)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T5"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnTexImageARB")]
            public static void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T5 img)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformdvARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformdvARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out double @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformdvARB")]
            public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] double* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformfvARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformfvARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformfvARB")]
            public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformivARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformivARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformivARB")]
            public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformuivARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformuivARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformuivARB")]
            public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static void ReadnPixels(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T7"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[] data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T7"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[,] data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T7"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[,,] data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            /// <typeparam name="T7"></typeparam>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T7 data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            #pragma warning disable SA1300 // Element should begin with an upper-case letter

            [Slot(370)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern OpenTK.Graphics.OpenGL4.GraphicsResetStatus glGetGraphicsResetStatusARB();

            [Slot(426)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetnColorTableARB(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr table);

            [Slot(428)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetnCompressedTexImageARB(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr img);

            [Slot(430)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetnConvolutionFilterARB(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr image);

            [Slot(433)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetnHistogramARB(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr values);

            [Slot(435)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetnMapdvARB(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] double* v);

            [Slot(437)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetnMapfvARB(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float* v);

            [Slot(439)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetnMapivARB(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* v);

            [Slot(441)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetnMinmaxARB(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr values);

            [Slot(443)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetnPixelMapfvARB(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float* values);

            [Slot(445)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetnPixelMapuivARB(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] uint* values);

            [Slot(447)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetnPixelMapusvARB(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] ushort* values);

            [Slot(449)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetnPolygonStippleARB(int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] byte* pattern);

            [Slot(451)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetnSeparableFilterARB(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [OutAttribute, CountAttribute(Parameter = "rowBufSize")] IntPtr row, int columnBufSize, [OutAttribute, CountAttribute(Parameter = "columnBufSize")] IntPtr column, [OutAttribute, CountAttribute(Count = 0)] IntPtr span);

            [Slot(453)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetnTexImageARB(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr img);

            [Slot(455)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetnUniformdvARB(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] double* @params);

            [Slot(457)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetnUniformfvARB(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float* @params);

            [Slot(461)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetnUniformivARB(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* @params);

            [Slot(465)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetnUniformuivARB(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] uint* @params);

            [Slot(986)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glReadnPixelsARB(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data);
        }
    }
}
