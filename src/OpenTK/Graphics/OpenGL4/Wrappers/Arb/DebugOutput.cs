//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL4
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "DebugOutput" in the extension "Arb".
        /// </summary>
        public static partial class Arb
        {
            /// <summary>
            /// [requires: ARB_debug_output]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// [length: COMPSIZE(callback)]
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageCallbackARB")]
            public static void DebugMessageCallback(DebugProcArb callback, [CountAttribute(Computed = "callback")] IntPtr userParam)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// [length: COMPSIZE(callback)]
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            /// <typeparam name="T1"></typeparam>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageCallbackARB")]
            public static void DebugMessageCallback<T1>(DebugProcArb callback, [InAttribute, OutAttribute, CountAttribute(Computed = "callback")] T1[] userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// [length: COMPSIZE(callback)]
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            /// <typeparam name="T1"></typeparam>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageCallbackARB")]
            public static void DebugMessageCallback<T1>(DebugProcArb callback, [InAttribute, OutAttribute, CountAttribute(Computed = "callback")] T1[,] userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// [length: COMPSIZE(callback)]
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            /// <typeparam name="T1"></typeparam>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageCallbackARB")]
            public static void DebugMessageCallback<T1>(DebugProcArb callback, [InAttribute, OutAttribute, CountAttribute(Computed = "callback")] T1[,,] userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// [length: COMPSIZE(callback)]
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            /// <typeparam name="T1"></typeparam>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageCallbackARB")]
            public static void DebugMessageCallback<T1>(DebugProcArb callback, [InAttribute, OutAttribute, CountAttribute(Computed = "callback")] ref T1 userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageControlARB")]
            public static void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, [CountAttribute(Parameter = "count")] uint[] ids, bool enabled)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageControlARB")]
            public static void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, [CountAttribute(Parameter = "count")] ref uint ids, bool enabled)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageControlARB")]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, [CountAttribute(Parameter = "count")] uint* ids, bool enabled)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type">
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id">
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity">
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length">
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf">
            /// [length: length]
            /// The address of a character array containing the message to insert.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageInsertARB")]
            public static void DebugMessageInsert(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, uint id, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int length, [CountAttribute(Parameter = "length")] string buf)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glGetDebugMessageLogARB")]
            public static uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] uint[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] int[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string messageLog)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glGetDebugMessageLogARB")]
            public static uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugSource sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out uint ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out int lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string messageLog)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glGetDebugMessageLogARB")]
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out string messageLog)
            {
                throw new BindingsNotRewrittenException();
            }

            #pragma warning disable SA1300 // Element should begin with an upper-case letter

            [Slot(185)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDebugMessageCallbackARB(DebugProcArb callback, [CountAttribute(Computed = "callback")] IntPtr userParam);

            [Slot(188)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glDebugMessageControlARB(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, [CountAttribute(Parameter = "count")] uint* ids, bool enabled);

            [Slot(191)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDebugMessageInsertARB(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, uint id, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int length, [CountAttribute(Parameter = "length")] IntPtr buf);

            [Slot(352)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe uint glGetDebugMessageLogARB(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr messageLog);
        }
    }
}
