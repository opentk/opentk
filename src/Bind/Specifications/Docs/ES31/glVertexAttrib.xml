<!DOCTYPE refentry [ <!ENTITY % mathent SYSTEM "math.ent"> %mathent; ]>

<!-- Converted by db4-upgrade version 1.1 -->

<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="glVertexAttrib">
    <info>
        <copyright>
            <year>2003-2005</year>
            <holder>3Dlabs Inc. Ltd.</holder>
        </copyright>
        <copyright>
            <year>2010-2014</year>
            <holder>Khronos Group</holder>
        </copyright>
    </info>
    <refmeta>
        <refentrytitle>glVertexAttrib</refentrytitle>
        <manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>glVertexAttrib</refname>
        <refpurpose>Specifies the value of a generic vertex attribute</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>C Specification</title>
    <funcsynopsis>
        <funcprototype>
        <funcdef>void <function>glVertexAttrib1f</function></funcdef>
        <paramdef>GLuint <parameter>index</parameter></paramdef>
        <paramdef>GLfloat <parameter>v0</parameter></paramdef>
        </funcprototype>
        <funcprototype>
        <funcdef>void <function>glVertexAttrib2f</function></funcdef>
        <paramdef>GLuint <parameter>index</parameter></paramdef>
        <paramdef>GLfloat <parameter>v0</parameter></paramdef>
        <paramdef>GLfloat <parameter>v1</parameter></paramdef>
        </funcprototype>
        <funcprototype>
        <funcdef>void <function>glVertexAttrib3f</function></funcdef>
        <paramdef>GLuint <parameter>index</parameter></paramdef>
        <paramdef>GLfloat <parameter>v0</parameter></paramdef>
        <paramdef>GLfloat <parameter>v1</parameter></paramdef>
        <paramdef>GLfloat <parameter>v2</parameter></paramdef>
        </funcprototype>
        <funcprototype>
        <funcdef>void <function>glVertexAttrib4f</function></funcdef>
        <paramdef>GLuint <parameter>index</parameter></paramdef>
        <paramdef>GLfloat <parameter>v0</parameter></paramdef>
        <paramdef>GLfloat <parameter>v1</parameter></paramdef>
        <paramdef>GLfloat <parameter>v2</parameter></paramdef>
        <paramdef>GLfloat <parameter>v3</parameter></paramdef>
        </funcprototype>
        <funcprototype>
        <funcdef>void <function>glVertexAttribI4i</function></funcdef>
        <paramdef>GLuint <parameter>index</parameter></paramdef>
        <paramdef>GLint <parameter>v0</parameter></paramdef>
        <paramdef>GLint <parameter>v1</parameter></paramdef>
        <paramdef>GLint <parameter>v2</parameter></paramdef>
        <paramdef>GLint <parameter>v3</parameter></paramdef>
        </funcprototype>
        <funcprototype>
        <funcdef>void <function>glVertexAttribI4ui</function></funcdef>
        <paramdef>GLuint <parameter>index</parameter></paramdef>
        <paramdef>GLuint <parameter>v0</parameter></paramdef>
        <paramdef>GLuint <parameter>v1</parameter></paramdef>
        <paramdef>GLuint <parameter>v2</parameter></paramdef>
        <paramdef>GLuint <parameter>v3</parameter></paramdef>
        </funcprototype>
            <!-- Vector commands -->
        <funcprototype>
        <funcdef>void <function>glVertexAttrib1fv</function></funcdef>
        <paramdef>GLuint <parameter>index</parameter></paramdef>
        <paramdef>const GLfloat *<parameter>v</parameter></paramdef>
        </funcprototype>
        <funcprototype>
        <funcdef>void <function>glVertexAttrib2fv</function></funcdef>
        <paramdef>GLuint <parameter>index</parameter></paramdef>
        <paramdef>const GLfloat *<parameter>v</parameter></paramdef>
        </funcprototype>
        <funcprototype>
        <funcdef>void <function>glVertexAttrib3fv</function></funcdef>
        <paramdef>GLuint <parameter>index</parameter></paramdef>
        <paramdef>const GLfloat *<parameter>v</parameter></paramdef>
        </funcprototype>
        <funcprototype>
        <funcdef>void <function>glVertexAttrib4fv</function></funcdef>
        <paramdef>GLuint <parameter>index</parameter></paramdef>
        <paramdef>const GLfloat *<parameter>v</parameter></paramdef>
        </funcprototype>
        <funcprototype>
        <funcdef>void <function>glVertexAttribI4iv</function></funcdef>
        <paramdef>GLuint <parameter>index</parameter></paramdef>
        <paramdef>const GLint *<parameter>v</parameter></paramdef>
        </funcprototype>
        <funcprototype>
        <funcdef>void <function>glVertexAttribI4uiv</function></funcdef>
        <paramdef>GLuint <parameter>index</parameter></paramdef>
        <paramdef>const GLuint *<parameter>v</parameter></paramdef>
        </funcprototype>
    </funcsynopsis>
    </refsynopsisdiv>
    <refsect1 xml:id="parameters"><title>Parameters</title>
    <variablelist>
        <varlistentry>
        <term><parameter>index</parameter></term>
        <listitem>
            <para>Specifies the index of the generic vertex
            attribute to be modified.</para>
        </listitem>
        </varlistentry>
        <varlistentry>
        <term>
            <parameter>v0</parameter>,
            <parameter>v1</parameter>,
            <parameter>v2</parameter>,
            <parameter>v3</parameter>
        </term>
        <listitem>
            <para>
                For the scalar commands, specifies the new values to be used
                for the specified vertex attribute.
            </para>
        </listitem>
        </varlistentry>
        <varlistentry>
        <term><parameter>v</parameter></term>
        <listitem>
            <para>
                For the vector commands
                (<function>glVertexAttrib*v</function>), specifies a pointer
                to an array of values to be used for the generic vertex
                attribute.
            </para>
        </listitem>
        </varlistentry>
    </variablelist>
    </refsect1>
    <refsect1 xml:id="description"><title>Description</title>
    <para>The <function>glVertexAttrib</function> family of entry points
    allows an application to pass generic vertex attributes in
    numbered locations.</para>

    <para>Generic attributes are defined as four-component values
    that are organized into an array. The first entry of this array
    is numbered 0, and the size of the array is specified by the
    implementation-dependent constant
    <constant>GL_MAX_VERTEX_ATTRIBS</constant>. Individual elements
    of this array can be modified with a
    <function>glVertexAttrib</function> call that specifies the
    index of the element to be modified and a value for that
    element.</para>

    <para>These commands can be used to specify one, two, three, or
    all four components of the generic vertex attribute specified by
    <parameter>index</parameter>. A <function>1</function> in the
    name of the command indicates that only one value is passed, and
    it will be used to modify the first component of the generic
    vertex attribute. The second and third components will be set to
    0, and the fourth component will be set to 1. Similarly, a
    <function>2</function> in the name of the command indicates that
    values are provided for the first two components, the third
    component will be set to 0, and the fourth component will be set
    to 1. A <function>3</function> in the name of the command
    indicates that values are provided for the first three
    components and the fourth component will be set to 1, whereas a
    <function>4</function> in the name indicates that values are
    provided for all four components.</para>

    <para>The letters <function>f</function>, <function>i</function>,
    and <function>ui</function> indicate
    whether the arguments are of type float, int, or unsigned int. When
    <function>v</function> is appended to the name, the commands can
    take a pointer to an array of such values.</para>

        <para>Additional capitalized letters can indicate further alterations
        to the default behavior of the glVertexAttrib function:</para>

        <para>
            The commands containing <function>I</function> indicate that 
            the arguments are extended to full signed or unsigned integers.
        </para>

    <para>OpenGL ES Shading Language attribute variables are allowed to
    be of type mat2, mat3, or mat4. Attributes of these types may be
    loaded using the <function>glVertexAttrib</function> entry
    points. Matrices must be loaded into successive generic
    attribute slots in column major order, with one column of the
    matrix in each generic attribute slot.</para>

    <para>A user-defined attribute variable declared in a vertex
    shader can be bound to a generic attribute index by calling
    <citerefentry><refentrytitle>glBindAttribLocation</refentrytitle></citerefentry>.
    This allows an application to use more descriptive variable
    names in a vertex shader. A subsequent change to the specified
    generic vertex attribute will be immediately reflected as a
    change to the corresponding attribute variable in the vertex
    shader.</para>

    <para>The binding between a generic vertex attribute index and a
    user-defined attribute variable in a vertex shader is part of
    the state of a program object, but the current value of the
    generic vertex attribute is not. The value of each generic
    vertex attribute is part of current state, and it is maintained
        even if a different program object is used.</para>

    <para>An application may freely modify generic vertex attributes
    that are not bound to a named vertex shader attribute variable.
    These values are simply maintained as part of current state and
    will not be accessed by the vertex shader. If a generic vertex
    attribute bound to an attribute variable in a vertex shader is
    not updated while the vertex shader is executing, the vertex
    shader will repeatedly use the current value for the generic
    vertex attribute.</para>
    </refsect1>
    <refsect1 xml:id="notes"><title>Notes</title>
    <para>Generic vertex attributes can be updated at any time.</para>

    <para>It is possible for an application to bind more than one
    attribute name to the same generic vertex attribute index. This
    is referred to as aliasing, and it is allowed only if just one
    of the aliased attribute variables is active in the vertex
    shader, or if no path through the vertex shader consumes more
    than one of the attributes aliased to the same location. OpenGL
    implementations are not required to do error checking to detect
    aliasing, they are allowed to assume that aliasing will not
    occur, and they are allowed to employ optimizations that work
    only in the absence of aliasing.</para>

        <para>The resulting attribute values are undefined if the base 
        type of the shader attribute at slot <parameter>index</parameter> 
        does not match the type of glUniform command used.
        If the attribute is floating point, the <function>glUniform*f[v]</function> commands 
        should be used. If the attribute is unsigned integer, 
        the <function>glUniformI4ui*</function> commands should be used. If the attribute is
        a signed integer, the <function>glUniformI4i*</function> commands should be used.
        </para>

        
    </refsect1>
    <refsect1 xml:id="errors"><title>Errors</title>
    <para><constant>GL_INVALID_VALUE</constant> is generated if
    <parameter>index</parameter> is greater than or equal to
    <constant>GL_MAX_VERTEX_ATTRIBS</constant>.</para>

    </refsect1>
    <refsect1 xml:id="associatedgets"><title>Associated Gets</title>
    <para><citerefentry><refentrytitle>glGet</refentrytitle></citerefentry>
    with the argument <constant>GL_CURRENT_PROGRAM</constant></para>

    <para><citerefentry><refentrytitle>glGetActiveAttrib</refentrytitle></citerefentry>
    with argument <parameter>program</parameter> and the index of an active
    attribute variable</para>

    <para><citerefentry><refentrytitle>glGetAttribLocation</refentrytitle></citerefentry>
    with argument <parameter>program</parameter> and an attribute
    variable name</para>

    <para><citerefentry><refentrytitle>glGetVertexAttrib</refentrytitle></citerefentry>
    with arguments <constant>GL_CURRENT_VERTEX_ATTRIB</constant> and
    <parameter>index</parameter></para>
    </refsect1>
    <refsect1 xml:id="versions">
        <title>API Version Support</title>
        <informaltable>
            <tgroup cols="4" align="left">
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apifunchead.xml" xpointer="xpointer(/*/*)"/>
                <tbody>
                    <row>
                        <entry><function>glVertexAttrib1f</function></entry>
                        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apiversion.xml" xpointer="xpointer(/*/*[@role='es20']/*)"/>
                    </row>
                    <row>
                        <entry><function>glVertexAttrib2f</function></entry>
                        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apiversion.xml" xpointer="xpointer(/*/*[@role='es20']/*)"/>
                    </row>
                    <row>
                        <entry><function>glVertexAttrib3f</function></entry>
                        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apiversion.xml" xpointer="xpointer(/*/*[@role='es20']/*)"/>
                    </row>
                    <row>
                        <entry><function>glVertexAttrib4f</function></entry>
                        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apiversion.xml" xpointer="xpointer(/*/*[@role='es20']/*)"/>
                    </row>
                    <row>
                        <entry><function>glVertexAttribI4i</function></entry>
                        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apiversion.xml" xpointer="xpointer(/*/*[@role='es30']/*)"/>
                    </row>
                    <row>
                        <entry><function>glVertexAttribI4ui</function></entry>
                        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apiversion.xml" xpointer="xpointer(/*/*[@role='es30']/*)"/>
                    </row>
                    <row>
                        <entry><function>glVertexAttrib1fv</function></entry>
                        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apiversion.xml" xpointer="xpointer(/*/*[@role='es20']/*)"/>
                    </row>
                    <row>
                        <entry><function>glVertexAttrib2fv</function></entry>
                        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apiversion.xml" xpointer="xpointer(/*/*[@role='es20']/*)"/>
                    </row>
                    <row>
                        <entry><function>glVertexAttrib3fv</function></entry>
                        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apiversion.xml" xpointer="xpointer(/*/*[@role='es20']/*)"/>
                    </row>
                    <row>
                        <entry><function>glVertexAttrib4fv</function></entry>
                        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apiversion.xml" xpointer="xpointer(/*/*[@role='es20']/*)"/>
                    </row>
                    <row>
                        <entry><function>glVertexAttribI4iv</function></entry>
                        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apiversion.xml" xpointer="xpointer(/*/*[@role='es30']/*)"/>
                    </row>
                    <row>
                        <entry><function>glVertexAttribI4uiv</function></entry>
                        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apiversion.xml" xpointer="xpointer(/*/*[@role='es30']/*)"/>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
    </refsect1>
    <refsect1 xml:id="seealso"><title>See Also</title>
    <para><citerefentry><refentrytitle>glBindAttribLocation</refentrytitle></citerefentry>,
    <citerefentry><refentrytitle>glVertexAttribPointer</refentrytitle></citerefentry></para>
    </refsect1>
    <refsect1 xml:id="Copyright"><title>Copyright</title>
        <para>
            Copyright <trademark class="copyright"/> 2003-2005 3Dlabs Inc. Ltd. 
            Copyright <trademark class="copyright"/> 2010-2014 Khronos Group.
            This material may be distributed subject to the terms and conditions set forth in 
            the Open Publication License, v 1.0, 8 June 1999.
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://opencontent.org/openpub/">http://opencontent.org/openpub/</link>.
        </para>
    </refsect1>
</refentry>
