<!DOCTYPE refentry [ <!ENTITY % mathent SYSTEM "math.ent"> %mathent; ]>

<!-- Converted by db4-upgrade version 1.1 -->

<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="glTexImage3D">
    <info>
        <copyright>
            <year>1991-2006</year>
            <holder>Silicon Graphics, Inc.</holder>
        </copyright>
        <copyright>
            <year>2010-2014</year>
            <holder>Khronos Group</holder>
        </copyright>
    </info>
    <refmeta>
        <refentrytitle>glTexImage3D</refentrytitle>
        <manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>glTexImage3D</refname>
        <refpurpose>specify a three-dimensional texture image</refpurpose>
    </refnamediv>
    <refsynopsisdiv><title>C Specification</title>
        <funcsynopsis>
            <funcprototype>
                <funcdef>void <function>glTexImage3D</function></funcdef>
                <paramdef>GLenum <parameter>target</parameter></paramdef>
                <paramdef>GLint <parameter>level</parameter></paramdef>
                <paramdef>GLint <parameter>internalFormat</parameter></paramdef>
                <paramdef>GLsizei <parameter>width</parameter></paramdef>
                <paramdef>GLsizei <parameter>height</parameter></paramdef>
                <paramdef>GLsizei <parameter>depth</parameter></paramdef>
                <paramdef>GLint <parameter>border</parameter></paramdef>
                <paramdef>GLenum <parameter>format</parameter></paramdef>
                <paramdef>GLenum <parameter>type</parameter></paramdef>
                <paramdef>const GLvoid * <parameter>data</parameter></paramdef>
            </funcprototype>
        </funcsynopsis>
    </refsynopsisdiv>
    <refsect1 xml:id="parameters"><title>Parameters</title>
        <variablelist>
        <varlistentry>
            <term><parameter>target</parameter></term>
            <listitem>
                <para>
                    Specifies the target texture.
                    Must be one of <constant>GL_TEXTURE_3D</constant> or <constant>GL_TEXTURE_2D_ARRAY</constant>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>level</parameter></term>
            <listitem>
                <para>
                    Specifies the level-of-detail number.
                    Level 0 is the base image level.
                    Level
                    <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">n</mml:mi></mml:math></inlineequation>
                    is the
                    <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                        <!-- eqn: n sup th: -->
                        <mml:msup><mml:mi mathvariant="italic">n</mml:mi>
                        <mml:mi mathvariant="italic">th</mml:mi>
                        </mml:msup>
                    </mml:math></inlineequation>
                    mipmap reduction image.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>internalFormat</parameter></term>
            <listitem>
                <para>
                    Specifies the number of color components in the texture.
                    Must be one of base internal formats given in Table 1, or
                    one of the sized internal formats given in Table 2, below.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>width</parameter></term>
            <listitem>
                <para>
                    Specifies the width of the texture image.
                    All implementations support 3D texture images that are at least 256 texels
                    wide.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>height</parameter></term>
            <listitem>
                <para>
                    Specifies the height of the texture image.
                    All implementations support 3D texture images that are at least 256 texels
                    high.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>depth</parameter></term>
            <listitem>
                <para>
                    Specifies the depth of the texture image, or the number of layers in a texture array.
                    All implementations support 3D texture images that are at least 256 texels
                    deep, and texture arrays that are at least 256 layers deep.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>border</parameter></term>
            <listitem>
                <para>
                    This value must be 0.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>format</parameter></term>
            <listitem>
                <para>
                    Specifies the format of the pixel data.
                    The following symbolic values are accepted:
                    <constant>GL_RED</constant>,
                    <constant>GL_RED_INTEGER</constant>,
                    <constant>GL_RG</constant>,
                    <constant>GL_RG_INTEGER</constant>,
                    <constant>GL_RGB</constant>,
                    <constant>GL_RGB_INTEGER</constant>,
                    <constant>GL_RGBA</constant>,
                    <constant>GL_RGBA_INTEGER</constant>,
                    <constant>GL_DEPTH_COMPONENT</constant>,
                    <constant>GL_DEPTH_STENCIL</constant>,
                    <constant>GL_LUMINANCE_ALPHA</constant>,
                    <constant>GL_LUMINANCE</constant>, and
                    <constant>GL_ALPHA</constant>,
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>type</parameter></term>
            <listitem>
                <para>
                    Specifies the data type of the pixel data.
                    The following symbolic values are accepted:
                    <constant>GL_UNSIGNED_BYTE</constant>,
                    <constant>GL_BYTE</constant>,
                    <constant>GL_UNSIGNED_SHORT</constant>,
                    <constant>GL_SHORT</constant>,
                    <constant>GL_UNSIGNED_INT</constant>,
                    <constant>GL_INT</constant>,
                    <constant>GL_HALF_FLOAT</constant>,
                    <constant>GL_FLOAT</constant>,
                    <constant>GL_UNSIGNED_SHORT_5_6_5</constant>,
                    <constant>GL_UNSIGNED_SHORT_4_4_4_4</constant>,
                    <constant>GL_UNSIGNED_SHORT_5_5_5_1</constant>,
                    <constant>GL_UNSIGNED_INT_2_10_10_10_REV</constant>,
                    <constant>GL_UNSIGNED_INT_10F_11F_11F_REV</constant>,
                    <constant>GL_UNSIGNED_INT_5_9_9_9_REV</constant>,
                    <constant>GL_UNSIGNED_INT_24_8</constant>, and
                    <constant>GL_FLOAT_32_UNSIGNED_INT_24_8_REV</constant>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>data</parameter></term>
            <listitem>
                <para>
                    Specifies a pointer to the image data in memory.
                </para>
            </listitem>
        </varlistentry>
        </variablelist>
    </refsect1>
    <refsect1 xml:id="description"><title>Description</title>
        <para>
            Texturing allows elements of an image array to be read by shaders.
        </para>
        <para>
            To define texture images, call <function>glTexImage3D</function>.
            The arguments describe the parameters of the texture image,
            such as height,
            width, depth,
            width of the border,
            level-of-detail number
            (see <citerefentry><refentrytitle>glTexParameter</refentrytitle></citerefentry>),
            and number of color components provided.
            The last three arguments describe how the image is represented in memory.
        </para>
        <para>
            If <parameter>target</parameter> is <constant>GL_TEXTURE_3D</constant>,
            data is read from <parameter>data</parameter> as a sequence of signed or unsigned bytes,
            shorts,
            or longs,
            or single-precision floating-point values,
            depending on <parameter>type</parameter>.
            These values are grouped into sets of one,
            two,
            three,
            or four values,
            depending on <parameter>format</parameter>,
            to form elements.
        </para>
        <para>
            If a non-zero named buffer object is bound to the <constant>GL_PIXEL_UNPACK_BUFFER</constant> target
            (see <citerefentry><refentrytitle>glBindBuffer</refentrytitle></citerefentry>) while a texture image is
            specified, <parameter>data</parameter> is treated as a byte offset into the buffer object's data store.
        </para>
        <para>
            The first element corresponds to the lower left corner of the texture
            image.
            Subsequent elements progress left-to-right through the remaining texels
            in the lowest row of the texture image, and then in successively higher
            rows of the texture image.
            The final element corresponds to the upper right corner of the texture
            image.
        </para>
        <para>
            <parameter>format</parameter> determines the composition of each element in <parameter>data</parameter>.
            It can assume one of these symbolic values:
        </para>
        <variablelist>
            <varlistentry>
                <term><constant>GL_RED</constant></term>
                <listitem>
                    <para>
                        Each element is a single red component.
                        For fixed point normalized components, the GL converts it to floating point, clamps to the range [0,1],
                        and assembles it into an RGBA element by attaching 0.0 for green and blue, and 1.0 for alpha.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><constant>GL_RED_INTEGER</constant></term>
                <listitem>
                    <para>
                        Each element is a single red component.
                        The GL performs assembles it into an RGBA element by attaching 0 for green and blue, and 1 for alpha.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><constant>GL_RG</constant></term>
                <listitem>
                    <para>
                        Each element is a red/green double.
                        For fixed point normalized components, the GL converts each component to floating point, clamps to the range [0,1],
                        and assembles them into an RGBA element by attaching 0.0 for blue, and 1.0 for alpha.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><constant>GL_RG</constant></term>
                <listitem>
                    <para>
                        Each element is a red/green double.
                        The GL assembles them into an RGBA element by attaching 0 for blue, and 1 for alpha.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><constant>GL_RGB</constant></term>
                <listitem>
                    <para>
                        Each element is an RGB triple.
                        For fixed point normalized components, the GL converts each component to floating point, clamps to the range [0,1],
                        and assembles them into an RGBA element by attaching 1.0 for alpha.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><constant>GL_RGB_INTEGER</constant></term>
                <listitem>
                    <para>
                        Each element is an RGB triple.
                        The GL assembles them into an RGBA element by attaching 1 for alpha.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><constant>GL_RGBA</constant></term>
                <listitem>
                    <para>
                        Each element contains all four components.
                        For fixed point normalized components, the GL converts each component to floating point and
                        clamps them to the range [0,1].
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><constant>GL_RGBA_INTEGER</constant></term>
                <listitem>
                    <para>
                        Each element contains all four components.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><constant>GL_DEPTH_COMPONENT</constant></term>
                <listitem>
                    <para>
                        Each element is a single depth value.
                        The GL converts it to floating point, and clamps to the range [0,1].
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><constant>GL_DEPTH_STENCIL</constant></term>
                <listitem>
                    <para>
                        Each element is a pair of depth and stencil values. The depth component of
                        the pair is interpreted as in <constant>GL_DEPTH_COMPONENT</constant>. The stencil
                        component is interpreted based on specified the depth + stencil internal format.
                     </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><constant>GL_LUMINANCE_ALPHA</constant></term>
                <listitem>
                    <para>
                        Each element is an luminance/alpha double.
                        The GL converts each component to floating point, clamps to the range [0,1],
                        and assembles them into an RGBA element by placing the luminance value in the red, green and blue channels.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><constant>GL_LUMINANCE</constant></term>
                <listitem>
                    <para>
                        Each element is a single luminance component.
                        The GL converts it to floating point, clamps to the range [0,1],
                        and assembles it into an RGBA element by placing the luminance value in the red, green and blue channels,
                        and attaching 1.0 to the alpha channel.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><constant>GL_ALPHA</constant></term>
                <listitem>
                    <para>
                        Each element is a single alpha component.
                        The GL converts it to floating point, clamps to the range [0,1],
                        and assembles it into an RGBA element by placing attaching 0.0 to the red, green and blue channels.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>
            If an application wants to store the texture at a certain
            resolution or in a certain format, it can request the resolution
            and format with <parameter>internalFormat</parameter>. The GL will choose an internal
            representation with least the internal component sizes, and exactly the component types shown for that
                        format, although it may not match exactly.
        </para>
        <para>
            <parameter>internalFormat</parameter> may be one of the unsized (base) internal formats shown, together with valid
            <parameter>format</parameter> and <parameter>type</parameter> combinations, in Table 1, below
        </para>
        <para>
            <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="unsizedformattable.xml"/>
        </para>
        <para>
            <parameter>internalFormat</parameter> may also be one of the sized internal formats shown, together with valid
            <parameter>format</parameter> and <parameter>type</parameter> combinations, in Table 2, below
        </para>
        <para>
            <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="internalformattable.xml"/>
        </para>
        <para>
            If the <parameter>internalFormat</parameter> parameter is
            <constant>GL_SRGB</constant>,
            <constant>GL_SRGB8</constant>, or
            <constant>GL_SRGB8_ALPHA8</constant>, the texture is treated as if the red, green, blue, or luminance components are encoded in the sRGB color space.    Any alpha component is left unchanged.  The conversion from the sRGB encoded component
            <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                <mml:msub>
                    <mml:mi mathvariant="italic">c</mml:mi>
                    <mml:mi mathvariant="italic">s</mml:mi>
                </mml:msub>
            </mml:math></inlineequation>
            to a linear component
            <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                <mml:msub>
                    <mml:mi mathvariant="italic">c</mml:mi>
                    <mml:mi mathvariant="italic">l</mml:mi>
                </mml:msub>
            </mml:math></inlineequation>
            is:
                </para>
        <para>
            <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                <mml:mrow>
                    <mml:msub>
                        <mml:mi mathvariant="italic">c</mml:mi>
                        <mml:mi mathvariant="italic">l</mml:mi>
                    </mml:msub>
                    <mml:mo>=</mml:mo>
                    <mml:mrow>
                        <mml:mo>{</mml:mo>
                        <mml:mtable columnalign="left">
                            <mml:mtr>
                                <mml:mtd columnalign="left">
                                    <mml:mfrac>
                                        <mml:msub>
                                            <mml:mi mathvariant="italic">c</mml:mi>
                                            <mml:mi mathvariant="italic">s</mml:mi>
                                        </mml:msub>
                                        <mml:mn>12.92</mml:mn>
                                    </mml:mfrac>
                                </mml:mtd>
                                <mml:mtd columnalign="left">
                                    <mml:mrow>
                                        <mml:mspace width="1ex"/>
                                        <mml:mo>if</mml:mo>
                                        <mml:mspace width="1ex"/>
                                    </mml:mrow>
                                    <mml:msub>
                                        <mml:mi mathvariant="italic">c</mml:mi>
                                        <mml:mi mathvariant="italic">s</mml:mi>
                                    </mml:msub>
                                    <mml:mo>&le;</mml:mo>
                                    <mml:mn>0.04045</mml:mn>
                                </mml:mtd>
                            </mml:mtr>
                            <mml:mtr>
                                <mml:mtd columnalign="left">
                                    <mml:msup>
                                        <mml:mrow>
                                            <mml:mo>(</mml:mo>
                                            <mml:mfrac>
                                                <mml:mrow>
                                                    <mml:msub>
                                                        <mml:mi>c</mml:mi>
                                                        <mml:mi>s</mml:mi>
                                                    </mml:msub>
                                                    <mml:mo>+</mml:mo>
                                                    <mml:mn>0.055</mml:mn>
                                                </mml:mrow>
                                                <mml:mn>1.055</mml:mn>
                                            </mml:mfrac>
                                            <mml:mo>)</mml:mo>
                                        </mml:mrow>
                                        <mml:mn>2.4</mml:mn>
                                    </mml:msup>
                                </mml:mtd>
                                <mml:mtd columnalign="left">
                                    <mml:mrow>
                                        <mml:mspace width="1ex"/>
                                        <mml:mo>if</mml:mo>
                                        <mml:mspace width="1ex"/>
                                    </mml:mrow>
                                    <mml:msub>
                                        <mml:mi mathvariant="italic">c</mml:mi>
                                        <mml:mi mathvariant="italic">s</mml:mi>
                                    </mml:msub>
                                    <mml:mo>&gt;</mml:mo>
                                    <mml:mn>0.04045</mml:mn>
                                </mml:mtd>
                            </mml:mtr>
                        </mml:mtable>
                    </mml:mrow>
                </mml:mrow>
            </mml:math>
            </inlineequation>
        </para>
        <para>
                Assume
                <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                    <mml:msub><mml:mi mathvariant="italic">c</mml:mi>
                    <mml:mi mathvariant="italic">s</mml:mi>
                    </mml:msub>
                </mml:math></inlineequation>
                is the sRGB component in the range [0,1].
        </para>
        <para>
            A one-component texture image uses only the red component of the RGBA
            color extracted from <parameter>data</parameter>.
            A two-component image uses the R and A values.
            A three-component image uses the R, G, and B values.
            A four-component image uses all of the RGBA components.
        </para>
    </refsect1>
    <refsect1 xml:id="notes"><title>Notes</title>
        <para>
            The <citerefentry><refentrytitle>glPixelStorei</refentrytitle></citerefentry> mode affects texture images.
        </para>
        <para>
            <parameter>data</parameter> may be a null pointer.
            In this case texture memory is
            allocated to accommodate a texture of width <parameter>width</parameter>, height <parameter>height</parameter>,
            and depth <parameter>depth</parameter>.
            You can then download subtextures to initialize this
            texture memory.
            The image is undefined if the user tries to apply
            an uninitialized portion of the texture image to a primitive.
        </para>
        <para>
            <function>glTexImage3D</function> specifies the two-dimensional array or three-dimensional texture for the
            texture object bound to the current texture unit, specified with
            <citerefentry><refentrytitle>glActiveTexture</refentrytitle></citerefentry>.
        </para>
    </refsect1>
    <refsect1 xml:id="errors"><title>Errors</title>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>target</parameter> is not <constant>GL_TEXTURE_3D</constant>
            or <constant>GL_TEXTURE_2D_ARRAY</constant>.
        </para>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>format</parameter> is not an accepted
            format constant.  Format constants other than <constant>GL_STENCIL_INDEX</constant> and <constant>GL_DEPTH_COMPONENT</constant>
            are accepted.
        </para>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>type</parameter> is not a type constant.
        </para>
        <para>
            <constant>GL_INVALID_VALUE</constant> is generated if <parameter>level</parameter> is less than 0.
        </para>
        <para>
            <constant>GL_INVALID_VALUE</constant> may be generated if <parameter>level</parameter> is greater than
            <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                <!-- eqn: log sub 2 (max): -->
                <mml:mrow>
                    <mml:msub><mml:mi mathvariant="italic">log</mml:mi>
                    <mml:mn>2</mml:mn>
                    </mml:msub>
                    <mml:mo>&af;</mml:mo>
                    <mml:mfenced open="(" close=")">
                        <mml:mi mathvariant="italic">max</mml:mi>
                    </mml:mfenced>
                </mml:mrow>
            </mml:math></inlineequation>,
            where <emphasis>max</emphasis> is the returned value of <constant>GL_MAX_3D_TEXTURE_SIZE</constant>.
        </para>
        <para>
            <constant>GL_INVALID_VALUE</constant> is generated if <parameter>internalFormat</parameter> is not one of the
            accepted resolution and format symbolic constants.
        </para>
        <para>
            <constant>GL_INVALID_VALUE</constant> is generated if <parameter>width</parameter>, <parameter>height</parameter>,
            or <parameter>depth</parameter> is less than 0 or greater than <constant>GL_MAX_3D_TEXTURE_SIZE</constant>.
        </para>
        <para>
            <constant>GL_INVALID_VALUE</constant> is generated if <parameter>border</parameter> is not 0 or 1.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if the combination of  <parameter>internalFormat</parameter>,
                         <parameter>format</parameter> and <parameter>type</parameter> is not one of those in the tables above.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if <parameter>target</parameter> is <constant>GL_TEXTURE_3D</constant> and
            <parameter>format</parameter>  is <constant>GL_DEPTH_COMPONENT</constant>, or <constant>GL_DEPTH_STENCIL</constant>.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if a non-zero buffer object name is bound to the
            <constant>GL_PIXEL_UNPACK_BUFFER</constant> target and the buffer object's data store is currently mapped.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if a non-zero buffer object name is bound to the
            <constant>GL_PIXEL_UNPACK_BUFFER</constant> target and the data would be unpacked from the buffer
            object such that the memory reads required would exceed the data store size.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if a non-zero buffer object name is bound to the
            <constant>GL_PIXEL_UNPACK_BUFFER</constant> target and <parameter>data</parameter> is not evenly divisible
            into the number of bytes needed to store in memory a datum indicated by <parameter>type</parameter>.
        </para>
    </refsect1>
    <refsect1 xml:id="associatedgets"><title>Associated Gets</title>
        <para>
            <citerefentry><refentrytitle>glGet</refentrytitle></citerefentry> with argument <constant>GL_PIXEL_UNPACK_BUFFER_BINDING</constant>
        </para>
    </refsect1>
    <refsect1 xml:id="versions">
        <title>API Version Support</title>
        <informaltable>
            <tgroup cols="3" align="left">
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apifunchead.xml" xpointer="xpointer(/*/*)"/>
                <tbody>
                    <row>
                        <entry>glTexImage3D</entry>
                        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apiversion.xml" xpointer="xpointer(/*/*[@role='es30']/*)"/>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
    </refsect1>
    <refsect1 xml:id="seealso"><title>See Also</title>
        <para>
            <citerefentry><refentrytitle>glActiveTexture</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glCompressedTexImage2D</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glCompressedTexImage3D</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glCompressedTexSubImage2D</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glCompressedTexSubImage3D</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glCopyTexImage2D</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glCopyTexSubImage2D</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glCopyTexSubImage3D</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glPixelStorei</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glTexImage2D</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glTexSubImage2D</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glTexSubImage3D</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glTexParameter</refentrytitle></citerefentry>
        </para>
    </refsect1>
    <refsect1 xml:id="Copyright"><title>Copyright</title>
        <para>
            Copyright <trademark class="copyright"/> 1991-2006 Silicon Graphics, Inc.
            Copyright <trademark class="copyright"/> 2010-2014 Khronos Group.
            This document is licensed under the SGI Free Software B License.
            For details, see
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://oss.sgi.com/projects/FreeB/">http://oss.sgi.com/projects/FreeB/</link>.
        </para>
    </refsect1>
</refentry>
