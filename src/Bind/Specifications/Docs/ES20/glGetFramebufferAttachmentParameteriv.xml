<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook MathML Module V1.1b1//EN"
              "http://www.oasis-open.org/docbook/xml/mathml/1.1CR1/dbmathml.dtd">
<refentry id="glGetFramebufferAttachmentParameteriv">
    <refmeta>
        <refmetainfo>
            <copyright>
                <year>2005</year>
                <holder>Sams Publishing</holder>
            </copyright>
        </refmetainfo>
        <refentrytitle>glGetFramebufferAttachmentParameteriv</refentrytitle>
        <manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>glGetFramebufferAttachmentParameteriv</refname>
        <refpurpose>return attachment parameters of a framebuffer object</refpurpose>
    </refnamediv>
    <refsynopsisdiv><title>C Specification</title>
        <funcsynopsis>
            <funcprototype>
                <funcdef>void <function>glGetFramebufferAttachmentParameteriv</function></funcdef>
                <paramdef>GLenum <parameter>target</parameter></paramdef>
                <paramdef>GLenum <parameter>attachment</parameter></paramdef>
                <paramdef>GLenum <parameter>pname</parameter></paramdef>
                <paramdef>GLint * <parameter>params</parameter></paramdef>
            </funcprototype>
        </funcsynopsis>
    </refsynopsisdiv>
    <refsect1 id="parameters"><title>Parameters</title>
        <variablelist>
        <varlistentry>
            <term><parameter>target</parameter></term>
            <listitem>
                <para>
                    Specifies the target framebuffer object.
                    The symbolic constant must be <constant>GL_FRAMEBUFFER</constant>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>attachment</parameter></term>
            <listitem>
                <para>
                    Specifies the symbolic name of a framebuffer object attachment point.
                    Accepted values are <constant>GL_COLOR_ATTACHMENT0</constant>,
                    <constant>GL_DEPTH_ATTACHMENT</constant>, and 
                    <constant>GL_STENCIL_ATTACHMENT</constant>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>pname</parameter></term>
            <listitem>
                <para>
                    Specifies the symbolic name of a framebuffer object attachment parameter.
                    Accepted values are <constant>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</constant>,
                    <constant>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME</constant>,
                    <constant>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL</constant>,
                    and <constant>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE</constant>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>params</parameter></term>
            <listitem>
                <para>
                    Returns the requested parameter.
                </para>
            </listitem>
        </varlistentry>
        </variablelist>
    </refsect1>
    <refsect1 id="description"><title>Description</title>
        <para>
            <function>glGetFramebufferAttachmentParameteriv</function> 
            returns in <parameter>params</parameter> a selected attachment 
            parameter of the attachpoint point <parameter>attachment</parameter> 
            of the currently bound framebuffer object.
        </para>
        <para>
            <parameter>pname</parameter> names a specific framebuffer object attachment parameter, as follows:
        </para>
        <variablelist>
            <varlistentry>
                <term><constant>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</constant></term>
                <listitem>
                    <para>
                        <parameter>params</parameter> returns the type of 
                        object which contains the attached image, either 
                        <constant>GL_RENDERBUFFER</constant>, 
                        <constant>GL_TEXTURE</constant>, or if no image is 
                        attached, <constant>GL_NONE</constant>.
                        The initial value is <constant>GL_NONE</constant>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><constant>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME</constant></term>
                <listitem>
                    <para>
                        If the value of <constant>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</constant>
                        is <constant>GL_RENDERBUFFER</constant>, 
                        <parameter>params</parameter> returns the name of 
                        the renderbuffer object which contains the attached image.
                        If the value of <constant>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</constant>
                        is <constant>GL_TEXTURE</constant>, 
                        <parameter>params</parameter> returns the name of 
                        the texture object which contains the attached image.
                        The initial value is zero.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><constant>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL</constant></term>
                <listitem>
                    <para>
                        If the value of <constant>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</constant>
                        is <constant>GL_TEXTURE</constant>, 
                        <parameter>params</parameter> returns the mipmap level of 
                        the texture object which contains the attached image.
                        The initial value is zero.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><constant>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE</constant></term>
                <listitem>
                    <para>
                        If the value of <constant>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</constant>
                        is <constant>GL_TEXTURE</constant> and 
                        <constant>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME</constant>
                        is the name of a cube-map texture, 
                        <parameter>params</parameter> returns the cube map 
                        face of the cube-map texture object which contains 
                        the attached image. If the attached image is from a 
                        texture object but not a cube-map, <parameter>params</parameter> 
                        returns 0.
                        The initial value is <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_X</constant>.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsect1>
    <refsect1 id="notes"><title>Notes</title>
        <para>
            If an error is generated,
            no change is made to the contents of <parameter>params</parameter>.
        </para>
    </refsect1>
    <refsect1 id="errors"><title>Errors</title>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>target</parameter> is not <constant>GL_FRAMEBUFFER</constant>.
        </para>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>attachment</parameter> is not <constant>GL_COLOR_ATTACHMENT0</constant>, <constant>GL_DEPTH_ATTACHMENT</constant>, or <constant>GL_STENCIL_ATTACHMENT</constant>.
        </para>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if the attached object at the named attachment point is <constant>GL_RENDERBUFFER</constant> and <parameter>pname</parameter> is not
            <constant>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</constant> or <constant>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME</constant>.
        </para>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if the attached object at the named attachment point is <constant>GL_TEXTURE</constant> and <parameter>pname</parameter> is not
            <constant>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</constant>, <constant>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME</constant>,
            <constant>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL</constant>, or <constant>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE</constant>.
        </para>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if there is no attached object at the named attachment point and <parameter>pname</parameter> is not
            <constant>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</constant>.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if the default framebuffer object name 0 is bound.
        </para>
    </refsect1>
    <refsect1 id="seealso"><title>See Also</title>
        <para>
            <citerefentry><refentrytitle>glBindFramebuffer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glFramebufferRenderbuffer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glFramebufferTexture2D</refentrytitle></citerefentry>
        </para>
    </refsect1>
    <refsect1 id="copyright"><title>Copyright</title>
        <para>
            Copyright <trademark class="copyright"></trademark> 2008 Khronos Group. 
            This material may be distributed subject to the terms and conditions set forth in 
            the Open Publication License, v 1.0, 8 June 1999.
            <ulink url="http://opencontent.org/openpub/">http://opencontent.org/openpub/</ulink>.
        </para>
    </refsect1>
</refentry>
