<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook MathML Module V1.1b1//EN"
	      "http://www.oasis-open.org/docbook/xml/mathml/1.1CR1/dbmathml.dtd">
<refentry id="glGetShaderiv">
    <refmeta>
	<refentrytitle>glGetShaderiv</refentrytitle>
	<manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
	<refname>glGetShaderiv</refname>
	<refpurpose>return a parameter from a shader object</refpurpose>
    </refnamediv>
    <refsynopsisdiv><title>C Specification</title>
	<funcsynopsis>
	    <funcprototype>
		<funcdef>void <function>glGetShaderiv</function></funcdef>
		<paramdef>GLuint <parameter>shader</parameter></paramdef>
		<paramdef>GLenum <parameter>pname</parameter></paramdef>
		<paramdef>GLint *<parameter>params</parameter></paramdef>
	    </funcprototype>
	</funcsynopsis>
    </refsynopsisdiv>
    <refsect1 id="parameters"><title>Parameters</title>
	<variablelist>
	    <varlistentry>
		<term><parameter>shader</parameter></term>
		<listitem>
		    <para>Specifies the shader object to be
		    queried.</para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><parameter>pname</parameter></term>
		<listitem>
		    <para>Specifies the object parameter. Accepted
		    symbolic names are
		    <constant>GL_SHADER_TYPE</constant>,
		    <constant>GL_DELETE_STATUS</constant>,
		    <constant>GL_COMPILE_STATUS</constant>,
		    <constant>GL_INFO_LOG_LENGTH</constant>,
		    <constant>GL_SHADER_SOURCE_LENGTH</constant>.</para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><parameter>params</parameter></term>
		<listitem>
		    <para>Returns the requested object parameter.</para>
		</listitem>
	    </varlistentry>
	</variablelist>
    </refsect1>
    <refsect1 id="description"><title>Description</title>

	<para><function>glGetShaderiv</function>
	returns in <parameter>params</parameter>
	the value of a parameter for a specific shader object. The
	following parameters are defined:</para>

	<variablelist>
	    <varlistentry>
		<term><constant>GL_SHADER_TYPE</constant></term>
		<listitem>
		    <para> <parameter>params</parameter> returns
		    <constant>GL_VERTEX_SHADER</constant> if
		    <parameter>shader</parameter> is a vertex shader
		    object, and <constant>GL_FRAGMENT_SHADER</constant>
		    if <parameter>shader</parameter> is a fragment
		    shader object.</para>
		</listitem>
	    </varlistentry>

	    <varlistentry>
		<term><constant>GL_DELETE_STATUS</constant></term>
		<listitem>
		    <para> <parameter>params</parameter> returns
		    <constant>GL_TRUE</constant> if
		    <parameter>shader</parameter> is currently flagged
		    for deletion, and <constant>GL_FALSE</constant>
		    otherwise.</para>
		</listitem>
	    </varlistentry>

	    <varlistentry>
		<term><constant>GL_COMPILE_STATUS</constant></term>
		<listitem>
		    <para>For implementations that support a shader compiler, 
		    <parameter>params</parameter> returns
		    <constant>GL_TRUE</constant> if the last compile
		    operation on <parameter>shader</parameter> was
		    successful, and <constant>GL_FALSE</constant>
		    otherwise.</para>
		</listitem>
	    </varlistentry>

	    <varlistentry>
		<term><constant>GL_INFO_LOG_LENGTH</constant></term>
		<listitem>
		    <para>For implementations that support a shader compiler, 
		    <parameter>params</parameter> returns the
		    number of characters in the information log for
		    <parameter>shader</parameter> including the null
		    termination character (i.e., the size of the
		    character buffer required to store the information
		    log). If <parameter>shader</parameter> has no
		    information log, a value of 0 is returned.</para>
		</listitem>
	    </varlistentry>

	    <varlistentry>
		<term><constant>GL_SHADER_SOURCE_LENGTH</constant></term>
		<listitem>
		    <para>For implementations that support a shader compiler, 
		    <parameter>params</parameter> returns the
		    length of the concatenation of the source strings
		    that make up the shader source for the
		    <parameter>shader</parameter>, including the null
		    termination character. (i.e., the size of the
		    character buffer required to store the shader
		    source). If no source code exists, 0 is
		    returned.</para>
		</listitem>
	    </varlistentry>
	</variablelist>
    </refsect1>
    <refsect1 id="notes"><title>Notes</title>
	<para>Shader compiler support is optional, and thus must be queried
	before use by calling <citerefentry><refentrytitle>glGet</refentrytitle></citerefentry>
	with argument <constant>GL_SHADER_COMPILER</constant>. <citerefentry><refentrytitle>glShaderSource</refentrytitle></citerefentry>, 
	<citerefentry><refentrytitle>glCompileShader</refentrytitle></citerefentry>, 
	<citerefentry><refentrytitle>glGetShaderPrecisionFormat</refentrytitle></citerefentry>, and
	<citerefentry><refentrytitle>glReleaseShaderCompiler</refentrytitle></citerefentry> will
	each generate <constant>GL_INVALID_OPERATION</constant> on implementations
	that do not support a shader compiler, as will <function>glGetShaderiv</function> queries of 
	<constant>GL_COMPILE_STATUS</constant>, <constant>GL_INFO_LOG_LENGTH</constant>, and
	<constant>GL_SHADER_SOURCE_LENGTH</constant>. Such implementations instead offer the
	<citerefentry><refentrytitle>glShaderBinary</refentrytitle></citerefentry>
	alternative for supplying a pre-compiled shader binary.</para>

	<para>If an error is generated, no change is made to the
	contents of <parameter>params</parameter>.</para>
    </refsect1>
    <refsect1 id="errors"><title>Errors</title>
	<para><constant>GL_INVALID_ENUM</constant> is generated if
	<parameter>pname</parameter> is not an accepted value.</para>

	<para><constant>GL_INVALID_VALUE</constant> is generated if
	<parameter>shader</parameter> is not a value generated by
	OpenGL.</para>

	<para><constant>GL_INVALID_OPERATION</constant> is generated if
	<parameter>pname</parameter> is <constant>GL_COMPILE_STATUS</constant>,
	<constant>GL_INFO_LOG_LENGTH</constant>, or <constant>GL_SHADER_SOURCE_LENGTH</constant>
	but a shader compiler is not supported.</para>

	<para><constant>GL_INVALID_OPERATION</constant> is generated if
	<parameter>shader</parameter> does not refer to a shader
	object.</para>
    </refsect1>
    <refsect1 id="associatedgets"><title>Associated Gets</title>
	<para><citerefentry><refentrytitle>glGet</refentrytitle></citerefentry>
	with argument <constant>GL_SHADER_COMPILER</constant></para>

	<para><citerefentry><refentrytitle>glGetShaderInfoLog</refentrytitle></citerefentry>
	with argument <parameter>shader</parameter></para>

	<para><citerefentry><refentrytitle>glGetShaderSource</refentrytitle></citerefentry>
	with argument <parameter>shader</parameter></para>

	<para><citerefentry><refentrytitle>glIsShader</refentrytitle></citerefentry></para>
    </refsect1>
    <refsect1 id="seealso"><title>See Also</title>
	<para><citerefentry><refentrytitle>glCompileShader</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glCreateShader</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glDeleteShader</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glGetProgramiv</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glShaderSource</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glShaderBinary</refentrytitle></citerefentry></para>
    </refsect1>
    <refsect1 id="copyright"><title>Copyright</title>
        <para>
            Copyright <trademark class="copyright"></trademark> 2003-2005 3Dlabs Inc. Ltd. 
            This material may be distributed subject to the terms and conditions set forth in 
            the Open Publication License, v 1.0, 8 June 1999.
            <ulink url="http://opencontent.org/openpub/">http://opencontent.org/openpub/</ulink>.
        </para>
    </refsect1>
</refentry>
